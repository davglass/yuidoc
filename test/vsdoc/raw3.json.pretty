{
  "modules": {
    "profiler": {
      "name": "profiler",
      "subdata": {

      },
      "classlist": [
        "Profiler"
      ],
      "requires": "yui",
      "filelist": [
        "Profiler.js"
      ],
      "description": "The YUI JavaScript profiler.",
      "submodules": [

      ]
    },
    "dd": {
      "name": "dd",
      "subdata": {
        "dd-constrain": {
          "name": "Plugin.DragConstrained",
          "description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic."
        },
        "dd-plugin": {
          "name": "Plugin.Drag",
          "description": "This is a simple Drag plugin that can be attached to a Node via the plug method."
        },
        "dd-ddm": {
          "name": "DD.DDM",
          "description": "Extends the dd-ddm-base Class to add support for the viewport shim to allow a draggable node to drag to be dragged over an iframe or any other node that traps mousemove events.\nIt is also required to have Drop Targets enabled, as the viewport shim will contain the shims for the Drop Targets."
        },
        "dd-drag": {
          "name": "DD.Drag",
          "description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic."
        },
        "dd-proxy": {
          "name": "Plugin.DDProxy",
          "description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic."
        },
        "dd-drop-plugin": {
          "name": "Plugin.Drop",
          "description": "This is a simple Drop plugin that can be attached to a Node via the plug method."
        },
        "dd-ddm-base": {
          "name": "DD.DDM",
          "description": "Provides the base Drag Drop Manger required for making a Node draggable."
        },
        "dd-scroll": {
          "name": "Plugin.DDNodeScroll",
          "description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic."
        },
        "dd-drop": {
          "name": "DD.Drop",
          "description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic."
        },
        "dd-ddm-drop": {
          "name": "DD.DDM",
          "description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions."
        }
      },
      "classlist": [
        "DD.Scroll",
        "Plugin.DDWindowScroll",
        "Plugin.DDNodeScroll",
        "Plugin.Drop",
        "Plugin.DragConstrained",
        "DD.Drag",
        "DD.Drop",
        "DD.DDM",
        "Plugin.DDProxy",
        "Plugin.Drag"
      ],
      "filelist": [
        "ddm-drop.js",
        "scroll.js",
        "dd-drop-plugin.js",
        "constrain.js",
        "drag.js",
        "ddm.js",
        "drop.js",
        "ddm-base.js",
        "proxy.js",
        "dd-plugin.js"
      ],
      "description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions.",
      "submodules": [
        "dd-ddm-drop",
        "dd-scroll",
        "dd-drop-plugin",
        "dd-constrain",
        "dd-drag",
        "dd-ddm",
        "dd-drop",
        "dd-ddm-base",
        "dd-proxy",
        "dd-plugin"
      ]
    },
    "widget-position": {
      "name": "widget-position",
      "subdata": {

      },
      "guessedname": "Lang",
      "classlist": [
        "WidgetPosition"
      ],
      "guessedtype": "property",
      "filelist": [
        "Widget-Position.js"
      ],
      "description": "Provides basic XY positioning support for Widgets, though an extension",
      "submodules": [

      ]
    },
    "widget-stack": {
      "name": "widget-stack",
      "subdata": {

      },
      "guessedname": "L",
      "classlist": [
        "WidgetStack"
      ],
      "guessedtype": "property",
      "filelist": [
        "Widget-Stack.js"
      ],
      "description": "Provides stackable (z-index) support for Widgets through an extension.",
      "submodules": [

      ]
    },
    "dump": {
      "name": "dump",
      "subdata": {

      },
      "guessedname": "L",
      "classlist": [
        "YUI~dump"
      ],
      "guessedtype": "property",
      "filelist": [
        "dump.js"
      ],
      "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.\nIf included, the dump method is added to the YUI instance.",
      "submodules": [

      ]
    },
    "plugin": {
      "name": "plugin",
      "subdata": {

      },
      "classlist": [
        "Plugin.Base"
      ],
      "filelist": [
        "plugin.js"
      ],
      "description": "Provides the base Plugin class, which plugin developers should extend, when creating custom plugins",
      "submodules": [

      ]
    },
    "widget-stdmod": {
      "name": "widget-stdmod",
      "subdata": {

      },
      "guessedname": "L",
      "classlist": [
        "WidgetStdMod"
      ],
      "guessedtype": "property",
      "filelist": [
        "Widget-StdMod.js"
      ],
      "description": "Provides standard module support for Widgets through an extension.",
      "submodules": [

      ]
    },
    "history": {
      "name": "history",
      "subdata": {

      },
      "classlist": [
        "History",
        "History.Module"
      ],
      "filelist": [
        "history.js"
      ],
      "description": "The Browser History Utility provides the ability to use the back\/forward\nnavigation buttons in a DHTML application. It also allows a DHTML\napplication to be bookmarked in a specific state.\nThis utility requires the following static markup:\n&lt;iframe id=\"yui-history-iframe\" src=\"path-to-real-asset-in-same-domain\"&gt;&lt;\/iframe&gt;\n&lt;input id=\"yui-history-field\" type=\"hidden\"&gt;",
      "submodules": [

      ]
    },
    "yui": {
      "name": "yui",
      "subdata": {
        "get": {
          "name": "Get",
          "description": "Provides a mechanism to fetch remote resources and\ninsert them into a document."
        },
        "yui-later": {
          "name": "YUI",
          "description": "Provides a setTimeout\/setInterval wrapper"
        },
        "yui-log": {
          "name": "Array",
          "description": "Provides console log capability and exposes a custom event for\nconsole implementations."
        },
        "yui-base": {
          "name": "Lang",
          "description": "The YUI module contains the components required for building the YUI seed file.\nThis includes the script loading mechanism, a simple queue, and the core utilities for the library."
        }
      },
      "guessedname": "ua",
      "classlist": [
        "Object",
        "YUI",
        "config",
        "Get",
        "Array",
        "UA",
        "Queue",
        "Lang"
      ],
      "guessedtype": "property",
      "filelist": [
        "yui-object.js",
        "yui-base.js",
        "yui.js",
        "_module.js",
        "yui-core.js",
        "yui-later.js",
        "get.js",
        "yui-array.js",
        "yui-init.js",
        "yui-log.js",
        "yui-ua.js",
        "queue-base.js",
        "yui-lang.js"
      ],
      "description": "The YUI module contains the components required for building the YUI seed file.\nThis includes the script loading mechanism, a simple queue, and the core utilities for the library.",
      "submodules": [
        "yui-base",
        "yui-later",
        "get",
        "yui-log"
      ]
    },
    "dom": {
      "name": "dom",
      "subdata": {
        "dom-screen": {
          "name": "DOM",
          "description": "Adds position and region management functionality to DOM."
        },
        "dom-style": {
          "name": "DOM",
          "description": "Add style management functionality to DOM."
        },
        "selector-native": {
          "name": "Selector",
          "description": "The selector-native module provides support for native querySelector"
        },
        "selector-css2": {
          "name": "Selector",
          "description": "The selector module provides helper methods allowing CSS2 Selectors to be used with DOM elements."
        },
        "dom-base": {
          "name": "DOM",
          "description": "The DOM utility provides a cross-browser abtraction layer\nnormalizing DOM tasks, and adds extra helper functionality\nfor other common tasks."
        },
        "selector-css3": {
          "name": "Selector",
          "description": "The selector css3 module provides support for css3 selectors."
        }
      },
      "guessedname": "DOCUMENT_ELEMENT",
      "classlist": [
        "Selector",
        "DOM"
      ],
      "guessedtype": "property",
      "filelist": [
        "dom-style.js",
        "selector-native.js",
        "color.js",
        "dom-region.js",
        "dom-screen.js",
        "dom-class.js",
        "dom-ie-style.js",
        "dom.js",
        "selector-css3.js",
        "selector-css2.js"
      ],
      "description": "Add style management functionality to DOM.",
      "submodules": [
        "dom-style",
        "selector-native",
        "dom-screen",
        "dom-base",
        "selector-css3",
        "selector-css2"
      ]
    },
    "dataschema": {
      "name": "dataschema",
      "subdata": {
        "dataschema-json": {
          "name": "DataSchema.JSON",
          "description": "Provides a DataSchema implementation which can be used to work with JSON data."
        },
        "dataschema-xml": {
          "name": "DataSchema.XML",
          "description": "Provides a DataSchema implementation which can be used to work with XML data."
        },
        "dataschema-base": {
          "name": "DataSchema.Base",
          "description": "Provides the base DataSchema implementation, which can be extended to \ncreate DataSchemas for specific data formats, such XML, JSON, text and\narrays."
        },
        "dataschema-array": {
          "name": "DataSchema.Array",
          "description": "Provides a DataSchema implementation which can be used to work with data stored in arrays."
        },
        "dataschema-text": {
          "name": "DataSchema.Text",
          "description": "Provides a DataSchema implementation which can be used to work with delimited text data."
        }
      },
      "guessedname": "LANG",
      "classlist": [
        "DataSchema.Text",
        "DataSchema.XML",
        "DataSchema.JSON",
        "DataSchema.Base",
        "DataSchema.Array"
      ],
      "guessedtype": "property",
      "filelist": [
        "dataschema-text.js",
        "dataschema-xml.js",
        "dataschema-json.js",
        "dataschema-base.js",
        "dataschema-array.js"
      ],
      "description": "The DataSchema utility provides a common configurable interface for widgets to\napply a given schema to a variety of data.",
      "submodules": [
        "dataschema-text",
        "dataschema-xml",
        "dataschema-json",
        "dataschema-base",
        "dataschema-array"
      ]
    },
    "node": {
      "name": "node",
      "subdata": {
        "node-event-simulate": {
          "name": "YUI",
          "description": "Adds functionality to simulate events."
        },
        "nodelist": {
          "name": "NodeList",
          "description": "The NodeList module provides support for managing collections of Nodes."
        },
        "node-screen": {
          "name": "Node",
          "description": "Extended Node interface for managing regions and screen positioning.\nAdds support for positioning elements and normalizes window size and scroll detection."
        },
        "node-event-delegate": {
          "name": "NodeList",
          "description": "Functionality to make the node a delegated event container"
        },
        "node-style": {
          "name": "Node",
          "description": "Extended Node interface for managing node styles."
        },
        "node-base": {
          "name": "Node",
          "description": "The Node Utility provides a DOM-like interface for interacting with DOM nodes."
        }
      },
      "guessedname": "methods",
      "classlist": [
        "NodeList",
        "Node"
      ],
      "guessedtype": "property",
      "filelist": [
        "node-pluginhost.js",
        "node-event-simulate.js",
        "nodelist.js",
        "node-imports.js",
        "node.js",
        "node-style.js",
        "node-event-delegate.js",
        "node-screen.js",
        "node-class.js",
        "node-region.js"
      ],
      "description": "Adds functionality to simulate events.",
      "submodules": [
        "node-event-simulate",
        "nodelist",
        "node-base",
        "node-style",
        "node-event-delegate",
        "node-screen"
      ]
    },
    "cache": {
      "name": "cache",
      "subdata": {

      },
      "guessedname": "LANG",
      "classlist": [
        "Cache"
      ],
      "guessedtype": "property",
      "filelist": [
        "cache.js"
      ],
      "description": "The Cache utility provides a common configurable interface for components to\ncache and retrieve data from a local JavaScript struct.",
      "submodules": [

      ]
    },
    "stylesheet": {
      "name": "stylesheet",
      "subdata": {

      },
      "guessedname": "d",
      "classlist": [
        "StyleSheet"
      ],
      "guessedtype": "property",
      "filelist": [
        "stylesheet.js"
      ],
      "description": "The StyleSheet component is a module for creating and modifying CSS\nstylesheets.",
      "submodules": [

      ]
    },
    "event-simulate": {
      "name": "event-simulate",
      "subdata": {

      },
      "classlist": [

      ],
      "requires": "event",
      "filelist": [
        "event-simulate.js"
      ],
      "description": "Synthetic DOM events",
      "submodules": [

      ]
    },
    "console": {
      "name": "console",
      "subdata": {

      },
      "classlist": [
        "Console"
      ],
      "filelist": [
        "console.js"
      ],
      "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )<\/code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel.",
      "submodules": [

      ]
    },
    "node-focusmanager": {
      "name": "node-focusmanager",
      "subdata": {

      },
      "classlist": [
        "plugin.NodeFocusManager"
      ],
      "filelist": [
        "node-focusmanager.js"
      ],
      "description": "<p>The Focus Manager Node Plugin makes it easy to manage focus among  \na Node's descendants.  Primarily intended to help with widget development, \nthe Focus Manager Node Plugin can be used to improve the keyboard \naccessibility of widgets.<\/p>\n<p>\nWhen designing widgets that manage a set of descendant controls (i.e. buttons\nin a toolbar, tabs in a tablist, menuitems in a menu, etc.) it is important to \nlimit the number of descendants in the browser's default tab flow.  The fewer \nnumber of descendants in the default tab flow, the easier it is for keyboard \nusers to navigate between widgets by pressing the tab key.  When a widget has \nfocus it should provide a set of shortcut keys (typically the arrow keys) \nto move focus among its descendants.\n<\/p>\n<p>\nTo this end, the Focus Manager Node Plugin makes it easy to define a Node's \nfocusable descendants, define which descendant should be in the default tab \nflow, and define the keys that move focus among each descendant.\nAdditionally, as the CSS \n<a href=\"http:\/\/www.w3.org\/TR\/CSS21\/selector.html#x38\"><code>:focus<\/code><\/a> \npseudo class is not supported on all elements in all \n<a href=\"http:\/\/developer.yahoo.com\/yui\/articles\/gbs\/\">A-Grade browsers<\/a>,\nthe Focus Manager Node Plugin provides an easy, cross-browser means of \nstyling focus.\n<\/p>",
      "submodules": [

      ]
    },
    "imageloader": {
      "name": "imageloader",
      "subdata": {

      },
      "classlist": [
        "ImgLoadGroup",
        "ImgLoadImgObj"
      ],
      "requires": "node",
      "filelist": [
        "imageloader.js"
      ],
      "description": "The ImageLoader Utility is a framework to dynamically load images according to certain triggers,\nenabling faster load times and a more responsive UI.",
      "submodules": [

      ]
    },
    "oop": {
      "name": "oop",
      "subdata": {

      },
      "guessedname": "L",
      "classlist": [
        "YUI~oop"
      ],
      "guessedtype": "property",
      "filelist": [
        "oop.js"
      ],
      "description": "Supplies object inheritance and manipulation utilities.  This adds\nadditional functionaity to what is provided in yui-base, and the\nmethods are applied directly to the YUI instance.  This module\nis required for most YUI components.",
      "submodules": [

      ]
    },
    "slider": {
      "name": "slider",
      "subdata": {

      },
      "guessedname": "SLIDER",
      "classlist": [
        "Slider"
      ],
      "guessedtype": "property",
      "filelist": [
        "slider.js"
      ],
      "description": "Create a sliding value range input visualized as a draggable thumb on a\nbackground element.",
      "submodules": [

      ]
    },
    "datasource": {
      "name": "datasource",
      "subdata": {
        "datasource-textschema": {
          "name": "DataSourceTextSchema",
          "description": "Extends DataSource with schema-parsing on text data."
        },
        "datasource-function": {
          "name": "DataSource.Function",
          "description": "Provides a DataSource implementation which can be used to retrieve data from a custom function."
        },
        "datasource-local": {
          "name": "DataSource.Local",
          "description": "Provides the base DataSource implementation, which can be extended to\ncreate DataSources for specific data protocols, such as the IO Utility, the\nGet Utility, or custom functions."
        },
        "datasource-io": {
          "name": "DataSource.IO",
          "description": "Provides a DataSource implementation which can be used to retrieve data via the IO Utility."
        },
        "datasource-jsonschema": {
          "name": "DataSourceJSONSchema",
          "description": "Extends DataSource with schema-parsing on JSON data."
        },
        "datasource-cache": {
          "name": "DataSourceCache",
          "description": "Extends DataSource with caching functionality."
        },
        "datasource-xmlschema": {
          "name": "DataSourceXMLSchema",
          "description": "Extends DataSource with schema-parsing on XML data."
        },
        "datasource-get": {
          "name": "DataSource.Get",
          "description": "Provides a DataSource implementation which can be used to retrieve data via the Get Utility."
        },
        "datasource-polling": {
          "name": "Pollable",
          "description": "Extends DataSource with polling functionality."
        },
        "datasource-arrayschema": {
          "name": "DataSourceArraySchema",
          "description": "Extends DataSource with schema-parsing on array data."
        }
      },
      "classlist": [
        "DataSource.Get",
        "DataSource.Function",
        "Pollable",
        "DataSourceArraySchema",
        "DataSourceXMLSchema",
        "DataSourceJSONSchema",
        "DataSource.IO",
        "DataSource.Local",
        "DataSourceCache",
        "DataSourceTextSchema"
      ],
      "filelist": [
        "datasource-get.js",
        "datasource-function.js",
        "datasource-polling.js",
        "datasource-arrayschema.js",
        "datasource-xmlschema.js",
        "datasource-jsonschema.js",
        "datasource-io.js",
        "datasource-local.js",
        "datasource-cache.js",
        "datasource-textschema.js"
      ],
      "description": "The DataSource utility provides a common configurable interface for widgets to\naccess a variety of data, from JavaScript arrays to online database servers.",
      "submodules": [
        "datasource-get",
        "datasource-function",
        "datasource-polling",
        "datasource-arrayschema",
        "datasource-xmlschema",
        "datasource-jsonschema",
        "datasource-io",
        "datasource-local",
        "datasource-cache",
        "datasource-textschema"
      ]
    },
    "event-custom": {
      "name": "event-custom",
      "subdata": {
        "event-custom-base": {
          "name": "Subscriber",
          "description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM \nevents."
        },
        "event-custom-complex": {
          "name": "EventFacade",
          "description": "Adds event facades, preventable default behavior, and bubbling.\nevents."
        }
      },
      "guessedname": "evt",
      "classlist": [
        "EventFacade",
        "EventTarget",
        "Do",
        "Do.Method",
        "Do.AlterArgs",
        "Do.AlterReturn",
        "Do.Halt",
        "Do.Prevent",
        "Do.Error",
        "EventHandle",
        "CustomEvent",
        "Subscriber"
      ],
      "guessedtype": "property",
      "filelist": [
        "event.js",
        "event-facade.js",
        "event-target.js",
        "event-do.js",
        "event-custom.js"
      ],
      "description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM\nevents.",
      "submodules": [
        "event-custom-complex",
        "event-custom-base"
      ]
    },
    "cookie": {
      "name": "cookie",
      "subdata": {

      },
      "classlist": [
        "Cookie"
      ],
      "filelist": [
        "Cookie.js"
      ],
      "description": "Utilities for cookie management",
      "submodules": [

      ]
    },
    "widget": {
      "name": "widget",
      "subdata": {

      },
      "classlist": [
        "Widget"
      ],
      "filelist": [
        "Widget.js"
      ],
      "description": "Provides the base Widget class",
      "submodules": [

      ]
    },
    "json": {
      "name": "json",
      "subdata": {
        "json-parse": {
          "name": "JSON",
          "description": "Provides Y.JSON.parse method to accept JSON strings and return native\nJavaScript objects."
        },
        "json-stringify": {
          "name": "JSON",
          "description": "Provides Y.JSON.stringify method for converting objects to JSON strings."
        }
      },
      "guessedname": "_JSON",
      "classlist": [
        "JSON"
      ],
      "static": "",
      "guessedtype": "property",
      "filelist": [
        "json-stringify.js",
        "json-parse.js"
      ],
      "description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.<\/p>\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).<\/p>\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.<\/p>\n<p>The <code>json<\/code> module is a rollup of <code>json-parse<\/code> and\n<code>json-stringify<\/code>.<\/p>\n<p>As their names suggest, <code>json-parse<\/code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify<\/code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.<\/p>",
      "submodules": [
        "json-stringify",
        "json-parse"
      ]
    },
    "queue-run": {
      "name": "queue-run",
      "subdata": {

      },
      "classlist": [
        "AsyncQueue"
      ],
      "filelist": [
        "queue-run.js"
      ],
      "description": "<p>Adds a new class AsyncQueue that is restricted to function callbacks, but\nincludes a host of additional features, including events, callback\niterations, and a run() method that can execute queued callbacks in order,\neven across configured timeouts.<\/p>",
      "submodules": [

      ]
    },
    "event": {
      "name": "event",
      "subdata": {
        "event-mousewheel": {
          "name": "YUI",
          "description": "Adds mousewheel event support"
        },
        "event-key": {
          "name": "",
          "description": "Functionality to listen for one or more specific key combinations."
        },
        "event-delegate": {
          "name": "YUI",
          "description": "Adds event delegation support to the library."
        },
        "event-base": {
          "name": "DOMEventFacade",
          "description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM \nevents."
        },
        "event-mouseenter": {
          "name": "DOMEventFacade",
          "description": "Adds support for mouseenter\/mouseleave events"
        },
        "event-resize": {
          "name": "YUI",
          "description": "Adds a window resize event that has its behavior normalized to fire at the\nend of the resize rather than constantly during the resize."
        },
        "event-focus": {
          "name": "YUI",
          "description": "Adds focus and blur event listener support.  These events normally\ndo not bubble, so this adds support for that so these events\ncan be used in event delegation scenarios."
        }
      },
      "guessedname": "DOM_MOUSE_SCROLL",
      "classlist": [
        "Event",
        "DOMEventFacade"
      ],
      "guessedtype": "property",
      "filelist": [
        "key.js",
        "event-ready-base.js",
        "event-ready.js",
        "focusblur.js",
        "event-dom.js",
        "available.js",
        "resize-window.js",
        "mousewheel.js",
        "delegate.js",
        "event-facade-dom.js",
        "mouseentermouseleave.js"
      ],
      "description": "Functionality to listen for one or more specific key combinations.",
      "submodules": [
        "event-key",
        "event-focus",
        "event-base",
        "event-resize",
        "event-mousewheel",
        "event-delegate",
        "event-mouseenter"
      ]
    },
    "io": {
      "name": "io",
      "subdata": {
        "io-form": {
          "name": "io",
          "description": "Extends the IO base class to enable HTML form data serialization, when specified\nin the transaction's configuration object."
        },
        "io-xdr": {
          "name": "io",
          "description": "Extends the IO base class to provide an alternate, Flash transport, for making\ncross-domain requests."
        },
        "io-base": {
          "name": "io",
          "description": "Base IO functionality. Provides basic XHR transport support."
        },
        "io-upload-iframe": {
          "name": "io",
          "description": "Extends the IO base class to enable file uploads, with HTML forms,\nusing an iframe as the transport medium."
        },
        "io-queue": {
          "name": "io",
          "description": "Extends the IO base class to implement Queue for synchronous\ntransaction processing."
        }
      },
      "guessedname": "w",
      "classlist": [
        "io"
      ],
      "guessedtype": "property",
      "filelist": [
        "io-base.js",
        "io-queue.js",
        "io-upload-iframe.js",
        "io-xdr.js",
        "io-form.js"
      ],
      "description": "Base IO functionality. Provides basic XHR transport support.",
      "submodules": [
        "io-base",
        "io-queue",
        "io-upload-iframe",
        "io-xdr",
        "io-form"
      ]
    },
    "node-menunav": {
      "name": "node-menunav",
      "subdata": {

      },
      "classlist": [
        "plugin.NodeMenuNav"
      ],
      "filelist": [
        "node-menunav.js"
      ],
      "description": "<p>The MenuNav Node Plugin makes it easy to transform existing list-based \nmarkup into traditional, drop down navigational menus that are both accessible \nand easy to customize, and only require a small set of dependencies.<\/p>\n<p>To use the MenuNav Node Plugin, simply pass a reference to the plugin to a \nNode instance's <code>plug<\/code> method.<\/p>\n<p>\n<code>\n&#60;script type=\"text\/javascript\"&#62; <br>\n<br>\n\/\/\tCall the \"use\" method, passing in \"node-menunav\".  This will <br>\n\/\/\tload the script and CSS for the MenuNav Node Plugin and all of <br>\n\/\/\tthe required dependencies. <br>\n<br>\nYUI().use(\"node-menunav\", function(Y) { <br>\n<br>\n\/\/\tUse the \"contentready\" event to initialize the menu when <br>\n\/\/\tthe subtree of element representing the root menu <br>\n\/\/\t(&#60;div id=\"menu-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n\/\/\tThe scope of the callback will be a Node instance <br>\n\/\/\trepresenting the root menu (&#60;div id=\"menu-1\"&#62;). <br>\n\/\/\tTherefore, since \"this\" represents a Node instance, it <br>\n\/\/\tis possible to just call \"this.plug\" passing in a <br>\n\/\/\treference to the MenuNav Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeMenuNav); <br>\n<br>\n}, \"#menu-1\"); <br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;\/script&#62; <br>\n<\/code>\n<\/p>\n<p>The MenuNav Node Plugin has several configuration properties that can be \nset via an object literal that is passed as a second argument to a Node \ninstance's <code>plug<\/code> method.\n<\/p>\n<p>\n<code>\n&#60;script type=\"text\/javascript\"&#62; <br>\n<br>\n\/\/\tCall the \"use\" method, passing in \"node-menunav\".  This will <br>\n\/\/\tload the script and CSS for the MenuNav Node Plugin and all of <br>\n\/\/\tthe required dependencies. <br>\n<br>\nYUI().use(\"node-menunav\", function(Y) { <br>\n<br>\n\/\/\tUse the \"contentready\" event to initialize the menu when <br>\n\/\/\tthe subtree of element representing the root menu <br>\n\/\/\t(&#60;div id=\"menu-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n\/\/\tThe scope of the callback will be a Node instance <br>\n\/\/\trepresenting the root menu (&#60;div id=\"menu-1\"&#62;). <br>\n\/\/\tTherefore, since \"this\" represents a Node instance, it <br>\n\/\/\tis possible to just call \"this.plug\" passing in a <br>\n\/\/\treference to the MenuNav Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeMenuNav, { mouseOutHideDelay: 1000 });\n<br><br>\n}, \"#menu-1\"); <br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;\/script&#62; <br>\n<\/code>\n<\/p>",
      "submodules": [

      ]
    },
    "console-filters": {
      "name": "console-filters",
      "subdata": {

      },
      "classlist": [
        "Plugin.ConsoleFilters"
      ],
      "filelist": [
        "console-filters.js"
      ],
      "description": "<p>Provides Plugin.ConsoleFilters plugin class.<\/p>\n<p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.<\/p>",
      "submodules": [

      ]
    },
    "datatype": {
      "name": "datatype",
      "subdata": {
        "datatype-number": {
          "name": "DataType.XML",
          "description": "Number submodule."
        },
        "datatype-date": {
          "name": "",
          "description": "Date submodule."
        },
        "datatype-xml-parse": {
          "name": "DataType.XML",
          "description": "Parse XML submodule."
        },
        "datatype-xml-format": {
          "name": "DataType.XML",
          "description": "Format XML submodule."
        },
        "datatype-xml": {
          "name": "DataType.XML",
          "description": "XML submodule."
        },
        "datatype-number-parse": {
          "name": "DataType.Number",
          "description": "Parse number submodule."
        },
        "datatype-date-format": {
          "name": "DataType.Date",
          "description": "Format date submodule implements strftime formatters for javascript based on the\nOpen Group specification defined at\nhttp:\/\/www.opengroup.org\/onlinepubs\/007908799\/xsh\/strftime.html\nThis implementation does not include modified conversion specifiers (i.e., Ex and Ox)"
        },
        "datatype-date-parse": {
          "name": "DataType.Date",
          "description": "Parse number submodule."
        },
        "datatype-number-format": {
          "name": "DataType.Number",
          "description": "Format number submodule."
        }
      },
      "guessedname": "LANG",
      "classlist": [
        "DataType.Date",
        "DataType.Date.Locale",
        "DataType.XML",
        "DataType.Number"
      ],
      "guessedtype": "property",
      "filelist": [
        "datatype-date-format.js",
        "datatype-number-parse.js",
        "datatype-date-locale.js",
        "datatype-date-parse.js",
        "datatype-xml-parse.js",
        "datatype-xml-format.js",
        "datatype-number-format.js"
      ],
      "description": "The DataType Utility provides type-conversion and string-formatting\nconvenience methods for various JavaScript object types.",
      "submodules": [
        "datatype-date",
        "datatype-date-format",
        "datatype-number-parse",
        "datatype-date-parse",
        "datatype-xml-parse",
        "datatype-xml-format",
        "datatype-xml",
        "datatype-number",
        "datatype-number-format"
      ]
    },
    "queue-promote": {
      "name": "queue-promote",
      "subdata": {

      },
      "classlist": [

      ],
      "filelist": [
        "queue-promote.js"
      ],
      "description": "Adds methods promote, remove, and indexOf to Queue instances.",
      "submodules": [

      ]
    },
    "substitute": {
      "name": "substitute",
      "subdata": {

      },
      "guessedname": "L",
      "classlist": [
        "YUI~substitute"
      ],
      "guessedtype": "property",
      "filelist": [
        "substitute.js"
      ],
      "description": "String variable substitution and string formatting.\nIf included, the substitute method is added to the YUI instance.",
      "submodules": [

      ]
    },
    "attribute": {
      "name": "attribute",
      "subdata": {
        "attribute-base": {
          "name": "State",
          "description": "The attribute-base submodule provides core attribute handling support, with everything\naside from complex attribute handling in the provider's constructor."
        },
        "attribute-complex": {
          "name": "Attribute",
          "description": "Adds support for attribute providers to handle complex attributes in the constructor"
        }
      },
      "guessedname": "O",
      "classlist": [
        "Attribute",
        "State"
      ],
      "guessedtype": "property",
      "filelist": [
        "ComplexAttribute.js",
        "Attribute.js",
        "State.js"
      ],
      "description": "The attribute module provides an augmentable Attribute implementation, which \nadds configurable attributes and attribute change events to the class being \naugmented. It also provides a State class, which is used internally by Attribute,\nbut can also be used independently to provide a name\/property\/value data structure to\nstore state.",
      "submodules": [
        "attribute-complex",
        "attribute-base"
      ]
    },
    "test": {
      "name": "test",
      "subdata": {

      },
      "classlist": [
        "Assert",
        "Assert.Error",
        "Assert.ComparisonFailure",
        "Assert.UnexpectedValue",
        "Assert.ShouldFail",
        "Assert.ShouldError",
        "Assert.UnexpectedError",
        "Assert.ObjectAssert",
        "Test.Suite",
        "Test.Format.Mock",
        "Test.Case",
        "Test.Wait",
        "Test.TestNode",
        "Test.Runner",
        "Test.DateAssert",
        "Test.Reporter",
        "Test.Manager",
        "Test.ArrayAssert"
      ],
      "filelist": [
        "Assert.js",
        "ObjectAssert.js",
        "TestSuite.js",
        "TestFormat.js",
        "Mock.js",
        "TestCase.js",
        "TestRunner.js",
        "DateAssert.js",
        "TestReporter.js",
        "TestManager.js",
        "ArrayAssert.js"
      ],
      "description": "YUI JavaScript Testing Framework",
      "submodules": [

      ]
    },
    "overlay": {
      "name": "overlay",
      "subdata": {

      },
      "classlist": [
        "Overlay"
      ],
      "filelist": [
        "Overlay.js"
      ],
      "description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming).",
      "submodules": [

      ]
    },
    "classnamemanager": {
      "name": "classnamemanager",
      "subdata": {

      },
      "classlist": [
        "ClassNameManager"
      ],
      "filelist": [
        "classnamemanager.js"
      ],
      "description": "Contains a singleton (ClassNameManager) that enables easy creation and caching of \nprefixed class names.",
      "submodules": [

      ]
    },
    "widget-position-ext": {
      "name": "widget-position-ext",
      "subdata": {

      },
      "guessedname": "L",
      "classlist": [
        "WidgetPositionExt"
      ],
      "guessedtype": "property",
      "filelist": [
        "Widget-PositionExt.js"
      ],
      "description": "Provides extended\/advanced XY positioning support for Widgets, through an extension.\nIt builds on top of the widget-position module, to provide alignmentment and centering support.\nFuture releases aim to add constrained and fixed positioning support.",
      "submodules": [

      ]
    },
    "base": {
      "name": "base",
      "subdata": {
        "base-base": {
          "name": "Base",
          "description": "The base-base submodule provides the Base class and augmentable Plugin.Host implementation, \nwithout the extension support provided by Base.build."
        },
        "base-build": {
          "name": "Base",
          "description": "The base-build submodule provides Base.build functionality, which\ncan be used to create custom classes, by aggregating extensions onto \na main class."
        },
        "base-pluginhost": {
          "name": "Base",
          "description": "The base-pluginhost submodule added Plugin support to Base, by augmenting Base with \nPlugin.Host and setting up static Base.plug and Base.unplug methods."
        }
      },
      "guessedname": "O",
      "classlist": [
        "Base"
      ],
      "guessedtype": "property",
      "filelist": [
        "Base.js",
        "BasePluginHost.js",
        "BaseBuild.js"
      ],
      "description": "The base module provides the Base class, which objects requiring attribute and custom event support can extend. \nThe module also provides two ways to reuse code - An augmentable Plugin.Host interface which provides plugin support \n(which is augmented to the Base class) and Base.build which provides a way to \nbuild custom classes using extensions.",
      "submodules": [
        "base-base",
        "base-pluginhost",
        "base-build"
      ]
    },
    "collection": {
      "name": "collection",
      "subdata": {

      },
      "guessedname": "L",
      "classlist": [
        "YUI~array~extras"
      ],
      "guessedtype": "property",
      "filelist": [
        "array-extras.js"
      ],
      "description": "Collection utilities beyond what is provided in the YUI core",
      "submodules": [

      ]
    },
    "anim": {
      "name": "anim",
      "subdata": {
        "anim-scroll": {
          "name": "",
          "description": "Adds support for the <code>scroll<\/code> property in <code>to<\/code>\nand <code>from<\/code> attributes."
        },
        "anim-base": {
          "name": "Anim",
          "description": "Provides the base Anim class, for animating numeric properties."
        },
        "anim-node-plugin": {
          "name": "Plugin.NodeFX",
          "description": "Binds an Anim instance to a Node instance"
        },
        "anim-easing": {
          "name": "Easing",
          "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."
        },
        "anim-color": {
          "name": "Plugin.NodeFX",
          "description": "Adds support for color properties in <code>to<\/code>\nand <code>from<\/code> attributes."
        },
        "anim-xy": {
          "name": "Easing",
          "description": "Adds support for the <code>xy<\/code> property in <code>from<\/code> and \n<code>to<\/code> attributes."
        },
        "anim-curve": {
          "name": "",
          "description": "Adds support for the <code>curve<\/code> property for the <code>to<\/code> \nattribute.  A curve is zero or more control points and an end point."
        }
      },
      "guessedname": "NUM",
      "classlist": [
        "Easing",
        "Plugin.NodeFX",
        "Anim"
      ],
      "guessedtype": "property",
      "description": "The Animation Utility provides an API for creating advanced transitions.",
      "filelist": [
        "anim-scroll.js",
        "anim-curve.js",
        "anim-easing.js",
        "anim-xy.js",
        "anim-node-plugin.js",
        "anim-color.js",
        "anim.js"
      ],
      "submodules": [
        "anim-scroll",
        "anim-curve",
        "anim-easing",
        "anim-xy",
        "anim-node-plugin",
        "anim-color",
        "anim-base"
      ]
    }
  },
  "filemap": {
    "drop.js": {
      "name": "drop.js",
      "module": "dd",
      "classlist": [
        "DD.Drop"
      ]
    },
    "imageloader.js": {
      "name": "imageloader.js",
      "module": "imageloader",
      "classlist": [
        "ImgLoadGroup",
        "ImgLoadImgObj"
      ]
    },
    "dd-plugin.js": {
      "name": "dd-plugin.js",
      "module": "dd",
      "classlist": [
        "Plugin.Drag"
      ]
    },
    "scroll.js": {
      "name": "scroll.js",
      "module": "dd",
      "classlist": [
        "DD.Scroll",
        "Plugin.DDWindowScroll",
        "Plugin.DDNodeScroll"
      ]
    },
    "node-pluginhost.js": {
      "name": "node-pluginhost.js",
      "module": "node",
      "classlist": [

      ]
    },
    "datatype-xml-parse.js": {
      "name": "datatype-xml-parse.js",
      "module": "datatype",
      "classlist": [

      ]
    },
    "anim-node-plugin.js": {
      "name": "anim-node-plugin.js",
      "module": "anim",
      "classlist": [
        "Plugin.NodeFX"
      ]
    },
    "datasource-xmlschema.js": {
      "name": "datasource-xmlschema.js",
      "module": "datasource",
      "classlist": [
        "DataSourceXMLSchema"
      ]
    },
    "event-facade.js": {
      "name": "event-facade.js",
      "module": "event-custom",
      "classlist": [
        "EventFacade"
      ]
    },
    "dom.js": {
      "name": "dom.js",
      "module": "dom",
      "classlist": [
        "DOM"
      ]
    },
    "selector-css2.js": {
      "name": "selector-css2.js",
      "module": "dom",
      "classlist": [

      ]
    },
    "dom-class.js": {
      "name": "dom-class.js",
      "module": "dom",
      "classlist": [

      ]
    },
    "node-screen.js": {
      "name": "node-screen.js",
      "module": "node",
      "classlist": [

      ]
    },
    "yui-log.js": {
      "name": "yui-log.js",
      "module": "yui",
      "classlist": [

      ]
    },
    "history.js": {
      "name": "history.js",
      "module": "history",
      "classlist": [
        "History",
        "History.Module"
      ]
    },
    "ddm-drop.js": {
      "name": "ddm-drop.js",
      "module": "dd",
      "classlist": [

      ]
    },
    "proxy.js": {
      "name": "proxy.js",
      "module": "dd",
      "classlist": [
        "Plugin.DDProxy"
      ]
    },
    "node-event-delegate.js": {
      "name": "node-event-delegate.js",
      "module": "node",
      "classlist": [

      ]
    },
    "dataschema-array.js": {
      "name": "dataschema-array.js",
      "module": "dataschema",
      "classlist": [
        "DataSchema.Array"
      ]
    },
    "dom-region.js": {
      "name": "dom-region.js",
      "module": "dom",
      "classlist": [

      ]
    },
    "TestCase.js": {
      "name": "TestCase.js",
      "module": "test",
      "classlist": [
        "Test.Case",
        "Test.Wait"
      ]
    },
    "datatype-number-format.js": {
      "name": "datatype-number-format.js",
      "module": "datatype",
      "classlist": [
        "DataType.Number"
      ]
    },
    "TestReporter.js": {
      "name": "TestReporter.js",
      "module": "test",
      "classlist": [
        "Test.Reporter"
      ]
    },
    "node.js": {
      "name": "node.js",
      "module": "node",
      "classlist": [
        "Node"
      ]
    },
    "drag.js": {
      "name": "drag.js",
      "module": "dd",
      "classlist": [
        "DD.Drag"
      ]
    },
    "anim-scroll.js": {
      "name": "anim-scroll.js",
      "module": "anim",
      "classlist": [

      ]
    },
    "datasource-cache.js": {
      "name": "datasource-cache.js",
      "module": "datasource",
      "classlist": [
        "DataSourceCache"
      ]
    },
    "datasource-function.js": {
      "name": "datasource-function.js",
      "module": "datasource",
      "classlist": [
        "DataSource.Function"
      ]
    },
    "Profiler.js": {
      "name": "Profiler.js",
      "module": "profiler",
      "classlist": [
        "Profiler"
      ]
    },
    "datatype-date-parse.js": {
      "name": "datatype-date-parse.js",
      "module": "datatype",
      "classlist": [

      ]
    },
    "available.js": {
      "name": "available.js",
      "module": "event",
      "classlist": [

      ]
    },
    "focusblur.js": {
      "name": "focusblur.js",
      "module": "event",
      "classlist": [

      ]
    },
    "console-filters.js": {
      "name": "console-filters.js",
      "module": "console-filters",
      "classlist": [
        "Plugin.ConsoleFilters"
      ]
    },
    "yui-lang.js": {
      "name": "yui-lang.js",
      "module": "yui",
      "classlist": [
        "Lang"
      ]
    },
    "io-queue.js": {
      "name": "io-queue.js",
      "module": "io",
      "classlist": [

      ]
    },
    "BaseBuild.js": {
      "name": "BaseBuild.js",
      "module": "base",
      "classlist": [

      ]
    },
    "node-class.js": {
      "name": "node-class.js",
      "module": "node",
      "classlist": [

      ]
    },
    "Widget.js": {
      "name": "Widget.js",
      "module": "widget",
      "classlist": [
        "Widget"
      ]
    },
    "Base.js": {
      "name": "Base.js",
      "module": "base",
      "classlist": [
        "Base"
      ]
    },
    "TestSuite.js": {
      "name": "TestSuite.js",
      "module": "test",
      "classlist": [
        "Test.Suite"
      ]
    },
    "ddm-base.js": {
      "name": "ddm-base.js",
      "module": "dd",
      "classlist": [
        "DD.DDM"
      ]
    },
    "array-extras.js": {
      "name": "array-extras.js",
      "module": "collection",
      "classlist": [
        "YUI~array~extras"
      ]
    },
    "event-simulate.js": {
      "name": "event-simulate.js",
      "module": "event-simulate",
      "classlist": [

      ]
    },
    "event-dom.js": {
      "name": "event-dom.js",
      "module": "event",
      "classlist": [
        "Event"
      ]
    },
    "json-stringify.js": {
      "name": "json-stringify.js",
      "module": "json",
      "classlist": [

      ]
    },
    "slider.js": {
      "name": "slider.js",
      "module": "slider",
      "classlist": [
        "Slider"
      ]
    },
    "Widget-PositionExt.js": {
      "name": "Widget-PositionExt.js",
      "module": "widget-position-ext",
      "classlist": [
        "WidgetPositionExt"
      ]
    },
    "yui-array.js": {
      "name": "yui-array.js",
      "module": "yui",
      "classlist": [
        "Array"
      ]
    },
    "event-target.js": {
      "name": "event-target.js",
      "module": "event-custom",
      "classlist": [
        "EventTarget"
      ]
    },
    "stylesheet.js": {
      "name": "stylesheet.js",
      "module": "stylesheet",
      "classlist": [
        "StyleSheet"
      ]
    },
    "dom-style.js": {
      "name": "dom-style.js",
      "module": "dom",
      "classlist": [

      ]
    },
    "TestFormat.js": {
      "name": "TestFormat.js",
      "module": "test",
      "classlist": [

      ]
    },
    "io-upload-iframe.js": {
      "name": "io-upload-iframe.js",
      "module": "io",
      "classlist": [

      ]
    },
    "dump.js": {
      "name": "dump.js",
      "module": "dump",
      "classlist": [
        "YUI~dump"
      ]
    },
    "event-ready.js": {
      "name": "event-ready.js",
      "module": "event",
      "classlist": [

      ]
    },
    "anim.js": {
      "name": "anim.js",
      "module": "anim",
      "classlist": [
        "Anim"
      ]
    },
    "datatype-number-parse.js": {
      "name": "datatype-number-parse.js",
      "module": "datatype",
      "classlist": [

      ]
    },
    "key.js": {
      "name": "key.js",
      "module": "event",
      "classlist": [

      ]
    },
    "Widget-StdMod.js": {
      "name": "Widget-StdMod.js",
      "module": "widget-stdmod",
      "classlist": [
        "WidgetStdMod"
      ]
    },
    "ArrayAssert.js": {
      "name": "ArrayAssert.js",
      "module": "test",
      "classlist": [
        "Test.ArrayAssert"
      ]
    },
    "node-style.js": {
      "name": "node-style.js",
      "module": "node",
      "classlist": [

      ]
    },
    "dataschema-xml.js": {
      "name": "dataschema-xml.js",
      "module": "dataschema",
      "classlist": [
        "DataSchema.XML"
      ]
    },
    "plugin.js": {
      "name": "plugin.js",
      "module": "plugin",
      "classlist": [
        "Plugin.Base"
      ]
    },
    "TestManager.js": {
      "name": "TestManager.js",
      "module": "test",
      "classlist": [
        "Test.Manager"
      ]
    },
    "ComplexAttribute.js": {
      "name": "ComplexAttribute.js",
      "module": "attribute",
      "classlist": [

      ]
    },
    "dd-drop-plugin.js": {
      "name": "dd-drop-plugin.js",
      "module": "dd",
      "classlist": [
        "Plugin.Drop"
      ]
    },
    "Cookie.js": {
      "name": "Cookie.js",
      "module": "cookie",
      "classlist": [
        "Cookie"
      ]
    },
    "node-focusmanager.js": {
      "name": "node-focusmanager.js",
      "module": "node-focusmanager",
      "classlist": [
        "plugin.NodeFocusManager"
      ]
    },
    "json-parse.js": {
      "name": "json-parse.js",
      "module": "json",
      "classlist": [
        "JSON"
      ]
    },
    "node-menunav.js": {
      "name": "node-menunav.js",
      "module": "node-menunav",
      "classlist": [
        "plugin.NodeMenuNav"
      ]
    },
    "dataschema-base.js": {
      "name": "dataschema-base.js",
      "module": "dataschema",
      "classlist": [
        "DataSchema.Base"
      ]
    },
    "datatype-xml-format.js": {
      "name": "datatype-xml-format.js",
      "module": "datatype",
      "classlist": [
        "DataType.XML"
      ]
    },
    "io-xdr.js": {
      "name": "io-xdr.js",
      "module": "io",
      "classlist": [

      ]
    },
    "_module.js": {
      "name": "_module.js",
      "module": "yui",
      "classlist": [

      ]
    },
    "ObjectAssert.js": {
      "name": "ObjectAssert.js",
      "module": "test",
      "classlist": [
        "Assert.ObjectAssert"
      ]
    },
    "TestRunner.js": {
      "name": "TestRunner.js",
      "module": "test",
      "classlist": [
        "Test.TestNode",
        "Test.Runner"
      ]
    },
    "datasource-arrayschema.js": {
      "name": "datasource-arrayschema.js",
      "module": "datasource",
      "classlist": [
        "DataSourceArraySchema"
      ]
    },
    "yui-init.js": {
      "name": "yui-init.js",
      "module": "yui",
      "classlist": [

      ]
    },
    "color.js": {
      "name": "color.js",
      "module": "dom",
      "classlist": [

      ]
    },
    "classnamemanager.js": {
      "name": "classnamemanager.js",
      "module": "classnamemanager",
      "classlist": [
        "ClassNameManager"
      ]
    },
    "yui-core.js": {
      "name": "yui-core.js",
      "module": "yui",
      "classlist": [

      ]
    },
    "datasource-get.js": {
      "name": "datasource-get.js",
      "module": "datasource",
      "classlist": [
        "DataSource.Get"
      ]
    },
    "dataschema-json.js": {
      "name": "dataschema-json.js",
      "module": "dataschema",
      "classlist": [
        "DataSchema.JSON"
      ]
    },
    "dataschema-text.js": {
      "name": "dataschema-text.js",
      "module": "dataschema",
      "classlist": [
        "DataSchema.Text"
      ]
    },
    "get.js": {
      "name": "get.js",
      "module": "yui",
      "classlist": [
        "Get"
      ]
    },
    "dom-screen.js": {
      "name": "dom-screen.js",
      "module": "dom",
      "classlist": [

      ]
    },
    "Widget-Stack.js": {
      "name": "Widget-Stack.js",
      "module": "widget-stack",
      "classlist": [
        "WidgetStack"
      ]
    },
    "datatype-date-locale.js": {
      "name": "datatype-date-locale.js",
      "module": "datatype",
      "classlist": [
        "DataType.Date.Locale"
      ]
    },
    "cache.js": {
      "name": "cache.js",
      "module": "cache",
      "classlist": [
        "Cache"
      ]
    },
    "datasource-textschema.js": {
      "name": "datasource-textschema.js",
      "module": "datasource",
      "classlist": [
        "DataSourceTextSchema"
      ]
    },
    "resize-window.js": {
      "name": "resize-window.js",
      "module": "event",
      "classlist": [

      ]
    },
    "node-region.js": {
      "name": "node-region.js",
      "module": "node",
      "classlist": [

      ]
    },
    "datasource-local.js": {
      "name": "datasource-local.js",
      "module": "datasource",
      "classlist": [
        "DataSource.Local"
      ]
    },
    "substitute.js": {
      "name": "substitute.js",
      "module": "substitute",
      "classlist": [
        "YUI~substitute"
      ]
    },
    "ddm.js": {
      "name": "ddm.js",
      "module": "dd",
      "classlist": [

      ]
    },
    "datatype-date-format.js": {
      "name": "datatype-date-format.js",
      "module": "datatype",
      "classlist": [
        "DataType.Date"
      ]
    },
    "yui-later.js": {
      "name": "yui-later.js",
      "module": "yui",
      "classlist": [

      ]
    },
    "datasource-jsonschema.js": {
      "name": "datasource-jsonschema.js",
      "module": "datasource",
      "classlist": [
        "DataSourceJSONSchema"
      ]
    },
    "BasePluginHost.js": {
      "name": "BasePluginHost.js",
      "module": "base",
      "classlist": [

      ]
    },
    "selector-css3.js": {
      "name": "selector-css3.js",
      "module": "dom",
      "classlist": [

      ]
    },
    "Overlay.js": {
      "name": "Overlay.js",
      "module": "overlay",
      "classlist": [
        "Overlay"
      ]
    },
    "constrain.js": {
      "name": "constrain.js",
      "module": "dd",
      "classlist": [
        "Plugin.DragConstrained"
      ]
    },
    "nodelist.js": {
      "name": "nodelist.js",
      "module": "node",
      "classlist": [
        "NodeList"
      ]
    },
    "DateAssert.js": {
      "name": "DateAssert.js",
      "module": "test",
      "classlist": [
        "Test.DateAssert"
      ]
    },
    "dom-ie-style.js": {
      "name": "dom-ie-style.js",
      "module": "dom",
      "classlist": [

      ]
    },
    "Widget-Position.js": {
      "name": "Widget-Position.js",
      "module": "widget-position",
      "classlist": [
        "WidgetPosition"
      ]
    },
    "datasource-polling.js": {
      "name": "datasource-polling.js",
      "module": "datasource",
      "classlist": [
        "Pollable"
      ]
    },
    "yui-base.js": {
      "name": "yui-base.js",
      "module": "yui",
      "classlist": [

      ]
    },
    "delegate.js": {
      "name": "delegate.js",
      "module": "event",
      "classlist": [

      ]
    },
    "Attribute.js": {
      "name": "Attribute.js",
      "module": "attribute",
      "classlist": [
        "Attribute"
      ]
    },
    "anim-xy.js": {
      "name": "anim-xy.js",
      "module": "anim",
      "classlist": [

      ]
    },
    "io-base.js": {
      "name": "io-base.js",
      "module": "io",
      "classlist": [
        "io"
      ]
    },
    "mouseentermouseleave.js": {
      "name": "mouseentermouseleave.js",
      "module": "event",
      "classlist": [

      ]
    },
    "io-form.js": {
      "name": "io-form.js",
      "module": "io",
      "classlist": [

      ]
    },
    "yui-ua.js": {
      "name": "yui-ua.js",
      "module": "yui",
      "classlist": [
        "UA"
      ]
    },
    "event-custom.js": {
      "name": "event-custom.js",
      "module": "event-custom",
      "classlist": [
        "EventHandle",
        "CustomEvent",
        "Subscriber"
      ]
    },
    "node-event-simulate.js": {
      "name": "node-event-simulate.js",
      "module": "node",
      "classlist": [

      ]
    },
    "queue-run.js": {
      "name": "queue-run.js",
      "module": "queue-run",
      "classlist": [
        "AsyncQueue"
      ]
    },
    "event-facade-dom.js": {
      "name": "event-facade-dom.js",
      "module": "event",
      "classlist": [
        "DOMEventFacade"
      ]
    },
    "queue-base.js": {
      "name": "queue-base.js",
      "module": "yui",
      "classlist": [
        "Queue"
      ]
    },
    "yui.js": {
      "name": "yui.js",
      "module": "yui",
      "classlist": [
        "YUI",
        "config"
      ]
    },
    "anim-color.js": {
      "name": "anim-color.js",
      "module": "anim",
      "classlist": [

      ]
    },
    "anim-curve.js": {
      "name": "anim-curve.js",
      "module": "anim",
      "classlist": [

      ]
    },
    "Mock.js": {
      "name": "Mock.js",
      "module": "test",
      "classlist": [
        "Test.Format.Mock"
      ]
    },
    "datasource-io.js": {
      "name": "datasource-io.js",
      "module": "datasource",
      "classlist": [
        "DataSource.IO"
      ]
    },
    "Assert.js": {
      "name": "Assert.js",
      "module": "test",
      "classlist": [
        "Assert",
        "Assert.Error",
        "Assert.ComparisonFailure",
        "Assert.UnexpectedValue",
        "Assert.ShouldFail",
        "Assert.ShouldError",
        "Assert.UnexpectedError"
      ]
    },
    "console.js": {
      "name": "console.js",
      "module": "console",
      "classlist": [
        "Console"
      ]
    },
    "selector-native.js": {
      "name": "selector-native.js",
      "module": "dom",
      "classlist": [
        "Selector"
      ]
    },
    "oop.js": {
      "name": "oop.js",
      "module": "oop",
      "classlist": [
        "YUI~oop"
      ]
    },
    "event-do.js": {
      "name": "event-do.js",
      "module": "event-custom",
      "classlist": [
        "Do",
        "Do.Method",
        "Do.AlterArgs",
        "Do.AlterReturn",
        "Do.Halt",
        "Do.Prevent",
        "Do.Error"
      ]
    },
    "State.js": {
      "name": "State.js",
      "module": "attribute",
      "classlist": [
        "State"
      ]
    },
    "yui-object.js": {
      "name": "yui-object.js",
      "module": "yui",
      "classlist": [
        "Object"
      ]
    },
    "event-ready-base.js": {
      "name": "event-ready-base.js",
      "module": "event",
      "classlist": [

      ]
    },
    "mousewheel.js": {
      "name": "mousewheel.js",
      "module": "event",
      "classlist": [

      ]
    },
    "anim-easing.js": {
      "name": "anim-easing.js",
      "module": "anim",
      "classlist": [
        "Easing"
      ]
    },
    "queue-promote.js": {
      "name": "queue-promote.js",
      "module": "queue-promote",
      "classlist": [

      ]
    },
    "event.js": {
      "name": "event.js",
      "module": "event-custom",
      "classlist": [

      ]
    },
    "node-imports.js": {
      "name": "node-imports.js",
      "module": "node",
      "classlist": [

      ]
    }
  },
  "majorversion": 3,
  "namespaces": [
    "Plugin",
    "DD",
    "plugin",
    "Assert",
    "Test",
    "Test.Format"
  ],
  "version": "3.0.0",
  "classmap": {
    "EventHandle": {
      "shortname": "EventHandle",
      "methods": {
        "detach": {
          "guessedname": "detach",
          "guessedtype": "function",
          "description": "Detaches this subscriber"
        }
      },
      "name": "EventHandle",
      "module": "event-custom",
      "namespace": "",
      "constructors": [
        {
          "description": "Return value from all subscribe operations",
          "params": [
            {
              "name": "evt",
              "type": "CustomEvent",
              "description": "  the custom event"
            },
            {
              "name": "sub",
              "type": "Subscriber",
              "description": "  the subscriber"
            }
          ]
        }
      ],
      "description": "Return value from all subscribe operations",
      "file": "event-custom.js",
      "properties": {
        "sub": {
          "guessedname": "sub",
          "type": "Subscriber",
          "guessedtype": "property",
          "description": "The subscriber object"
        },
        "evt": {
          "guessedname": "evt",
          "type": "CustomEvent",
          "guessedtype": "property",
          "description": "The custom event"
        }
      }
    },
    "StyleSheet": {
      "shortname": "StyleSheet",
      "methods": {
        "unset": {
          "guessedname": "unset",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "sel",
              "type": "String",
              "description": "  the selector string to apply the changes to"
            },
            {
              "name": "css",
              "type": "String|Array",
              "description": "  style property name or Array of names"
            }
          ],
          "description": "<p>Unset style properties for a provided selector string, removing\ntheir effect from the style cascade.<\/p>\n<p>If the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If there are no properties\nremaining in the rule after unsetting, the rule is removed.<\/p>\n<p>The style property or properties in the second parameter must be the\nJavaScript style property names. E.g. fontSize rather than font-size.<\/p>\n<p>The float style property will be unset by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.<\/p>",
          "return": {
            "type": "StyleSheet",
            "description": ""
          }
        },
        "set": {
          "guessedname": "set",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "sel",
              "type": "String",
              "description": "  the selector string to apply the changes to"
            },
            {
              "name": "css",
              "type": "Object",
              "description": "  Object literal of style properties and new values"
            }
          ],
          "description": "<p>Set style properties for a provided selector string.\nIf the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If the selector string does not\nhave a corresponding rule in the sheet, it will be added.<\/p>\n<p>The object properties in the second parameter must be the JavaScript\nnames of style properties.  E.g. fontSize rather than font-size.<\/p>\n<p>The float style property will be set by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.<\/p>",
          "return": {
            "type": "StyleSheet",
            "description": ""
          }
        },
        "StyleSheet.register": {
          "guessedname": "register",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  the name to assign the StyleSheet in the registry"
            },
            {
              "name": "sheet",
              "type": "StyleSheet",
              "description": "  The StyleSheet instance"
            }
          ],
          "description": "Registers a StyleSheet instance in the static registry by the given name",
          "return": {
            "type": "Boolean",
            "description": "false if no name or sheet is not a StyleSheet\ninstance. true otherwise."
          }
        },
        "isEnabled": {
          "guessedname": "isEnabled",
          "guessedtype": "function",
          "description": "Returns false if the StyleSheet is disabled.  Otherwise true.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "enable": {
          "guessedname": "enable",
          "chainable": "",
          "guessedtype": "function",
          "description": "Enable all the rules in the sheet",
          "return": {
            "type": "StyleSheet",
            "description": ""
          }
        },
        "disable": {
          "guessedname": "disable",
          "chainable": "",
          "guessedtype": "function",
          "description": "Disable all the rules in the sheet.  Rules may be changed while the\nStyleSheet is disabled.",
          "return": {
            "type": "StyleSheet",
            "description": ""
          }
        },
        "StyleSheet.toCssText": {
          "guessedname": "toCssText",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "css",
              "type": "Object",
              "description": "  object literal of style properties and values"
            },
            {
              "name": "cssText",
              "type": "String",
              "description": "  (optional) starting cssText value"
            }
          ],
          "description": "<p>Converts an object literal of style properties and values into a string\nof css text.  This can then be assigned to el.style.cssText.<\/p>\n<p>The optional second parameter is a cssText string representing the\nstarting state of the style prior to alterations.  This is most often\nextracted from the eventual target's current el.style.cssText.<\/p>",
          "return": {
            "type": "String",
            "description": "the resulting cssText string"
          }
        },
        "getId": {
          "guessedname": "getId",
          "guessedtype": "function",
          "description": "Get the unique stamp for this StyleSheet instance",
          "return": {
            "type": "Number",
            "description": "the static id"
          }
        },
        "getCssText": {
          "guessedname": "getCssText",
          "guessedtype": "function",
          "description": "Get the current cssText for a rule or the entire sheet.  If the\nselector param is supplied, only the cssText for that rule will be\nreturned, if found.  If the selector string targets multiple\nselectors separated by commas, the cssText of the first rule only\nwill be returned.  If no selector string, the stylesheet's full\ncssText will be returned.",
          "params": [
            {
              "name": "sel",
              "type": "String",
              "description": "  Selector string"
            }
          ],
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "StyleSheet.isValidSelector": {
          "guessedname": "isValidSelector",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "sel",
              "type": "String",
              "description": "  the selector string"
            }
          ],
          "description": "<p>Determines if a selector string is safe to use.  Used internally\nin set to prevent IE from locking up when attempting to add a rule for a\n&quot;bad selector&quot;.<\/p>\n<p>Bad selectors are considered to be any string containing unescaped\n`~!@$%^&()+=|{}[];'\"?< or space. Also forbidden are . or # followed by\nanything other than an alphanumeric.  Additionally -abc or .-abc or\n#_abc or '# ' all fail.  There are likely more failure cases, so\nplease file a bug if you encounter one.<\/p>",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        }
      },
      "name": "StyleSheet",
      "module": "stylesheet",
      "namespace": "",
      "constructors": [
        {
          "description": "Create an instance of StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = Y.StyleSheet(..);<\/pre><\/code>\nor\n<pre><code>var sheet = new Y.StyleSheet(..);<\/pre><\/code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet<\/li>\n<li>The string name of an existing StyleSheet instance<\/li>\n<li>The unique guid generated for an existing StyleSheet instance<\/li>\n<li>The id of an existing <code>&lt;link&gt;<\/code> or <code>&lt;style&gt;<\/code> node<\/li>\n<li>The node reference for an existing <code>&lt;link&gt;<\/code> or <code>&lt;style&gt;<\/code> node<\/li>\n<li>The Y.Node instance wrapping an existing <code>&lt;link&gt;<\/code> or <code>&lt;style&gt;<\/code> node<\/li>\n<li>A chunk of css text to create a new stylesheet from<\/li>\n<\/ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.<\/p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id\/ref or chunk of css\ntext to create a populated instance.<\/p>",
          "params": [
            {
              "name": "seed",
              "type": "String|HTMLElement|Node",
              "description": "  a style or link node, its id, or a\nname or guid of a StyleSheet, or a string of css text"
            },
            {
              "name": "name",
              "type": "String",
              "description": "  (optional) name to register instance for future static\naccess"
            }
          ]
        }
      ],
      "description": "Create an instance of StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = Y.StyleSheet(..);<\/pre><\/code>\nor\n<pre><code>var sheet = new Y.StyleSheet(..);<\/pre><\/code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet<\/li>\n<li>The string name of an existing StyleSheet instance<\/li>\n<li>The unique guid generated for an existing StyleSheet instance<\/li>\n<li>The id of an existing <code>&lt;link&gt;<\/code> or <code>&lt;style&gt;<\/code> node<\/li>\n<li>The node reference for an existing <code>&lt;link&gt;<\/code> or <code>&lt;style&gt;<\/code> node<\/li>\n<li>The Y.Node instance wrapping an existing <code>&lt;link&gt;<\/code> or <code>&lt;style&gt;<\/code> node<\/li>\n<li>A chunk of css text to create a new stylesheet from<\/li>\n<\/ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.<\/p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id\/ref or chunk of css\ntext to create a populated instance.<\/p>",
      "file": "stylesheet.js"
    },
    "DataSourceArraySchema": {
      "shortname": "DataSourceArraySchema",
      "superclass": "Plugin.Base",
      "methods": {
        "_beforeDefDataFn\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<\/dl>": {
          "guessedname": "_beforeDefDataFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Parses raw data into a normalized response."
        },
        "initializer": {
          "private": "",
          "guessedname": "initializer",
          "guessedtype": "function",
          "description": "Internal init() handler.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Config object."
            }
          ]
        }
      },
      "name": "DataSourceArraySchema",
      "extends": "Plugin.Base",
      "guessedname": "DataSourceArraySchema",
      "module": "datasource",
      "namespace": "",
      "guessedtype": "function",
      "description": "Adds schema-parsing to the DataSource Utility.",
      "file": "datasource-arrayschema.js",
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"dataSourceArraySchema\"",
          "guessedtype": "property",
          "description": "Class name."
        },
        "NS": {
          "final": "",
          "guessedname": "NS",
          "static": "",
          "type": "String",
          "value": "\"schema\"",
          "guessedtype": "property",
          "description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance."
        }
      }
    },
    "DataSource.IO": {
      "shortname": "DataSource.IO",
      "superclass": "DataSource.Local",
      "methods": {
        "initializer": {
          "private": "",
          "guessedname": "initializer",
          "guessedtype": "function",
          "description": "Internal init() handler.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Config object."
            }
          ]
        },
        "_defRequestFn": {
          "guessedname": "_defRequestFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Passes query string to IO. Fires <code>response<\/code> event when\nresponse is received asynchronously.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<\/dl>"
            }
          ]
        }
      },
      "name": "DataSource.IO",
      "extends": "DataSource.Local",
      "guessedname": "DSIO",
      "module": "datasource",
      "namespace": "",
      "events": {
        "ioChange": {
          "name": "ioChange",
          "description": "Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "IO subclass for the DataSource Utility."
        }
      ],
      "guessedtype": "function",
      "description": "IO subclass for the DataSource Utility.",
      "file": "datasource-io.js",
      "configs": {
        "io": {
          "guessedname": "io",
          "default": "Y.io",
          "type": "Y.io",
          "guessedtype": "property",
          "description": "Pointer to IO Utility."
        }
      },
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"dataSourceIO\"",
          "guessedtype": "property",
          "description": "Class name."
        },
        "_queue": {
          "guessedname": "_queue",
          "private": "",
          "default": "{interval:null, conn:null, requests:[]}",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object literal to manage asynchronous request\/response\ncycles enabled if queue needs to be managed (asyncMode\/ioConnMode):\n<dl>\n<dt>interval {Number}<\/dt>\n<dd>Interval ID of in-progress queue.<\/dd>\n<dt>conn<\/dt>\n<dd>In-progress connection identifier (if applicable).<\/dd>\n<dt>requests {Object[]}<\/dt>\n<dd>Array of queued request objects: {request:request, callback:callback}.<\/dd>\n<\/dl>"
        }
      }
    },
    "Test.Runner": {
      "shortname": "Runner",
      "methods": {
        "_buildTestTree": {
          "guessedname": "_buildTestTree",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Builds the test tree based on items in the master suite. The tree is a hierarchical\nrepresentation of the test suites, test cases, and test functions. The resulting tree\nis stored in _root and the pointer _cur is set to the root initially.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "run": {
          "guessedname": "run",
          "static": "",
          "guessedtype": "function",
          "description": "Runs the test suite.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "add": {
          "guessedname": "add",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "testObject",
              "type": "",
              "description": " Either a TestCase or a TestSuite that should be run."
            }
          ],
          "description": "Adds a test suite or test case to the list of test objects to run.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "disableLogging": {
          "guessedname": "disableLogging",
          "static": "",
          "guessedtype": "function",
          "description": "Disable logging via Y.log(). Test output will not be visible unless\nTestRunner events are subscribed to.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "clear": {
          "guessedname": "clear",
          "static": "",
          "guessedtype": "function",
          "description": "Removes all test objects from the runner.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "isWaiting": {
          "guessedname": "isWaiting",
          "static": "",
          "guessedtype": "function",
          "description": "Indicates if the TestRunner is waiting for a test to resume",
          "return": {
            "type": "Boolean",
            "description": "True if the TestRunner is waiting, false if not."
          }
        },
        "_logEvent": {
          "guessedname": "_logEvent",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " The event object for the event."
            }
          ],
          "description": "Logs TestRunner events using Y.log().",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_addTestSuiteToTestTree": {
          "guessedname": "_addTestSuiteToTestTree",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "parentNode",
              "type": "TestNode",
              "description": " The node to add the test suite to as a child."
            },
            {
              "name": "testSuite",
              "type": "Y.Test.Suite",
              "description": " The test suite to add."
            }
          ],
          "description": "Adds a test suite to the test tree as a child of the specified node.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_addTestCaseToTestTree": {
          "guessedname": "_addTestCaseToTestTree",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "parentNode",
              "type": "TestNode",
              "description": " The node to add the test case to as a child."
            },
            {
              "name": "testCase",
              "type": "Y.Test.Case",
              "description": " The test case to add."
            }
          ],
          "description": "Adds a test case to the test tree as a child of the specified node.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "resume": {
          "guessedname": "resume",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "segment",
              "type": "Function",
              "description": " The function to run as the rest\nof the haulted test."
            }
          ],
          "description": "Resumes the TestRunner after wait() was called.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_handleTestObjectComplete": {
          "guessedname": "_handleTestObjectComplete",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "TestNode",
              "description": " The TestNode representing the test object."
            }
          ],
          "description": "Handles the completion of a test object's tests. Tallies test results \nfrom one level up to the next.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_next": {
          "guessedname": "_next",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Retrieves the next node in the test tree.",
          "return": {
            "type": "TestNode",
            "description": "The next node in the test tree or null if the end is reached."
          }
        },
        "_runTest": {
          "name": "_runTest",
          "guessedname": "_runTest",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "TestNode",
              "description": " The TestNode representing the test to run."
            }
          ],
          "description": "Runs a single test based on the data provided in the node.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_handleError": {
          "guessedname": "_handleError",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "error",
              "type": "Error",
              "description": " The error object."
            }
          ],
          "description": "Handles an error as if it occurred within the currently executing\ntest. This is for mock methods that may be called asynchronously\nand therefore out of the scope of the TestRunner. Previously, this\nerror would bubble up to the browser. Now, this method is used\nto tell TestRunner about the error. This should never be called\nby anyplace other than the Mock object.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "enableLogging": {
          "guessedname": "enableLogging",
          "static": "",
          "guessedtype": "function",
          "description": "Enable logging via Y.log(). Test output is published and can be read via\nlogreader.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_run": {
          "guessedname": "_run",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "testObject",
              "type": "Y.Test.Case|Y.Test.Suite",
              "description": " The test case or test suite to run."
            }
          ],
          "description": "Runs a test case or test suite, returning the results.",
          "return": {
            "type": "Object",
            "description": "Results of the execution with properties passed, failed, and total."
          }
        }
      },
      "name": "Test.Runner",
      "module": "test",
      "namespace": "Test",
      "static": "",
      "events": {
        "testsuitecomplete": {
          "guessedname": "TEST_SUITE_COMPLETE_EVENT",
          "static": "",
          "guessedtype": "property",
          "description": "Fires when all test cases in a test suite have been\ncompleted."
        },
        "begin": {
          "guessedname": "BEGIN_EVENT",
          "static": "",
          "guessedtype": "property",
          "description": "Fires when the run() method is called."
        },
        "testsuitebegin": {
          "guessedname": "TEST_SUITE_BEGIN_EVENT",
          "static": "",
          "guessedtype": "property",
          "description": "Fires when a test suite is opened but before the first \ntest is executed."
        },
        "complete": {
          "guessedname": "COMPLETE_EVENT",
          "static": "",
          "guessedtype": "property",
          "description": "Fires when all test suites and test cases have been completed."
        },
        "testcasebegin": {
          "guessedname": "TEST_CASE_BEGIN_EVENT",
          "static": "",
          "guessedtype": "property",
          "description": "Fires when a test case is opened but before the first \ntest is executed."
        },
        "pass": {
          "guessedname": "TEST_PASS_EVENT",
          "static": "",
          "guessedtype": "property",
          "description": "Fires when a test has passed."
        },
        "ignore": {
          "guessedname": "TEST_IGNORE_EVENT",
          "static": "",
          "guessedtype": "property",
          "description": "Fires when a test has been ignored."
        },
        "testcasecomplete": {
          "guessedname": "TEST_CASE_COMPLETE_EVENT",
          "static": "",
          "guessedtype": "property",
          "description": "Fires when all tests in a test case have been executed."
        },
        "fail": {
          "guessedname": "TEST_FAIL_EVENT",
          "static": "",
          "guessedtype": "property",
          "description": "Fires when a test has failed."
        }
      },
      "description": "Runs test suites and test cases, providing events to allowing for the\ninterpretation of test results.",
      "file": "TestRunner.js",
      "properties": {
        "_root": {
          "guessedname": "_root",
          "private": "",
          "static": "",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to the root node in the test tree."
        },
        "masterSuite": {
          "private": "",
          "static": "",
          "type": "Y.Test.Suite",
          "description": "Suite on which to attach all TestSuites and TestCases to be run."
        },
        "_cur": {
          "guessedname": "_cur",
          "private": "",
          "static": "",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to the current node in the test tree."
        },
        "_waiting": {
          "guessedname": "_waiting",
          "private": "",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates if the TestRunner is waiting as a result of\nwait() being called."
        },
        "_log": {
          "guessedname": "_log",
          "private": "",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates if the TestRunner will log events or not."
        }
      }
    },
    "Plugin.NodeFX": {
      "shortname": "Plugin.NodeFX",
      "superclass": "Base",
      "name": "Plugin.NodeFX",
      "extends": "Base",
      "guessedname": "NodeFX",
      "module": "anim",
      "namespace": "",
      "guessedtype": "function",
      "description": "Binds an Anim instance to a Node instance",
      "file": "anim-node-plugin.js"
    },
    "Cookie": {
      "shortname": "Cookie",
      "methods": {
        "get": {
          "guessedname": "get",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to retrieve."
            },
            {
              "name": "options",
              "type": "Function|Object",
              "description": " (Optional) An object containing one or more\ncookie options: raw (true\/false) and converter (a function).\nThe converter function is run on the value before returning it. The\nfunction is not used if the cookie doesn't exist. The function can be\npassed instead of the options object for backwards compatibility. When\nraw is set to true, the cookie value is not URI decoded."
            }
          ],
          "description": "Returns the cookie value for the given name.",
          "return": {
            "type": "Variant",
            "description": "If no converter is specified, returns a string or null if\nthe cookie doesn't exist. If the converter is specified, returns the value\nreturned from the converter or null if the cookie doesn't exist."
          }
        },
        "_createCookieHashString": {
          "guessedname": "_createCookieHashString",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "hash",
              "type": "Object",
              "description": " An object of key-value pairs to create a string for."
            }
          ],
          "description": "Formats a cookie value for an object containing multiple values.",
          "return": {
            "type": "String",
            "description": "A string suitable for use as a cookie value."
          }
        },
        "_parseCookieString": {
          "guessedname": "_parseCookieString",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "text",
              "type": "String",
              "description": " The cookie string to parse."
            },
            {
              "name": "shouldDecode",
              "type": "Boolean",
              "description": " (Optional) Indicates if the cookie values should be decoded or not. Default is true."
            }
          ],
          "description": "Parses a cookie string into an object representing all accessible cookies.",
          "return": {
            "type": "Object",
            "description": "An object containing entries for each accessible cookie."
          }
        },
        "set": {
          "guessedname": "set",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to set."
            },
            {
              "name": "value",
              "type": "Variant",
              "description": " The value to set for the cookie."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nsecure (true\/false), and raw (true\/false). Setting raw to true indicates\nthat the cookie should not be URI encoded before being set."
            }
          ],
          "description": "Sets a cookie with a given name and value.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        },
        "getSub": {
          "guessedname": "getSub",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to retrieve."
            },
            {
              "name": "subName",
              "type": "String",
              "description": " The name of the subcookie to retrieve."
            },
            {
              "name": "converter",
              "type": "Function",
              "description": " (Optional) A function to run on the value before returning\nit. The function is not used if the cookie doesn't exist."
            }
          ],
          "description": "Returns the value of a subcookie.",
          "return": {
            "type": "Variant",
            "description": "If the cookie doesn't exist, null is returned. If the subcookie\ndoesn't exist, null if also returned. If no converter is specified and the\nsubcookie exists, a string is returned. If a converter is specified and the\nsubcookie exists, the value returned from the converter is returned."
          }
        },
        "remove": {
          "guessedname": "remove",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to remove."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), \nand secure (true\/false). The expires option will be overwritten\nby the method."
            }
          ],
          "description": "Removes a cookie from the machine by setting its expiration date to\nsometime in the past.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        },
        "_parseCookieHash": {
          "guessedname": "_parseCookieHash",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "text",
              "type": "String",
              "description": " The cookie hash string to parse (format: n1=v1&n2=v2)."
            }
          ],
          "description": "Parses a cookie hash string into an object.",
          "return": {
            "type": "Object",
            "description": "An object containing entries for each cookie value."
          }
        },
        "setSub": {
          "guessedname": "setSub",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to set."
            },
            {
              "name": "subName",
              "type": "String",
              "description": " The name of the subcookie to set."
            },
            {
              "name": "value",
              "type": "Variant",
              "description": " The value to set."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true\/false)."
            }
          ],
          "description": "Sets a sub cookie with a given name to a particular value.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        },
        "_createCookieString": {
          "guessedname": "_createCookieString",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie."
            },
            {
              "name": "value",
              "type": "String",
              "description": " The value of the cookie."
            },
            {
              "name": "encodeValue",
              "type": "Boolean",
              "description": " True to encode the value, false to leave as-is."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) Options for the cookie."
            }
          ],
          "description": "Creates a cookie string that can be assigned into document.cookie.",
          "return": {
            "type": "String",
            "description": "The formatted cookie string."
          }
        },
        "getSubs": {
          "guessedname": "getSubs",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to retrieve."
            }
          ],
          "description": "Returns an object containing name-value pairs stored in the cookie with the given name.",
          "return": {
            "type": "Object",
            "description": "An object of name-value pairs if the cookie with the given name\nexists, null if it does not."
          }
        },
        "removeSub": {
          "guessedname": "removeSub",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie in which the subcookie exists."
            },
            {
              "name": "subName",
              "type": "String",
              "description": " The name of the subcookie to remove."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nremoveIfEmpty (true\/false), and secure (true\/false). This must be the same\nsettings as the original subcookie."
            }
          ],
          "description": "Removes a sub cookie with a given name.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        },
        "exists": {
          "guessedname": "exists",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to check."
            }
          ],
          "description": "Determines if the cookie with the given name exists. This is useful for\nBoolean cookies (those that do not follow the name=value convention).",
          "return": {
            "type": "Boolean",
            "description": "True if the cookie exists, false if not."
          }
        },
        "setSubs": {
          "guessedname": "setSubs",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to set."
            },
            {
              "name": "value",
              "type": "Object",
              "description": " An object containing name-value pairs."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true\/false)."
            }
          ],
          "description": "Sets a cookie with a given name to contain a hash of name-value pairs.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        }
      },
      "name": "Cookie",
      "guessedname": "Cookie",
      "module": "cookie",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "Cookie utility.",
      "file": "Cookie.js"
    },
    "Console": {
      "shortname": "Console",
      "superclass": "Widget",
      "methods": {
        "_defEntryFn": {
          "guessedname": "_defEntryFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Buffers incoming message objects and schedules the printing.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  The Custom event carrying the message in its payload"
            }
          ]
        },
        "_onCollapseClick": {
          "guessedname": "_onCollapseClick",
          "guessedtype": "function",
          "protected": "",
          "description": "Event handler for clicking on the Collapse\/Expand button. Sets the\n&quot;collapsed&quot; attribute accordingly.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  DOM event facade for the click event"
            }
          ]
        },
        "renderUI": {
          "guessedname": "renderUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Generate the Console UI."
        },
        "_afterCollapsedChange": {
          "guessedname": "_afterCollapsedChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the className of the contentBox, which should trigger CSS to\nhide or show the body and footer sections depending on the new value.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  Custom event for the attribute change"
            }
          ]
        },
        "_trimOldEntries": {
          "guessedname": "_trimOldEntries",
          "guessedtype": "function",
          "protected": "",
          "description": "Removes the oldest message entries from the UI to maintain the limit\nspecified in the consoleLimit configuration."
        },
        "printBuffer": {
          "guessedname": "printBuffer",
          "chainable": "",
          "guessedtype": "function",
          "description": "Outputs buffered messages to the console UI.  This is typically called\nfrom a scheduled interval until the buffer is empty (referred to as the\nprint loop).  The number of buffered messages output to the Console is\nlimited to the number provided as an argument.  If no limit is passed,\nall buffered messages are rendered.",
          "params": [
            {
              "name": "limit",
              "type": "Number",
              "description": "  (optional) max number of buffered entries to write"
            }
          ]
        },
        "_createEntryHTML": {
          "guessedname": "_createEntryHTML",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "m",
              "type": "Object",
              "description": "  object literal containing normalized message metadata"
            }
          ],
          "description": "Translates message meta into the markup for a console entry.",
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "_onLogEvent": {
          "guessedname": "_onLogEvent",
          "guessedtype": "function",
          "protected": "",
          "description": "Responds to log events by normalizing qualifying messages and passing\nthem along through the entry event for buffering etc.",
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "  the log message"
            },
            {
              "name": "cat",
              "type": "String",
              "description": "  OPTIONAL the category or logLevel of the message"
            },
            {
              "name": "src",
              "type": "String",
              "description": "  OPTIONAL the source of the message (e.g. widget name)"
            }
          ]
        },
        "_uiSetHeight": {
          "guessedname": "_uiSetHeight",
          "guessedtype": "function",
          "protected": "",
          "description": "Set the height of the Console container.  Set the body height to the difference between the configured height and the calculated heights of the header and footer.\nOverrides Widget.prototype._uiSetHeight.",
          "params": [
            {
              "name": "v",
              "type": "String|Number",
              "description": "  the new height"
            }
          ]
        },
        "_encodeHTML": {
          "guessedname": "_encodeHTML",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "s",
              "type": "String",
              "description": "  the raw string"
            }
          ],
          "description": "Returns the input string with ampersands (&amp;), &lt, and &gt; encoded\nas HTML entities.",
          "return": {
            "type": "",
            "description": "String the encoded string"
          }
        },
        "_cancelPrintLoop": {
          "guessedname": "_cancelPrintLoop",
          "guessedtype": "function",
          "protected": "",
          "description": "Clears the timeout for printing buffered messages."
        },
        "clearConsole": {
          "guessedname": "clearConsole",
          "chainable": "",
          "guessedtype": "function",
          "description": "Clear the console of messages and flush the buffer of pending messages."
        },
        "_schedulePrint": {
          "guessedname": "_schedulePrint",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets an interval for buffered messages to be output to the console."
        },
        "_onClearClick": {
          "guessedname": "_onClearClick",
          "guessedtype": "function",
          "protected": "",
          "description": "Event handler for clicking on the Clear button.  Pass-through to\n<code>this.clearConsole()<\/code>.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  DOM event facade for the click event"
            }
          ]
        },
        "_normalizeMessage": {
          "guessedname": "_normalizeMessage",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  custom event containing the log message"
            }
          ],
          "description": "Create a log entry message from the inputs including the following keys:\n<ul>\n<li>time - this moment<\/li>\n<li>message - leg message<\/li>\n<li>category - logLevel or custom category for the message<\/li>\n<li>source - when provided, the widget or util calling Y.log<\/li>\n<li>sourceAndDetail - same as source but can include instance info<\/li>\n<li>localTime - readable version of time<\/li>\n<li>elapsedTime - ms since last entry<\/li>\n<li>totalTime - ms since Console was instantiated or reset<\/li>\n<\/ul>",
          "return": {
            "type": "",
            "description": "Object the message object"
          }
        },
        "expand": {
          "guessedname": "expand",
          "chainable": "",
          "guessedtype": "function",
          "description": "Expands the body and footer if collapsed."
        },
        "log": {
          "guessedname": "log",
          "chainable": "",
          "guessedtype": "function",
          "description": "Wrapper for <code>Y.log<\/code>.",
          "params": [
            {
              "name": "arg*",
              "type": "MIXED",
              "description": "  (all arguments passed through to <code>Y.log<\/code>)"
            }
          ]
        },
        "_isInLogLevel": {
          "guessedname": "_isInLogLevel",
          "guessedtype": "function",
          "protected": "",
          "description": "Determine if incoming log messages are within the configured logLevel\nto be buffered for printing."
        },
        "_setLogLevel": {
          "guessedname": "_setLogLevel",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "String",
              "description": "  the desired log level"
            }
          ],
          "description": "Setter method for logLevel attribute.  Acceptable values are\n&quot;error&quot, &quot;warn&quot, and &quot;info&quot (case\ninsensitive).  Other values are treated as &quot;info&quot;.",
          "return": {
            "type": "",
            "description": "String One of Console.LOG_LEVEL_INFO, _WARN, or _ERROR"
          }
        },
        "_afterVisibleChange": {
          "guessedname": "_afterVisibleChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Makes adjustments to the UI if needed when the Console is hidden or shown",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the visibleChange event"
            }
          ]
        },
        "_onPauseClick": {
          "guessedname": "_onPauseClick",
          "guessedtype": "function",
          "protected": "",
          "description": "Event handler for clicking on the Pause checkbox to update the paused\nattribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  DOM event facade for the click event"
            }
          ]
        },
        "syncUI": {
          "guessedname": "syncUI",
          "guessedtype": "function",
          "description": "Sync the UI state to the current attribute state."
        },
        "scrollToLatest": {
          "guessedname": "scrollToLatest",
          "chainable": "",
          "guessedtype": "function",
          "description": "Scrolls to the most recent entry"
        },
        "collapse": {
          "guessedname": "collapse",
          "chainable": "",
          "guessedtype": "function",
          "description": "Collapses the body and footer."
        },
        "_initHead": {
          "guessedname": "_initHead",
          "guessedtype": "function",
          "protected": "",
          "description": "Create the DOM structure for the header elements."
        },
        "_validateStyle": {
          "guessedname": "_validateStyle",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "style",
              "type": "String",
              "description": "  the proposed value"
            }
          ],
          "description": "Validates input value for style attribute.  Accepts only values 'inline',\n'block', and 'separate'.",
          "return": {
            "type": "Boolean",
            "description": "pass\/fail"
          }
        },
        "_defResetFn": {
          "guessedname": "_defResetFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Clears the console, resets the startTime attribute, enables and\nunpauses the widget."
        },
        "initializer": {
          "guessedname": "initializer",
          "guessedtype": "function",
          "protected": "",
          "description": "Constructor code.  Set up the buffer and entry template, publish\ninternal events, and subscribe to the configured logEvent."
        },
        "_initFoot": {
          "guessedname": "_initFoot",
          "guessedtype": "function",
          "protected": "",
          "description": "Create the DOM structure for the footer elements."
        },
        "_uiUpdateFromHideShow": {
          "guessedname": "_uiUpdateFromHideShow",
          "guessedtype": "function",
          "protected": "",
          "description": "Recalculates dimensions and updates appropriately when shown",
          "params": [
            {
              "name": "v",
              "type": "Boolean",
              "description": "  true for visible, false for hidden"
            }
          ]
        },
        "destructor": {
          "guessedname": "destructor",
          "guessedtype": "function",
          "protected": "",
          "description": "Tears down the instance, flushing event subscriptions and purging the UI."
        },
        "_afterPausedChange": {
          "guessedname": "_afterPausedChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the UI and schedules or cancels the print loop.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  Custom event for the attribute change"
            }
          ]
        },
        "_uiUpdateCollapsed": {
          "guessedname": "_uiUpdateCollapsed",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the UI to reflect the new Collapsed state",
          "params": [
            {
              "name": "v",
              "type": "Boolean",
              "description": "  true for collapsed, false for expanded"
            }
          ]
        },
        "reset": {
          "guessedname": "reset",
          "chainable": "",
          "guessedtype": "function",
          "description": "Clears the console and resets internal timers."
        },
        "_htmlEscapeMessage": {
          "guessedname": "_htmlEscapeMessage",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "m",
              "type": "Object",
              "description": "  the normalized message object"
            }
          ],
          "description": "Performs HTML escaping on strings in the message object.",
          "return": {
            "type": "",
            "description": "Object a clone of the message object with proper escapement"
          }
        },
        "bindUI": {
          "guessedname": "bindUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Set up event listeners to wire up the UI to the internal state."
        },
        "_initBody": {
          "guessedname": "_initBody",
          "guessedtype": "function",
          "protected": "",
          "description": "Create the DOM structure for the console body&#8212;where messages are\nrendered."
        },
        "_uiUpdatePaused": {
          "guessedname": "_uiUpdatePaused",
          "guessedtype": "function",
          "protected": "",
          "description": "Checks or unchecks the paused checkbox",
          "params": [
            {
              "name": "on",
              "type": "Boolean",
              "description": "  the new checked state"
            }
          ]
        },
        "_afterConsoleLimitChange": {
          "guessedname": "_afterConsoleLimitChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Calls this._trimOldEntries() in response to changes in the configured\nconsoleLimit attribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  Custom event for the attribute change"
            }
          ]
        },
        "_afterStringsChange": {
          "guessedname": "_afterStringsChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the UI if changes are made to any of the strings in the strings\nattribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  Custom event for the attribute change"
            }
          ]
        }
      },
      "name": "Console",
      "extends": "Widget",
      "module": "console",
      "namespace": "",
      "events": {
        "widthChange": {
          "name": "widthChange",
          "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "newestOnTopChange": {
          "name": "newestOnTopChange",
          "description": "Fires when the value for the configuration attribute 'newestOnTop' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "printLimitChange": {
          "name": "printLimitChange",
          "description": "Fires when the value for the configuration attribute 'printLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "heightChange": {
          "name": "heightChange",
          "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "startTimeChange": {
          "name": "startTimeChange",
          "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "consoleLimitChange": {
          "name": "consoleLimitChange",
          "description": "Fires when the value for the configuration attribute 'consoleLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "styleChange": {
          "name": "styleChange",
          "description": "Fires when the value for the configuration attribute 'style' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "printTimeoutChange": {
          "name": "printTimeoutChange",
          "description": "Fires when the value for the configuration attribute 'printTimeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "defaultCategoryChange": {
          "name": "defaultCategoryChange",
          "description": "Fires when the value for the configuration attribute 'defaultCategory' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "scrollIntoViewChange": {
          "name": "scrollIntoViewChange",
          "description": "Fires when the value for the configuration attribute 'scrollIntoView' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "defaultSourceChange": {
          "name": "defaultSourceChange",
          "description": "Fires when the value for the configuration attribute 'defaultSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "logSourceChange": {
          "name": "logSourceChange",
          "description": "Fires when the value for the configuration attribute 'logSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "entry": {
          "preventable": "_defEntryFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Transfers a received message to the print loop buffer.  Default\nbehavior defined in _defEntryFn.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>message<\/dt>\n<dd>The message data normalized into an object literal (see _normalizeMessage)<\/dd>\n<\/dl>"
            }
          ]
        },
        "collapsedChange": {
          "name": "collapsedChange",
          "description": "Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "stringsChange": {
          "name": "stringsChange",
          "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "reset": {
          "preventable": "_defResetFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Triggers the reset behavior via the default logic in _defResetFn.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "  Event Facade object"
            }
          ]
        },
        "useBrowserConsoleChange": {
          "name": "useBrowserConsoleChange",
          "description": "Fires when the value for the configuration attribute 'useBrowserConsole' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "logEventChange": {
          "name": "logEventChange",
          "description": "Fires when the value for the configuration attribute 'logEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "entryTemplateChange": {
          "name": "entryTemplateChange",
          "description": "Fires when the value for the configuration attribute 'entryTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "lastTimeChange": {
          "name": "lastTimeChange",
          "description": "Fires when the value for the configuration attribute 'lastTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "logLevelChange": {
          "name": "logLevelChange",
          "description": "Fires when the value for the configuration attribute 'logLevel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "pausedChange": {
          "name": "pausedChange",
          "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )<\/code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel.",
          "params": [
            {
              "name": "conf",
              "type": "Object",
              "description": "  Configuration object (see Configuration attributes)"
            }
          ]
        }
      ],
      "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )<\/code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel.",
      "file": "console.js",
      "configs": {
        "printTimeout": {
          "guessedname": "printTimeout",
          "default": "100",
          "type": "Number",
          "guessedtype": "property",
          "description": "Millisecond timeout between iterations of the print loop, moving\nentries from the buffer to the UI."
        },
        "useBrowserConsole": {
          "guessedname": "useBrowserConsole",
          "default": "false",
          "type": "{Boolean}",
          "guessedtype": "property",
          "description": "Pass through to the YUI instance useBrowserConsole configuration.\nBy default this is set to false, which will disable logging to the\nbrowser console when a Console instance is created.  If the\nlogSource is not a YUI instance, this has no effect."
        },
        "logEvent": {
          "guessedname": "logEvent",
          "default": "\"yui:log\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Name of the custom event that will communicate log messages."
        },
        "logLevel": {
          "guessedname": "logLevel",
          "default": "Y.config.logLevel or Console.LOG_LEVEL_INFO",
          "type": "String",
          "guessedtype": "property",
          "description": "Minimum entry log level to render into the Console.  The initial\nlogLevel value for all Console instances defaults from the\nY.config.logLevel YUI configuration, or Console.LOG_LEVEL_INFO if\nthat configuration is not set.\nPossible values are &quot;info&quot;, &quot;warn&quot;,\n&quot;error&quot; (case insensitive), or their corresponding statics\nConsole.LOG_LEVEL_INFO and so on."
        },
        "lastTime": {
          "guessedname": "lastTime",
          "default": "The moment the console module is <code>use<\/code>d",
          "type": "Date",
          "guessedtype": "property",
          "description": "The precise time the last entry was logged.  Used to measure elapsed\ntime between log messages."
        },
        "entryTemplate": {
          "guessedname": "entryTemplate",
          "default": "Console.ENTRY_TEMPLATE",
          "type": "String",
          "guessedtype": "property",
          "description": "Markup template used to create the DOM structure for Console entries."
        },
        "collapsed": {
          "guessedname": "collapsed",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Controls the collapsed state of the Console"
        },
        "printLimit": {
          "guessedname": "printLimit",
          "default": "50",
          "type": "Number",
          "guessedtype": "property",
          "description": "Maximum number of entries printed in each iteration of the print\nloop. This is used to prevent excessive logging locking the page UI."
        },
        "strings": {
          "guessedname": "strings",
          "type": "Object",
          "guessedtype": "property",
          "description": "Collection of strings used to label elements in the Console UI.\nDefault collection contains the following name:value pairs:\n<ul>\n<li>title : &quot;Log Console&quot;<\/li>\n<li>pause : &quot;Pause&quot;<\/li>\n<li>clear : &quot;Clear&quot;<\/li>\n<li>collapse : &quot;Collapse&quot;<\/li>\n<li>expand : &quot;Expand&quot;<\/li>\n<\/ul>"
        },
        "paused": {
          "guessedname": "paused",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Boolean to pause the outputting of new messages to the console.\nWhen paused, messages will accumulate in the buffer."
        },
        "height": {
          "guessedname": "height",
          "default": "\"300px\"",
          "type": "{String | Number}",
          "guessedtype": "property",
          "description": "String with units, or number, representing the height of the Console,\ninclusive of header and footer. If a number is provided, the default\nunit, defined by Widget's DEF_UNIT, property is used."
        },
        "startTime": {
          "guessedname": "startTime",
          "default": "The moment the console module is <code>use<\/code>d",
          "type": "Date",
          "guessedtype": "property",
          "description": "The baseline time for this Console instance, used to measure elapsed\ntime from the moment the console module is <code>use<\/code>d to the\nmoment each new entry is logged (not rendered).\nThis value is reset by the instance method myConsole.reset()."
        },
        "defaultSource": {
          "guessedname": "defaultSource",
          "default": "\"global\"",
          "type": "String",
          "guessedtype": "property",
          "description": "If a source is not specified in the Y.log(..) statement, this\nsource will be used."
        },
        "consoleLimit": {
          "guessedname": "consoleLimit",
          "default": "300",
          "type": "Number",
          "guessedtype": "property",
          "description": "Maximum number of Console entries allowed in the Console body at one\ntime.  This is used to keep acquired messages from exploding the\nDOM tree and impacting page performance."
        },
        "defaultCategory": {
          "guessedname": "defaultCategory",
          "default": "\"info\"",
          "type": "String",
          "guessedtype": "property",
          "description": "If a category is not specified in the Y.log(..) statement, this\ncategory will be used. Categories &quot;info&quot;,\n&quot;warn&quot;, and &quot;error&quot; are also called log level."
        },
        "scrollIntoView": {
          "guessedname": "scrollIntoView",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "When new entries are added to the Console UI, should they be\nscrolled into view?"
        },
        "newestOnTop": {
          "guessedname": "newestOnTop",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "New entries should display at the top of the Console or the bottom?"
        },
        "logSource": {
          "guessedname": "logSource",
          "default": "Y",
          "type": "EventTarget",
          "guessedtype": "property",
          "description": "Object that will emit the log events.  By default the YUI instance.\nTo have a single Console capture events from all YUI instances, set\nthis to the Y.Global object."
        },
        "style": {
          "guessedname": "style",
          "default": "'separate'",
          "type": "{String}",
          "guessedtype": "property",
          "description": "Allows the Console to flow in the document.  Available values are\n'inline', 'block', and 'separate' (the default)."
        },
        "width": {
          "guessedname": "width",
          "default": "\"300px\"",
          "type": "{String | Number}",
          "guessedtype": "property",
          "description": "String with units, or number, representing the width of the Console.\nIf a number is provided, the default unit, defined by Widget's\nDEF_UNIT, property is used."
        }
      },
      "properties": {
        "Console.FOOTER_TEMPLATE": {
          "guessedname": "FOOTER_TEMPLATE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Markup template used to generate the DOM structure for the footer\nsection of the Console when it is rendered.  The template includes\nmany of the {placeholder}s from Console.CHROME_CLASSES as well as:\n<ul>\n<li>id_guid - generated unique id, relates the label and checkbox<\/li>\n<li>str_pause - pulled from attribute strings.pause<\/li>\n<li>str_clear - pulled from attribute strings.clear<\/li>\n<\/ul>"
        },
        "_head": {
          "guessedname": "_head",
          "default": "null",
          "type": "Node",
          "guessedtype": "property",
          "protected": "",
          "description": "Reference to the Node instance containing the header contents."
        },
        "_printLoop": {
          "guessedname": "_printLoop",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Holds the object API returned from <code>Y.later<\/code> for the print\nloop interval."
        },
        "_body": {
          "guessedname": "_body",
          "default": "null",
          "type": "Node",
          "guessedtype": "property",
          "protected": "",
          "description": "Reference to the Node instance that will house the console messages."
        },
        "Console.ATTRS": {
          "guessedname": "ATTRS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Static property used to define the default attribute configuration of\nthe Widget."
        },
        "Console.ENTRY_CLASSES": {
          "guessedname": "ENTRY_CLASSES",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.ENTRY_TEMPLATE markup when rendering a new Console entry.\n<p>By default, the keys contained in the object are:<\/p>\n<ul>\n<li>entry_class<\/li>\n<li>entry_meta_class<\/li>\n<li>entry_cat_class<\/li>\n<li>entry_src_class<\/li>\n<li>entry_time_class<\/li>\n<li>entry_content_class<\/li>\n<\/ul>"
        },
        "buffer": {
          "guessedname": "buffer",
          "default": "null",
          "type": "Array",
          "guessedtype": "property",
          "protected": "",
          "description": "Array of normalized message objects awaiting printing."
        },
        "Console.BODY_TEMPLATE": {
          "guessedname": "BODY_TEMPLATE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Markup template used to generate the DOM structure for the Console body\n(where the messages are inserted) when it is rendered.  The template\nincludes only the {placeholder} &quot;console_bd_class&quot;, which is\nconstributed by Console.CHROME_CLASSES."
        },
        "Console.HEADER_TEMPLATE": {
          "guessedname": "HEADER_TEMPLATE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Markup template used to generate the DOM structure for the header\nsection of the Console when it is rendered.  The template includes\nthese {placeholder}s:\n<ul>\n<li>console_button_class - contributed by Console.CHROME_CLASSES<\/li>\n<li>console_collapse_class - contributed by Console.CHROME_CLASSES<\/li>\n<li>console_hd_class - contributed by Console.CHROME_CLASSES<\/li>\n<li>console_title_class - contributed by Console.CHROME_CLASSES<\/li>\n<li>str_collapse - pulled from attribute strings.collapse<\/li>\n<li>str_title - pulled from attribute strings.title<\/li>\n<\/ul>"
        },
        "Console.CHROME_CLASSES": {
          "guessedname": "CHROME_CLASSES",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.HEADER_TEMPLATE, Console.BODY_TEMPLATE, and\nConsole.FOOTER_TEMPLATE markup when rendering the Console UI.\n<p>By default, the keys contained in the object are:<\/p>\n<ul>\n<li>console_hd_class<\/li>\n<li>console_bd_class<\/li>\n<li>console_ft_class<\/li>\n<li>console_controls_class<\/li>\n<li>console_checkbox_class<\/li>\n<li>console_pause_class<\/li>\n<li>console_pause_label_class<\/li>\n<li>console_button_class<\/li>\n<li>console_clear_class<\/li>\n<li>console_collapse_class<\/li>\n<li>console_title_class<\/li>\n<\/ul>"
        },
        "Console.NAME": {
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The identity of the widget."
        },
        "Console.LOG_LEVEL_INFO": {
          "guessedname": "LOG_LEVEL_INFO",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Static identifier for logLevel configuration setting to allow all\nincoming messages to generate Console entries."
        },
        "_foot": {
          "guessedname": "_foot",
          "default": "null",
          "type": "Node",
          "guessedtype": "property",
          "protected": "",
          "description": "Reference to the Node instance containing the footer contents."
        },
        "Console.ENTRY_TEMPLATE": {
          "guessedname": "ENTRY_TEMPLATE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Default markup template used to create the DOM structure for Console\nentries. The markup contains {placeholder}s for content and classes\nthat are replaced via Y.substitute.  The default template contains\nthe {placeholder}s identified in Console.ENTRY_CLASSES as well as the\nfollowing placeholders that will be populated by the log entry data:\n<ul>\n<li>cat_class<\/li>\n<li>src_class<\/li>\n<li>totalTime<\/li>\n<li>elapsedTime<\/li>\n<li>localTime<\/li>\n<li>sourceAndDetail<\/li>\n<li>message<\/li>\n<\/ul>"
        },
        "Console.LOG_LEVEL_ERROR": {
          "guessedname": "LOG_LEVEL_ERROR",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;error&quot; to generate\nConsole entries."
        },
        "_evtCat": {
          "guessedname": "_evtCat",
          "type": "string",
          "guessedtype": "property",
          "protected": "",
          "description": "Category to prefix all event subscriptions to allow for ease of detach\nduring destroy."
        },
        "Console.LOG_LEVEL_WARN": {
          "guessedname": "LOG_LEVEL_WARN",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;warn&quot; or &quot;error&quot;\nto generate Console entries."
        }
      }
    },
    "Array": {
      "shortname": "Array",
      "methods": {
        "()": {
          "guessedname": "YArray",
          "static": "",
          "guessedtype": "function",
          "todo": "this will not automatically convert elements that are also collections\nsuch as forms and selects.  Passing true as the third param will\nforce a conversion.",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " the item to arrayify"
            },
            {
              "name": "i",
              "type": "int",
              "description": "  if an array or array-like, this is the start index"
            },
            {
              "name": "al",
              "type": "boolean",
              "description": "  if true, it forces the array-like fork.  This\ncan be used to avoid multiple array.test calls."
            }
          ],
          "description": "Y.Array(o) returns an array:\n- Arrays are return unmodified unless the start position is specified.\n- \"Array-like\" collections (@see Array.test) are converted to arrays\n- For everything else, a new array is created with the input as the sole item\n- The start position is used if the input is or is like an array to return\na subset of the collection.",
          "return": {
            "type": "Array",
            "description": "the resulting array"
          }
        },
        "numericSort": {
          "guessedname": "numericSort",
          "guessedtype": "function",
          "description": "Numeric sort convenience function.\nY.ArrayAssert.itemsAreEqual([1, 2, 3], [3, 1, 2].sort(Y.Array.numericSort));"
        },
        "each": {
          "guessedname": "each",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to iterate"
            },
            {
              "name": "f",
              "type": "Function",
              "description": "  the function to execute on each item"
            },
            {
              "name": "o",
              "type": "",
              "description": " Optional context object"
            }
          ],
          "description": "Executes the supplied function on each item in the array.",
          "return": {
            "type": "YUI",
            "description": "the YUI instance"
          }
        },
        "hash": {
          "guessedname": "hash",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "k",
              "type": "Array",
              "description": "  keyset"
            },
            {
              "name": "v",
              "type": "Array",
              "description": "  optional valueset"
            }
          ],
          "description": "Returns an object using the first array as keys, and\nthe second as values.  If the second array is not\nprovided the value is set to true for each.",
          "return": {
            "type": "object",
            "description": "the hash"
          }
        },
        "indexOf": {
          "guessedname": "indexOf",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to search"
            },
            {
              "name": "val",
              "type": "",
              "description": " the value to search for"
            }
          ],
          "description": "Returns the index of the first item in the array\nthat contains the specified value, -1 if the\nvalue isn't found.",
          "return": {
            "type": "int",
            "description": "the index of the item that contains the value or -1"
          }
        },
        "test": {
          "guessedname": "test",
          "static": "",
          "guessedtype": "function",
          "todo": "current implementation (intenionally) will not implicitly \nhandle html elements that are array-like (forms, selects, etc).",
          "description": "Evaluates the input to determine if it is an array, array-like, or \nsomething else.  This is used to handle the arguments collection \navailable within functions, and HTMLElement collections",
          "return": {
            "type": "int",
            "description": "a number indicating the results:\n0: Not an array or an array-like collection\n1: A real array. \n2: array-like collection."
          }
        },
        "some": {
          "guessedname": "some",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to iterate"
            },
            {
              "name": "f",
              "type": "Function",
              "description": "  the function to execute on each item"
            },
            {
              "name": "o",
              "type": "",
              "description": " Optional context object"
            }
          ],
          "description": "Executes the supplied function on each item in the array.\nReturning true from the processing function will stop the \nprocessing of the remaining\nitems.",
          "return": {
            "type": "boolean",
            "description": "true if the function returns true on\nany of the items in the array"
          }
        }
      },
      "name": "Array",
      "module": "yui",
      "namespace": "",
      "description": "Adds the following array utilities to the YUI instance.  Additional\narray helpers can be found in the collection component.",
      "file": "yui-array.js"
    },
    "DataType.XML": {
      "methods": {
        "format": {
          "guessedname": "format",
          "guessedtype": "function",
          "description": "Converts data to type XMLDocument.",
          "params": [
            {
              "name": "data",
              "type": "XMLDoc",
              "description": "  Data to convert."
            }
          ],
          "return": {
            "type": "String",
            "description": "String."
          }
        },
        "parse": {
          "guessedname": "parse",
          "guessedtype": "function",
          "description": "Converts data to type XMLDocument.",
          "params": [
            {
              "name": "data",
              "type": "String",
              "description": "  Data to convert."
            }
          ],
          "return": {
            "type": "XMLDoc",
            "description": "XML Document."
          }
        }
      },
      "shortname": "DataType.XML",
      "name": "DataType.XML",
      "guessedname": "LANG",
      "module": "datatype",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "file": "datatype-xml-format.js",
      "description": "DataType.XML provides a set of utility functions to operate against XML documents."
    },
    "Do": {
      "shortname": "Do",
      "methods": {
        "after": {
          "guessedname": "after",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "  the function to execute"
            },
            {
              "name": "obj",
              "type": "",
              "description": " the object hosting the method to displace"
            },
            {
              "name": "sFn",
              "type": "string",
              "description": "  the name of the method to displace"
            },
            {
              "name": "c",
              "type": "",
              "description": " The execution context for fn"
            }
          ],
          "description": "Execute the supplied method after the specified function",
          "return": {
            "type": "string",
            "description": "handle for the subscription"
          }
        },
        "_inject": {
          "guessedname": "_inject",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "when",
              "type": "string",
              "description": "  before or after"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  the function to execute"
            },
            {
              "name": "obj",
              "type": "",
              "description": " the object hosting the method to displace"
            },
            {
              "name": "sFn",
              "type": "string",
              "description": "  the name of the method to displace"
            },
            {
              "name": "c",
              "type": "",
              "description": " The execution context for fn"
            }
          ],
          "description": "Execute the supplied method after the specified function",
          "return": {
            "type": "string",
            "description": "handle for the subscription"
          }
        },
        "before": {
          "guessedname": "before",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "  the function to execute"
            },
            {
              "name": "obj",
              "type": "",
              "description": " the object hosting the method to displace"
            },
            {
              "name": "sFn",
              "type": "string",
              "description": "  the name of the method to displace"
            },
            {
              "name": "c",
              "type": "",
              "description": " The execution context for fn"
            }
          ],
          "description": "Execute the supplied method before the specified function",
          "return": {
            "type": "string",
            "description": "handle for the subscription"
          }
        },
        "detach": {
          "guessedname": "detach",
          "guessedtype": "function",
          "description": "Detach a before or after subscription",
          "params": [
            {
              "name": "handle",
              "type": "string",
              "description": "  the subscription handle"
            }
          ]
        }
      },
      "name": "Do",
      "guessedname": "BEFORE",
      "module": "event-custom",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "Allows for the insertion of methods that are executed before or after\na specified method",
      "file": "event-do.js",
      "properties": {
        "objs": {
          "guessedname": "objs",
          "static": "",
          "guessedtype": "property",
          "description": "Cache of objects touched by the utility"
        }
      }
    },
    "Assert.UnexpectedError": {
      "shortname": "UnexpectedError",
      "superclass": "Assert.Error",
      "name": "Assert.UnexpectedError",
      "extends": "Assert.Error",
      "guessedname": "UnexpectedError",
      "module": "test",
      "namespace": "Assert",
      "constructors": [
        {
          "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error.",
          "params": [
            {
              "name": "cause",
              "type": "Error",
              "description": " The unexpected error that caused this error to be \nthrown."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the error that occurred."
        },
        "stack": {
          "guessedname": "stack",
          "type": "String",
          "guessedtype": "property",
          "description": "Stack information for the error (if provided)."
        },
        "cause": {
          "guessedname": "cause",
          "type": "Error",
          "guessedtype": "property",
          "description": "The unexpected error that occurred."
        }
      }
    },
    "Overlay": {
      "shortname": "Overlay",
      "superclass": "Widget",
      "name": "Overlay",
      "extends": "Widget",
      "guessedname": "Overlay",
      "module": "overlay",
      "namespace": "",
      "constructors": [
        {
          "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support.",
          "params": [
            {
              "name": "object",
              "type": "Object",
              "description": " The user configuration for the instance."
            }
          ]
        }
      ],
      "guessedtype": "property",
      "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support.",
      "file": "Overlay.js",
      "uses": [
        "WidgetPosition",
        "WidgetStack",
        "WidgetPositionExt",
        "WidgetStdMod"
      ]
    },
    "Queue": {
      "shortname": "Queue",
      "methods": {
        "promote": {
          "guessedname": "promote",
          "guessedtype": "function",
          "description": "Moves the referenced item to the head of the queue",
          "params": [
            {
              "name": "item",
              "type": "MIXED",
              "description": "  an item in the queue"
            }
          ]
        },
        "size": {
          "guessedname": "size",
          "guessedtype": "function",
          "description": "Returns the current number of queued items",
          "return": {
            "type": "Number",
            "description": ""
          }
        },
        "add": {
          "guessedname": "add",
          "guessedtype": "function",
          "description": "Add 0..n items to the end of the queue",
          "params": [
            {
              "name": "item*",
              "type": "MIXED",
              "description": "  0..n items"
            }
          ]
        },
        "remove": {
          "guessedname": "remove",
          "guessedtype": "function",
          "description": "Removes the referenced item from the queue",
          "params": [
            {
              "name": "item",
              "type": "MIXED",
              "description": "  an item in the queue"
            }
          ]
        },
        "indexOf": {
          "guessedname": "indexOf",
          "guessedtype": "function",
          "description": "Returns the current index in the queue of the specified item",
          "params": [
            {
              "name": "needle",
              "type": "MIXED",
              "description": "  the item to search for"
            }
          ],
          "return": {
            "type": "Number",
            "description": "the index of the item or -1 if not found"
          }
        },
        "next": {
          "guessedname": "next",
          "guessedtype": "function",
          "description": "Get the next item in the queue.",
          "return": {
            "type": "MIXED",
            "description": "the next item in the queue"
          }
        },
        "_init": {
          "guessedname": "_init",
          "guessedtype": "function",
          "protected": "",
          "description": "Initialize the queue"
        }
      },
      "name": "Queue",
      "module": "yui",
      "namespace": "",
      "param": "item* {MIXED} 0..n items to seed the queue",
      "description": "A simple FIFO queue.  Items are added to the Queue with add(1..n items) and\nremoved using next().",
      "file": "queue-base.js",
      "properties": {
        "_q": {
          "guessedname": "_q",
          "type": "{Array}",
          "guessedtype": "property",
          "protected": "",
          "description": "The collection of enqueued items"
        }
      }
    },
    "Plugin.DragConstrained": {
      "shortname": "DragConstrained",
      "superclass": "Base",
      "methods": {
        "_checkTicks": {
          "guessedname": "_checkTicks",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "xy",
              "type": "Array",
              "description": " The XY coords for the Drag"
            },
            {
              "name": "r",
              "type": "Object",
              "description": " The optional region that we are bound to."
            }
          ],
          "description": "This method delegates the proper helper method for tick calculations",
          "return": {
            "type": "Array",
            "description": "The calced XY coords"
          }
        },
        "_cacheRegion": {
          "guessedname": "_cacheRegion",
          "private": "",
          "guessedtype": "function",
          "description": "Get's the region and caches it, called from window.resize and when the cache is null"
        },
        "inRegion": {
          "guessedname": "inRegion",
          "guessedtype": "function",
          "description": "Checks if the XY passed or the dragNode is inside the active region.",
          "params": [
            {
              "name": "xy",
              "type": "Array",
              "description": " Optional XY to check, if not supplied this.get('dragNode').getXY() is used."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True if the XY is inside the region, false otherwise."
          }
        },
        "_handleStart": {
          "guessedname": "_handleStart",
          "private": "",
          "guessedtype": "function",
          "description": "Fires on drag:start and clears the _regionCache"
        },
        "align": {
          "guessedname": "align",
          "guessedtype": "function",
          "description": "Modifies the Drag.actXY method from the after drag:align event. This is where the constraining happens."
        },
        "_checkRegion": {
          "guessedname": "_checkRegion",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "_xy",
              "type": "Array",
              "description": " The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region."
            }
          ],
          "description": "Check if xy is inside a given region, if not change to it be inside.",
          "return": {
            "type": "Array",
            "description": "The new XY that is inside the region"
          }
        },
        "getRegion": {
          "guessedname": "getRegion",
          "guessedtype": "function",
          "description": "Get the active region: viewport, node, custom region",
          "params": [
            {
              "name": "inc",
              "type": "Boolean",
              "description": " Include the node's height and width"
            }
          ],
          "return": {
            "type": "Object",
            "description": ""
          }
        }
      },
      "name": "Plugin.DragConstrained",
      "extends": "Base",
      "guessedname": "DRAG_NODE",
      "module": "dd",
      "namespace": "Plugin",
      "events": {
        "gutterChange": {
          "name": "gutterChange",
          "description": "Fires when the value for the configuration attribute 'gutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "constrain2regionChange": {
          "name": "constrain2regionChange",
          "description": "Fires when the value for the configuration attribute 'constrain2region' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "tickYChange": {
          "name": "tickYChange",
          "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "tickXChange": {
          "name": "tickXChange",
          "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "stickYChange": {
          "name": "stickYChange",
          "description": "Fires when the value for the configuration attribute 'stickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "constrain2viewChange": {
          "name": "constrain2viewChange",
          "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "stickXChange": {
          "name": "stickXChange",
          "description": "Fires when the value for the configuration attribute 'stickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "tickYArrayChange": {
          "name": "tickYArrayChange",
          "description": "Fires when the value for the configuration attribute 'tickYArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "constrain2nodeChange": {
          "name": "constrain2nodeChange",
          "description": "Fires when the value for the configuration attribute 'constrain2node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "tickXArrayChange": {
          "name": "tickXArrayChange",
          "description": "Fires when the value for the configuration attribute 'tickXArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "This is a plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a renodenode or viewport. It anode* supports tick based moves and XY axis constraints."
        }
      ],
      "guessedtype": "property",
      "description": "This is a plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a renodenode or viewport. It anode* supports tick based moves and XY axis constraints.",
      "file": "constrain.js",
      "configs": {
        "constrain2view": {
          "guessedname": "constrain2view",
          "type": "Object",
          "guessedtype": "property",
          "description": "Will attempt to constrain the drag node to the boundaries of the viewport region."
        },
        "tickX": {
          "guessedname": "tickX",
          "type": "Number\/false",
          "guessedtype": "property",
          "description": "The X tick offset the drag node should snap to on each drag move. False for no ticks. Default: false"
        },
        "tickY": {
          "guessedname": "tickY",
          "type": "Number\/false",
          "guessedtype": "property",
          "description": "The Y tick offset the drag node should snap to on each drag move. False for no ticks. Default: false"
        },
        "gutter": {
          "guessedname": "gutter",
          "type": "String",
          "guessedtype": "property",
          "description": "CSS style string for the gutter of a region (supports negative values): '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)"
        },
        "stickX": {
          "guessedname": "stickX",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Stick the drag movement to the X-Axis. Default: false"
        },
        "constrain2region": {
          "guessedname": "constrain2region",
          "type": "Object",
          "guessedtype": "property",
          "description": "An Object Literal containing a valid region (top, right, bottom, left) of page positions to constrain the drag node to."
        },
        "stickY": {
          "guessedname": "stickY",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Stick the drag movement to the Y-Axis"
        },
        "constrain2node": {
          "guessedname": "constrain2node",
          "type": "Object",
          "guessedtype": "property",
          "description": "Will attempt to constrain the drag node to the boundaries of this node."
        },
        "tickYArray": {
          "guessedname": "tickYArray",
          "type": "Array",
          "guessedtype": "property",
          "description": "An array of page coordinates to use as Y ticks for drag movement."
        },
        "tickXArray": {
          "guessedname": "tickXArray",
          "type": "Array",
          "guessedtype": "property",
          "description": "An array of page coordinates to use as X ticks for drag movement."
        }
      },
      "properties": {
        "con": {
          "guessedname": "NS",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The Constrained instance will be placed on the Drag instance under the con namespace."
        },
        "_regionCache": {
          "private": "",
          "guessedname": "_regionCache",
          "type": "Object",
          "guessedtype": "property",
          "description": "Store a cache of the region that we are constraining to"
        }
      }
    },
    "YUI~dump": {
      "shortname": "YUI~dump",
      "methods": {
        "dump": {
          "guessedname": "dump",
          "guessedtype": "function",
          "todo": "dumping a window is causing an unhandled exception in\nFireFox.\nThis method is in the 'dump' module, which is not bundled with\nthe core YUI object",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": "  The object to dump"
            },
            {
              "name": "d",
              "type": "int",
              "description": "  How deep to recurse child objects, default 3"
            }
          ],
          "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.",
          "return": {
            "type": "string",
            "description": "the dump result"
          }
        }
      },
      "name": "YUI~dump",
      "module": "dump",
      "namespace": "",
      "description": "The following methods are added to the YUI instance",
      "file": "dump.js"
    },
    "Assert.ComparisonFailure": {
      "shortname": "ComparisonFailure",
      "superclass": "Assert.Error",
      "methods": {
        "toString": {
          "guessedname": "getMessage",
          "guessedtype": "function",
          "description": "Returns a fully formatted error for an assertion failure. This message\nprovides information about the expected and actual values.",
          "return": {
            "type": "String",
            "description": "A string describing the error."
          }
        }
      },
      "name": "Assert.ComparisonFailure",
      "extends": "Assert.Error",
      "guessedname": "ComparisonFailure",
      "module": "test",
      "namespace": "Assert",
      "constructors": [
        {
          "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            },
            {
              "name": "expected",
              "type": "Object",
              "description": " The expected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value that caused the assertion to fail."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the error that occurred."
        },
        "expected": {
          "guessedname": "expected",
          "type": "Object",
          "guessedtype": "property",
          "description": "The expected value."
        },
        "actual": {
          "guessedname": "actual",
          "type": "Object",
          "guessedtype": "property",
          "description": "The actual value."
        }
      }
    },
    "ImgLoadImgObj": {
      "shortname": "ImgLoadImgObj",
      "superclass": "Base",
      "methods": {
        "_getImgEl": {
          "private": "",
          "guessedname": "_getImgEl",
          "returns": "{Object} DOM element of the image as a <code>Y.Node<\/code> object",
          "guessedtype": "function",
          "description": "Gets the object (as a <code>Y.Node<\/code>) of the DOM element indicated by \"<code>domId<\/code>\"."
        },
        "fetch": {
          "guessedname": "fetch",
          "guessedtype": "function",
          "description": "Displays the image; puts the URL into the DOM.\nThis method shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.",
          "params": [
            {
              "name": "withinY",
              "type": "Int",
              "description": "  The pixel distance from the top of the page, for which if the image lies within, it will be fetched. Undefined indicates that no check should be made, and the image should always be fetched"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether the image has been fetched (either during this execution or previously)"
          }
        },
        "_getYPos": {
          "private": "",
          "guessedname": "_getYPos",
          "returns": "{Object} The Y position of the image",
          "guessedtype": "function",
          "description": "Gets the Y position of the node in page coordinates.\nExpects that the page-coordinate position of the image won't change."
        },
        "_init": {
          "guessedname": "_init",
          "private": "",
          "guessedtype": "function",
          "description": "Initialize all private members needed for the group."
        }
      },
      "name": "ImgLoadImgObj",
      "extends": "Base",
      "guessedname": "ImgLoadImgObj",
      "module": "imageloader",
      "namespace": "",
      "events": {
        "widthChange": {
          "name": "widthChange",
          "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "heightChange": {
          "name": "heightChange",
          "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "setVisibleChange": {
          "name": "setVisibleChange",
          "description": "Fires when the value for the configuration attribute 'setVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "domIdChange": {
          "name": "domIdChange",
          "description": "Fires when the value for the configuration attribute 'domId' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "isPngChange": {
          "name": "isPngChange",
          "description": "Fires when the value for the configuration attribute 'isPng' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "sizingMethodChange": {
          "name": "sizingMethodChange",
          "description": "Fires when the value for the configuration attribute 'sizingMethod' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "srcUrlChange": {
          "name": "srcUrlChange",
          "description": "Fires when the value for the configuration attribute 'srcUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "bgUrlChange": {
          "name": "bgUrlChange",
          "description": "Fires when the value for the configuration attribute 'bgUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "enabledChange": {
          "name": "enabledChange",
          "description": "Fires when the value for the configuration attribute 'enabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Image objects to be registered with the groups"
        }
      ],
      "guessedtype": "function",
      "description": "Image objects to be registered with the groups",
      "configs": {
        "domId": {
          "guessedname": "domId",
          "type": "String",
          "guessedtype": "property",
          "description": "HTML DOM id of the image element."
        },
        "srcUrl": {
          "guessedname": "srcUrl",
          "type": "String",
          "guessedtype": "property",
          "description": "Source URL for the image.\nFor an image whose URL is specified by a \"<code>src<\/code>\" attribute in the DOM element."
        },
        "isPng": {
          "guessedname": "isPng",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether the image is a PNG.\nPNG images get special treatment in that the URL is specified through AlphaImageLoader for IE, versions 6 and earlier.\nOnly used with background images."
        },
        "bgUrl": {
          "guessedname": "bgUrl",
          "type": "String",
          "guessedtype": "property",
          "description": "Background URL for the image.\nFor an image whose URL is specified by \"<code>background-image<\/code>\" in the element's style."
        },
        "enabled": {
          "guessedname": "enabled",
          "type": "String",
          "guessedtype": "property",
          "description": "AlphaImageLoader <code>enabled<\/code> property to be set for the image.\nOnly set if <code>isPng<\/code> value for this image is set to <code>true<\/code>.\nDefaults to <code>true<\/code>."
        },
        "setVisible": {
          "guessedname": "setVisible",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether the image's <code>style.visibility<\/code> should be set to <code>visible<\/code> after the image is fetched.\nUsed when setting images as <code>visibility:hidden<\/code> prior to image fetching."
        },
        "height": {
          "guessedname": "height",
          "type": "Int",
          "guessedtype": "property",
          "description": "Pixel height of the image. Will be set as a <code>height<\/code> attribute on the DOM element after the image is fetched.\nDefaults to the natural height of the image (no <code>height<\/code> attribute will be set).\nUsually only used with src images."
        },
        "sizingMethod": {
          "guessedname": "sizingMethod",
          "type": "String",
          "guessedtype": "property",
          "description": "AlphaImageLoader <code>sizingMethod<\/code> property to be set for the image.\nOnly set if <code>isPng<\/code> value for this image is set to <code>true<\/code>.\nDefaults to <code>scale<\/code>."
        },
        "width": {
          "guessedname": "width",
          "type": "Int",
          "guessedtype": "property",
          "description": "Pixel width of the image. Will be set as a <code>width<\/code> attribute on the DOM element after the image is fetched.\nDefaults to the natural width of the image (no <code>width<\/code> attribute will be set).\nUsually only used with src images."
        }
      },
      "file": "imageloader.js",
      "properties": {
        "_imgEl": {
          "private": "",
          "guessedname": "_imgEl",
          "type": "Object",
          "guessedtype": "property",
          "description": "The Node object returned from <code>Y.get<\/code>, to avoid repeat calls to access the DOM."
        },
        "_yPos": {
          "private": "",
          "guessedname": "_yPos",
          "type": "Int",
          "guessedtype": "property",
          "description": "The vertical position returned from <code>getY<\/code>, to avoid repeat calls to access the DOM.\nThe Y position is checked only for images registered with fold-conditional groups. The position is checked first at page load (domready)\nand this caching enhancement assumes that the image's vertical position won't change after that first check."
        },
        "_fetched": {
          "private": "",
          "guessedname": "_fetched",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether this image has already been fetched.\nIn the case of fold-conditional groups, images won't be fetched twice."
        }
      }
    },
    "config": {
      "shortname": "config",
      "name": "config",
      "module": "yui",
      "namespace": "",
      "static": "",
      "description": "The config object contains all of the configuration options for\nthe YUI instance.  This object is supplied by the implementer \nwhen instantiating a YUI instance.  Some properties have default\nvalues if they are not supplied by the implementer.",
      "file": "yui.js",
      "properties": {
        "modules": {
          "type": "function",
          "description": "A list of module definitions to add to the list of YUI components.  \nThese components can then be dynamically loaded side by side with\nYUI via the use() method.See Loader.addModule for the supported\nmodule metadata."
        },
        "jsAttributes": {
          "type": "string",
          "description": "Object literal containing attributes to add to dynamically loaded script nodes."
        },
        "useBrowserConsole": {
          "default": "true",
          "type": "boolean",
          "description": "Log to the browser console if debug is on and the browser has a\nsupported console."
        },
        "combine": {
          "default": "true if 'base' is not supplied, false if it is.",
          "type": "boolean",
          "description": "Use the YUI combo service to reduce the number of http connections \nrequired to load your dependencies.\nFor dynamic loading."
        },
        "logExclude": {
          "type": "object",
          "description": "A hash of log sources that should be not be logged.  If specified, all sources are logged if not on this list."
        },
        "comboBase": {
          "type": "string",
          "description": "The YUI combo service base dir. Ex: http:\/\/yui.yahooapis.com\/combo?\nFor dynamic loading."
        },
        "doc": {
          "default": "the document hosting YUI",
          "type": "Document",
          "description": "The document associated with the 'win' configuration."
        },
        "purgethreshold": {
          "default": "20",
          "type": "int",
          "description": "The number of dynamic nodes to insert by default before\nautomatically removing them.  This applies to script nodes\nbecause remove the node will not make the evaluated script\nunavailable.  Dynamic CSS is not auto purged, because removing\na linked style sheet will also remove the style definitions."
        },
        "force": {
          "type": "string[]",
          "description": "A list of modules that should always be loaded when required, even if already \npresent on the page."
        },
        "timeout": {
          "type": "int",
          "description": "Number of milliseconds before a timeout occurs when dynamically \nloading nodes. If not set, there is no timeout."
        },
        "filter": {
          "type": "string|object",
          "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG<\/dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget<\/dd>\n<dt>RAW<\/dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).<\/dd>\n<\/dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n<\/pre>\nFor dynamic loading."
        },
        "insertBefore": {
          "type": "string",
          "description": "Node or id for a node that should be used as the insertion point for new nodes\nFor dynamic loading."
        },
        "loaderPath": {
          "default": "loader\/loader-min.js",
          "description": "The loader 'path' attribute to the loader itself.  This is combined\nwith the 'base' attribute to dynamically load the loader component\nwhen boostrapping with the get utility alone."
        },
        "injected": {
          "type": "object",
          "description": "Set to true if the yui seed file was dynamically loaded in \norder to bootstrap components relying on the window load event \nand the 'domready' custom event."
        },
        "dateFormat": {
          "guessedname": "dateFormat",
          "value": "\"%Y-%m-%d\"",
          "type": "string",
          "guessedtype": "property",
          "description": "The default date format"
        },
        "throwFail": {
          "default": "true",
          "type": "boolean",
          "description": "If throwFail is set, Y.fail will generate or re-throw a JS Error.  Otherwise the failure is logged."
        },
        "root": {
          "type": "string",
          "description": "The root path to prepend to module names for the combo service. Ex: 3.0.0b1\/build\/\nFor dynamic loading."
        },
        "logInclude": {
          "type": "object",
          "description": "A hash of log sources that should be logged.  If specified, only log messages from these sources will be logged."
        },
        "pollInterval": {
          "default": "20",
          "type": "int",
          "description": "The default interval when polling in milliseconds."
        },
        "onCSS": {
          "type": "function",
          "description": "Callback for the 'CSSComplete' event.  When dynamically loading YUI \ncomponents with CSS, this property fires when the CSS is finished\nloading but script loading is still ongoing.  This provides an\nopportunity to enhance the presentation of a loading page a little\nbit before the entire loading process is done."
        },
        "win": {
          "default": "the window hosting YUI",
          "type": "Window",
          "description": "The window\/frame that this instance should operate in."
        },
        "cssAttributes": {
          "type": "string",
          "description": "Object literal containing attributes to add to dynamically loaded link nodes."
        },
        "charset": {
          "type": "string",
          "description": "charset for dynamic nodes",
          "deprecated": "use jsAttributes cssAttributes"
        },
        "filters": {
          "type": "object",
          "description": "Hash of per-component filter specification.  If specified for a given component, \nthis overrides the filter config\nFor dynamic loading."
        },
        "debug": {
          "default": "true",
          "type": "boolean",
          "description": "Turn debug statements on or off."
        },
        "locale": {
          "guessedname": "locale",
          "value": "\"en\"",
          "type": "string",
          "guessedtype": "property",
          "description": "The default locale"
        },
        "core": {
          "type": "string[]",
          "description": "A list of modules that defines the YUI core (overrides the default)."
        },
        "windowResizeDelay": {
          "default": "40",
          "type": "int",
          "description": "The default interval when polling in milliseconds."
        },
        "ignore": {
          "type": "string[]",
          "description": "A list of modules that should never be dynamically loaded"
        },
        "secureBase": {
          "type": "string",
          "description": "The secure base dir (not implemented)\nFor dynamic loading."
        },
        "base": {
          "type": "string",
          "description": "Base directory for dynamic loading"
        }
      }
    },
    "Subscriber": {
      "shortname": "Subscriber",
      "methods": {
        "notify": {
          "guessedname": "notify",
          "guessedtype": "function",
          "description": "Executes the subscriber.",
          "params": [
            {
              "name": "args",
              "type": "Array",
              "description": "  Arguments array for the subscriber"
            },
            {
              "name": "ce",
              "type": "CustomEvent",
              "description": "  The custom event that sent the notification"
            }
          ]
        },
        "contains": {
          "guessedname": "contains",
          "guessedtype": "function",
          "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": " the function to execute"
            },
            {
              "name": "context",
              "type": "Object",
              "description": " optional 'this' keyword for the listener"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if the supplied arguments match this \nsubscriber's signature."
          }
        }
      },
      "name": "Subscriber",
      "guessedname": "Subscriber",
      "module": "event-custom",
      "namespace": "",
      "constructors": [
        {
          "description": "Stores the subscriber information to be used when the event fires.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "       The wrapped function to execute"
            },
            {
              "name": "context",
              "type": "Object",
              "description": "  The value of the keyword 'this' in the listener"
            },
            {
              "name": "args*",
              "type": "Array",
              "description": "       0..n additional arguments to supply the listener"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Stores the subscriber information to be used when the event fires.",
      "file": "event-custom.js",
      "properties": {
        "args": {
          "guessedname": "args",
          "type": "Array",
          "guessedtype": "property",
          "description": "Additional arguments to propagate to the subscriber"
        },
        "id": {
          "guessedname": "id",
          "type": "String",
          "guessedtype": "property",
          "description": "Unique subscriber id"
        },
        "events": {
          "guessedname": "events",
          "type": "{EventTarget}",
          "guessedtype": "property",
          "description": "Custom events for a given fire transaction."
        },
        "fn": {
          "guessedname": "fn",
          "type": "Function",
          "guessedtype": "property",
          "description": "The callback that will be execute when the event fires\nThis is wrapped by Y.rbind if obj was supplied."
        },
        "context": {
          "guessedname": "context",
          "type": "Object",
          "guessedtype": "property",
          "description": "Optional 'this' keyword for the listener"
        }
      }
    },
    "Plugin.DDWindowScroll": {
      "shortname": "DDWindowScroll",
      "superclass": "DD.Scroll",
      "name": "Plugin.DDWindowScroll",
      "extends": "DD.Scroll",
      "guessedname": "WS",
      "module": "dd",
      "namespace": "Plugin",
      "events": {
        "windowScrollChange": {
          "name": "windowScrollChange",
          "description": "Fires when the value for the configuration attribute 'windowScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Extends the Scroll class to make the window scroll while dragging."
        }
      ],
      "guessedtype": "function",
      "description": "Extends the Scroll class to make the window scroll while dragging.",
      "configs": {
        "windowScroll": {
          "guessedname": "windowScroll",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Turn on window scroll support, default: true"
        }
      },
      "file": "scroll.js"
    },
    "Event": {
      "shortname": "Event",
      "methods": {
        "_poll": {
          "private": "",
          "guessedname": "_poll",
          "static": "",
          "guessedtype": "function",
          "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable"
        },
        "nativeAdd": {
          "guessedname": "nativeAdd",
          "private": "",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "      the element to bind the handler to"
            },
            {
              "name": "type",
              "type": "string",
              "description": "   the type of event handler"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "      the callback to invoke"
            },
            {
              "name": "capture",
              "type": "boolen",
              "description": " capture or bubble phase"
            }
          ],
          "description": "Adds a DOM event directly without the caching, cleanup, context adj, etc"
        },
        "getListeners": {
          "guessedname": "getListeners",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement|string",
              "description": "  the element or element id to inspect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"
            }
          ],
          "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.",
          "return": {
            "type": "Y.Custom.Event",
            "description": "the custom event wrapper for the DOM event(s)"
          }
        },
        "getEvent": {
          "guessedname": "getEvent",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the event parameter from the handler"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " the element the listener was attached to"
            }
          ],
          "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.",
          "return": {
            "type": "Event",
            "description": "the event"
          }
        },
        "_load": {
          "private": "",
          "guessedname": "_load",
          "static": "",
          "guessedtype": "function",
          "description": "hook up any deferred listeners"
        },
        "generateId": {
          "guessedname": "generateId",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "",
              "description": " the element to create the id for"
            }
          ],
          "description": "Generates an unique ID for the element if it does not already \nhave one.",
          "return": {
            "type": "string",
            "description": "the resulting id of the element"
          }
        },
        "nativeRemove": {
          "guessedname": "nativeRemove",
          "private": "",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "      the element to bind the handler to"
            },
            {
              "name": "type",
              "type": "string",
              "description": "   the type of event handler"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "      the callback to invoke"
            },
            {
              "name": "capture",
              "type": "boolen",
              "description": " capture or bubble phase"
            }
          ],
          "description": "Basic remove listener"
        },
        "attach": {
          "guessedname": "attach",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "     The type of event to append"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "        The method the event invokes"
            },
            {
              "name": "el",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."
            },
            {
              "name": "context",
              "type": "Object",
              "description": " optional context object"
            },
            {
              "name": "args",
              "type": "Boolean|object",
              "description": " 0..n arguments to pass to the callback"
            }
          ],
          "description": "Adds an event listener",
          "return": {
            "type": "EventHandle",
            "description": "an object to that can be used to detach the listener"
          }
        },
        "purgeElement": {
          "guessedname": "purgeElement",
          "static": "",
          "guessedtype": "function",
          "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " the element to purge"
            },
            {
              "name": "recurse",
              "type": "boolean",
              "description": " recursively purge this element's children\nas well.  Use with caution."
            },
            {
              "name": "type",
              "type": "string",
              "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"
            }
          ]
        },
        "startInterval": {
          "guessedname": "startInterval",
          "private": "",
          "static": "",
          "guessedtype": "function"
        },
        "onContentReady": {
          "static": "",
          "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": " the id of the element to look for."
            },
            {
              "name": "fn",
              "type": "function",
              "description": " what to execute when the element is ready."
            },
            {
              "name": "p_obj",
              "type": "object",
              "description": " an optional object to be passed back as\na parameter to fn."
            },
            {
              "name": "p_override",
              "type": "boolean|object",
              "description": " If set to true, fn will execute\nin the context of p_obj.  If an object, fn will\nexectute in the context of that object"
            }
          ],
          "deprecated": "Use Y.on(\"contentready\")"
        },
        "detach": {
          "guessedname": "detach",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " the type of event to remove."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."
            },
            {
              "name": "el",
              "type": "String|HTMLElement|Array|NodeList|EventHandle",
              "description": " An \nevent handle, an id, an element reference, or a collection \nof ids and\/or elements to remove the listener from."
            }
          ],
          "description": "Removes an event listener.  Supports the signature the event was bound\nwith, but the preferred way to remove listeners is using the handle\nthat is returned when using Y.on",
          "return": {
            "type": "boolean",
            "description": "true if the unbind was successful, false otherwise."
          }
        },
        "onAvailable": {
          "static": "",
          "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>",
          "params": [
            {
              "name": "id",
              "type": "string||string[]",
              "description": " the id of the element, or an array\nof ids to look for."
            },
            {
              "name": "fn",
              "type": "function",
              "description": " what to execute when the element is found."
            },
            {
              "name": "p_obj",
              "type": "object",
              "description": " an optional object to be passed back as\na parameter to fn."
            },
            {
              "name": "p_override",
              "type": "boolean|object",
              "description": " If set to true, fn will execute\nin the context of p_obj, if set to an object it\nwill execute in the context of that object"
            },
            {
              "name": "checkContent",
              "type": "boolean",
              "description": "  check child node readiness (onContentReady)"
            }
          ],
          "deprecated": "Use Y.on(\"available\")"
        },
        "_isValidCollection": {
          "guessedname": "_isValidCollection",
          "private": "",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " the object to test"
            }
          ],
          "deprecated": "was not meant to be used directly",
          "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.",
          "return": {
            "type": "boolean",
            "description": "true if the object is array-like and populated"
          }
        },
        "_unload": {
          "private": "",
          "guessedname": "_unload",
          "static": "",
          "guessedtype": "function",
          "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event."
        }
      },
      "name": "Event",
      "guessedname": "add",
      "module": "event",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event.",
      "file": "event-dom.js",
      "properties": {
        "_el_events": {
          "private": "",
          "guessedname": "_el_events",
          "static": "",
          "guessedtype": "property",
          "description": "Custom event wrapper map DOM events.  Key is \nElement uid stamp.  Each item is a hash of custom event\nwrappers as provided in the _wrappers collection.  This\nprovides the infrastructure for getListeners."
        },
        "POLL_RETRYS": {
          "final": "",
          "guessedname": "POLL_RETRYS",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 1000@amp;40 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first)."
        },
        "DOMReady": {
          "guessedname": "DOMReady",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "True when the document is initially usable"
        },
        "_interval": {
          "private": "",
          "guessedname": "_interval",
          "static": "",
          "guessedtype": "property",
          "description": "poll handle"
        },
        "_avail": {
          "private": "",
          "guessedname": "_avail",
          "static": "",
          "guessedtype": "property",
          "description": "onAvailable listeners"
        },
        "_loadComplete": {
          "guessedname": "_loadComplete",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "True after the onload event has fired"
        },
        "_dri": {
          "private": "",
          "guessedname": "_dri",
          "static": "",
          "guessedtype": "property",
          "description": "document readystate poll handle"
        },
        "_retryCount": {
          "private": "",
          "guessedname": "_retryCount",
          "static": "",
          "guessedtype": "property",
          "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load."
        },
        "lastError": {
          "guessedname": "lastError",
          "static": "",
          "type": "Error",
          "guessedtype": "property",
          "description": "addListener\/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set"
        },
        "POLL_INTERVAL": {
          "final": "",
          "guessedname": "POLL_INTERVAL",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The poll interval in milliseconds"
        },
        "_wrappers": {
          "guessedname": "_wrappers",
          "private": "",
          "static": "",
          "type": "Y.Event.Custom",
          "guessedtype": "property",
          "description": "Custom event wrappers for DOM events.  Key is \n'event:' + Element uid stamp + event type"
        }
      }
    },
    "DataType.Date": {
      "shortname": "DataType.Date",
      "methods": {
        "format": {
          "guessedname": "format",
          "guessedtype": "function",
          "description": "Takes a native JavaScript Date and formats it as a string for display to user.",
          "params": [
            {
              "name": "oDate",
              "type": "Date",
              "description": "  Date."
            },
            {
              "name": "oConfig",
              "type": "Object} (Optional) Object literal of configuration values:\n<dl>\n<dt>format {String} (Optional)<\/dt>\n<dd>\n<p>\nAny strftime string is supported, such as \"%I:%M:%S %p\". strftime has several format specifiers defined by the Open group at \n<a href=\"http:\/\/www.opengroup.org\/onlinepubs\/007908799\/xsh\/strftime.html\">http:\/\/www.opengroup.org\/onlinepubs\/007908799\/xsh\/strftime.html<\/a>\nPHP added a few of its own, defined at <a href=\"http:\/\/www.php.net\/strftime\">http:\/\/www.php.net\/strftime<\/a>\n<\/p>\n<p>\nThis javascript implementation supports all the PHP specifiers and a few more.  The full list is below.\n<\/p>\n<p>\nIf not specified, it defaults to the ISO8601 standard date format: %Y-%m-%d.  This may be overridden by changing Y.config.dateFormat\n<\/p>\n<dl>\n<dt>%a<\/dt> <dd>abbreviated weekday name according to the current locale<\/dd>\n<dt>%A<\/dt> <dd>full weekday name according to the current locale<\/dd>\n<dt>%b<\/dt> <dd>abbreviated month name according to the current locale<\/dd>\n<dt>%B<\/dt> <dd>full month name according to the current locale<\/dd>\n<dt>%c<\/dt> <dd>preferred date and time representation for the current locale<\/dd>\n<dt>%C<\/dt> <dd>century number (the year divided by 100 and truncated to an integer, range 00 to 99)<\/dd>\n<dt>%d<\/dt> <dd>day of the month as a decimal number (range 01 to 31)<\/dd>\n<dt>%D<\/dt> <dd>same as %m\/%d\/%y<\/dd>\n<dt>%e<\/dt> <dd>day of the month as a decimal number, a single digit is preceded by a space (range \" 1\" to \"31\")<\/dd>\n<dt>%F<\/dt> <dd>same as %Y-%m-%d (ISO 8601 date format)<\/dd>\n<dt>%g<\/dt> <dd>like %G, but without the century<\/dd>\n<dt>%G<\/dt> <dd>The 4-digit year corresponding to the ISO week number<\/dd>\n<dt>%h<\/dt> <dd>same as %b<\/dd>\n<dt>%H<\/dt> <dd>hour as a decimal number using a 24-hour clock (range 00 to 23)<\/dd>\n<dt>%I<\/dt> <dd>hour as a decimal number using a 12-hour clock (range 01 to 12)<\/dd>\n<dt>%j<\/dt> <dd>day of the year as a decimal number (range 001 to 366)<\/dd>\n<dt>%k<\/dt> <dd>hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)<\/dd>\n<dt>%l<\/dt> <dd>hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) <\/dd>\n<dt>%m<\/dt> <dd>month as a decimal number (range 01 to 12)<\/dd>\n<dt>%M<\/dt> <dd>minute as a decimal number<\/dd>\n<dt>%n<\/dt> <dd>newline character<\/dd>\n<dt>%p<\/dt> <dd>either \"AM\" or \"PM\" according to the given time value, or the corresponding strings for the current locale<\/dd>\n<dt>%P<\/dt> <dd>like %p, but lower case<\/dd>\n<dt>%r<\/dt> <dd>time in a.m. and p.m. notation equal to %I:%M:%S %p<\/dd>\n<dt>%R<\/dt> <dd>time in 24 hour notation equal to %H:%M<\/dd>\n<dt>%s<\/dt> <dd>number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC<\/dd>\n<dt>%S<\/dt> <dd>second as a decimal number<\/dd>\n<dt>%t<\/dt> <dd>tab character<\/dd>\n<dt>%T<\/dt> <dd>current time, equal to %H:%M:%S<\/dd>\n<dt>%u<\/dt> <dd>weekday as a decimal number [1,7], with 1 representing Monday<\/dd>\n<dt>%U<\/dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Sunday as the first day of the first week<\/dd>\n<dt>%V<\/dt> <dd>The ISO 8601:1988 week number of the current year as a decimal number,\nrange 01 to 53, where week 1 is the first week that has at least 4 days\nin the current year, and with Monday as the first day of the week.<\/dd>\n<dt>%w<\/dt> <dd>day of the week as a decimal, Sunday being 0<\/dd>\n<dt>%W<\/dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Monday as the first day of the first week<\/dd>\n<dt>%x<\/dt> <dd>preferred date representation for the current locale without the time<\/dd>\n<dt>%X<\/dt> <dd>preferred time representation for the current locale without the date<\/dd>\n<dt>%y<\/dt> <dd>year as a decimal number without a century (range 00 to 99)<\/dd>\n<dt>%Y<\/dt> <dd>year as a decimal number including the century<\/dd>\n<dt>%z<\/dt> <dd>numerical time zone representation<\/dd>\n<dt>%Z<\/dt> <dd>time zone name or abbreviation<\/dd>\n<dt>%%<\/dt> <dd>a literal \"%\" character<\/dd>\n<\/dl>\n<\/dd>\n<dt>locale {String",
              "description": "  (Optional)<\/dt>\n<dd>\nThe locale to use when displaying days of week, months of the year, and other locale specific\nstrings. If not specified, this defaults to \"en\" (though this may be overridden by changing Y.config.locale).\nThe following locales are built in:\n<dl>\n<dt>en<\/dt>\n<dd>English<\/dd>\n<dt>en-US<\/dt>\n<dd>US English<\/dd>\n<dt>en-GB<\/dt>\n<dd>British English<\/dd>\n<dt>en-AU<\/dt>\n<dd>Australian English (identical to British English)<\/dd>\n<\/dl>\nMore locales may be added by subclassing of Y.DataType.Date.Locale[\"en\"].\nSee Y.DataType.Date.Locale for more information.\n<\/dd>\n<\/dl>"
            }
          ],
          "return": {
            "type": "String",
            "description": "Formatted date for display."
          }
        },
        "xPad": {
          "private": "",
          "guessedname": "xPad",
          "guessedtype": "function",
          "description": "Pad a number with leading spaces, zeroes or something else",
          "params": [
            {
              "name": "x",
              "type": "Number",
              "description": " \tThe number to be padded"
            },
            {
              "name": "pad",
              "type": "String",
              "description": "   The character to pad the number with"
            },
            {
              "name": "r",
              "type": "Number",
              "description": " \t(optional) The base of the pad, eg, 10 implies to two digits, 100 implies to 3 digits."
            }
          ]
        },
        "parse": {
          "guessedname": "parse",
          "guessedtype": "function",
          "description": "Converts data to type Date.",
          "params": [
            {
              "name": "data",
              "type": "String | Number",
              "description": "  Data to convert. Values supported by the Date constructor are supported."
            }
          ],
          "return": {
            "type": "Date",
            "description": "A Date, or null."
          }
        }
      },
      "name": "DataType.Date",
      "module": "datatype",
      "namespace": "",
      "static": "",
      "description": "DataType.Date provides a set of utility functions to operate against Date objects.",
      "file": "datatype-date-format.js"
    },
    "ClassNameManager": {
      "shortname": "ClassNameManager",
      "methods": {
        "getClassName": {
          "guessedname": "getClassName",
          "guessedtype": "function",
          "description": "Returns a class name prefixed with the the value of the \n<code>Y.config.classNamePrefix<\/code> attribute + the provided strings.\nUses the <code>Y.config.classNameDelimiter<\/code> attribute to delimit the \nprovided strings. E.g. Y.ClassNameManager.getClassName('foo','bar'); \/\/ yui-foo-bar",
          "params": [
            {
              "name": "+",
              "type": "String",
              "description": " one or more classname bits to be joined and prefixed"
            }
          ]
        }
      },
      "name": "ClassNameManager",
      "module": "classnamemanager",
      "namespace": "",
      "static": "",
      "description": "A singleton class providing: \n<ul>\n<li>Easy creation of prefixed class names<\/li>\n<li>Caching of previously created class names for improved performance.<\/li>\n<\/ul>",
      "file": "classnamemanager.js",
      "properties": {
        "Y.config.classNameDelimiter": {
          "default": "\"-\"",
          "static": "",
          "type": "{String}",
          "description": "Configuration property indicating the delimiter used to compose all CSS class names in\nthis YUI instance."
        },
        "Y.config.classNamePrefix": {
          "default": "\"yui\"",
          "static": "",
          "type": "{String}",
          "description": "Configuration property indicating the prefix for all CSS class names in this YUI instance."
        }
      }
    },
    "DOM": {
      "methods": {
        "elementByAxis": {
          "guessedname": "elementByAxis",
          "guessedtype": "function",
          "description": "Searches the element by the given axis for the first matching element.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The html element."
            },
            {
              "name": "axis",
              "type": "String",
              "description": " The axis to search (parentNode, nextSibling, previousSibling)."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " optional An optional boolean test to apply."
            },
            {
              "name": "all",
              "type": "Boolean",
              "description": " optional Whether all node types should be returned, or just element nodes.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, the first element is returned."
            }
          ],
          "return": {
            "type": "HTMLElement | null",
            "description": "The matching element or null if none found."
          }
        },
        "docHeight": {
          "guessedname": "docHeight",
          "guessedtype": "function",
          "description": "Document height",
          "return": {
            "type": "Number",
            "description": "The current height of the document."
          }
        },
        "removeClass": {
          "guessedname": "removeClass",
          "guessedtype": "function",
          "description": "Removes a class name from a given element.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The DOM element."
            },
            {
              "name": "className",
              "type": "String",
              "description": " the class name to remove from the class attribute"
            }
          ]
        },
        "setX": {
          "guessedname": "setX",
          "guessedtype": "function",
          "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
          "params": [
            {
              "name": "element",
              "type": "",
              "description": " The target element"
            },
            {
              "name": "x",
              "type": "Int",
              "description": " The X values for new position (coordinates are page-based)"
            }
          ]
        },
        "hasClass": {
          "guessedname": "hasClass",
          "guessedtype": "function",
          "description": "Determines whether a DOM element has the given className.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The DOM element."
            },
            {
              "name": "className",
              "type": "String",
              "description": " the class name to search for"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the element has the given class."
          }
        },
        "docWidth": {
          "guessedname": "docWidth",
          "guessedtype": "function",
          "description": "Document width",
          "return": {
            "type": "Number",
            "description": "The current width of the document."
          }
        },
        "setY": {
          "guessedname": "setY",
          "guessedtype": "function",
          "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
          "params": [
            {
              "name": "element",
              "type": "",
              "description": " The target element"
            },
            {
              "name": "y",
              "type": "Int",
              "description": " The Y values for new position (coordinates are page-based)"
            }
          ]
        },
        "winWidth": {
          "guessedname": "winWidth",
          "guessedtype": "function",
          "description": "Returns the inner width of the viewport (exludes scrollbar).",
          "return": {
            "type": "Number",
            "description": "The current width of the viewport."
          }
        },
        "inDoc": {
          "guessedname": "inDoc",
          "guessedtype": "function",
          "description": "Determines whether or not the HTMLElement is part of the document.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The containing html element."
            },
            {
              "name": "doc",
              "type": "HTMLElement",
              "description": " optional The document to check."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the element is attached to the document."
          }
        },
        "_getDoc": {
          "guessedname": "_getDoc",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " optional Target element."
            }
          ],
          "description": "returns the appropriate document.",
          "return": {
            "type": "Object",
            "description": "The document for the given element or the default document."
          }
        },
        "setAttibute": {
          "guessedname": "setAttribute",
          "guessedtype": "function",
          "description": "Provides a normalized attribute interface.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement",
              "description": " The target element for the attribute."
            },
            {
              "name": "attr",
              "type": "String",
              "description": " The attribute to set."
            },
            {
              "name": "val",
              "type": "String",
              "description": " The value of the attribute."
            }
          ]
        },
        "setXY": {
          "guessedname": "setXY",
          "guessedtype": "function",
          "description": "Set the position of an html element in page coordinates.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
          "params": [
            {
              "name": "element",
              "type": "",
              "description": " The target element"
            },
            {
              "name": "xy",
              "type": "Array",
              "description": " Contains X & Y values for new position (coordinates are page-based)"
            },
            {
              "name": "noRetry",
              "type": "Boolean",
              "description": " By default we try and set the position a second time if the first fails"
            }
          ]
        },
        "getStyle": {
          "guessedname": "getStyle",
          "guessedtype": "function",
          "description": "Returns the current style value for the given property.",
          "params": [
            {
              "name": "An",
              "type": "HTMLElement",
              "description": " HTMLElement to get the style from."
            },
            {
              "name": "att",
              "type": "String",
              "description": " The style property to get."
            }
          ]
        },
        "docScrollX": {
          "guessedname": "docScrollX",
          "guessedtype": "function",
          "description": "Amount page has been scroll horizontally",
          "return": {
            "type": "Number",
            "description": "The current amount the screen is scrolled horizontally."
          }
        },
        "addClass": {
          "guessedname": "addClass",
          "guessedtype": "function",
          "description": "Adds a class name to a given DOM element.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The DOM element."
            },
            {
              "name": "className",
              "type": "String",
              "description": " the class name to add to the class attribute"
            }
          ]
        },
        "getComputedStyle": {
          "guessedname": "getComputedStyle",
          "guessedtype": "function",
          "description": "Returns the computed style for the given node.",
          "params": [
            {
              "name": "An",
              "type": "HTMLElement",
              "description": " HTMLElement to get the style from."
            },
            {
              "name": "att",
              "type": "String",
              "description": " The style property to get."
            }
          ],
          "return": {
            "type": "String",
            "description": "The computed value of the style property."
          }
        },
        "getText": {
          "guessedname": "getText",
          "guessedtype": "property",
          "description": "Returns the text content of the HTMLElement.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The html element."
            }
          ],
          "return": {
            "type": "String",
            "description": "The text content of the element (includes text of any descending elements)."
          }
        },
        "addHTML": {
          "guessedname": "addHTML",
          "guessedtype": "function",
          "description": "Inserts content in a node at the given location",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The node to insert into"
            },
            {
              "name": "content",
              "type": "String",
              "description": " The content to be inserted"
            },
            {
              "name": "where",
              "type": "String",
              "description": " Where to insert the content; default is after lastChild"
            }
          ]
        },
        "getAttibute": {
          "guessedname": "getAttribute",
          "guessedtype": "function",
          "description": "Provides a normalized attribute interface.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement",
              "description": " The target element for the attribute."
            },
            {
              "name": "attr",
              "type": "String",
              "description": " The attribute to get."
            }
          ],
          "return": {
            "type": "String",
            "description": "The current value of the attribute."
          }
        },
        "setText": {
          "guessedname": "setText",
          "guessedtype": "property",
          "description": "Sets the text content of the HTMLElement.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The html element."
            },
            {
              "name": "content",
              "type": "String",
              "description": " The content to add."
            }
          ]
        },
        "docScrollY": {
          "guessedname": "docScrollY",
          "guessedtype": "function",
          "description": "Amount page has been scroll vertically",
          "return": {
            "type": "Number",
            "description": "The current amount the screen is scrolled vertically."
          }
        },
        "_bruteContains": {
          "guessedname": "_bruteContains",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The containing html element."
            },
            {
              "name": "needle",
              "type": "HTMLElement",
              "description": " The html element that may be contained."
            }
          ],
          "description": "Brute force version of contains.\nUsed for browsers without contains support for non-HTMLElement Nodes (textNodes, etc).",
          "return": {
            "type": "Boolean",
            "description": "Whether or not the element is or contains the needle."
          }
        },
        "setStyle": {
          "guessedname": "setStyle",
          "guessedtype": "function",
          "description": "Sets a style property for a given element.",
          "params": [
            {
              "name": "An",
              "type": "HTMLElement",
              "description": " HTMLElement to apply the style to."
            },
            {
              "name": "att",
              "type": "String",
              "description": " The style property to set."
            },
            {
              "name": "val",
              "type": "String|Number",
              "description": " The value."
            }
          ]
        },
        "_getRegExp": {
          "guessedname": "_getRegExp",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": " The string to convert to a regular expression."
            },
            {
              "name": "flags",
              "type": "String",
              "description": " optional An optinal string of flags."
            }
          ],
          "description": "Memoizes dynamic regular expressions to boost runtime performance.",
          "return": {
            "type": "RegExp",
            "description": "An instance of RegExp"
          }
        },
        "getXY": {
          "guessedname": "getXY",
          "guessedtype": "function",
          "description": "Gets the current position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).",
          "params": [
            {
              "name": "element",
              "type": "",
              "description": " The target element"
            }
          ],
          "return": {
            "type": "Array",
            "description": "The XY position of the element\nTODO: test inDocument\/display?"
          }
        },
        "winHeight": {
          "guessedname": "winHeight",
          "guessedtype": "function",
          "description": "Returns the inner height of the viewport (exludes scrollbar).",
          "return": {
            "type": "Number",
            "description": "The current height of the viewport."
          }
        },
        "toggleClass": {
          "guessedname": "toggleClass",
          "guessedtype": "function",
          "description": "If the className exists on the node it is removed, if it doesn't exist it is added.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The DOM element."
            },
            {
              "name": "className",
              "type": "String",
              "description": " the class name to be toggled"
            }
          ]
        },
        "setStyles": {
          "guessedname": "setStyles",
          "guessedtype": "function",
          "description": "Sets multiple style properties.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " An HTMLElement to apply the styles to."
            },
            {
              "name": "hash",
              "type": "Object",
              "description": " An object literal of property:value pairs."
            }
          ]
        },
        "getX": {
          "guessedname": "getX",
          "guessedtype": "function",
          "description": "Gets the current X position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).",
          "params": [
            {
              "name": "element",
              "type": "",
              "description": " The target element"
            }
          ],
          "return": {
            "type": "Int",
            "description": "The X position of the element"
          }
        },
        "byId": {
          "guessedname": "byId",
          "guessedtype": "function",
          "description": "Returns the HTMLElement with the given ID (Wrapper for document.getElementById).",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id attribute"
            },
            {
              "name": "doc",
              "type": "Object",
              "description": " optional The document to search. Defaults to current document"
            }
          ],
          "return": {
            "type": "HTMLElement | null",
            "description": "The HTMLElement with the id, or null if none found."
          }
        },
        "_getWin": {
          "guessedname": "_getWin",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " optional Target element."
            }
          ],
          "description": "returns the appropriate window.",
          "return": {
            "type": "Object",
            "description": "The window for the given element or the default window."
          }
        },
        "getY": {
          "guessedname": "getY",
          "guessedtype": "function",
          "description": "Gets the current Y position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).",
          "params": [
            {
              "name": "element",
              "type": "",
              "description": " The target element"
            }
          ],
          "return": {
            "type": "Int",
            "description": "The Y position of the element"
          }
        },
        "create": {
          "guessedname": "create",
          "guessedtype": "function",
          "description": "Creates a new dom node using the provided markup string.",
          "params": [
            {
              "name": "html",
              "type": "String",
              "description": " The markup used to create the element"
            },
            {
              "name": "doc",
              "type": "HTMLDocument",
              "description": " An optional document context"
            }
          ]
        },
        "replaceClass": {
          "guessedname": "replaceClass",
          "guessedtype": "function",
          "description": "Replace a class with another class for a given element.\nIf no oldClassName is present, the newClassName is simply added.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The DOM element."
            },
            {
              "name": "oldClassName",
              "type": "String",
              "description": " the class name to be replaced"
            },
            {
              "name": "newClassName",
              "type": "String",
              "description": " the class name that will be replacing the old class name"
            }
          ]
        },
        "contains": {
          "guessedname": "contains",
          "guessedtype": "function",
          "description": "Determines whether or not one HTMLElement is or contains another HTMLElement.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The containing html element."
            },
            {
              "name": "needle",
              "type": "HTMLElement",
              "description": " The html element that may be contained."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the element is or contains the needle."
          }
        }
      },
      "shortname": "DOM",
      "name": "DOM",
      "guessedname": "NODE_TYPE",
      "module": "dom",
      "namespace": "",
      "guessedtype": "property",
      "file": "dom.js",
      "description": "Provides DOM helper methods."
    },
    "DataSchema.Array": {
      "shortname": "DataSchema.Array",
      "superclass": "DataSchema.Base",
      "methods": {
        "apply": {
          "guessedname": "apply",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "schema",
              "type": "Object",
              "description": "  Schema to apply."
            },
            {
              "name": "data",
              "type": "Object",
              "description": "  Array data."
            }
          ],
          "description": "Applies a given schema to given Array data.",
          "return": {
            "type": "Object",
            "description": "Schema-parsed data."
          }
        },
        "_parseResults": {
          "guessedname": "_parseResults",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "fields",
              "type": "Array",
              "description": "  Schema to parse against."
            },
            {
              "name": "array_in",
              "type": "Array",
              "description": "  Array to parse."
            },
            {
              "name": "data_out",
              "type": "Object",
              "description": "  In-progress parsed data to update."
            }
          ],
          "description": "Schema-parsed list of results from full data",
          "return": {
            "type": "Object",
            "description": "Parsed data object."
          }
        }
      },
      "name": "DataSchema.Array",
      "extends": "DataSchema.Base",
      "guessedname": "LANG",
      "module": "dataschema",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "Array subclass for the DataSchema Utility.",
      "file": "dataschema-array.js"
    },
    "EventFacade": {
      "name": "EventFacade",
      "shortname": "EventFacade",
      "methods": {
        "preventDefault": {
          "guessedname": "preventDefault",
          "guessedtype": "function",
          "description": "Prevents the event's default behavior"
        },
        "halt": {
          "guessedname": "halt",
          "guessedtype": "function",
          "description": "Stops the event propagation and prevents the default\nevent behavior.",
          "params": [
            {
              "name": "immediate",
              "type": "boolean",
              "description": "  if true additional listeners\non the current target will not be executed"
            }
          ]
        },
        "stopPropagation": {
          "guessedname": "stopPropagation",
          "guessedtype": "function",
          "description": "Stops the propagation to the next bubble target"
        },
        "stopImmediatePropagation": {
          "guessedname": "stopImmediatePropagation",
          "guessedtype": "function",
          "description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target."
        }
      },
      "guessedname": "EventFacade",
      "module": "event-custom",
      "namespace": "",
      "param": "e {Event} the custom event",
      "guessedtype": "function",
      "description": "Wraps and protects a custom event for use when emitFacade is set to true.\nRequires the event-custom-complex module",
      "file": "event-facade.js",
      "properties": {
        "details": {
          "guessedname": "details",
          "type": "Array",
          "guessedtype": "property",
          "description": "The arguments passed to fire"
        },
        "type": {
          "guessedname": "type",
          "type": "string",
          "guessedtype": "property",
          "description": "The event type"
        },
        "target": {
          "propery": "target",
          "guessedname": "target",
          "type": "Node",
          "guessedtype": "property",
          "description": "Node reference for the targeted eventtarget"
        },
        "relatedTarget": {
          "propery": "relatedTarget",
          "guessedname": "relatedTarget",
          "type": "Node",
          "guessedtype": "property",
          "description": "Node reference to the relatedTarget"
        },
        "currentTarget": {
          "propery": "currentTarget",
          "guessedname": "currentTarget",
          "type": "Node",
          "guessedtype": "property",
          "description": "Node reference for the element that the listener was attached to."
        }
      }
    },
    "Slider": {
      "shortname": "Slider",
      "superclass": "Widget",
      "methods": {
        "_validateNewMin": {
          "guessedname": "_validateNewMin",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "MIXED",
              "description": "  proposed value for the min attribute"
            }
          ],
          "description": "Validator applied to the min attribute.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_afterDisabledChange": {
          "guessedname": "_afterDisabledChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Locks or unlocks the DD instance in response to a change in the disabled\nattribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  disabledChange custom event"
            }
          ]
        },
        "_initThumb": {
          "guessedname": "_initThumb",
          "guessedtype": "function",
          "protected": "",
          "description": "<p>Creates the thumb element (not image) if not provided and not\ndiscovered via HTML_PARSER.  If the thumb is an <code>img<\/code> element\nbut no thumbImage configured or discovered, reassigns the thumb element\nto the thumbImage and defaults the thumb element as a div.<\/p>\n<p>Makes sure the thumb is a child of the rail element and calls\n_initThumbImage if thumbImage is provided.<\/p>"
        },
        "_validateNewRail": {
          "guessedname": "_validateNewRail",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "MIXED",
              "description": "  proposed value for the rail attribute"
            }
          ],
          "description": "Validator applied to the rail attribute. Rejects all values after the\nSlider has been rendered.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_validateNewThumb": {
          "guessedname": "_validateNewThumb",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "MIXED",
              "description": "  proposed value for the thumb attribute"
            }
          ],
          "description": "Validator applied to the thumb attribute.  Rejects all values after the\nSlider has been rendered.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_defSyncFn": {
          "guessedname": "_defSyncFn",
          "guessedtype": "function",
          "protected": "",
          "description": "The default synchronization behavior, updating the Slider's DOM state to\nmatch the current attribute values.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  Internal sync event"
            }
          ]
        },
        "renderUI": {
          "guessedname": "renderUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Create the DOM structure for the Slider."
        },
        "_initRail": {
          "guessedname": "_initRail",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates the rail element if not provided and not discovered via\nHTML_PARSER."
        },
        "_defThumbDragFn": {
          "guessedname": "_defThumbDragFn",
          "guessedtype": "function",
          "protected": "",
          "description": "The default value update behavior in response to Slider thumb\ninteraction.  Calculates the value using stored offsets, the _factor\nmultiplier and the min value.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the internal thumbDrag event"
            }
          ]
        },
        "_afterMaxChange": {
          "guessedname": "_afterMaxChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the Slider UI in response to change in the max attribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  maxChange custom event"
            }
          ]
        },
        "_resetDDCacheRegion": {
          "guessedname": "_resetDDCacheRegion",
          "guessedtype": "function",
          "protected": "",
          "description": "Resets the cached region inside the DD constrain instance to support\nrepositioning the Slider after instantiation."
        },
        "_afterRailSizeChange": {
          "guessedname": "_afterRailSizeChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the Slider UI in response to change in the railSize attribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  railSizeChange custom event"
            }
          ]
        },
        "_validateNewAxis": {
          "guessedname": "_validateNewAxis",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "String",
              "description": "  proposed value for the axis attribute"
            }
          ],
          "description": "Validator applied to new values for the axis attribute. Only\n&quot;x&quot; and &quot;y&quot; are permitted.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_imageLoaded": {
          "guessedname": "_imageLoaded",
          "guessedtype": "function",
          "protected": "",
          "description": "Event handler assigned to the thumbImage's load and error event if it\nwas not loaded prior to instantiation.  Restores the disabled value.",
          "params": [
            {
              "name": "img",
              "type": "Node",
              "description": "  The thumbImage Node"
            },
            {
              "name": "e",
              "type": "Event",
              "description": "  load or error event fired by the thumbImage"
            }
          ]
        },
        "_initRailDD": {
          "guessedname": "_initRailDD",
          "guessedtype": "function",
          "protected": "",
          "description": "Subscribes to the rail Node's mousedown event to actuate the thumb when\nbackgroundEnabled is true."
        },
        "_ready": {
          "guessedname": "_ready",
          "guessedtype": "function",
          "protected": "",
          "description": "Applies a class to the content box if the thumbImage failed to resolve,\nthe fires the internal sync event triggering a sync between UI and\nstate.",
          "params": [
            {
              "name": "img",
              "type": "Node",
              "description": "  the thumbImage Node"
            },
            {
              "name": "error",
              "type": "Boolean",
              "description": "  Indicates an error while loading the thumbImage"
            }
          ]
        },
        "_convertValueToOffset": {
          "guessedname": "_convertValueToOffset",
          "guessedtype": "function",
          "protected": "",
          "description": "Converts a value to a pixel offset for the thumb position on the rail.",
          "params": [
            {
              "name": "v",
              "type": "Number",
              "description": "  value between the Slider's min and max"
            }
          ]
        },
        "_afterThumbChange": {
          "guessedname": "_afterThumbChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Replaces the thumb Node in response to a change in the thumb attribute.\nThis only has effect after the Slider is rendered.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  thumbChange custom event"
            }
          ]
        },
        "_uiPositionThumb": {
          "guessedname": "_uiPositionThumb",
          "guessedtype": "function",
          "protected": "",
          "description": "Places the thumb at a particular X or Y location based on the configured\naxis.",
          "params": [
            {
              "name": "xy",
              "type": "Number",
              "description": "  the desired left or top pixel position of the thumb\nin relation to the rail Node."
            }
          ]
        },
        "_uiSetRailSize": {
          "guessedname": "_uiSetRailSize",
          "guessedtype": "function",
          "protected": "",
          "description": "Stores the rail Node's pixel height or width, depending on the Slider's\naxis, for use in calculating thumb position from the value."
        },
        "_defPositionThumbFn": {
          "guessedname": "_defPositionThumbFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Calls _uiPositionThumb with the value of the custom event's\n&quot;offset&quot; property.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the positionThumb custom event"
            }
          ]
        },
        "_isImageLoaded": {
          "guessedname": "_isImageLoaded",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "img",
              "type": "Node",
              "description": "  <code>img<\/code> Node"
            }
          ],
          "description": "Used to determine if the image resource loaded successfully or there was\nan error.\nNOTES:\n<ul>\n<li>img load error fired xbrowser for image resources not yet resolved<\/li>\n<li>img.complete reports false in IE for images not yet loaded as well as images that failed to load<\/li>\n<li>img.complete true && img.naturalWidth == 0 in FF and Safari indicate image failed to load<\/li>\n<li>img.complete && img.width == 0 in Opera indicates image failed to load<\/li>\n<\/ul>",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_handleRailMouseDown": {
          "guessedname": "_handleRailMouseDown",
          "guessedtype": "function",
          "protected": "",
          "description": "If the Slider is not disabled and railEnabled is true, moves the thumb\nto the mousedown position and hands control over to DD.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  Mousedown event facade"
            }
          ]
        },
        "_setAxisFn": {
          "guessedname": "_setAxisFn",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "String",
              "description": "  proposed value for the axis attribute"
            }
          ],
          "description": "Setter applied to the input when updating the axis attribute.",
          "return": {
            "type": "String",
            "description": "lowercased first character of the input string"
          }
        },
        "_setThumbImageFn": {
          "guessedname": "_setThumbImageFn",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "Node|String|HTMLElement",
              "description": "  The thumbImage element Node, selector,\nor image URL"
            }
          ],
          "description": "Setter applied to the input when updating the thumbImage attribute.\nInput can be a Node, raw HTMLElement, selector string to locate it, or\nthe URL for an image resource.\nString input will be treated as a selector.  If no element is found using\nthe selector, an <code>img<\/code> Node will be created with the string\nused as the <code>src<\/code> attribute.",
          "return": {
            "type": "Node",
            "description": "The Node if found or created.  Otherwise null."
          }
        },
        "_setThumbFn": {
          "guessedname": "_setThumbFn",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "Node|String|HTMLElement",
              "description": "  The thumb element Node or selector"
            }
          ],
          "description": "Setter applied to the input when updating the thumb attribute.  Input can\nbe a Node, raw HTMLElement, or a selector string to locate it.",
          "return": {
            "type": "Node",
            "description": "The Node if found.  Otherwise null."
          }
        },
        "syncUI": {
          "guessedname": "syncUI",
          "guessedtype": "function",
          "description": "Synchronizes the DOM state with the attribute settings (most notably\nrailSize and value).  If thumbImage is provided and is still loading,\nsync is delayed until it is complete, since the image's dimensions are\ntaken into consideration for calculations."
        },
        "_onDDStartDrag": {
          "guessedname": "_onDDStartDrag",
          "guessedtype": "function",
          "protected": "",
          "description": "Caches the current page position of the rail element and fires the\nslideStart event in response to the DD's drag:start.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the DD instance's drag:start custom event"
            }
          ]
        },
        "_convertOffsetToValue": {
          "guessedname": "_convertOffsetToValue",
          "guessedtype": "function",
          "protected": "",
          "description": "Converts a pixel offset of the thumb on the rail to a value.",
          "params": [
            {
              "name": "v",
              "type": "Number",
              "description": "  pixel offset of the thumb on the rail"
            }
          ]
        },
        "setValue": {
          "guessedname": "setValue",
          "guessedtype": "function",
          "description": "Convenience method for updating the current value of the Slider.\nEquivalent to <code>slider.set(&quot;value&quot;,val)<\/code>.",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  the new value"
            }
          ]
        },
        "_stallDisabledChange": {
          "guessedname": "_stallDisabledChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Method subscribed to the disabledChange event when thumbImage is being\nloaded.  Prevents manually enabling the Slider until the thumbImage\nresource is resolved.  Intended value is stored during load and set upon\ncompletion.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  Change event for the disabled attribute"
            }
          ]
        },
        "_bindThumbDD": {
          "guessedname": "_bindThumbDD",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates the Y.DD instance used to handle the thumb interaction."
        },
        "_afterValueChange": {
          "guessedname": "_afterValueChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Fires the internal positionThumb event in response to a change in the\nvalue attribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  valueChange custom event"
            }
          ]
        },
        "initializer": {
          "guessedname": "initializer",
          "guessedtype": "function",
          "protected": "",
          "description": "Construction logic executed durint Slider instantiation. Subscribes to\nafter events for min, max, and railSize.  Publishes custom events\nincluding slideStart and slideEnd."
        },
        "_setRailFn": {
          "guessedname": "_setRailFn",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "Node|String|HTMLElement",
              "description": "  The rail element Node or selector"
            }
          ],
          "description": "Setter applied to the input when updating the rail attribute.  Input can\nbe a Node, raw HTMLElement, or a selector string to locate it.",
          "return": {
            "type": "Node",
            "description": "The Node if found.  Otherwise null."
          }
        },
        "_validateNewMax": {
          "guessedname": "_validateNewMax",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "MIXED",
              "description": "  proposed value for the max attribute"
            }
          ],
          "description": "Validator applied to the max attribute.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_validateNewThumbImage": {
          "guessedname": "_validateNewThumbImage",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "MIXED",
              "description": "  proposed value for the thumbImage attribute"
            }
          ],
          "description": "Validator applied to the thumbImage attribute.  Rejects all values after\nthe Slider has been rendered.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_setFactor": {
          "guessedname": "_setFactor",
          "guessedtype": "function",
          "protected": "",
          "description": "Calculates the multiplier used to translate the value into a thumb\nposition."
        },
        "_isDisplayNone": {
          "guessedname": "_isDisplayNone",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "el",
              "type": "Node",
              "description": "  ancestor node as the function walks up the parent axis"
            }
          ],
          "description": "Helper function to search up the ancestor axis looking for a node with\nstyle display: none.  This is passed as a function to node.ancestor(..)\nto test if a given node is in the displayed DOM and can get accurate\npositioning information.",
          "return": {
            "type": "Boolean",
            "description": "true if the node is styled with display: none"
          }
        },
        "_onDDEndDrag": {
          "guessedname": "_onDDEndDrag",
          "guessedtype": "function",
          "protected": "",
          "description": "Fires the slideEnd event.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the DD instance's drag:end custom event"
            }
          ]
        },
        "_refresh": {
          "guessedname": "_refresh",
          "guessedtype": "function",
          "protected": "",
          "description": "Common handler to call syncUI in response to change events that occurred\nafter the Slider is rendered.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  An attribute change event"
            }
          ]
        },
        "bindUI": {
          "guessedname": "bindUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates the Y.DD instance used to handle the thumb movement and binds\nSlider interaction to the configured value model."
        },
        "_setThumbOffset": {
          "guessedname": "_setThumbOffset",
          "guessedtype": "function",
          "protected": "",
          "description": "Establishes the point in the thumb that should align to the rail\nposition representing the calculated value."
        },
        "_validateNewValue": {
          "guessedname": "_validateNewValue",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "MIXED",
              "description": "  proposed value for the value attribute"
            }
          ],
          "description": "Validator applied to the value attribute.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_onDDDrag": {
          "guessedname": "_onDDDrag",
          "guessedtype": "function",
          "protected": "",
          "description": "Fires the thumbDrag event to queue Slider value update.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the DD instance's drag:drag custom event"
            }
          ]
        },
        "_afterThumbImageChange": {
          "guessedname": "_afterThumbImageChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets or replaces the thumb's contained <code>img<\/code> Node with the\nnew Node in response to a change in the thumbImage attribute.  This only\nhas effect after the Slider is rendered.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  thumbImageChange custom event"
            }
          ]
        },
        "getValue": {
          "guessedname": "getValue",
          "guessedtype": "function",
          "description": "Convenience method for accessing the current value of the Slider.\nEquivalent to <code>slider.get(&quot;value&quot;)<\/code>.",
          "return": {
            "type": "Number",
            "description": "the value"
          }
        },
        "_afterMinChange": {
          "guessedname": "_afterMinChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the Slider UI in response to change in the min attribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  minChange custom event"
            }
          ]
        },
        "_initThumbImage": {
          "guessedname": "_initThumbImage",
          "guessedtype": "function",
          "protected": "",
          "description": "Ensures the thumbImage is a child of the thumb element."
        },
        "_setRailOffsetXY": {
          "guessedname": "_setRailOffsetXY",
          "guessedtype": "function",
          "protected": "",
          "description": "Store the current XY position of the rail Node on the page.  For use in\ncalculating thumb position from value."
        },
        "_validateNewRailSize": {
          "guessedname": "_validateNewRailSize",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "v",
              "type": "String",
              "description": "  proposed value for the railSize attribute"
            }
          ],
          "description": "Validator applied to the railSize attribute. Only strings of css size\nvalues (e.g. '200px') are allowed.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_scheduleSync": {
          "guessedname": "_scheduleSync",
          "guessedtype": "function",
          "protected": "",
          "description": "Binds to the load and error event on the thumbImage to sync the DOM\nstate with the attribute settings when the image resource is resolved.\nThe Slider is disabled while it waits."
        },
        "_uiSetThumbSize": {
          "guessedname": "_uiSetThumbSize",
          "guessedtype": "function",
          "protected": "",
          "description": "Captures the thumb's pixel height or width (depending on the Slider's\naxis) for use in positioning calculations."
        },
        "_setDDGutter": {
          "guessedname": "_setDDGutter",
          "guessedtype": "function",
          "protected": "",
          "description": "Passes the gutter attribute value to the DDConstrain gutter attribute."
        },
        "_isImageLoading": {
          "guessedname": "_isImageLoading",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "img",
              "type": "Node",
              "description": "  <code>img<\/code> Node"
            }
          ],
          "description": "Used to determine if there is a current or pending request for the\nthumbImage resource.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        }
      },
      "name": "Slider",
      "extends": "Widget",
      "module": "slider",
      "namespace": "",
      "events": {
        "maxChange": {
          "name": "maxChange",
          "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "thumbImageChange": {
          "name": "thumbImageChange",
          "description": "Fires when the value for the configuration attribute 'thumbImage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "slideEnd": {
          "description": "Signals the end of a thumb drag operation.  Payload includes\nthe DD.Drag instance's drag:end event under key ddEvent.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>ddEvent<\/dt>\n<dd><code>drag:end<\/code> event from the managed DD.Drag instance<\/dd>\n<\/dl>"
            }
          ]
        },
        "minChange": {
          "name": "minChange",
          "description": "Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "thumbDrag": {
          "preventable": "_defThumbDragFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Bridges user interaction with the thumb to the value attribute.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>ddEvent<\/dt>\n<dd><code>drag:drag<\/code> event from the managed DD.Drag instance<\/dd>\n<\/dl>"
            }
          ]
        },
        "positionThumb": {
          "preventable": "_defPositionThumbFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Signals a request to reposition the thumb in response to API methods.\nTriggers the thumb placement logic in _defPositionThumbFn.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>changeEv<\/dt>\n<dd><code>valueChange<\/code> event fired in response to the change in the value attribute<\/dd>\n<\/dl>"
            }
          ]
        },
        "railChange": {
          "name": "railChange",
          "description": "Fires when the value for the configuration attribute 'rail' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "maxGutterChange": {
          "name": "maxGutterChange",
          "description": "Fires when the value for the configuration attribute 'maxGutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "railSizeChange": {
          "name": "railSizeChange",
          "description": "Fires when the value for the configuration attribute 'railSize' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "sync": {
          "preventable": "_defSyncFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Communicates a request to synchronize the Slider UI with the\nattribute state.  Links the sync request with the default sync\nlogic in _defSyncFn.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "  Event Facade object"
            }
          ]
        },
        "valueChange": {
          "name": "valueChange",
          "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "thumbChange": {
          "name": "thumbChange",
          "description": "Fires when the value for the configuration attribute 'thumb' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "slideStart": {
          "description": "Signals the beginning of a thumb drag operation.  Payload includes\nthe DD.Drag instance's drag:start event under key ddEvent.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>ddEvent<\/dt>\n<dd><code>drag:start<\/code> event from the managed DD.Drag instance<\/dd>\n<\/dl>"
            }
          ]
        },
        "axisChange": {
          "name": "axisChange",
          "description": "Fires when the value for the configuration attribute 'axis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "minGutterChange": {
          "name": "minGutterChange",
          "description": "Fires when the value for the configuration attribute 'minGutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "railEnabledChange": {
          "name": "railEnabledChange",
          "description": "Fires when the value for the configuration attribute 'railEnabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Create a slider to represent an integer value between a given minimum and\nmaximum.  Sliders may be aligned vertically or horizontally, based on the\n<code>axis<\/code> configuration.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Configuration object"
            }
          ]
        }
      ],
      "description": "Create a slider to represent an integer value between a given minimum and\nmaximum.  Sliders may be aligned vertically or horizontally, based on the\n<code>axis<\/code> configuration.",
      "file": "slider.js",
      "configs": {
        "rail": {
          "guessedname": "rail",
          "default": "null",
          "type": "Node",
          "guessedtype": "property",
          "description": "The Node representing the Slider's rail, usually visualized as a\nbar of some sort using a background image, along which the thumb\nmoves.  This Node contains the thumb Node."
        },
        "maxGutter": {
          "guessedname": "maxGutter",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "Like CSS padding, the distance in pixels from the inner bottom or\nright edge of the rail node within which the thumb can travel.\nNegative values allow the edge of the thumb to escape the rail node\nboundaries."
        },
        "railSize": {
          "guessedname": "railSize",
          "default": "'0'",
          "type": "String",
          "guessedtype": "property",
          "description": "<p>The width or height of the rail element representing the physical\nspace along which the thumb can move.  CSS size values (e.g. '30em')\naccepted but converted to pixels during render.<\/p>\n<p>Alternately, but not recommended, this attribute can be left\nunassigned in favor of specifying height or width.<\/p>"
        },
        "minGutter": {
          "guessedname": "minGutter",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "Like CSS padding, the distance in pixels from the inner top or left\nedge of the rail node within which the thumb can travel.  Negative\nvalues allow the edge of the thumb to escape the rail node\nboundaries."
        },
        "max": {
          "guessedname": "max",
          "default": "100",
          "type": "Number",
          "guessedtype": "property",
          "description": "Value associated with the right or bottom most position of the thumb\non the rail."
        },
        "thumb": {
          "guessedname": "thumb",
          "default": "null",
          "type": "Node",
          "guessedtype": "property",
          "description": "<p>The Node representing the Slider's thumb, usually visualized as a\npointer using a contained image Node (see thumbImage).  The current\nvalue of the Slider is calculated from the centerpoint of this\nNode in relation to the rail Node.  If provided, the thumbImage\nNode is contained within this Node.<\/p>\n<p>If no thumbImage is provided and the Node passed as the thumb is\nan <code>img<\/code> element, the assigned Node will be allocated to\nthe thumbImage and the thumb container defaulted.<\/p>"
        },
        "axis": {
          "guessedname": "axis",
          "default": "&quot;x&quot;",
          "writeonce": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Axis upon which the Slider's thumb moves.  &quot;x&quot; for\nhorizontal, &quot;y&quot; for vertical."
        },
        "value": {
          "guessedname": "value",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "The current value of the Slider.  This value is interpretted into a\nposition for the thumb along the Slider's rail."
        },
        "railEnabled": {
          "guessedname": "railEnabled",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean indicating whether clicking and dragging on the rail will\ntrigger thumb movement."
        },
        "thumbImage": {
          "guessedname": "thumbImage",
          "default": "null",
          "type": "Node|String",
          "guessedtype": "property",
          "description": "<p>The Node representing the image element to use for the Slider's\nthumb.<\/p>\n<p>Alternately, an image URL can be passed and an <code>img<\/code>\nNode will be generated accordingly.<\/p>\n<p>If no thumbImage is provided and the Node passed as the thumb is\nan <code>img<\/code> element, the assigned Node will be allocated to\nthe thumbImage and the thumb container defaulted.<\/p>\n<p>If thumbImage is provided but its URL resolves to a 404, a default\nstyle will be applied to maintain basic functionality.<\/p>"
        },
        "min": {
          "guessedname": "min",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "Value associated with the left or top most position of the thumb on\nthe rail."
        }
      },
      "properties": {
        "_stall": {
          "guessedname": "_stall",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Object returned from temporary subscription to disabledChange event to\ndefer setting the disabled state while Slider is loading the thumb\nimage."
        },
        "Slider.NAME": {
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The identity of the widget."
        },
        "_key": {
          "guessedname": "_key",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Collection of object property names from the appropriate hash set in\nSlider._AXIS_KEYS."
        },
        "_thumbOffset": {
          "guessedname": "_thumbOffset",
          "type": "Number",
          "guessedtype": "property",
          "protected": "",
          "description": "Pixel offset of the point in the thumb element from its top\/left edge\nto where the value calculation should take place.  By default, this is\ncalculated to half the width of the thumb, causing the value to be\nmarked from the center of the thumb."
        },
        "Slider._AXIS_KEYS": {
          "guessedname": "_AXIS_KEYS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Object property names used for respective X and Y axis Sliders (e.g.\n&quot;left&quot; vs. &quot;top&quot; for placing the thumb according to\nits representative value)."
        },
        "_thumbSize": {
          "guessedname": "_thumbSize",
          "type": "Number",
          "guessedtype": "property",
          "protected": "",
          "description": "Pixel dimension of the thumb Node's width for X axis Sliders or height\nfor Y axis Sliders.  Used with _factor to calculate positional\ncoordinates for the thumb."
        },
        "_factor": {
          "guessedname": "_factor",
          "type": "Number",
          "guessedtype": "property",
          "protected": "",
          "description": "Factor used to translate positional coordinates (e.g. left or top) to\nthe Slider's value."
        },
        "_railSize": {
          "guessedname": "_railSize",
          "type": "Number",
          "guessedtype": "property",
          "protected": "",
          "description": "Pixel dimension of the rail Node's width for X axis Sliders or height\nfor Y axis Sliders.  Used with _factor to calculate positional\ncoordinates for the thumb."
        },
        "_disabled": {
          "guessedname": "_disabled",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Deferred value for the disabled attribute when stalled (see _stall\nproperty)."
        },
        "Slider.HTML_PARSER": {
          "guessedname": "HTML_PARSER",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Static Object hash used to capture existing markup for progressive\nenhancement.  Keys correspond to config attribute names and values\nare selectors used to inspect the contentBox for an existing node\nstructure."
        },
        "Slider.ATTRS": {
          "guessedname": "ATTRS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Static property used to define the default attribute configuration of\nthe Widget."
        }
      }
    },
    "Plugin.DDProxy": {
      "shortname": "DDProxy",
      "superclass": "Base",
      "methods": {
        "_init": {
          "guessedname": "_init",
          "private": "",
          "guessedtype": "function",
          "description": "Handler for the proxy config attribute"
        }
      },
      "name": "Plugin.DDProxy",
      "extends": "Base",
      "guessedname": "DDM",
      "module": "dd",
      "namespace": "Plugin",
      "events": {
        "positionProxyChange": {
          "name": "positionProxyChange",
          "description": "Fires when the value for the configuration attribute 'positionProxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "hideOnEndChange": {
          "name": "hideOnEndChange",
          "description": "Fires when the value for the configuration attribute 'hideOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "borderStyleChange": {
          "name": "borderStyleChange",
          "description": "Fires when the value for the configuration attribute 'borderStyle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "moveOnEndChange": {
          "name": "moveOnEndChange",
          "description": "Fires when the value for the configuration attribute 'moveOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "resizeFrameChange": {
          "name": "resizeFrameChange",
          "description": "Fires when the value for the configuration attribute 'resizeFrame' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "This plugin for dd-drag is for creating a proxy drag node, instead of dragging the original node."
        }
      ],
      "guessedtype": "property",
      "description": "This plugin for dd-drag is for creating a proxy drag node, instead of dragging the original node.",
      "file": "proxy.js",
      "configs": {
        "moveOnEnd": {
          "guessedname": "moveOnEnd",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Move the original node at the end of the drag. Default: true"
        },
        "hideOnEnd": {
          "guessedname": "hideOnEnd",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Hide the drag node at the end of the drag. Default: true"
        },
        "resizeFrame": {
          "guessedname": "resizeFrame",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Make the Proxy node assume the size of the original node. Default: true"
        },
        "positionProxy": {
          "guessedname": "positionProxy",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Make the Proxy node appear in the same place as the original node. Default: true"
        },
        "borderStyle": {
          "guessedname": "borderStyle",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "The default border style for the border of the proxy. Default: 1px solid #808080"
        }
      },
      "properties": {
        "proxy": {
          "guessedname": "NS",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The Proxy instance will be placed on the Drag instance under the proxy namespace."
        },
        "_hands": {
          "guessedname": "_hands",
          "private": "",
          "guessedtype": "property",
          "description": "Holds the event handles for setting the proxy"
        }
      }
    },
    "Test.Suite": {
      "shortname": "Suite",
      "methods": {
        "add": {
          "guessedname": "add",
          "guessedtype": "function",
          "description": "Adds a test suite or test case to the test suite.",
          "params": [
            {
              "name": "testObject",
              "type": "Y.Test.Suite||Y.Test.Case",
              "description": " The test suite or test case to add."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "XML": {
          "guessedname": "XML",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "result",
              "type": "Object",
              "description": " The results object created by TestRunner."
            }
          ],
          "description": "Returns test results formatted as an XML string.",
          "return": {
            "type": "String",
            "description": "An XML-formatted string of results."
          }
        },
        "tearDown": {
          "guessedname": "tearDown",
          "guessedtype": "function",
          "description": "Function to run after each test is executed.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "setUp": {
          "guessedname": "setUp",
          "guessedtype": "function",
          "description": "Function to run before each test is executed.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "JSON": {
          "guessedname": "JSON",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "result",
              "type": "Object",
              "description": " The results object created by TestRunner."
            }
          ],
          "description": "Returns test results formatted as a JSON string. Requires JSON utility.",
          "return": {
            "type": "String",
            "description": "A JSON-formatted string of results."
          }
        }
      },
      "name": "Test.Suite",
      "guessedname": "Suite",
      "module": "test",
      "namespace": "Test",
      "constructors": [
        {
          "description": "A test suite that can contain a collection of TestCase and TestSuite objects.",
          "params": [
            {
              "name": "data",
              "type": "String||Object",
              "description": " The name of the test suite or an object containing\na name property as well as setUp and tearDown methods."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A test suite that can contain a collection of TestCase and TestSuite objects.",
      "file": "TestSuite.js",
      "properties": {
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the test suite."
        },
        "items": {
          "guessedname": "items",
          "private": "",
          "guessedtype": "property",
          "description": "Array of test suites and"
        }
      }
    },
    "Test.ArrayAssert": {
      "shortname": "ArrayAssert",
      "methods": {
        "itemsAreEqual": {
          "guessedname": "itemsAreEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that the values in an array are equal, and in the same position,\nas values in another array. This uses the double equals sign\nso type cohersion may occur. Note that the array objects themselves\nneed not be the same for this test to pass.",
          "params": [
            {
              "name": "expected",
              "type": "Array",
              "description": " An array of the expected values."
            },
            {
              "name": "actual",
              "type": "Array",
              "description": " Any array of the actual values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "lastIndexOf": {
          "guessedname": "lastIndexOf",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that the given value is contained in an array at the specified index,\nstarting from the back of the array.\nThis uses the triple equals sign so no type cohersion will occur.",
          "params": [
            {
              "name": "needle",
              "type": "Object",
              "description": " The value to look for."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " The array to search in."
            },
            {
              "name": "index",
              "type": "int",
              "description": " The index at which the value should exist."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "itemsAreEquivalent": {
          "guessedname": "itemsAreEquivalent",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "expected",
              "type": "Array",
              "description": " An array of the expected values."
            },
            {
              "name": "actual",
              "type": "Array",
              "description": " Any array of the actual values."
            },
            {
              "name": "comparator",
              "type": "Function",
              "description": " A function that returns true if the values are equivalent\nor false if not."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ],
          "description": "Asserts that the values in an array are equivalent, and in the same position,\nas values in another array. This uses a function to determine if the values\nare equivalent. Note that the array objects themselves\nneed not be the same for this test to pass.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "isNotEmpty": {
          "guessedname": "isNotEmpty",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that an array is not empty.",
          "params": [
            {
              "name": "actual",
              "type": "Array",
              "description": " The array to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isEmpty": {
          "guessedname": "isEmpty",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that an array is empty.",
          "params": [
            {
              "name": "actual",
              "type": "Array",
              "description": " The array to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "containsItems": {
          "guessedname": "containsItems",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a set of values are present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nbe found.",
          "params": [
            {
              "name": "needles",
              "type": "Object[]",
              "description": " An array of values that are expected in the array."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values to check."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "doesNotContainMatch": {
          "guessedname": "doesNotContainMatch",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that no values matching a condition are present in an array. This uses\na function to determine a match.",
          "params": [
            {
              "name": "matcher",
              "type": "Function",
              "description": " A function that returns true if the items matches or false if not."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "itemsAreSame": {
          "guessedname": "itemsAreSame",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that the values in an array are the same, and in the same position,\nas values in another array. This uses the triple equals sign\nso no type cohersion will occur. Note that the array objects themselves\nneed not be the same for this test to pass.",
          "params": [
            {
              "name": "expected",
              "type": "Array",
              "description": " An array of the expected values."
            },
            {
              "name": "actual",
              "type": "Array",
              "description": " Any array of the actual values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "doesNotContain": {
          "guessedname": "doesNotContain",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not present in an array. This uses the triple equals \nAsserts that a value is not present in an array. This uses the triple equals \nsign so no type cohersion may occur.",
          "params": [
            {
              "name": "needle",
              "type": "Object",
              "description": " The value that is expected in the array."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "indexOf": {
          "guessedname": "indexOf",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that the given value is contained in an array at the specified index.\nThis uses the triple equals sign so no type cohersion will occur.",
          "params": [
            {
              "name": "needle",
              "type": "Object",
              "description": " The value to look for."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " The array to search in."
            },
            {
              "name": "index",
              "type": "int",
              "description": " The index at which the value should exist."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "doesNotContainItems": {
          "guessedname": "doesNotContainItems",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a set of values are not present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nnot be found.",
          "params": [
            {
              "name": "needles",
              "type": "Object[]",
              "description": " An array of values that are not expected in the array."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values to check."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "containsMatch": {
          "guessedname": "containsMatch",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value matching some condition is present in an array. This uses\na function to determine a match.",
          "params": [
            {
              "name": "matcher",
              "type": "Function",
              "description": " A function that returns true if the items matches or false if not."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "contains": {
          "guessedname": "contains",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is present in an array. This uses the triple equals \nsign so no type cohersion may occur.",
          "params": [
            {
              "name": "needle",
              "type": "Object",
              "description": " The value that is expected in the array."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        }
      },
      "name": "Test.ArrayAssert",
      "guessedname": "ArrayAssert",
      "module": "test",
      "namespace": "Test",
      "static": "",
      "guessedtype": "property",
      "description": "The ArrayAssert object provides functions to test JavaScript array objects\nfor a variety of cases.",
      "file": "ArrayAssert.js"
    },
    "Selector": {
      "shortname": "Selector",
      "methods": {
        "inViewportRegion": {
          "guessedname": "inViewportRegion",
          "guessedtype": "function",
          "description": "Check if any part of this element is in the viewport",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The DOM element."
            },
            {
              "name": "all",
              "type": "Boolean",
              "description": " Should all of the node be inside the region"
            },
            {
              "name": "altRegion",
              "type": "Object",
              "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True if in region, false if not."
          }
        },
        "region": {
          "guessedname": "region",
          "guessedtype": "function",
          "description": "Returns an Object literal containing the following about this element: (top, right, bottom, left)",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The DOM element."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Object literal containing the following about this element: (top, right, bottom, left)"
          }
        },
        "intersect": {
          "guessedname": "intersect",
          "guessedtype": "function",
          "description": "Find the intersect information for the passes nodes.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The first element"
            },
            {
              "name": "element2",
              "type": "HTMLElement | Object",
              "description": " The element or region to check the interect with"
            },
            {
              "name": "altRegion",
              "type": "Object",
              "description": " An object literal containing the region for the first element if we already have the data (for performance i.e. DragDrop)"
            }
          ],
          "return": {
            "type": "Object",
            "description": "Object literal containing the following intersection data: (top, right, bottom, left, area, yoff, xoff, inRegion)"
          }
        },
        "viewportRegion": {
          "guessedname": "viewportRegion",
          "guessedtype": "function",
          "description": "Returns an Object literal containing the following about the visible region of viewport: (top, right, bottom, left)",
          "return": {
            "type": "Object",
            "description": "Object literal containing the following about the visible region of the viewport: (top, right, bottom, left)"
          }
        },
        "inRegion": {
          "guessedname": "inRegion",
          "guessedtype": "function",
          "description": "Check if any part of this node is in the passed region",
          "params": [
            {
              "name": "all",
              "type": "Object} node2 The node to get the region from or an Object literal of the region\n$param {Boolean",
              "description": " Should all of the node be inside the region"
            },
            {
              "name": "altRegion",
              "type": "Object",
              "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True if in region, false if not."
          }
        },
        "_tokenize": {
          "guessedname": "_tokenize",
          "guessedtype": "function",
          "description": "Break selector into token units per simple selector.\nCombinator is attached to the previous token."
        },
        "query": {
          "guessedname": "query",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "selector",
              "type": "string",
              "description": " The CSS Selector to test the node against."
            },
            {
              "name": "root",
              "type": "HTMLElement",
              "description": " optional An HTMLElement to start the query from. Defaults to Y.config.doc"
            },
            {
              "name": "firstOnly",
              "type": "Boolean",
              "description": " optional Whether or not to return only the first match."
            }
          ],
          "description": "Retrieves a set of nodes based on a given CSS selector.",
          "return": {
            "type": "Array",
            "description": "An array of nodes that match the given selector."
          }
        }
      },
      "name": "Selector",
      "module": "dom",
      "namespace": "",
      "static": "",
      "description": "Provides support for using CSS selectors to query the DOM",
      "file": "selector-native.js",
      "for": "Selector",
      "properties": {
        "shorthand": {
          "guessedname": "shorthand",
          "type": "object",
          "guessedtype": "property",
          "description": "Mapping of shorthand tokens to corresponding attribute selector"
        },
        "PARENT_NODE": {
          "guessedname": "PARENT_NODE",
          "guessedtype": "property",
          "description": "Provides helper methods for collecting and filtering DOM elements."
        },
        "operators": {
          "guessedname": "operators",
          "type": "object",
          "guessedtype": "property",
          "description": "List of operators and corresponding boolean functions. \nThese functions are passed the attribute and the current node's value of the attribute."
        }
      }
    },
    "Attribute": {
      "methods": {
        "_addAttrs": {
          "private": "",
          "guessedname": "_addAttrs",
          "guessedtype": "function",
          "description": "Implementation behind the public addAttrs method. \nThis method is invoked directly by get if it encounters a scenario \nin which an attribute's valueFn attempts to obtain the \nvalue an attribute in the same group of attributes, which has not yet \nbeen added (on demand initialization).",
          "params": [
            {
              "name": "cfgs",
              "type": "Object",
              "description": " An object with attribute name\/configuration pairs."
            },
            {
              "name": "values",
              "type": "Object",
              "description": " An object with attribute name\/value pairs, defining the initial values to apply.\nValues defined in the cfgs argument will be over-written by values in this argument unless defined as read only."
            },
            {
              "name": "lazy",
              "type": "boolean",
              "description": " Whether or not to delay the intialization of these attributes until the first call to get\/set.\nIndividual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.\nSee <a href=\"#method_addAttr\">addAttr<\/a>."
            }
          ]
        },
        "get": {
          "guessedname": "get",
          "guessedtype": "function",
          "description": "Returns the current value of the attribute. If the attribute\nhas been configured with a 'getter' function, this method will delegate\nto the 'getter' to obtain the value of the attribute.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute. If the value of the attribute is an Object, \ndot notation can be used to obtain the value of a property of the object (e.g. <code>get(\"x.y.z\")<\/code>)"
            }
          ],
          "return": {
            "type": "Any",
            "description": "The value of the attribute"
          }
        },
        "_setAttr": {
          "guessedname": "_setAttr",
          "chainable": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute."
            },
            {
              "name": "value",
              "type": "Any",
              "description": " The value to set the attribute to."
            },
            {
              "name": "opts",
              "type": "Object",
              "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event."
            },
            {
              "name": "force",
              "type": "boolean",
              "description": " If true, allows the caller to set values for \nreadOnly or writeOnce attributes which have already been set."
            }
          ],
          "description": "Provides the common implementation for the public set and protected _set methods.\nSee <a href=\"#method_set\">set<\/a> for argument details.",
          "return": {
            "type": "Object",
            "description": "A reference to the host object."
          }
        },
        "_set": {
          "guessedname": "_set",
          "chainable": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute."
            },
            {
              "name": "val",
              "type": "Any",
              "description": " The value to set the attribute to."
            },
            {
              "name": "opts",
              "type": "Object",
              "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event."
            }
          ],
          "description": "Allows setting of readOnly\/writeOnce attributes. See <a href=\"#method_set\">set<\/a> for argument details.",
          "return": {
            "type": "Object",
            "description": "A reference to the host object."
          }
        },
        "removeAttr": {
          "guessedname": "removeAttr",
          "guessedtype": "function",
          "description": "Removes an attribute from the host object",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute to be removed."
            }
          ]
        },
        "setAttrs": {
          "guessedname": "setAttrs",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "attrs",
              "type": "Object",
              "description": "  An object with attributes name\/value pairs."
            }
          ],
          "description": "Sets multiple attribute values.",
          "return": {
            "type": "Object",
            "description": "A reference to the host object."
          }
        },
        "modifyAttr": {
          "guessedname": "modifyAttr",
          "guessedtype": "function",
          "description": "Updates the configuration of an attribute which has already been added.\n<p>\nThe properties which can be modified through this interface are limited\nto the following subset of attributes, which can be safely modified\nafter a value has already been set on the attribute: readOnly, writeOnce, \nbroadcast and getter.\n<\/p>",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute whose configuration is to be updated."
            },
            {
              "name": "config",
              "type": "Object",
              "description": " An object with configuration property\/value pairs, specifying the configuration properties to modify."
            }
          ]
        },
        "set": {
          "guessedname": "set",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute. If the \ncurrent value of the attribute is an Object, dot notation can be used\nto set the value of a property within the object (e.g. <code>set(\"x.y.z\", 5)<\/code>)."
            },
            {
              "name": "value",
              "type": "Any",
              "description": " The value to set the attribute to."
            },
            {
              "name": "opts",
              "type": "Object",
              "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event. This \ncan be used as a flexible way to identify the source of a call to set, allowing \nthe developer to distinguish between set called internally by the host, vs. \nset called externally by the application developer."
            }
          ],
          "description": "Sets the value of an attribute.",
          "return": {
            "type": "Object",
            "description": "A reference to the host object."
          }
        },
        "_setAttrVal": {
          "guessedname": "_setAttrVal",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "attrName",
              "type": "String",
              "description": " The attribute name."
            },
            {
              "name": "subAttrName",
              "type": "String",
              "description": " The sub-attribute name, if setting a sub-attribute property (\"x.y.z\")."
            },
            {
              "name": "prevVal",
              "type": "Any",
              "description": " The currently stored value of the attribute."
            },
            {
              "name": "newVal",
              "type": "Any",
              "description": " The value which is going to be stored."
            }
          ],
          "description": "Updates the stored value of the attribute in the privately held State object,\nif validation and setter passes.",
          "return": {
            "type": "booolean",
            "description": "true if the new attribute value was stored, false if not."
          }
        },
        "addAttrs": {
          "guessedname": "addAttrs",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "cfgs",
              "type": "Object",
              "description": " An object with attribute name\/configuration pairs."
            },
            {
              "name": "values",
              "type": "Object",
              "description": " An object with attribute name\/value pairs, defining the initial values to apply.\nValues defined in the cfgs argument will be over-written by values in this argument unless defined as read only."
            },
            {
              "name": "lazy",
              "type": "boolean",
              "description": " Whether or not to delay the intialization of these attributes until the first call to get\/set.\nIndividual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.\nSee <a href=\"#method_addAttr\">addAttr<\/a>."
            }
          ],
          "description": "Configures a group of attributes, and sets initial values.\n<p>\n<strong>NOTE:<\/strong> This method does not isolate the configuration object by merging\/cloning. \nThe caller is responsible for merging\/cloning the configuration object if required.\n<\/p>",
          "return": {
            "type": "Object",
            "description": "A reference to the host object."
          }
        },
        "getAttrs": {
          "guessedname": "getAttrs",
          "guessedtype": "function",
          "description": "Gets multiple attribute values.",
          "params": [
            {
              "name": "attrs",
              "type": "Array | boolean",
              "description": " Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned."
            }
          ],
          "return": {
            "type": "Object",
            "description": "An object with attribute name\/value pairs."
          }
        },
        "_defAttrChangeFn": {
          "private": "",
          "guessedname": "_defAttrChangeFn",
          "guessedtype": "function",
          "description": "Default function for attribute change events.",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The event object for attribute change events."
            }
          ]
        },
        "_fireAttrChange": {
          "private": "",
          "guessedname": "_fireAttrChange",
          "guessedtype": "function",
          "description": "Utility method to help setup the event payload and fire the attribute change event.",
          "params": [
            {
              "name": "attrName",
              "type": "String",
              "description": " The name of the attribute"
            },
            {
              "name": "subAttrName",
              "type": "String",
              "description": " The full path of the property being changed, \nif this is a sub-attribute value being change. Otherwise null."
            },
            {
              "name": "currVal",
              "type": "Any",
              "description": " The current value of the attribute"
            },
            {
              "name": "newVal",
              "type": "Any",
              "description": " The new value of the attribute"
            },
            {
              "name": "opts",
              "type": "Object",
              "description": " Any additional event data to mix into the attribute change event's event facade."
            }
          ]
        },
        "attrAdded": {
          "guessedname": "attrAdded",
          "guessedtype": "function",
          "description": "Checks if the given attribute has been added to the host",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute to check."
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if an attribute with the given name has been added, false if it hasn't. This method will return true for lazily added attributes."
          }
        },
        "_isLazyAttr": {
          "guessedname": "_isLazyAttr",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute"
            }
          ],
          "description": "Checks whether or not the attribute is one which has been\nadded lazily and still requires initialization.",
          "return": {
            "type": "boolean",
            "description": "true if it's a lazily added attribute, false otherwise."
          }
        },
        "reset": {
          "guessedname": "reset",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " Optional. The name of the attribute to reset.  If omitted, all attributes are reset."
            }
          ],
          "description": "Resets the attribute (or all attributes) to its initial value, as long as\nthe attribute is not readOnly, or writeOnce.",
          "return": {
            "type": "Object",
            "description": "A reference to the host object."
          }
        },
        "_setStateVal": {
          "private": "",
          "guessedname": "_setStateVal",
          "guessedtype": "function",
          "description": "Sets the stored value for the attribute, in either the \ninternal state object, or the state proxy if it exits",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute"
            },
            {
              "name": "value",
              "type": "Any",
              "description": " The value of the attribute"
            }
          ]
        },
        "addAttr": {
          "guessedname": "addAttr",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute."
            },
            {
              "name": "config",
              "type": "Object",
              "description": " An object with attribute configuration property\/value pairs, specifying the configuration for the attribute.\n<p>\n<strong>NOTE:<\/strong> The configuration object is modified when adding an attribute, so if you need \nto protect the original values, you will need to merge the object.\n<\/p>"
            },
            {
              "name": "lazy",
              "type": "boolean",
              "description": " (optional) Whether or not to add this attribute lazily (on the first call to get\/set)."
            }
          ],
          "description": "<p>\nAdds an attribute with the provided configuration to the host object.\n<\/p>\n<p>\nThe config argument object supports the following properties:\n<\/p>\n<dl>\n<dt>value &#60;Any&#62;<\/dt>\n<dd>The initial value to set on the attribute<\/dd>\n<dt>valueFn &#60;Function&#62;<\/dt>\n<dd>A function, which will return the initial value to set on the attribute. This is useful\nfor cases where the attribute configuration is defined statically, but needs to \nreference the host instance (\"this\") to obtain an initial value.\nIf defined, this precedence over the value property.<\/dd>\n<dt>readOnly &#60;boolean&#62;<\/dt>\n<dd>Whether or not the attribute is read only. Attributes having readOnly set to true\ncannot be modified by invoking the set method.<\/dd>\n<dt>writeOnce &#60;boolean&#62;<\/dt>\n<dd>Whether or not the attribute is \"write once\". Attributes having writeOnce set to true, \ncan only have their values set once, be it through the default configuration, \nconstructor configuration arguments, or by invoking set.<\/dd>\n<dt>setter &#60;Function&#62;<\/dt>\n<dd>The setter function used to massage or normalize the value passed to the set method for the attribute. \nThe value returned by the setter will be the final stored value. Returning\n<a href=\"#property_Attribute.INVALID_VALUE\">Attribute.INVALID_VALUE<\/a>, from the setter will prevent\nthe value from being stored.<\/dd>\n<dt>getter &#60;Function&#62;<\/dt>\n<dd>The getter function used to massage or normalize the value returned by the get method for the attribute.\nThe value returned by the getter function is the value which will be returned to the user when they \ninvoke get.<\/dd>\n<dt>validator &#60;Function&#62;<\/dt>\n<dd>The validator function invoked prior to setting the stored value. Returning\nfalse from the validator function will prevent the value from being stored.<\/dd>\n<dt>broadcast &#60;int&#62;<\/dt>\n<dd>If and how attribute change events for this attribute should be broadcast. See CustomEvent's <a href=\"CustomEvent.html#property_broadcast\">broadcast<\/a> property for \nvalid values. By default attribute change events are not broadcast.<\/dd>\n<dt>lazyAdd &#60;boolean&#62;<\/dt>\n<dd>Whether or not to delay initialization of the attribute until the first call to get\/set it. \nThis flag can be used to over-ride lazy initialization on a per attribute basis, when adding multiple attributes through \nthe <a href=\"#method_addAttrs\">addAttrs<\/a> method.<\/dd>\n<\/dl>\n<p>The setter, getter and validator are invoked with the value and name passed in as the first and second arguments, and with\nthe context (\"this\") set to the host object.<\/p>",
          "return": {
            "type": "Object",
            "description": "A reference to the host object."
          }
        },
        "_getStateVal": {
          "guessedname": "_getStateVal",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute"
            }
          ],
          "description": "Gets the stored value for the attribute, from either the \ninternal state object, or the state proxy if it exits",
          "return": {
            "type": "Any",
            "description": "The stored value of the attribute"
          }
        },
        "_getAttrInitVal": {
          "guessedname": "_getAttrInitVal",
          "private": "",
          "param": "{String} attr The name of the attribute",
          "guessedtype": "function",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The name of the attribute"
            },
            {
              "name": "cfg",
              "type": "Object",
              "description": " The attribute configuration object"
            },
            {
              "name": "initValues",
              "type": "Object",
              "description": " The object with simple and complex attribute name\/value pairs returned from _normAttrVals"
            }
          ],
          "description": "Returns the initial value of the given attribute from\neither the default configuration provided, or the \nover-ridden value if it exists in the set of initValues \nprovided and the attribute is not read-only.",
          "return": {
            "type": "Any",
            "description": "The initial value of the attribute."
          }
        },
        "_addLazyAttr": {
          "private": "",
          "guessedname": "_addLazyAttr",
          "guessedtype": "function",
          "description": "Finishes initializing an attribute which has been lazily added.",
          "params": [
            {
              "name": "name",
              "type": "Object",
              "description": " The name of the attribute"
            }
          ]
        },
        "_getAttr": {
          "guessedname": "_getAttr",
          "chainable": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the attribute."
            }
          ],
          "description": "Provides the common implementation for the public get method,\nallowing Attribute hosts to over-ride either method.\nSee <a href=\"#method_get\">get<\/a> for argument details.",
          "return": {
            "type": "Any",
            "description": "The value of the attribute."
          }
        },
        "_normAttrVals": {
          "guessedname": "_normAttrVals",
          "private": "",
          "param": "{Object} valueHash An object with attribute name\/value pairs",
          "guessedtype": "function",
          "params": [
            {
              "name": "valueHash",
              "type": "Object",
              "description": " An object with attribute name\/value pairs"
            }
          ],
          "description": "Utility method to split out simple attribute name\/value pairs (\"x\") \nfrom complex attribute name\/value pairs (\"x.y.z\"), so that complex\nattributes can be keyed by the top level attribute name.",
          "return": {
            "type": "Object",
            "description": "An object literal with 2 properties - \"simple\" and \"complex\",\ncontaining simple and complex attribute values respectively keyed \nby the top level attribute name, or null, if valueHash is falsey."
          }
        }
      },
      "shortname": "Attribute",
      "name": "Attribute",
      "module": "attribute",
      "namespace": "",
      "file": "Attribute.js",
      "description": "<p>\nAttribute provides configurable attribute support along with attribute change events. It is designed to be \naugmented onto a host class, and provides the host with the ability to configure attributes to store and retrieve state, \nalong with attribute change events.\n<\/p>\n<p>For example, attributes added to the host can be configured:<\/p>\n<ul>\n<li>As read only.<\/li>\n<li>As write once.<\/li>\n<li>With a setter function, which can be used to manipulate\nvalues passed to Attribute's <a href=\"#method_set\">set<\/a> method, before they are stored.<\/li>\n<li>With a getter function, which can be used to manipulate stored values,\nbefore they are returned by Attribute's <a href=\"#method_get\">get<\/a> method.<\/li>\n<li>With a validator function, to validate values before they are stored.<\/li>\n<\/ul>\n<p>See the <a href=\"#method_addAttr\">addAttr<\/a> method, for the complete set of configuration\noptions available for attributes<\/p>.\n<p><strong>NOTE:<\/strong> Most implementations will be better off extending the <a href=\"Base.html\">Base<\/a> class, \ninstead of augmenting Attribute directly. Base augments Attribute and will handle the initial configuration \nof attributes for derived classes, accounting for values passed into the constructor.<\/p>",
      "properties": {
        "Attribute.INVALID_VALUE": {
          "final": "",
          "guessedname": "INVALID_VALUE",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "<p>The value to return from an attribute setter in order to prevent the set from going through.<\/p>\n<p>You can return this value from your setter if you wish to combine validator and setter \nfunctionality into a single setter function, which either returns the massaged value to be stored or \nAttribute.INVALID_VALUE to prevent invalid values from being stored.<\/p>"
        },
        "Attribute._ATTR_CFG": {
          "guessedname": "_ATTR_CFG",
          "static": "",
          "type": "Array",
          "guessedtype": "property",
          "protected": "",
          "description": "The list of properties which can be configured for \neach attribute (e.g. setter, getter, writeOnce etc.).\nThis property is used internally as a whitelist for faster\nY.mix operations."
        }
      },
      "uses": [
        "EventTarget"
      ]
    },
    "Test.Manager": {
      "shortname": "Manager",
      "methods": {
        "stop": {
          "guessedname": "stop",
          "static": "",
          "guessedtype": "function",
          "description": "Stops the execution of tests.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_handleTestRunnerComplete": {
          "guessedname": "_handleTestRunnerComplete",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": " Data about the event."
            }
          ],
          "description": "Handles TestRunner.COMPLETE_EVENT, storing the results and beginning\nthe loop again.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "start": {
          "guessedname": "start",
          "static": "",
          "guessedtype": "function",
          "description": "Begins the process of running the tests.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "setPages": {
          "guessedname": "setPages",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "pages",
              "type": "String[]",
              "description": " An array of URLs to load."
            }
          ],
          "description": "Sets the pages to be loaded.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_processResults": {
          "guessedname": "_processResults",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Processes the results of a test page run, outputting log messages\nfor failed tests.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_run": {
          "guessedname": "_run",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Loads the next test page into the iframe.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "load": {
          "guessedname": "load",
          "static": "",
          "guessedtype": "function",
          "description": "Signals that a test page has been loaded. This should be called from\nwithin the test page itself to notify the TestManager that it is ready.",
          "return": {
            "type": "Void",
            "description": ""
          }
        }
      },
      "name": "Test.Manager",
      "guessedname": "Manager",
      "module": "test",
      "namespace": "Test",
      "static": "",
      "events": {
        "testpagebegin": {
          "static": "",
          "description": "Fires when loading a test page",
          "params": [
            {
              "name": "curPage",
              "type": "string",
              "description": "  the page being loaded"
            }
          ]
        },
        "testmanagercomplete": {
          "static": "",
          "description": "Fires when the test manager finishes running all test pages.  External\ntest runners should subscribe to this event in order to get the\naggregated test results.",
          "params": [
            {
              "name": "obj",
              "type": " pages_passed: int, pages_failed: int, tests_passed: int\ntests_failed: int, passed: string[], failed: string[],\npage_results: {} ",
              "description": ""
            }
          ]
        },
        "testmanagerbegin": {
          "static": "",
          "description": "Fires when the test manager starts running all test pages"
        },
        "testpagecomplete": {
          "static": "",
          "description": "Fires when a test page is complete",
          "params": [
            {
              "name": "obj",
              "type": "page: string, results: object",
              "description": "  the name of the\npage that was loaded, and the test suite results"
            }
          ]
        }
      },
      "guessedtype": "property",
      "description": "Runs pages containing test suite definitions.",
      "file": "TestManager.js",
      "properties": {
        "_frame": {
          "guessedname": "_frame",
          "private": "",
          "static": "",
          "type": "Window",
          "guessedtype": "property",
          "description": "The frame used to load and run tests."
        },
        "_results": {
          "guessedname": "_results",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Aggregated results"
        },
        "TEST_PAGE_COMPLETE_EVENT": {
          "final": "",
          "guessedname": "TEST_PAGE_COMPLETE_EVENT",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Constant for the testpagecomplete custom event"
        },
        "TEST_PAGE_BEGIN_EVENT": {
          "final": "",
          "guessedname": "TEST_PAGE_BEGIN_EVENT",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Constant for the testpagebegin custom event"
        },
        "_logger": {
          "guessedname": "_logger",
          "private": "",
          "static": "",
          "type": "YAHOO.tool.TestLogger",
          "guessedtype": "property",
          "description": "The logger used to output results from the various tests."
        },
        "TEST_MANAGER_BEGIN_EVENT": {
          "final": "",
          "guessedname": "TEST_MANAGER_BEGIN_EVENT",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Constant for the testmanagerbegin custom event"
        },
        "_curPage": {
          "guessedname": "_curPage",
          "private": "",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The URL of the page currently being executed."
        },
        "_timeoutId": {
          "guessedname": "_timeoutId",
          "private": "",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The timeout ID for the next iteration through the tests."
        },
        "_pages": {
          "guessedname": "_pages",
          "private": "",
          "static": "",
          "type": "String[]",
          "guessedtype": "property",
          "description": "Array of pages to load."
        },
        "TEST_MANAGER_COMPLETE_EVENT": {
          "final": "",
          "guessedname": "TEST_MANAGER_COMPLETE_EVENT",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Constant for the testmanagercomplete custom event"
        }
      }
    },
    "DataSource.Get": {
      "shortname": "DataSource.Get",
      "superclass": "DataSource.Local",
      "methods": {
        "_defRequestFn": {
          "guessedname": "_defRequestFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Passes query string to Get Utility. Fires <code>response<\/code> event when\nresponse is received asynchronously.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<\/dl>"
            }
          ]
        }
      },
      "name": "DataSource.Get",
      "extends": "DataSource.Local",
      "guessedname": "DSGet",
      "module": "datasource",
      "namespace": "",
      "events": {
        "scriptCallbackParamChange": {
          "name": "scriptCallbackParamChange",
          "description": "Fires when the value for the configuration attribute 'scriptCallbackParam' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "asyncModeChange": {
          "name": "asyncModeChange",
          "description": "Fires when the value for the configuration attribute 'asyncMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "generateRequestCallbackChange": {
          "name": "generateRequestCallbackChange",
          "description": "Fires when the value for the configuration attribute 'generateRequestCallback' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "getChange": {
          "name": "getChange",
          "description": "Fires when the value for the configuration attribute 'get' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Get Utility subclass for the DataSource Utility."
        }
      ],
      "guessedtype": "function",
      "description": "Get Utility subclass for the DataSource Utility.",
      "file": "datasource-get.js",
      "configs": {
        "get": {
          "guessedname": "get",
          "default": "Y.Get",
          "type": "Y.Get",
          "guessedtype": "property",
          "description": "Pointer to Get Utility."
        },
        "generateRequestCallback": {
          "guessedname": "generateRequestCallback",
          "type": "Function",
          "guessedtype": "property",
          "description": "Accepts the DataSource instance and a callback ID, and returns a callback\nparam\/value string that gets appended to the script URI. Implementers\ncan customize this string to match their server's query syntax."
        },
        "asyncMode": {
          "guessedname": "asyncMode",
          "default": "\"allowAll\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Defines request\/response management in the following manner:\n<dl>\n<!--<dt>queueRequests<\/dt>\n<dd>If a request is already in progress, wait until response is returned before sending the next request.<\/dd>\n<dt>cancelStaleRequests<\/dt>\n<dd>If a request is already in progress, cancel it before sending the next request.<\/dd>-->\n<dt>ignoreStaleResponses<\/dt>\n<dd>Send all requests, but handle only the response for the most recently sent request.<\/dd>\n<dt>allowAll<\/dt>\n<dd>Send all requests and handle all responses.<\/dd>\n<\/dl>"
        },
        "scriptCallbackParam": {
          "guessedname": "scriptCallbackParam",
          "default": "\"callback\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Callback string parameter name sent to the remote script. By default,\nrequests are sent to\n&#60;URI&#62;?&#60;scriptCallbackParam&#62;=callbackFunction"
        }
      },
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"dataSourceGet\"",
          "guessedtype": "property",
          "description": "Class name."
        },
        "_tId": {
          "guessedname": "_tId",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Unique ID to track requests."
        },
        "callbacks": {
          "guessedname": "callbacks",
          "static": "",
          "type": "Function[]",
          "guessedtype": "property",
          "description": "Global array of callback functions, one for each request sent."
        }
      }
    },
    "Cache": {
      "shortname": "Cache",
      "superclass": "Plugin.Base",
      "methods": {
        "add": {
          "guessedname": "add",
          "guessedtype": "function",
          "description": "Adds a new entry to the cache of the format\n{request:request, response:response, payload:payload}.\nIf cache is full, evicts the stalest entry before adding the new one.",
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "  Request value."
            },
            {
              "name": "response",
              "type": "Object",
              "description": "  Response value."
            },
            {
              "name": "payload",
              "type": "Object",
              "description": "  (optional) Arbitrary data payload."
            }
          ]
        },
        "initializer": {
          "private": "",
          "guessedname": "initializer",
          "guessedtype": "function",
          "description": "Internal init() handler.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Config object."
            }
          ]
        },
        "_defAddFn": {
          "guessedname": "_defAddFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Adds entry to cache.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)<\/dt> <dd>The cached entry.<\/dd>\n<\/dl>"
            }
          ]
        },
        "destructor": {
          "guessedname": "destructor",
          "private": "",
          "guessedtype": "function",
          "description": "Internal destroy() handler."
        },
        "flush": {
          "guessedname": "flush",
          "guessedtype": "function",
          "description": "Flushes cache."
        },
        "_isMatch": {
          "guessedname": "_isMatch",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "entry",
              "type": "Object",
              "description": "  Cached entry."
            }
          ],
          "description": "Default overridable method compares current request with given cache entry.\nReturns true if current request matches the cached request, otherwise\nfalse. Implementers should override this method to customize the\ncache-matching algorithm.",
          "return": {
            "type": "Boolean",
            "description": "True if current request matches given cached request, false otherwise."
          }
        },
        "_defFlushFn": {
          "guessedname": "_defFlushFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Flushes cache.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade object."
            }
          ]
        },
        "retrieve": {
          "guessedname": "retrieve",
          "guessedtype": "function",
          "description": "Retrieves cached entry for given request, if available, and refreshes\nentry in the cache. Returns null if there is no cache match.",
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "  Request object."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Cached entry object with the properties request, response, and payload, or null."
          }
        }
      },
      "name": "Cache",
      "extends": "Plugin.Base",
      "guessedname": "Cache",
      "module": "cache",
      "namespace": "",
      "events": {
        "maxChange": {
          "name": "maxChange",
          "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "entriesChange": {
          "name": "entriesChange",
          "description": "Fires when the value for the configuration attribute 'entries' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "add": {
          "preventable": "_defAddFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Fired when an entry is added.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)<\/dt> <dd>The cached entry.<\/dd>\n<\/dl>"
            }
          ]
        },
        "uniqueKeysChange": {
          "name": "uniqueKeysChange",
          "description": "Fires when the value for the configuration attribute 'uniqueKeys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "request": {
          "description": "Fired when an entry is requested from the cache.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>request (Object)<\/dt> <dd>The request object.<\/dd>\n<\/dl>"
            }
          ]
        },
        "flush": {
          "preventable": "_defFlushFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Fired when the cache is flushed.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade object."
            }
          ]
        },
        "retrieve": {
          "description": "Fired when an entry is retrieved from the cache.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)<\/dt> <dd>The retrieved entry.<\/dd>\n<\/dl>"
            }
          ]
        },
        "sizeChange": {
          "name": "sizeChange",
          "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Base class for the YUI Cache utility."
        }
      ],
      "guessedtype": "function",
      "description": "Base class for the YUI Cache utility.",
      "file": "cache.js",
      "configs": {
        "size": {
          "guessedname": "size",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number of entries currently cached."
        },
        "max": {
          "guessedname": "max",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "Maximum number of entries the Cache can hold.\nSet to 0 to turn off caching."
        },
        "entries": {
          "guessedname": "entries",
          "type": "Array",
          "guessedtype": "property",
          "description": "Cached entries."
        },
        "uniqueKeys": {
          "guessedname": "uniqueKeys",
          "type": "Number",
          "guessedtype": "property",
          "description": "Validate uniqueness of stored keys. Default is false and\nis more performant."
        }
      },
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"cache\"",
          "guessedtype": "property",
          "description": "Class name."
        },
        "NS": {
          "final": "",
          "guessedname": "NS",
          "static": "",
          "type": "String",
          "value": "\"cache\"",
          "guessedtype": "property",
          "description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance."
        },
        "_entries": {
          "private": "",
          "guessedname": "_entries",
          "type": "Object[]",
          "guessedtype": "property",
          "description": "Array of request\/response objects indexed chronologically."
        }
      }
    },
    "Test.Reporter": {
      "shortname": "Reporter",
      "methods": {
        "report": {
          "guessedname": "report",
          "guessedtype": "function",
          "description": "Sends the report to the server.",
          "params": [
            {
              "name": "results",
              "type": "Object",
              "description": " The results object created by TestRunner."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Cleans up the memory associated with the TestReporter, removing DOM elements\nthat were created.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "addField": {
          "guessedname": "addField",
          "guessedtype": "function",
          "description": "Adds a field to the form that submits the results.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the field."
            },
            {
              "name": "value",
              "type": "Variant",
              "description": " The value of the field."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        }
      },
      "name": "Test.Reporter",
      "guessedname": "Reporter",
      "module": "test",
      "namespace": "Test",
      "constructors": [
        {
          "description": "An object capable of sending test results to a server.",
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": " The URL to submit the results to."
            },
            {
              "name": "format",
              "type": "Function",
              "description": " (Optiona) A function that outputs the results in a specific format.\nDefault is Y.Test.Format.XML."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "An object capable of sending test results to a server.",
      "file": "TestReporter.js",
      "properties": {
        "format": {
          "guessedname": "format",
          "type": "Function",
          "guessedtype": "property",
          "description": "The formatting function to call when submitting the data."
        },
        "_fields": {
          "private": "",
          "guessedname": "_fields",
          "type": "Object",
          "guessedtype": "property",
          "description": "Extra fields to submit with the request."
        },
        "url": {
          "guessedname": "url",
          "type": "String",
          "guessedtype": "property",
          "description": "The URL to submit the data to."
        },
        "_iframe": {
          "private": "",
          "guessedname": "_iframe",
          "type": "HTMLIFrameElement",
          "guessedtype": "property",
          "description": "Iframe used as a target for form submission."
        },
        "_form": {
          "private": "",
          "guessedname": "_form",
          "type": "HTMLFormElement",
          "guessedtype": "property",
          "description": "The form element used to submit the results."
        }
      }
    },
    "Assert.ShouldFail": {
      "shortname": "ShouldFail",
      "superclass": "Assert.Error",
      "name": "Assert.ShouldFail",
      "extends": "Assert.Error",
      "guessedname": "ShouldFail",
      "module": "test",
      "namespace": "Assert",
      "constructors": [
        {
          "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the error that occurred."
        }
      }
    },
    "Test.DateAssert": {
      "shortname": "DateAssert",
      "methods": {
        "timesAreEqual": {
          "guessedname": "timesAreEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a date's hour, minutes, and seconds are equal to another date's.",
          "params": [
            {
              "name": "expected",
              "type": "Date",
              "description": " The expected date."
            },
            {
              "name": "actual",
              "type": "Date",
              "description": " The actual date to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "datesAreEqual": {
          "guessedname": "datesAreEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a date's month, day, and year are equal to another date's.",
          "params": [
            {
              "name": "expected",
              "type": "Date",
              "description": " The expected date."
            },
            {
              "name": "actual",
              "type": "Date",
              "description": " The actual date to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        }
      },
      "name": "Test.DateAssert",
      "guessedname": "DateAssert",
      "module": "test",
      "namespace": "Test",
      "static": "",
      "guessedtype": "property",
      "description": "The DateAssert object provides functions to test JavaScript Date objects\nfor a variety of cases.",
      "file": "DateAssert.js"
    },
    "State": {
      "shortname": "State",
      "methods": {
        "removeAll": {
          "guessedname": "removeAll",
          "guessedtype": "function",
          "description": "Removes multiple properties from an item, or remove the item completely.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  The name of the item."
            },
            {
              "name": "o",
              "type": "Object|Array",
              "description": "  Collection of properties to delete. If not provided, the entire item is removed."
            }
          ]
        },
        "get": {
          "guessedname": "get",
          "guessedtype": "function",
          "description": "For a given item, returns the value of the property requested, or undefined if not found.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  The name of the item"
            },
            {
              "name": "key",
              "type": "String",
              "description": "  Optional. The property value to retrieve."
            }
          ],
          "return": {
            "type": "Any",
            "description": "The value of the supplied property."
          }
        },
        "addAll": {
          "guessedname": "addAll",
          "guessedtype": "function",
          "description": "Adds multiple properties to an item.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  The name of the item."
            },
            {
              "name": "o",
              "type": "Object",
              "description": "  A hash of property\/value pairs."
            }
          ]
        },
        "add": {
          "guessedname": "add",
          "guessedtype": "function",
          "description": "Adds a property to an item.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  The name of the item."
            },
            {
              "name": "key",
              "type": "String",
              "description": "  The name of the property."
            },
            {
              "name": "val",
              "type": "Any",
              "description": "  The value of the property."
            }
          ]
        },
        "getAll": {
          "guessedname": "getAll",
          "guessedtype": "function",
          "description": "For the given item, returns a disposable object with all of the\nitem's property\/value pairs.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  The name of the item"
            }
          ],
          "return": {
            "type": "Object",
            "description": "An object with property\/value pairs for the item."
          }
        },
        "remove": {
          "guessedname": "remove",
          "guessedtype": "function",
          "description": "Removes a property from an item.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  The name of the item."
            },
            {
              "name": "key",
              "type": "String",
              "description": "  The property to remove."
            }
          ]
        }
      },
      "name": "State",
      "guessedname": "State",
      "module": "attribute",
      "namespace": "",
      "constructors": [
        {
          "description": "The State class maintains state for a collection of named items, with \na varying number of properties defined.\nIt avoids the need to create a separate class for the item, and separate instances \nof these classes for each item, by storing the state in a 2 level hash table, \nimproving performance when the number of items is likely to be large."
        }
      ],
      "guessedtype": "function",
      "description": "The State class maintains state for a collection of named items, with \na varying number of properties defined.\nIt avoids the need to create a separate class for the item, and separate instances \nof these classes for each item, by storing the state in a 2 level hash table, \nimproving performance when the number of items is likely to be large.",
      "file": "State.js",
      "properties": {
        "data": {
          "guessedname": "data",
          "guessedtype": "property",
          "description": "Hash of attributes"
        }
      }
    },
    "DataSource.Function": {
      "shortname": "DataSource.Function",
      "superclass": "DataSource.Local",
      "methods": {
        "_defRequestFn": {
          "guessedname": "_defRequestFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Passes query string to IO. Fires <code>response<\/code> event when\nresponse is received asynchronously.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<\/dl>"
            }
          ]
        }
      },
      "name": "DataSource.Function",
      "extends": "DataSource.Local",
      "guessedname": "LANG",
      "module": "datasource",
      "namespace": "",
      "events": {
        "sourceChange": {
          "name": "sourceChange",
          "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Function subclass for the DataSource Utility."
        }
      ],
      "guessedtype": "property",
      "description": "Function subclass for the DataSource Utility.",
      "file": "datasource-function.js",
      "configs": {
        "source": {
          "guessedname": "source",
          "default": "null",
          "type": "MIXED",
          "guessedtype": "property",
          "description": "Pointer to live data."
        }
      },
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"dataSourceFunction\"",
          "guessedtype": "property",
          "description": "Class name."
        }
      }
    },
    "WidgetPositionExt": {
      "shortname": "WidgetPositionExt",
      "methods": {
        "_uiSetAlign": {
          "guessedname": "_uiSetAlign",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the UI to reflect the align value passed in (see the align attribute documentation, for the object stucture expected)",
          "params": [
            {
              "name": "The",
              "type": "Node | null",
              "description": " node to align to, or null to indicate the viewport"
            }
          ]
        },
        "centered": {
          "guessedname": "centered",
          "guessedtype": "function",
          "description": "Centers the container in the viewport, or if a node is passed in,\nthe node.",
          "params": [
            {
              "name": "node",
              "type": "Node | String",
              "description": " Optional. A node reference or selector string defining the node \ninside which the Widget is to be centered. If not passed in, the Widget will be centered in the \nviewport."
            }
          ]
        },
        "_syncUIPosExtras": {
          "guessedname": "_syncUIPosExtras",
          "guessedtype": "function",
          "protected": "",
          "description": "Synchronizes the UI to match the Widgets extended positioning state.\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure."
        },
        "_bindUIStack": {
          "guessedname": "_bindUIPosExtras",
          "guessedtype": "function",
          "protected": "",
          "description": "Binds event listeners responsible for updating the UI state in response to \nWidget extended positioning related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>"
        },
        "_setAlignCenter": {
          "guessedname": "_setAlignCenter",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "The",
              "type": "boolean | node",
              "description": " attribute value being set."
            }
          ],
          "description": "Default setter for center attribute changes. Sets up the appropriate value, and passes \nit through the to the align attribute.",
          "return": {
            "type": "Number",
            "description": "The attribute value being set."
          }
        },
        "_afterAlignChange": {
          "guessedname": "_afterAlignChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default attribute change listener for the align attribute, responsible\nfor updating the UI, in response to attribute changes.",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "align": {
          "guessedname": "align",
          "guessedtype": "function",
          "description": "Aligns the Widget to the provided node (or viewport) using the provided\npoints. The method can be invoked directly, however it will result in \nthe align attribute being out of sync with current position of the of Widget.",
          "params": [
            {
              "name": "node",
              "type": "Node | String | null",
              "description": " A reference (or selector string) for the Node which with the Widget is to be aligned.\nIf null is passed in, the Widget will be aligned with the viewport."
            },
            {
              "name": "points",
              "type": "Array[2]",
              "description": " A two element array, specifying the points on the Widget and node\/viewport which need to be aligned. \nThe first entry is the point on the Widget, and the second entry is the point on the node\/viewport which need to align.\nValid point references are defined as static constants on the WidgetPositionExt class. \ne.g. [WidgetPositionExt.TL, WidgetPositionExt.TR] will align the top-left corner of the Widget with the top-right corner of the node\/viewport."
            }
          ]
        },
        "_doAlign": {
          "private": "",
          "guessedname": "_doAlign",
          "guessedtype": "function",
          "description": "Helper method, used to align the given point on the widget, with the XY page co-ordinates provided.",
          "params": [
            {
              "name": "widgetPoint",
              "type": "String",
              "description": " Supported point constant (e.g. WidgetPositionExt.TL)"
            },
            {
              "name": "x",
              "type": "Number",
              "description": " X page co-ordinate to align to"
            },
            {
              "name": "y",
              "type": "Number",
              "description": " Y page co-ordinate to align to"
            }
          ]
        }
      },
      "name": "WidgetPositionExt",
      "module": "widget-position-ext",
      "namespace": "",
      "param": "{Object} User configuration object",
      "events": {
        "centeredChange": {
          "name": "centeredChange",
          "description": "Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "alignChange": {
          "name": "alignChange",
          "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "description": "Widget extension, which can be used to add extended XY positioning support to the base Widget class,\nthrough the <a href=\"Base.html#method_build\">Base.build<\/a> method. This extension requires that \nthe WidgetPosition extension be added to the Widget (before WidgetPositionExt, if part of the same \nextension list passed to Base.build).",
      "file": "Widget-PositionExt.js",
      "configs": {
        "centered": {
          "guessedname": "centered",
          "default": "false",
          "type": "{boolean | node}",
          "guessedtype": "property",
          "description": "A convenience attribute, which can be used as a shortcut for the align attribute.\nIf set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,\nthe Widget will be centered within the node. If set the false, no center positioning is applied."
        },
        "align": {
          "guessedname": "align",
          "desciption": "The align attribute is used to align a reference point on the widget, with the refernce point on another node, or the viewport. \nThe object which align expects has the following properties:\n<dl>\n<dt>node<\/dt>\n<dd>\nThe node to which the Widget is to be aligned. If set to null, or not provided, the Widget is aligned to the viewport\n<\/dd>\n<dt>points<\/dt>\n<dd>\n<p>\nA two element array, defining the two points on the Widget and node\/viewport which are to be aligned. The first element is the point on the Widget, and the second element is the point on the node\/viewport.\nSupported alignment points are defined as static properties on <code>WidgetPositionExt<\/code>.\n<\/p>\n<p>\ne.g. <code>[WidgetPositionExt.TR, WidgetPositionExt.TL]<\/code> aligns the Top-Right corner of the Widget with the\nTop-Left corner of the node\/viewport, and <code>[WidgetPositionExt.CC, WidgetPositionExt.TC]<\/code> aligns the Center of the \nWidget with the Top-Center edge of the node\/viewport.\n<\/p>\n<\/dd>\n<\/dl>",
          "default": "null",
          "type": "Object",
          "guessedtype": "property"
        }
      },
      "properties": {
        "WidgetPositionExt.TC": {
          "guessedname": "TC",
          "static": "",
          "type": "String",
          "value": "\"tc\"",
          "guessedtype": "property",
          "description": "Constant used to specify the top edge-center point for alignment"
        },
        "WidgetPositionExt.BR": {
          "guessedname": "BR",
          "static": "",
          "type": "String",
          "value": "\"br\"",
          "guessedtype": "property",
          "description": "Constant used to specify the bottom-right corner for alignment"
        },
        "WidgetPositionExt.RC": {
          "guessedname": "RC",
          "static": "",
          "type": "String",
          "value": "\"rc\"",
          "guessedtype": "property",
          "description": "Constant used to specify the right edge, center point for alignment"
        },
        "WidgetPositionExt.TR": {
          "guessedname": "TR",
          "static": "",
          "type": "String",
          "value": "\"tr\"",
          "guessedtype": "property",
          "description": "Constant used to specify the top-right corner for alignment"
        },
        "WidgetPositionExt.BL": {
          "guessedname": "BL",
          "static": "",
          "type": "String",
          "value": "\"bl\"",
          "guessedtype": "property",
          "description": "Constant used to specify the bottom-left corner for alignment"
        },
        "WidgetPositionExt.CC": {
          "guessedname": "CC",
          "static": "",
          "type": "String",
          "value": "\"cc\"",
          "guessedtype": "property",
          "description": "Constant used to specify the center of widget\/node\/viewport for alignment"
        },
        "WidgetPositionExt.BC": {
          "guessedname": "BC",
          "static": "",
          "type": "String",
          "value": "\"bc\"",
          "guessedtype": "property",
          "description": "Constant used to specify the bottom edge, center point for alignment"
        },
        "WidgetPositionExt.LC": {
          "guessedname": "LC",
          "static": "",
          "type": "String",
          "value": "\"lc\"",
          "guessedtype": "property",
          "description": "Constant used to specify the left edge, center point for alignment"
        },
        "WidgetPositionExt.TL": {
          "guessedname": "TL",
          "static": "",
          "type": "String",
          "value": "\"tl\"",
          "guessedtype": "property",
          "description": "Constant used to specify the top-left corner for alignment"
        },
        "WidgetPositionExt.ATTRS": {
          "guessedname": "ATTRS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPositionExt."
        }
      }
    },
    "DataSourceTextSchema": {
      "shortname": "DataSourceTextSchema",
      "superclass": "Plugin.Base",
      "methods": {
        "_beforeDefDataFn\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<\/dl>": {
          "guessedname": "_beforeDefDataFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Parses raw data into a normalized response."
        },
        "initializer": {
          "private": "",
          "guessedname": "initializer",
          "guessedtype": "function",
          "description": "Internal init() handler.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Config object."
            }
          ]
        }
      },
      "name": "DataSourceTextSchema",
      "extends": "Plugin.Base",
      "guessedname": "DataSourceTextSchema",
      "module": "datasource",
      "namespace": "",
      "guessedtype": "function",
      "description": "Adds schema-parsing to the DataSource Utility.",
      "file": "datasource-textschema.js",
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"dataSourceTextSchema\"",
          "guessedtype": "property",
          "description": "Class name."
        },
        "NS": {
          "final": "",
          "guessedname": "NS",
          "static": "",
          "type": "String",
          "value": "\"schema\"",
          "guessedtype": "property",
          "description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance."
        }
      }
    },
    "DataSchema.Text": {
      "shortname": "DataSchema.Text",
      "superclass": "DataSchema.Base",
      "methods": {
        "apply": {
          "guessedname": "apply",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "schema",
              "type": "Object",
              "description": "  Schema to apply."
            },
            {
              "name": "data",
              "type": "Object",
              "description": "  Text data."
            }
          ],
          "description": "Applies a given schema to given delimited text data.",
          "return": {
            "type": "Object",
            "description": "Schema-parsed data."
          }
        },
        "_parseResults": {
          "guessedname": "_parseResults",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "schema",
              "type": "Array",
              "description": "  Schema to parse against."
            },
            {
              "name": "text_in",
              "type": "String",
              "description": "  Text to parse."
            },
            {
              "name": "data_out",
              "type": "Object",
              "description": "  In-progress parsed data to update."
            }
          ],
          "description": "Schema-parsed list of results from full data",
          "return": {
            "type": "Object",
            "description": "Parsed data object."
          }
        }
      },
      "name": "DataSchema.Text",
      "extends": "DataSchema.Base",
      "guessedname": "LANG",
      "module": "dataschema",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "Text subclass for the DataSchema Utility.",
      "file": "dataschema-text.js"
    },
    "YUI~oop": {
      "shortname": "YUI~oop",
      "methods": {
        "aggregate": {
          "guessedname": "aggregate",
          "guessedtype": "function",
          "description": "Applies object properties from the supplier to the receiver.  If\nthe target has the property, and the property is an object, the target\nobject will be augmented with the supplier's value.  If the property\nis an array, the suppliers value will be appended to the target.",
          "params": [
            {
              "name": "r",
              "type": "Function",
              "description": "  the object to receive the augmentation"
            },
            {
              "name": "s",
              "type": "Function",
              "description": "  the object that supplies the properties to augment"
            },
            {
              "name": "ov",
              "type": "boolean",
              "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."
            },
            {
              "name": "wl",
              "type": "string[]",
              "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."
            }
          ],
          "return": {
            "type": "object",
            "description": "the extended object"
          }
        },
        "each": {
          "guessedname": "each",
          "guessedtype": "function",
          "description": "Executes the supplied function for each item in\na collection.  Supports arrays, objects, and\nY.NodeLists",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " the object to iterate"
            },
            {
              "name": "f",
              "type": "",
              "description": " the function to execute.  This function\nreceives the value, key, and object as parameters"
            },
            {
              "name": "proto",
              "type": "",
              "description": " if true, prototype properties are\niterated on objects"
            }
          ],
          "return": {
            "type": "YUI",
            "description": "the YUI instance"
          }
        },
        "rbind": {
          "guessedname": "rbind",
          "guessedtype": "function",
          "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.",
          "params": [
            {
              "name": "f",
              "type": "Function|String",
              "description": "  the function to bind, or a function name\nto execute on the context object"
            },
            {
              "name": "c",
              "type": "",
              "description": " the execution context"
            },
            {
              "name": "args*",
              "type": "",
              "description": " 0..n arguments to append to the end of arguments collection\nsupplied to the function"
            }
          ],
          "return": {
            "type": "function",
            "description": "the wrapped function"
          }
        },
        "clone": {
          "guessedname": "clone",
          "guessedtype": "function",
          "todo": "review",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " what to clone"
            },
            {
              "name": "safe",
              "type": "boolean",
              "description": "  if true, objects will not have prototype\nitems from the source.  If false, they will.  In this case, the\noriginal is initially protected, but the clone is not completely immune\nfrom changes to the source object prototype.  Also, cloned prototype\nitems that are deleted from the clone will result in the value\nof the source prototype being exposed.  If operating on a non-safe\nclone, items should be nulled out rather than deleted."
            },
            {
              "name": "f",
              "type": "",
              "description": " optional function to apply to each item in a collection;\nit will be executed prior to applying the value to\nthe new object.  Return false to prevent the copy."
            },
            {
              "name": "c",
              "type": "",
              "description": " optional execution context for f"
            },
            {
              "name": "owner",
              "type": "",
              "description": " Owner object passed when clone is iterating an\nobject.  Used to set up context for cloned functions."
            }
          ],
          "description": "Deep obj\/array copy.  Functions are cloned with Y.bind.\nArray-like objects are treated as arrays.\nPrimitives are returned untouched.  Optionally, a\nfunction can be provided to handle other data types,\nfilter keys, validate values, etc.",
          "return": {
            "type": "Array|Object",
            "description": "the cloned object"
          }
        },
        "bind": {
          "guessedname": "bind",
          "guessedtype": "function",
          "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the beginning of the arguments collection the \nsupplied to the function.",
          "params": [
            {
              "name": "f",
              "type": "Function|String",
              "description": "  the function to bind, or a function name\nto execute on the context object"
            },
            {
              "name": "c",
              "type": "",
              "description": " the execution context"
            },
            {
              "name": "args*",
              "type": "",
              "description": " 0..n arguments to include before the arguments the \nfunction is executed with."
            }
          ],
          "return": {
            "type": "function",
            "description": "the wrapped function"
          }
        },
        "extend": {
          "guessedname": "extend",
          "guessedtype": "function",
          "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.",
          "params": [
            {
              "name": "r",
              "type": "Function",
              "description": "   the object to modify"
            },
            {
              "name": "s",
              "type": "Function",
              "description": " the object to inherit"
            },
            {
              "name": "px",
              "type": "Object",
              "description": " prototype properties to add\/override"
            },
            {
              "name": "sx",
              "type": "Object",
              "description": " static properties to add\/override"
            }
          ],
          "return": {
            "type": "YUI",
            "description": "the YUI instance"
          }
        },
        "augment": {
          "guessedname": "augment",
          "guessedtype": "function",
          "todo": "constructor optional?",
          "params": [
            {
              "name": "r",
              "type": "Function",
              "description": "  the object to receive the augmentation"
            },
            {
              "name": "s",
              "type": "Function",
              "description": "  the object that supplies the properties to augment"
            },
            {
              "name": "ov",
              "type": "boolean",
              "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."
            },
            {
              "name": "wl",
              "type": "string[]",
              "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."
            },
            {
              "name": "args",
              "type": "Array | Any",
              "description": "  arg or arguments to apply to the supplier\nconstructor when initializing."
            }
          ],
          "description": "Applies prototype properties from the supplier to the receiver.\nThe receiver can be a constructor or an instance.",
          "return": {
            "type": "object",
            "description": "the augmented object"
          }
        }
      },
      "name": "YUI~oop",
      "module": "oop",
      "namespace": "",
      "description": "The following methods are added to the YUI instance",
      "file": "oop.js"
    },
    "plugin.NodeFocusManager": {
      "shortname": "NodeFocusManager",
      "methods": {
        "stop": {
          "guessedname": "stop",
          "guessedtype": "function",
          "description": "Disables the Focus Manager by detaching all event handlers."
        },
        "_focusNext": {
          "guessedname": "_focusNext",
          "guessedtype": "function",
          "protected": "",
          "description": "Keydown event handler that moves focus to the next \nenabled descendant.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": "  Object representing the DOM event."
            },
            {
              "name": "activeDescendant",
              "type": "Number",
              "description": "  Number representing the index of the \nnext descendant to be focused"
            }
          ]
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Focuses the active descendant and sets the  \n<code>focused<\/code> attribute to true.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  Optional. Number representing the index of the \ndescendant to be set as the active descendant."
            },
            {
              "name": "index",
              "type": "Node",
              "description": "  Optional. Node instance representing the \ndescendant to be set as the active descendant."
            }
          ]
        },
        "_onDocMouseDown": {
          "guessedname": "_onDocMouseDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mousedown\" event handler for the owner document of the \nFocus Manager's Node.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": "  Object representing the DOM event."
            }
          ]
        },
        "refresh": {
          "guessedname": "refresh",
          "guessedtype": "function",
          "description": "Refreshes the Focus Manager's descendants by re-executing the \nCSS selector query specified by the <code>descendants<\/code> attribute."
        },
        "_attachKeyHandler": {
          "guessedname": "_attachKeyHandler",
          "guessedtype": "function",
          "protected": "",
          "description": "Attaches the \"key\" event handlers used to support the \"keys\"\nattribute."
        },
        "_isDescendant": {
          "guessedname": "_isDescendant",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "  Node instance to be checked."
            }
          ],
          "description": "Determines if the specified Node instance is a descendant\nmanaged by the Focus Manager.",
          "return": {
            "type": "Boolean",
            "description": "Boolean indicating if the specified Node instance is a \ndescendant managed by the Focus Manager."
          }
        },
        "start": {
          "guessedname": "start",
          "guessedtype": "function",
          "description": "Enables the Focus Manager."
        },
        "_removeFocusClass": {
          "guessedname": "_removeFocusClass",
          "guessedtype": "function",
          "protected": "",
          "description": "Removes the class name representing focus (as specified by \nthe \"focusClass\" attribute) from the Node instance to which it is \ncurrently applied."
        },
        "blur": {
          "guessedname": "blur",
          "guessedtype": "function",
          "description": "Blurs the current active descendant and sets the \n<code>focused<\/code> attribute to false."
        },
        "_afterActiveDescendantChange": {
          "guessedname": "_afterActiveDescendantChange",
          "guessedtype": "function",
          "protected": "",
          "description": "afterChange event handler for the \n\"activeDescendant\" attribute.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": "  Object representing the change event."
            }
          ]
        },
        "_initDescendants": {
          "guessedname": "_initDescendants",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the <code>tabIndex<\/code> attribute of all of the \ndescendants to -1, except the active descendant, whose \n<code>tabIndex<\/code> attribute is set to 0."
        },
        "_detachEventHandlers": {
          "guessedname": "_detachEventHandlers",
          "guessedtype": "function",
          "protected": "",
          "description": "Detaches all event handlers used by the Focus Manager."
        },
        "_detachKeyHandler": {
          "guessedname": "_detachKeyHandler",
          "guessedtype": "function",
          "protected": "",
          "description": "Detaches the \"key\" event handlers used to support the \"keys\"\nattribute."
        },
        "_focusPrevious": {
          "guessedname": "_focusPrevious",
          "guessedtype": "function",
          "protected": "",
          "description": "Keydown event handler that moves focus to the previous \nenabled descendant.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": "  Object representing the DOM event."
            },
            {
              "name": "activeDescendant",
              "type": "Number",
              "description": "  Number representing the index of the \nnext descendant to be focused."
            }
          ]
        },
        "_onDocFocus": {
          "guessedname": "_onDocFocus",
          "guessedtype": "function",
          "protected": "",
          "description": "\"focus\" event handler for the owner document of the \nFocus Manager's Node.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": "  Object representing the DOM event."
            }
          ]
        },
        "_preventScroll": {
          "guessedname": "_preventScroll",
          "guessedtype": "function",
          "protected": "",
          "description": "Prevents the viewport from scolling when the user presses \nthe up, down, left, or right key."
        }
      },
      "name": "plugin.NodeFocusManager",
      "guessedname": "NodeFocusManager",
      "module": "node-focusmanager",
      "namespace": "plugin",
      "events": {
        "focusedChange": {
          "name": "focusedChange",
          "description": "Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "circularChange": {
          "name": "circularChange",
          "description": "Fires when the value for the configuration attribute 'circular' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "descendantsChange": {
          "name": "descendantsChange",
          "description": "Fires when the value for the configuration attribute 'descendants' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "focusClassChange": {
          "name": "focusClassChange",
          "description": "Fires when the value for the configuration attribute 'focusClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "keysChange": {
          "name": "keysChange",
          "description": "Fires when the value for the configuration attribute 'keys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "activeDescendantChange": {
          "name": "activeDescendantChange",
          "description": "Fires when the value for the configuration attribute 'activeDescendant' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "guessedtype": "function",
      "description": "The NodeFocusManager class is a plugin for a Node instance.  The class is used \nvia the <a href=\"Node.html#method_plug\"><code>plug<\/code><\/a> method of Node \nand should not be instantiated directly.",
      "configs": {
        "circular": {
          "guessedname": "circular",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean indicating if focus should be set to the first\/last descendant \nwhen the end or beginning of the descendants has been reached."
        },
        "keys": {
          "guessedname": "keys",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object literal representing the keys to be used to navigate between the \nnext\/previous descendant.  The format for the attribute's value is \n<code>{ next: \"down:40\", previous: \"down:38\" }<\/code>.  The value for the \n\"next\" and \"previous\" properties are used to attach \n<a href=\"event\/#keylistener\"><code>key<\/code><\/a> event listeners. See \nthe <a href=\"event\/#keylistener\">Using the key Event<\/a> section of \nthe Event documentation for more information on \"key\" event listeners."
        },
        "focusClass": {
          "guessedname": "focusClass",
          "type": "String|Object",
          "guessedtype": "property",
          "description": "String representing the name of class applied to the focused active  \ndescendant Node.  Can also be an object literal used to define both the \nclass name, and the Node to which the class should be applied.  If using \nan object literal, the format is:\n<code>{ className: \"focus\", fn: myFunction }<\/code>.  The function \nreferenced by the <code>fn<\/code> property in the object literal will be\npassed a reference to the currently focused active descendant Node."
        },
        "descendants": {
          "guessedname": "descendants",
          "type": "Y.NodeList",
          "guessedtype": "property",
          "description": "String representing the CSS selector used to define the descendant Nodes \nwhose focus should be managed."
        },
        "focused": {
          "guessedname": "focused",
          "default": "false",
          "readonly": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Boolean indicating that one of the descendants is focused."
        },
        "activeDescendant": {
          "guessedname": "activeDescendant",
          "type": "Number",
          "guessedtype": "property",
          "description": "<p>Node, or index of the Node, representing the descendant that is either \nfocused or is focusable (<code>tabIndex<\/code> attribute is set to 0).  \nThe value cannot represent a disabled descendant Node.  Use a value of -1\nto remove all descendant Nodes from the default tab flow.\nIf no value is specified, the active descendant will be inferred using \nthe following criteria:<\/p>\n<ol>\n<li>Examining the <code>tabIndex<\/code> attribute of each descendant and \nusing the first descendant whose <code>tabIndex<\/code> attribute is set \nto 0<\/li>\n<li>If no default can be inferred then the value is set to either 0 or \nthe index of the first enabled descendant.<\/li>\n<\/ol>"
        }
      },
      "file": "node-focusmanager.js"
    },
    "Do.Method": {
      "shortname": "Do.Method",
      "methods": {
        "delete": {
          "guessedname": "_delete",
          "guessedtype": "function",
          "description": "Unregister a aop subscriber",
          "params": [
            {
              "name": "sid",
              "type": "string",
              "description": "  the subscriber id"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  the function to execute"
            },
            {
              "name": "when",
              "type": "string",
              "description": "  when to execute the function"
            }
          ]
        },
        "register": {
          "guessedname": "register",
          "guessedtype": "function",
          "description": "Register a aop subscriber",
          "params": [
            {
              "name": "sid",
              "type": "string",
              "description": "  the subscriber id"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  the function to execute"
            },
            {
              "name": "when",
              "type": "string",
              "description": "  when to execute the function"
            }
          ]
        },
        "exec": {
          "guessedname": "exec",
          "guessedtype": "function",
          "description": "Execute the wrapped method"
        }
      },
      "name": "Do.Method",
      "guessedname": "Method",
      "module": "event-custom",
      "namespace": "",
      "constructors": [
        {
          "description": "Wrapper for a displaced method with aop enabled",
          "params": [
            {
              "name": "obj",
              "type": "",
              "description": " The object to operate on"
            },
            {
              "name": "sFn",
              "type": "",
              "description": " The name of the method to displace"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Wrapper for a displaced method with aop enabled",
      "file": "event-do.js"
    },
    "ImgLoadGroup": {
      "shortname": "ImgLoadGroup",
      "superclass": "Base",
      "methods": {
        "_setFoldTriggers": {
          "guessedname": "_setFoldTriggers",
          "private": "",
          "guessedtype": "function",
          "description": "Sets the window scroll and window resize triggers for any group that is fold-conditional (i.e., has a fold distance set)."
        },
        "_onloadTasks": {
          "guessedname": "_onloadTasks",
          "private": "",
          "guessedtype": "function",
          "description": "Performs necessary setup at domready time.\nInitiates time limit for group; executes the fold check for the images."
        },
        "_foldCheck": {
          "guessedname": "_foldCheck",
          "private": "",
          "guessedtype": "function",
          "description": "Checks the position of each image in the group. If any part of the image is within the specified distance (<code>foldDistance<\/code>) of the client viewport, the image is fetched immediately."
        },
        "addTrigger": {
          "guessedname": "addTrigger",
          "chainable": "",
          "guessedtype": "function",
          "description": "Adds a trigger to the group. Arguments are passed to <code>Y.on<\/code>.",
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "  The DOM object to attach the trigger event to"
            },
            {
              "name": "type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        },
        "registerImage": {
          "guessedname": "registerImage",
          "guessedtype": "function",
          "description": "Registers an image with the group.\nArguments are passed through to a <code>Y.ImgLoadImgObj<\/code> constructor; see that class' attribute documentation for detailed information. \"<code>domId<\/code>\" is a required attribute.",
          "params": [
            {
              "name": "*",
              "type": "Object",
              "description": "  A configuration object literal with attribute name\/value pairs  (passed through to a <code>Y.ImgLoadImgObj<\/code> constructor)"
            }
          ],
          "return": {
            "type": "Object",
            "description": "<code>Y.ImgLoadImgObj<\/code> that was registered"
          }
        },
        "_fetchByClass": {
          "guessedname": "_fetchByClass",
          "private": "",
          "guessedtype": "function",
          "description": "Finds all elements in the DOM with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching."
        },
        "fetch": {
          "guessedname": "fetch",
          "guessedtype": "function",
          "description": "Displays the images in the group.\nThis method is called when a trigger fires or the time limit expires; it shouldn't be called externally, but is not private in the rare event that it needs to be called immediately."
        },
        "_getFetchTimeout": {
          "private": "",
          "guessedname": "_getFetchTimeout",
          "guessedtype": "function",
          "description": "Returns the group's <code>fetch<\/code> method, with the proper closure, for use with <code>setTimeout<\/code>.",
          "return": {
            "type": "Function",
            "description": "group's <code>fetch<\/code> method"
          }
        },
        "_clearTriggers": {
          "guessedname": "_clearTriggers",
          "private": "",
          "guessedtype": "function",
          "description": "Clears the timeout and all triggers associated with the group."
        },
        "_init": {
          "guessedname": "_init",
          "private": "",
          "guessedtype": "function",
          "description": "Initialize all private members needed for the group."
        },
        "addCustomTrigger": {
          "guessedname": "addCustomTrigger",
          "chainable": "",
          "guessedtype": "function",
          "description": "Adds a custom event trigger to the group.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  The name of the event"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "  The object on which to attach the event. <code>obj<\/code> is optional - by default the event is attached to the <code>Y<\/code> instance"
            }
          ]
        }
      },
      "name": "ImgLoadGroup",
      "extends": "Base",
      "guessedname": "ImgLoadGroup",
      "module": "imageloader",
      "namespace": "",
      "events": {
        "nameChange": {
          "name": "nameChange",
          "description": "Fires when the value for the configuration attribute 'name' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "classNameChange": {
          "name": "classNameChange",
          "description": "Fires when the value for the configuration attribute 'className' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "timeLimitChange": {
          "name": "timeLimitChange",
          "description": "Fires when the value for the configuration attribute 'timeLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "foldDistanceChange": {
          "name": "foldDistanceChange",
          "description": "Fires when the value for the configuration attribute 'foldDistance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."
        }
      ],
      "guessedtype": "function",
      "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.",
      "configs": {
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "Name for the group. Only used to identify the group in logging statements."
        },
        "foldDistance": {
          "guessedname": "foldDistance",
          "type": "Number",
          "guessedtype": "property",
          "description": "Distance below the fold for which images are loaded. Images are not loaded until they are at most this distance away from (or above) the fold.\nThis check is performed at page load (domready) and after any window scroll or window resize event (until all images are loaded)."
        },
        "className": {
          "guessedname": "className",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.\nThis class should have, in its CSS style definition, \"<code>background:none !important;<\/code>\"."
        },
        "timeLimit": {
          "guessedname": "timeLimit",
          "type": "Number",
          "guessedtype": "property",
          "description": "Time limit, in seconds, after which images are fetched regardless of trigger events."
        }
      },
      "file": "imageloader.js",
      "properties": {
        "_classImageEls": {
          "private": "",
          "guessedname": "_classImageEls",
          "type": "Array",
          "guessedtype": "property",
          "description": "DOM elements having the class name that is associated with this group.\nElements are stored during the <code>_foldCheck<\/code> function and reused later during any subsequent <code>_foldCheck<\/code> calls - gives a slight performance improvement when the page fold is repeatedly checked."
        },
        "_timeout": {
          "private": "",
          "guessedname": "_timeout",
          "type": "Object",
          "guessedtype": "property",
          "description": "Timeout object to keep a handle on the time limit."
        },
        "_imgObjs": {
          "private": "",
          "guessedname": "_imgObjs",
          "type": "Object",
          "guessedtype": "property",
          "description": "Collection of images (<code>Y.ImgLoadImgObj<\/code> objects) registered with this group, keyed by DOM id."
        },
        "_className": {
          "private": "",
          "guessedname": "_className",
          "type": "String",
          "guessedtype": "property",
          "description": "Keep the CSS class name in a member variable for ease and speed."
        },
        "_triggers": {
          "private": "",
          "guessedname": "_triggers",
          "type": "Array",
          "guessedtype": "property",
          "description": "Collection of triggers for this group.\nKeeps track of each trigger's event handle, as returned from <code>Y.on<\/code>."
        },
        "_maxKnownHLimit": {
          "private": "",
          "guessedname": "_maxKnownHLimit",
          "type": "Int",
          "guessedtype": "property",
          "description": "The maximum pixel height of the document that has been made visible.\nDuring fold checks, if the user scrolls up then there's no need to check for newly exposed images."
        },
        "_areFoldTriggersSet": {
          "private": "",
          "guessedname": "_areFoldTriggersSet",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean tracking whether the window scroll and window resize triggers have been set if this is a fold group."
        }
      }
    },
    "DataSchema.Base": {
      "shortname": "DataSchema.Base",
      "methods": {
        "apply": {
          "guessedname": "apply",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "schema",
              "type": "Object",
              "description": "  Schema to apply."
            },
            {
              "name": "data",
              "type": "Object",
              "description": "  Data."
            }
          ],
          "description": "Overridable method returns data as-is.",
          "return": {
            "type": "Object",
            "description": "Schema-parsed data."
          }
        },
        "parse": {
          "guessedname": "parse",
          "guessedtype": "function",
          "description": "Applies field parser, if defined",
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "  Original value."
            },
            {
              "name": "field",
              "type": "Object",
              "description": "  Field."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Type-converted value."
          }
        }
      },
      "name": "DataSchema.Base",
      "guessedname": "SchemaBase",
      "module": "dataschema",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "Base class for the YUI DataSchema Utility.",
      "file": "dataschema-base.js"
    },
    "Test.Case": {
      "shortname": "Case",
      "methods": {
        "wait": {
          "guessedname": "wait",
          "guessedtype": "function",
          "description": "Causes the test case to wait a specified amount of time and then\ncontinue executing the given code.",
          "params": [
            {
              "name": "segment",
              "type": "Function",
              "description": " (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called."
            },
            {
              "name": "delay",
              "type": "int",
              "description": " (Optional) The number of milliseconds to wait before running\nthe function. If omitted, defaults to zero."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "resume": {
          "guessedname": "resume",
          "guessedtype": "function",
          "description": "Resumes a paused test and runs the given function.",
          "params": [
            {
              "name": "segment",
              "type": "Function",
              "description": " (Optional) The function to run.\nIf omitted, the test automatically passes."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "tearDown": {
          "guessedname": "tearDown",
          "guessedtype": "function",
          "description": "Function to run after each test is executed.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "setUp": {
          "guessedname": "setUp",
          "guessedtype": "function",
          "description": "Function to run before each test is executed.",
          "return": {
            "type": "Void",
            "description": ""
          }
        }
      },
      "name": "Test.Case",
      "guessedname": "Case",
      "module": "test",
      "namespace": "Test",
      "constructors": [
        {
          "description": "Test case containing various tests to run.",
          "params": [
            {
              "name": "template",
              "type": "",
              "description": " An object containing any number of test methods, other methods,\nan optional name, and anything else the test case needs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Test case containing various tests to run.",
      "file": "TestCase.js",
      "properties": {
        "name": {
          "guessedname": "name",
          "guessedtype": "property",
          "description": "Name for the test case."
        },
        "_should": {
          "guessedname": "_should",
          "guessedtype": "property",
          "description": "Special rules for the test case. Possible subobjects\nare fail, for tests that should fail, and error, for\ntests that should throw an error."
        }
      }
    },
    "Test.TestNode": {
      "shortname": "TestNode",
      "methods": {
        "appendChild": {
          "guessedname": "appendChild",
          "guessedtype": "function",
          "description": "Appends a new test object (TestSuite, TestCase, or test function name) as a child\nof this node.",
          "params": [
            {
              "name": "testObject",
              "type": "Variant",
              "description": " A TestSuite, TestCase, or the name of a test function."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        }
      },
      "name": "Test.TestNode",
      "private": "",
      "module": "test",
      "namespace": "Test",
      "constructors": [
        {
          "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function.",
          "params": [
            {
              "name": "testObject",
              "type": "Variant",
              "description": " A TestSuite, TestCase, or the name of a test function."
            }
          ]
        }
      ],
      "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function.",
      "file": "TestRunner.js",
      "properties": {
        "results": {
          "guessedname": "results",
          "type": "object",
          "guessedtype": "property",
          "description": "Test results for this test object."
        },
        "parent": {
          "guessedname": "parent",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to this node's parent."
        },
        "firstChild": {
          "guessedname": "firstChild",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to this node's first child."
        },
        "next": {
          "guessedname": "next",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to this node's next sibling."
        },
        "testObject": {
          "guessedname": "testObject",
          "type": "Variant",
          "guessedtype": "property",
          "description": "The TestSuite, TestCase, or test function represented by this node."
        },
        "lastChild": {
          "guessedname": "lastChild",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to this node's last child."
        }
      }
    },
    "plugin.NodeMenuNav": {
      "shortname": "NodeMenuNav",
      "methods": {
        "_isRoot": {
          "guessedname": "_isRoot",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "menu",
              "type": "Node",
              "description": " Node instance representing a menu."
            }
          ],
          "description": "Returns a boolean indicating if the specified menu is the \nroot menu in the menu.",
          "return": {
            "type": "Boolean",
            "description": "Boolean indicating if the specified menu is the root \nmenu in the menu."
          }
        },
        "_onMenuItemMouseOver": {
          "guessedname": "_onMenuItemMouseOver",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseover\" event handler for a menuitem.",
          "params": [
            {
              "name": "menuItem",
              "type": "Node",
              "description": " Node instance representing a menuitem."
            },
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_toggleSubmenuDisplay": {
          "guessedname": "_toggleSubmenuDisplay",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mousedown,\" \"keydown,\" and \"click\" event handler for the \nmenu used to toggle the display of a submenu.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_hideMenu": {
          "guessedname": "_hideMenu",
          "guessedtype": "function",
          "protected": "",
          "description": "Hides the specified menu.",
          "params": [
            {
              "name": "menu",
              "type": "Node",
              "description": " Node instance representing a menu."
            },
            {
              "name": "activateAndFocusLabel",
              "type": "Boolean",
              "description": " Boolean indicating if the label \nfor the specified \nmenu should be focused and set as active."
            }
          ]
        },
        "_cancelShowSubmenuTimer": {
          "guessedname": "_cancelShowSubmenuTimer",
          "guessedtype": "function",
          "protected": "",
          "description": "Cancels the timer used to show a submenu."
        },
        "_onMenuItemMouseOut": {
          "guessedname": "_onMenuItemMouseOut",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseout\" event handler for a menuitem.",
          "params": [
            {
              "name": "menuItem",
              "type": "Node",
              "description": " Node instance representing a menuitem."
            },
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_cancelHideSubmenuTimer": {
          "guessedname": "_cancelHideSubmenuTimer",
          "guessedtype": "function",
          "protected": "",
          "description": "Cancels the timer used to hide a submenu."
        },
        "_focusItem": {
          "guessedname": "_focusItem",
          "guessedtype": "function",
          "protected": "",
          "description": "Focuses the specified menuitem or menu label.",
          "params": [
            {
              "name": "item",
              "type": "Node",
              "description": " Node instance representing a menuitem or menu label."
            }
          ]
        },
        "_onKeyPress": {
          "guessedname": "_onKeyPress",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keypress\" event handler for the menu.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_initFocusManager": {
          "guessedname": "_initFocusManager",
          "guessedtype": "function",
          "protected": "",
          "description": "Initializes and updates the Focus Manager so that is is \nalways managing descendants of the active menu."
        },
        "_onMouseMove": {
          "guessedname": "_onMouseMove",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mousemove\" event handler for the menu.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_onMenuLabelMouseOut": {
          "guessedname": "_onMenuLabelMouseOut",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseout\" event handler for a menu label.",
          "params": [
            {
              "name": "menuLabel",
              "type": "Node",
              "description": " Node instance representing a menu label."
            },
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_onDocMouseDown": {
          "guessedname": "_onDocMouseDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mousedown\" event handler for the owner document of \nthe menu.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_onMenuLabelMouseOver": {
          "guessedname": "_onMenuLabelMouseOver",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseover\" event handler for a menu label.",
          "params": [
            {
              "name": "menuLabel",
              "type": "Node",
              "description": " Node instance representing a menu label."
            },
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_onHorizontalMenuKeyDown": {
          "guessedname": "_onHorizontalMenuKeyDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keydown\" event handler for horizontal menus.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_onKeyDown": {
          "guessedname": "_onKeyDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keydown\" event handler for the menu.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_onVerticalMenuKeyDown": {
          "guessedname": "_onVerticalMenuKeyDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keydown\" event handler for vertical menus.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_onMenuMouseOver": {
          "guessedname": "_onMenuMouseOver",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseover\" event handler for a menu.",
          "params": [
            {
              "name": "menu",
              "type": "Node",
              "description": " Node instance representing a menu."
            },
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_afterActiveDescendantChange": {
          "guessedname": "_afterActiveDescendantChange",
          "guessedtype": "function",
          "protected": "",
          "description": "\"activeDescendantChange\" event handler for menu's \nFocus Manager.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the Attribute change event."
            },
            {
              "name": "menuNav",
              "type": "NodeMenuNav",
              "description": " Object representing the NodeMenuNav instance."
            }
          ]
        },
        "_onMenuMouseOut": {
          "guessedname": "_onMenuMouseOut",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseout\" event handler for a menu.",
          "params": [
            {
              "name": "menu",
              "type": "Node",
              "description": " Node instance representing a menu."
            },
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_getTopmostSubmenu": {
          "guessedname": "_getTopmostSubmenu",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "menu",
              "type": "Node",
              "description": " Node instance representing a menu."
            }
          ],
          "description": "Returns the topmost submenu of a submenu hierarchy.",
          "return": {
            "type": "Node",
            "description": "Node instance representing a menu."
          }
        },
        "_hideAllSubmenus": {
          "guessedname": "_hideAllSubmenus",
          "guessedtype": "function",
          "protected": "",
          "description": "Hides all submenus of the specified menu.",
          "params": [
            {
              "name": "menu",
              "type": "Node",
              "description": " Node instance representing a menu."
            }
          ]
        },
        "_clearActiveItem": {
          "guessedname": "_clearActiveItem",
          "guessedtype": "function",
          "protected": "",
          "description": "Clears the menu's active descendent."
        },
        "_onMouseOver": {
          "guessedname": "_onMouseOver",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseover\" event handler for the menu.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_onMouseOut": {
          "guessedname": "_onMouseOut",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseout\" event handler for the menu.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_hideAndFocusLabel": {
          "guessedname": "_hideAndFocusLabel",
          "guessedtype": "function",
          "protected": "",
          "description": "Hides all of the submenus of the root menu and focuses the \nlabel of the topmost submenu"
        },
        "_showMenu": {
          "guessedname": "_showMenu",
          "guessedtype": "function",
          "protected": "",
          "description": "Shows the specified menu.",
          "params": [
            {
              "name": "menu",
              "type": "Node",
              "description": " Node instance representing a menu."
            }
          ]
        },
        "_setActiveItem": {
          "guessedname": "_setActiveItem",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the specified menuitem or menu label as the menu's \nactive descendent.",
          "params": [
            {
              "name": "item",
              "type": "Node",
              "description": " Node instance representing a menuitem or menu label."
            }
          ]
        },
        "_onDocFocus": {
          "guessedname": "_onDocFocus",
          "guessedtype": "function",
          "protected": "",
          "description": "\"focus\" event handler for the owner document of the MenuNav.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the DOM event."
            }
          ]
        },
        "_onActiveDescendantChange": {
          "guessedname": "_onActiveDescendantChange",
          "guessedtype": "function",
          "protected": "",
          "description": "\"activeDescendantChange\" event handler for menu's \nFocus Manager.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " Object representing the Attribute change event."
            },
            {
              "name": "menuNav",
              "type": "NodeMenuNav",
              "description": " Object representing the NodeMenuNav instance."
            }
          ]
        }
      },
      "name": "plugin.NodeMenuNav",
      "guessedname": "NodeMenuNav",
      "module": "node-menunav",
      "namespace": "plugin",
      "events": {
        "submenuHideDelayChange": {
          "name": "submenuHideDelayChange",
          "description": "Fires when the value for the configuration attribute 'submenuHideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "useARIAChange": {
          "name": "useARIAChange",
          "description": "Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "submenuShowDelayChange": {
          "name": "submenuShowDelayChange",
          "description": "Fires when the value for the configuration attribute 'submenuShowDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "autoSubmenuDisplayChange": {
          "name": "autoSubmenuDisplayChange",
          "description": "Fires when the value for the configuration attribute 'autoSubmenuDisplay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "mouseOutHideDelayChange": {
          "name": "mouseOutHideDelayChange",
          "description": "Fires when the value for the configuration attribute 'mouseOutHideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "guessedtype": "function",
      "description": "The NodeMenuNav class is a plugin for a Node instance.  The class is used via  \nthe <a href=\"Node.html#method_plug\"><code>plug<\/code><\/a> method of Node and \nshould not be instantiated directly.",
      "file": "node-menunav.js",
      "configs": {
        "autoSubmenuDisplay": {
          "guessedname": "autoSubmenuDisplay",
          "default": "true",
          "readonly": "",
          "writeonce": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Boolean indicating if submenus are automatically made visible when the \nuser mouses over the menu's items."
        },
        "submenuHideDelay": {
          "guessedname": "submenuHideDelay",
          "default": "250",
          "readonly": "",
          "writeonce": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is hidden when the user mouses out of a menu label heading in the \ndirection of a submenu."
        },
        "mouseOutHideDelay": {
          "guessedname": "mouseOutHideDelay",
          "default": "750",
          "readonly": "",
          "writeonce": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is hidden when the user mouses out of it."
        },
        "submenuShowDelay": {
          "guessedname": "submenuShowDelay",
          "default": "250",
          "readonly": "",
          "writeonce": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is made visible when the user mouses over the menu's label."
        },
        "useARIA": {
          "guessedname": "useARIA",
          "default": "true",
          "readonly": "",
          "writeonce": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Boolean indicating if use of the WAI-ARIA Roles and States should be \nenabled for the menu."
        }
      },
      "properties": {
        "_rootMenu": {
          "guessedname": "_rootMenu",
          "default": "null",
          "type": "Node",
          "guessedtype": "property",
          "protected": "",
          "description": "Node instance representing the root menu in the menu."
        },
        "_activeItem": {
          "guessedname": "_activeItem",
          "default": "null",
          "type": "Node",
          "guessedtype": "property",
          "protected": "",
          "description": "Node instance representing the menu's active descendent: \nthe menuitem or menu label the user is currently interacting with."
        },
        "NodeMenuNav.SHIM_TEMPLATE": {
          "default": "&#34;&#60;iframe frameborder=&#34;0&#34; tabindex=&#34;-1&#34; \nclass=&#34;yui-shim&#34; title=&#34;Menu Stacking Shim&#34; \nsrc=&#34;javascript:false;&#34;&#62;&#60;\/iframe&#62;&#34;",
          "type": "String",
          "description": "String representing the HTML used to create the \n<code>&#60;iframe&#62;<\/code> shim used to prevent \n<code>&#60;select&#62;<\/code> elements from poking through menus in IE 6."
        },
        "_movingToSubmenu": {
          "guessedname": "_movingToSubmenu",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Boolean indicating if the mouse is moving from a menu \nlabel to its corresponding submenu."
        },
        "_showSubmenuTimer": {
          "guessedname": "_showSubmenuTimer",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Timer used to show a submenu."
        },
        "_currentMouseX": {
          "guessedname": "_currentMouseX",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "protected": "",
          "description": "Number representing the current x coordinate of the mouse \ninside the menu."
        },
        "NodeMenuNav.SHIM_TEMPLATE_TITLE": {
          "guessedname": "SHIM_TEMPLATE_TITLE",
          "default": "\"Menu Stacking Shim\"",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the value for the <code>title<\/code> \nattribute for the shim used to prevent <code>&#60;select&#62;<\/code> elements \nfrom poking through menus in IE 6."
        },
        "_blockMouseEvent": {
          "guessedname": "_blockMouseEvent",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Boolean indicating whether or not to handle the \n\"mouseover\" event."
        },
        "_firstItem": {
          "guessedname": "_firstItem",
          "default": "null",
          "type": "Node",
          "guessedtype": "property",
          "protected": "",
          "description": "Node instance representing the first item (menuitem or menu \nlabel) in the root menu of a menu."
        },
        "_hideAllSubmenusTimer": {
          "guessedname": "_hideAllSubmenusTimer",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Timer used to hide a all submenus."
        },
        "_activeMenu": {
          "guessedname": "_activeMenu",
          "default": "null",
          "type": "Node",
          "guessedtype": "property",
          "protected": "",
          "description": "Node instance representing the menu that is the parent of \nthe menu's active descendent."
        },
        "_hideSubmenuTimer": {
          "guessedname": "_hideSubmenuTimer",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Timer used to hide a submenu."
        },
        "_hasFocus": {
          "guessedname": "_hasFocus",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Boolean indicating if the menu has focus."
        }
      }
    },
    "DataSource.Local": {
      "shortname": "DataSource.Local",
      "superclass": "Base",
      "methods": {
        "DataSource.issueCallback": {
          "guessedname": "issueCallback",
          "static": "",
          "guessedtype": "function",
          "description": "Executes a given callback.  The third param determines whether to execute",
          "params": [
            {
              "name": "callback",
              "type": "Object",
              "description": "  The callback object."
            },
            {
              "name": "params",
              "type": "Array",
              "description": "  params to be passed to the callback method"
            },
            {
              "name": "error",
              "type": "Boolean",
              "description": "  whether an error occurred"
            }
          ]
        },
        "initializer": {
          "private": "",
          "guessedname": "initializer",
          "guessedtype": "function",
          "description": "Internal init() handler.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Config object."
            }
          ]
        },
        "_defDataFn": {
          "guessedname": "_defDataFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Normalizes raw data into a response that includes results and meta properties.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<\/dl>"
            }
          ]
        },
        "_defResponseFn": {
          "guessedname": "_defResponseFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Sends data as a normalized response to callback.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<dt>response (Object)<\/dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)<\/dt> <dd>Parsed results.<\/dd>\n<dt>meta (Object)<\/dt> <dd>Parsed meta data.<\/dd>\n<dt>error (Boolean)<\/dt> <dd>Error flag.<\/dd>\n<\/dl>\n<\/dd>\n<\/dl>"
            }
          ]
        },
        "_defRequestFn": {
          "guessedname": "_defRequestFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Manages request\/response transaction. Must fire <code>response<\/code>\nevent when response is received. This method should be implemented by\nsubclasses to achieve more complex behavior such as accessing remote data.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facadewith the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<\/dl>"
            }
          ]
        },
        "sendRequest": {
          "guessedname": "sendRequest",
          "guessedtype": "function",
          "description": "Generates a unique transaction ID and fires <code>request<\/code> event.",
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "  Request."
            },
            {
              "name": "callback",
              "type": "Object",
              "description": "  An object literal with the following properties:\n<dl>\n<dt><code>success<\/code><\/dt>\n<dd>The function to call when the data is ready.<\/dd>\n<dt><code>failure<\/code><\/dt>\n<dd>The function to call upon a response failure condition.<\/dd>\n<dt><code>argument<\/code><\/dt>\n<dd>Arbitrary data payload that will be passed back to the success and failure handlers.<\/dd>\n<\/dl>"
            },
            {
              "name": "cfg",
              "type": "Object",
              "description": "  Configuration object"
            }
          ],
          "return": {
            "type": "Number",
            "description": "Transaction ID."
          }
        },
        "_initEvents": {
          "guessedname": "_initEvents",
          "private": "",
          "guessedtype": "function",
          "description": "This method creates all the events for this module."
        }
      },
      "name": "DataSource.Local",
      "extends": "Base",
      "guessedname": "LANG",
      "module": "datasource",
      "namespace": "",
      "events": {
        "sourceChange": {
          "name": "sourceChange",
          "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "response": {
          "preventable": "_defResponseFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Fired when response is returned.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<dt>response (Object)<\/dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)<\/dt> <dd>Parsed results.<\/dd>\n<dt>meta (Object)<\/dt> <dd>Parsed meta data.<\/dd>\n<dt>error (Boolean)<\/dt> <dd>Error flag.<\/dd>\n<\/dl>\n<\/dd>\n<\/dl>"
            }
          ]
        },
        "data": {
          "preventable": "_defDataFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Fired when raw data is received.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<\/dl>"
            }
          ]
        },
        "request": {
          "preventable": "_defRequestFn",
          "guessedname": "defaultFn",
          "guessedtype": "property",
          "description": "Fired when a data request is received.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>                          \n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object.<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<\/dl>"
            }
          ]
        },
        "error": {
          "description": "Fired when an error is encountered.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<dt>response (Object)<\/dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)<\/dt> <dd>Parsed results.<\/dd>\n<dt>meta (Object)<\/dt> <dd>Parsed meta data.<\/dd>\n<dt>error (Object)<\/dt> <dd>Error object.<\/dd>\n<\/dl>\n<\/dd>\n<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Base class for the DataSource Utility."
        }
      ],
      "guessedtype": "property",
      "description": "Base class for the DataSource Utility.",
      "file": "datasource-local.js",
      "configs": {
        "source": {
          "guessedname": "source",
          "default": "null",
          "type": "MIXED",
          "guessedtype": "property",
          "description": "Pointer to live data."
        }
      },
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"dataSourceLocal\"",
          "guessedtype": "property",
          "description": "Class name."
        },
        "DataSource._tId": {
          "guessedname": "_tId",
          "private": "",
          "default": "0",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Global transaction counter."
        }
      }
    },
    "DataSourceCache": {
      "shortname": "DataSourceCache",
      "superclass": "Cache",
      "methods": {
        "initializer": {
          "private": "",
          "guessedname": "initializer",
          "guessedtype": "function",
          "description": "Internal init() handler.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Config object."
            }
          ]
        },
        "_beforeDefRequestFn": {
          "guessedname": "_beforeDefRequestFn",
          "guessedtype": "function",
          "protected": "",
          "description": "First look for cached response, then send request to live data.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object.<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<\/dl>"
            }
          ]
        },
        "_beforeDefResponseFn": {
          "guessedname": "_beforeDefResponseFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Adds data to cache before returning data.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<dt>response (Object)<\/dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>cached (Object)<\/dt> <dd>True when response is cached.<\/dd>\n<dt>results (Object)<\/dt> <dd>Parsed results.<\/dd>\n<dt>meta (Object)<\/dt> <dd>Parsed meta data.<\/dd>\n<dt>error (Object)<\/dt> <dd>Error object.<\/dd>\n<\/dl>\n<\/dd>\n<dt>cfg (Object)<\/dt> <dd>Configuration object.<\/dd>\n<\/dl>"
            }
          ]
        }
      },
      "name": "DataSourceCache",
      "extends": "Cache",
      "guessedname": "DataSourceCache",
      "module": "datasource",
      "namespace": "",
      "guessedtype": "function",
      "description": "Adds cacheability to the DataSource Utility.",
      "file": "datasource-cache.js",
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"dataSourceCache\"",
          "guessedtype": "property",
          "description": "Class name."
        },
        "NS": {
          "final": "",
          "guessedname": "NS",
          "static": "",
          "type": "String",
          "value": "\"cache\"",
          "guessedtype": "property",
          "description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance."
        }
      }
    },
    "Do.Error": {
      "shortname": "Do.Error",
      "name": "Do.Error",
      "guessedname": "Error",
      "module": "event-custom",
      "namespace": "",
      "guessedtype": "property",
      "description": "Return an Error object when you want to terminate the execution\nof all subsequent method calls.",
      "file": "event-do.js",
      "deprecated": "use Y.Do.Halt or Y.Do.Prevent"
    },
    "Easing": {
      "shortname": "Easing",
      "methods": {
        "elasticBoth": {
          "guessedname": "elasticBoth",
          "guessedtype": "function",
          "description": "Snap both elastic effect.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "a",
              "type": "Number",
              "description": " Amplitude (optional)"
            },
            {
              "name": "p",
              "type": "Number",
              "description": " Period (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "bounceBoth": {
          "guessedname": "bounceBoth",
          "guessedtype": "function",
          "description": "Bounces off start and end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeInStrong": {
          "guessedname": "easeInStrong",
          "guessedtype": "function",
          "description": "Begins slowly and accelerates towards end. (quartic)",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "backIn": {
          "guessedname": "backIn",
          "guessedtype": "function",
          "description": "Backtracks slightly, then reverses direction and moves to end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "s",
              "type": "Number",
              "description": " Overshoot (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeOutStrong": {
          "guessedname": "easeOutStrong",
          "guessedtype": "function",
          "description": "Begins quickly and decelerates towards end.  (quartic)",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "elasticOut": {
          "guessedname": "elasticOut",
          "guessedtype": "function",
          "description": "Snap out elastic effect.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "a",
              "type": "Number",
              "description": " Amplitude (optional)"
            },
            {
              "name": "p",
              "type": "Number",
              "description": " Period (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeOut": {
          "guessedname": "easeOut",
          "guessedtype": "function",
          "description": "Begins quickly and decelerates towards end.  (quadratic)",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeBothStrong": {
          "guessedname": "easeBothStrong",
          "guessedtype": "function",
          "description": "Begins slowly and decelerates towards end. (quartic)",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "elasticIn": {
          "guessedname": "elasticIn",
          "guessedtype": "function",
          "description": "Snap in elastic effect.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "a",
              "type": "Number",
              "description": " Amplitude (optional)"
            },
            {
              "name": "p",
              "type": "Number",
              "description": " Period (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "bounceIn": {
          "guessedname": "bounceIn",
          "guessedtype": "function",
          "description": "Bounce off of start.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeBoth": {
          "guessedname": "easeBoth",
          "guessedtype": "function",
          "description": "Begins slowly and decelerates towards end. (quadratic)",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeNone": {
          "guessedname": "easeNone",
          "guessedtype": "function",
          "description": "Uniform speed between points.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "bounceOut": {
          "guessedname": "bounceOut",
          "guessedtype": "function",
          "description": "Bounces off end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "backOut": {
          "guessedname": "backOut",
          "guessedtype": "function",
          "description": "Overshoots end, then reverses and comes back to end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "s",
              "type": "Number",
              "description": " Overshoot (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "backBoth": {
          "guessedname": "backBoth",
          "guessedtype": "function",
          "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "s",
              "type": "Number",
              "description": " Overshoot (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeIn": {
          "guessedname": "easeIn",
          "guessedtype": "function",
          "description": "Begins slowly and accelerates towards end. (quadratic)",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        }
      },
      "name": "Easing",
      "guessedname": "Easing",
      "module": "anim",
      "namespace": "",
      "guessedtype": "property",
      "description": "The easing module provides methods for customizing\nhow an animation behaves during each run.",
      "file": "anim-easing.js"
    },
    "CustomEvent": {
      "methods": {
        "preventDefault": {
          "guessedname": "preventDefault",
          "guessedtype": "function",
          "description": "Prevents the execution of this event's defaultFn"
        },
        "stopPropagation": {
          "guessedname": "stopPropagation",
          "guessedtype": "function",
          "description": "Stop propagation to bubble targets"
        },
        "halt": {
          "guessedname": "halt",
          "guessedtype": "function",
          "description": "Stops the event propagation and prevents the default\nevent behavior.",
          "params": [
            {
              "name": "immediate",
              "type": "boolean",
              "description": "  if true additional listeners\non the current target will not be executed"
            }
          ]
        },
        "fire": {
          "guessedname": "fire",
          "guessedtype": "function",
          "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event<\/li>\n<li>All of the arguments fire() was executed with as an array<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>",
          "params": [
            {
              "name": "arguments",
              "type": "Object*",
              "description": " an arbitrary set of parameters to pass to \nthe handler."
            }
          ],
          "return": {
            "type": "boolean",
            "description": "false if one of the subscribers returned false, \ntrue otherwise"
          }
        },
        "_delete": {
          "guessedname": "_delete",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "subscriber",
              "type": "",
              "description": " object"
            }
          ]
        },
        "log": {
          "guessedname": "log",
          "guessedtype": "function",
          "description": "Logger abstraction to centralize the application of the silent flag",
          "params": [
            {
              "name": "msg",
              "type": "string",
              "description": "  message to log"
            },
            {
              "name": "cat",
              "type": "string",
              "description": "  log category"
            }
          ]
        },
        "after": {
          "guessedname": "after",
          "guessedtype": "function",
          "description": "Listen for this event after the normal subscribers have been notified and\nthe default behavior has been applied.  If a normal subscriber prevents the \ndefault behavior, it also prevents after listeners from firing.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "        The function to execute"
            }
          ],
          "return": {
            "type": "EventHandle|EventTarget",
            "description": "unsubscribe handle or a\nchainable event target depending on the 'chain' config."
          }
        },
        "detachAll": {
          "guessedname": "detachAll",
          "guessedtype": "function",
          "description": "Removes all listeners",
          "return": {
            "type": "int",
            "description": "The number of listeners unsubscribed"
          }
        },
        "applyConfig": {
          "guessedname": "applyConfig",
          "guessedtype": "function",
          "description": "Apply configuration properties.  Only applies the CONFIG whitelist",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " hash of properties to apply"
            },
            {
              "name": "force",
              "type": "boolean",
              "description": "  if true, properties that exist on the event \nwill be overwritten."
            }
          ]
        },
        "unsubscribeAll": {
          "guessedname": "unsubscribeAll",
          "guessedtype": "function",
          "description": "Removes all listeners",
          "deprecated": "use detachAll",
          "return": {
            "type": "int",
            "description": "The number of listeners unsubscribed"
          }
        },
        "unsubscribe": {
          "guessedname": "unsubscribe",
          "guessedtype": "function",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "  The subscribed function to remove, if not supplied\nall will be removed"
            },
            {
              "name": "context",
              "type": "Object",
              "description": " The context object passed to subscribe."
            }
          ],
          "deprecated": "use detach",
          "description": "Detach listeners.",
          "return": {
            "type": "boolean|EventTarget",
            "description": "returns a chainable event target\nor a boolean for legacy detach support."
          }
        },
        "subscribe": {
          "guessedname": "subscribe",
          "guessedtype": "function",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "        The function to execute"
            }
          ],
          "deprecated": "use on",
          "description": "Listen for this event",
          "return": {
            "type": "EventHandle|EventTarget",
            "description": "unsubscribe handle or a\nchainable event target depending on the 'chain' config."
          }
        },
        "stopImmediatePropagation": {
          "guessedname": "stopImmediatePropagation",
          "guessedtype": "function",
          "description": "Stops propagation to bubble targets, and prevents any remaining\nsubscribers on the current target from executing."
        },
        "on": {
          "guessedname": "on",
          "guessedtype": "function",
          "description": "Listen for this event",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "        The function to execute"
            }
          ],
          "return": {
            "type": "EventHandle|EventTarget",
            "description": "unsubscribe handle or a\nchainable event target depending on the 'chain' config."
          }
        },
        "detach": {
          "guessedname": "detach",
          "guessedtype": "function",
          "description": "Detach listeners.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "  The subscribed function to remove, if not supplied\nall will be removed"
            },
            {
              "name": "context",
              "type": "Object",
              "description": " The context object passed to subscribe."
            }
          ],
          "return": {
            "type": "int|EventTarget",
            "description": "returns a chainable event target\nor the number of subscribers unsubscribed."
          }
        },
        "_notify": {
          "private": "",
          "guessedname": "_notify",
          "guessedtype": "function",
          "description": "Notify a single subscriber",
          "params": [
            {
              "name": "s",
              "type": "Subscriber",
              "description": "  the subscriber"
            },
            {
              "name": "args",
              "type": "Array",
              "description": "  the arguments array to apply to the listener"
            }
          ]
        }
      },
      "shortname": "CustomEvent",
      "name": "CustomEvent",
      "guessedname": "CustomEvent",
      "module": "event-custom",
      "namespace": "",
      "constructors": [
        {
          "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The type of event, which is passed to the callback\nwhen the event fires"
            },
            {
              "name": "o",
              "type": "",
              "description": " configuration object"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "file": "event-custom.js",
      "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component.",
      "properties": {
        "preventable": {
          "guessedname": "preventable",
          "default": "true",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Specifies whether or not this event's default function\ncan be cancelled by a subscriber by executing preventDefault() \non the event facade"
        },
        "preventedFn": {
          "type": "Function",
          "description": "The function to execute if a subscriber calls\npreventDefault"
        },
        "defaultFn": {
          "type": "Function",
          "description": "The default function to execute after event listeners\nhave fire, but only if the default action was not\nprevented."
        },
        "stoppedFn": {
          "type": "Function",
          "description": "The function to execute if a subscriber calls\nstopPropagation or stopImmediatePropagation"
        },
        "fireOnce": {
          "default": "false;",
          "type": "boolean",
          "description": "This event should only fire one time if true, and if\nit has fired, any new subscribers should be notified\nimmediately."
        },
        "silent": {
          "guessedname": "silent",
          "type": "boolean",
          "guessedtype": "property",
          "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event."
        },
        "afters": {
          "guessedname": "afters",
          "type": "Subscriber{}",
          "guessedtype": "property",
          "description": "'After' subscribers"
        },
        "broadcast": {
          "type": "int",
          "description": "If 0, this event does not broadcast.  If 1, the YUI instance is notified\nevery time this event fires.  If 2, the YUI instance and the YUI global\n(if event is enabled on the global) are notified every time this event\nfires."
        },
        "prevented": {
          "type": "int",
          "description": "Flag for preventDefault that is modified during fire().\nif it is not 0, the default behavior for this event"
        },
        "signature": {
          "guessedname": "signature",
          "default": "9",
          "type": "int",
          "guessedtype": "property",
          "description": "Supports multiple options for listener signatures in order to\nport YUI 2 apps."
        },
        "stopped": {
          "type": "int",
          "description": "Flag for stopPropagation that is modified during fire()\n1 means to stop propagation to bubble targets.  2 means\nto also stop additional subscribers on this target."
        },
        "emitFacade": {
          "default": "false",
          "type": "boolean",
          "description": "If set to true, the custom event will deliver an EventFacade object\nthat is similar to a DOM event object."
        },
        "subscribers": {
          "guessedname": "subscribers",
          "type": "Subscriber{}",
          "guessedtype": "property",
          "description": "The subscribers to this event"
        },
        "fired": {
          "default": "false;",
          "type": "boolean",
          "description": "This event has fired if true"
        },
        "queuable": {
          "default": "false",
          "type": "boolean",
          "description": "Specifies whether this event should be queued when the host is actively\nprocessing an event.  This will effect exectution order of the callbacks\nfor the various events."
        },
        "type": {
          "guessedname": "type",
          "type": "string",
          "guessedtype": "property",
          "description": "The type of event, returned to subscribers when the event fires"
        },
        "bubbles": {
          "guessedname": "bubbles",
          "default": "true",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Specifies whether or not a subscriber can stop the event propagation\nvia stopPropagation(), stopImmediatePropagation(), or halt()"
        },
        "context": {
          "guessedname": "context",
          "type": "object",
          "guessedtype": "property",
          "description": "The context the the event will fire from by default.  Defaults to the YUI\ninstance."
        },
        "host": {
          "type": "EventTarget",
          "description": "Specifies the host for this custom event.  This is used\nto enable event bubbling"
        }
      }
    },
    "EventTarget": {
      "methods": {
        "fire": {
          "guessedname": "fire",
          "guessedtype": "function",
          "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters.\nIf the custom event object hasn't been created, then the event hasn't \nbeen published and it has no subscribers.  For performance sake, we \nimmediate exit in this case.  This means the event won't bubble, so \nif the intention is that a bubble target be notified, the event must \nbe published on this object first.\nThe first argument is the event type, and any additional arguments are\npassed to the listeners as parameters.  If the first of these is an\nobject literal, and the event is configured to emit an event facade,\nthat object is mixed into the event facade and the facade is provided \nin place of the original object.",
          "params": [
            {
              "name": "type",
              "type": "String|Object",
              "description": "  The type of the event, or an object that contains\na 'type' property."
            },
            {
              "name": "arguments",
              "type": "Object*",
              "description": "  an arbitrary set of parameters to pass to \nthe handler.  If the first of these is an object literal and the event is\nconfigured to emit an event facade, the event facade will replace that\nparameter after the properties the object literal contains are copied to\nthe event facade."
            }
          ],
          "return": {
            "type": "Event.Target",
            "description": "the event host"
          }
        },
        "bubble": {
          "guessedname": "bubble",
          "guessedtype": "function",
          "description": "Propagate an event.  Requires the event-custom-complex module.",
          "params": [
            {
              "name": "evt",
              "type": "Event.Custom",
              "description": "  the custom event to propagate"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the aggregated return value from Event.Custom.fire"
          }
        },
        "removeTarget": {
          "guessedname": "removeTarget",
          "guessedtype": "function",
          "description": "Removes a bubble target",
          "params": [
            {
              "name": "o",
              "type": "EventTarget",
              "description": "  the target to remove"
            }
          ]
        },
        "after": {
          "guessedname": "after",
          "guessedtype": "function",
          "description": "Subscribe to a custom event hosted by this object.  The\nsupplied callback will execute after any listeners add\nvia the subscribe method, and after the default function,\nif configured for the event, has executed.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "       The type of the event"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  The callback"
            }
          ],
          "return": {
            "type": "",
            "description": "the event target or a detach handle per 'chain' config"
          }
        },
        "getEvent": {
          "guessedname": "getEvent",
          "guessedtype": "function",
          "description": "Returns the custom event of the provided type has been created, a\nfalsy value otherwise",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type, or name of the event"
            }
          ],
          "return": {
            "type": "Event.Custom",
            "description": "the custom event or null"
          }
        },
        "_parseType": {
          "guessedname": "_parseType",
          "private": "",
          "guessedtype": "function",
          "description": "Returns an array with the detach key (if provided),\nand the prefixed event name from _getType\nY.on('detachcategory, menu:click', fn)"
        },
        "detachAll": {
          "guessedname": "detachAll",
          "guessedtype": "function",
          "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "    The type, or name of the event"
            }
          ]
        },
        "publish": {
          "guessedname": "publish",
          "guessedtype": "function",
          "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type, or name of the event"
            },
            {
              "name": "opts",
              "type": "object",
              "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\n'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)\n<\/li>\n<li>\n'bubbles': whether or not this event bubbles (true)\n<\/li>\n<li>\n'context': the default execution context for the listeners (this)\n<\/li>\n<li>\n'defaultFn': the default function to execute when this event fires if preventDefault was not called\n<\/li>\n<li>\n'emitFacade': whether or not this event emits a facade (false)\n<\/li>\n<li>\n'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click' \n<\/li>\n<li>\n'fireOnce': if an event is configured to fire once, new subscribers after\nthe fire will be notified immediately.\n<\/li>\n<li>\n'preventable': whether or not preventDefault() has an effect (true)\n<\/li>\n<li>\n'preventedFn': a function that is executed when preventDefault is called\n<\/li>\n<li>\n'queuable': whether or not this event can be queued during bubbling (false)\n<\/li>\n<li>\n'silent': if silent is true, debug messages are not provided for this event.\n<\/li>\n<li>\n'stoppedFn': a function that is executed when stopPropagation is called\n<\/li>\n<li>\n'type': the event type (valid option if not provided as the first parameter to publish)\n<\/li>\n<\/ul>"
            }
          ],
          "return": {
            "type": "Event.Custom",
            "description": "the custom event"
          }
        },
        "unsubscribeAll": {
          "guessedname": "unsubscribeAll",
          "guessedtype": "function",
          "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "    The type, or name of the event"
            }
          ],
          "deprecated": "use detachAll"
        },
        "unsubscribe": {
          "guessedname": "unsubscribe",
          "guessedtype": "function",
          "description": "detach a listener",
          "deprecated": "use detach"
        },
        "subscribe": {
          "guessedname": "subscribe",
          "guessedtype": "function",
          "description": "subscribe to an event",
          "deprecated": "use on"
        },
        "_getType": {
          "guessedname": "_getType",
          "private": "",
          "guessedtype": "function",
          "description": "If the instance has a prefix attribute and the\nevent type is not prefixed, the instance prefix is\napplied to the supplied type."
        },
        "before": {
          "guessedname": "before",
          "guessedtype": "function",
          "description": "Executes the callback before a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.  For DOM and custom\nevents, this is an alias for Y.on.\nFor DOM and custom events:\ntype, callback, context, 0-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 0-n arguments",
          "deprecated": "use the on method",
          "return": {
            "type": "",
            "description": "detach handle"
          }
        },
        "addTarget": {
          "guessedname": "addTarget",
          "guessedtype": "function",
          "description": "Registers another EventTarget as a bubble target.  Bubble order\nis determined by the order registered.  Multiple targets can\nbe specified.",
          "params": [
            {
              "name": "o",
              "type": "EventTarget",
              "description": "  the target to add"
            }
          ]
        },
        "on": {
          "guessedname": "on",
          "guessedtype": "function",
          "description": "Subscribe to a custom event hosted by this object",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "       The type of the event"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  The callback"
            }
          ],
          "return": {
            "type": "",
            "description": "the event target or a detach handle per 'chain' config"
          }
        },
        "detach": {
          "guessedname": "detach",
          "guessedtype": "function",
          "description": "Detach one or more listeners the from the specified event",
          "params": [
            {
              "name": "type",
              "type": "string|Object",
              "description": "    Either the handle to the subscriber or the \ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."
            },
            {
              "name": "context",
              "type": "Object",
              "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"
            }
          ],
          "return": {
            "type": "EventTarget",
            "description": "the host"
          }
        }
      },
      "shortname": "EventTarget",
      "name": "EventTarget",
      "config": "emitFacade {boolean} if true, all events will emit event \nfacade payloads by default (default false)",
      "guessedname": "L",
      "module": "event-custom",
      "namespace": "",
      "param": "opts a configuration object",
      "guessedtype": "property",
      "file": "event-target.js",
      "description": "EventTarget provides the implementation for any object to\npublish, subscribe and fire to custom events, and also\nalows other EventTargets to target the object with events\nsourced from the other object.\nEventTarget is designed to be used with Y.augment to wrap \nEventCustom in an interface that allows events to be listened to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all."
    },
    "Assert.UnexpectedValue": {
      "shortname": "UnexpectedValue",
      "superclass": "Assert.Error",
      "methods": {
        "getMessage": {
          "guessedname": "getMessage",
          "guessedtype": "function",
          "description": "Returns a fully formatted error for an assertion failure. The message\ncontains information about the unexpected value that was encountered.",
          "return": {
            "type": "String",
            "description": "A string describing the error."
          }
        }
      },
      "name": "Assert.UnexpectedValue",
      "extends": "Assert.Error",
      "guessedname": "UnexpectedValue",
      "module": "test",
      "namespace": "Assert",
      "constructors": [
        {
          "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            },
            {
              "name": "unexpected",
              "type": "Object",
              "description": " The unexpected value."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the error that occurred."
        },
        "unexpected": {
          "guessedname": "unexpected",
          "type": "Object",
          "guessedtype": "property",
          "description": "The unexpected value."
        }
      }
    },
    "Assert": {
      "shortname": "Assert",
      "methods": {
        "isObject": {
          "guessedname": "isObject",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is an object.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isNumber": {
          "guessedname": "isNumber",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is a number.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "_formatMessage": {
          "guessedname": "_formatMessage",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "customMessage",
              "type": "String",
              "description": " The message passed in by the developer."
            },
            {
              "name": "defaultMessage",
              "type": "String",
              "description": " The message created by the error by default."
            }
          ],
          "description": "Formats a message so that it can contain the original assertion message\nin addition to the custom message.",
          "return": {
            "type": "String",
            "description": "The final error message, containing either or both."
          }
        },
        "isBoolean": {
          "guessedname": "isBoolean",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is a Boolean.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isFunction": {
          "guessedname": "isFunction",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is a function.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isTrue": {
          "guessedname": "isTrue",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is true. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "areNotEqual": {
          "guessedname": "areNotEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not equal to another. This uses the double equals sign\nso type cohersion may occur.",
          "params": [
            {
              "name": "unexpected",
              "type": "Object",
              "description": " The unexpected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isFalse": {
          "guessedname": "isFalse",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is false. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isInstanceOf": {
          "guessedname": "isInstanceOf",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is an instance of a particular object. This may return\nincorrect results when comparing objects from one frame to constructors in\nanother frame. For best results, don't use in a cross-frame manner.",
          "params": [
            {
              "name": "expected",
              "type": "Function",
              "description": " The function that the object should be an instance of."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The object to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "areEqual": {
          "guessedname": "areEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is equal to another. This uses the double equals sign\nso type cohersion may occur.",
          "params": [
            {
              "name": "expected",
              "type": "Object",
              "description": " The expected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "_getCount": {
          "guessedname": "_getCount",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "description": "Returns the number of assertions that have been performed."
        },
        "areSame": {
          "guessedname": "areSame",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is the same as another. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "expected",
              "type": "Object",
              "description": " The expected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "_reset": {
          "guessedname": "_reset",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "description": "Resets the number of assertions that have been performed to 0."
        },
        "isTypeOf": {
          "guessedname": "isTypeOf",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is of a particular type.",
          "params": [
            {
              "name": "expectedType",
              "type": "String",
              "description": " The expected type of the variable."
            },
            {
              "name": "actualValue",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "Y.assert": {
          "guessedname": "assert",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a given condition is true. If not, then a Y.Assert.Error object is thrown\nand the test fails.",
          "params": [
            {
              "name": "condition",
              "type": "Boolean",
              "description": " The condition to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " The message to display if the assertion fails."
            }
          ]
        },
        "isNull": {
          "guessedname": "isNull",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is null. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "areNotSame": {
          "guessedname": "areNotSame",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not the same as another. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "unexpected",
              "type": "Object",
              "description": " The unexpected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isArray": {
          "guessedname": "isArray",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is an array.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isUndefined": {
          "guessedname": "isUndefined",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is undefined. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isNotUndefined": {
          "guessedname": "isNotUndefined",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not undefined. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isString": {
          "guessedname": "isString",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is a string.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "_increment": {
          "guessedname": "_increment",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "description": "Increments the number of assertions that have been performed."
        },
        "isNotNaN": {
          "guessedname": "isNotNaN",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not the special NaN value.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isNotNull": {
          "guessedname": "isNotNull",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not null. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "Y.fail": {
          "guessedname": "fail",
          "static": "",
          "guessedtype": "property",
          "description": "Forces an assertion error to occur. Shortcut for Y.Assert.fail().",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display with the failure."
            }
          ]
        },
        "isNaN": {
          "guessedname": "isNaN",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not a number.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "fail": {
          "guessedname": "fail",
          "static": "",
          "guessedtype": "function",
          "description": "Forces an assertion error to occur.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display with the failure."
            }
          ]
        }
      },
      "name": "Assert",
      "guessedname": "Assert",
      "module": "test",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "The Assert object provides functions to test JavaScript values against\nknown and expected results. Whenever a comparison (assertion) fails,\nan error is thrown.",
      "file": "Assert.js",
      "properties": {
        "_asserts": {
          "private": "",
          "guessedname": "_asserts",
          "type": "int",
          "guessedtype": "property",
          "description": "The number of assertions performed."
        }
      }
    },
    "io": {
      "shortname": "io",
      "methods": {
        "promote": {
          "public": "",
          "guessedname": "promote",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": " - Reference to queued transaction."
            }
          ],
          "description": "Method for promoting a transaction to the top of the queue.\nThis is the interface for _unshift().",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_upload": {
          "guessedname": "_upload",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "o",
              "description": " The transaction object"
            },
            {
              "name": "uri",
              "type": "object",
              "description": " Qualified path to transaction resource."
            },
            {
              "name": "c",
              "type": "object",
              "description": " Configuration object for the transaction."
            }
          ],
          "description": "Uploads HTML form, inclusive of files\/attachments, using the\niframe created in createFrame to facilitate the transaction.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "_data": {
          "private": "",
          "static": "",
          "description": "Creates a response object for XDR transactions, for success\nand failure cases.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create() in io-base."
            },
            {
              "name": "isFlash",
              "type": "boolean",
              "description": " - True if Flash was used as the transport."
            },
            {
              "name": "isXML",
              "type": "boolean",
              "description": " - True if the response data are XML."
            }
          ],
          "return": {
            "type": "",
            "description": "object"
          }
        },
        "_unshift": {
          "private": "",
          "static": "",
          "description": "Method for promoting a transaction to the top of the queue.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_xhr": {
          "private": "",
          "static": "",
          "description": "Method that creates the XMLHttpRequest transport",
          "return": {
            "type": "",
            "description": "object"
          }
        },
        "_ioComplete": {
          "private": "",
          "static": "",
          "description": "Fires event \"io:complete\" and creates, fires a\ntransaction-specific \"complete\" event, if config.on.complete is\ndefined.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - transaction object."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_swf": {
          "private": "",
          "static": "",
          "description": "Method that creates the Flash transport swf.",
          "params": [
            {
              "name": "uri",
              "type": "string",
              "description": " - location of io.swf."
            },
            {
              "name": "yid",
              "type": "string",
              "description": " - YUI instance id."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_serialize": {
          "guessedname": "_serialize",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "c",
              "type": "object",
              "description": " - YUI form node or HTML form id."
            },
            {
              "name": "s",
              "type": "string",
              "description": " - Transaction data defined in the configuration."
            }
          ],
          "description": "Method to enumerate through an HTML form's elements collection\nand return a string comprised of key-value pairs.",
          "return": {
            "type": "",
            "description": "string"
          }
        },
        "size": {
          "public": "",
          "guessedname": "size",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "i",
              "type": "number",
              "description": " - Specified maximum size of queue."
            }
          ],
          "description": "Method to query the current size of the queue, or to\nset a maximum queue size.  This is the interface for _size().",
          "return": {
            "type": "",
            "description": "number"
          }
        },
        "_isInProgress.": {
          "private": "",
          "static": "",
          "description": "Method for determining if an XDR transaction has completed\nand all data are received.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create() in io-base."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ]
        },
        "_ioCancel": {
          "private": "",
          "static": "",
          "description": "Terminates a transaction due to an explicit abort or\ntimeout.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create()."
            },
            {
              "name": "s",
              "type": "string",
              "description": " - Identifies timed out or aborted transaction."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "stop": {
          "public": "",
          "guessedname": "stop",
          "static": "",
          "guessedtype": "property",
          "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is restarted. This is the\ninterface for _stop().",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_subscribe": {
          "private": "",
          "static": "",
          "description": "Method for creating and subscribing transaction events.",
          "params": [
            {
              "name": "e",
              "type": "string",
              "description": " - event to be published"
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration data subset for event subscription."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_size": {
          "private": "",
          "static": "",
          "description": "Method to query the current size of the queue.",
          "return": {
            "type": "",
            "description": "int"
          }
        },
        "_ioEnd": {
          "private": "",
          "static": "",
          "description": "Fires event \"io:end\" and creates, fires a\ntransaction-specific \"end\" event, if config.on.end is\ndefined.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - transaction object."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_setHeaders": {
          "private": "",
          "static": "",
          "description": "Method that sets all HTTP headers to be sent in a transaction.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - XHR instance for the specific transaction."
            },
            {
              "name": "h",
              "type": "object",
              "description": " - HTTP headers for the specific transaction, as defined\nin the configuration object passed to YUI.io()."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_remove": {
          "private": "",
          "static": "",
          "description": "Method for removing a specific, pending transaction from\nthe queue.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_stop": {
          "private": "",
          "static": "",
          "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is reset to \"active\".",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_id": {
          "private": "",
          "static": "",
          "description": "Method that increments _transactionId for each transaction.",
          "return": {
            "type": "",
            "description": "int"
          }
        },
        "_readyState": {
          "private": "",
          "static": "",
          "description": "Event handler bound to onreadystatechange.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create()."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - Configuration object passed to YUI.io()."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "header": {
          "public": "",
          "guessedname": "header",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "l",
              "type": "string",
              "description": " - HTTP header"
            },
            {
              "name": "v",
              "type": "string",
              "description": " - HTTP header value"
            }
          ],
          "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.\nThis is the interface for _setHeader().",
          "return": {
            "type": "",
            "description": "int"
          }
        },
        "_io": {
          "private": "",
          "static": "",
          "description": "Method for requesting a transaction. _io() is implemented as\nyui.io().  Each transaction may include a configuration object.  Its\nproperties are:\nmethod: HTTP method verb (e.g., GET or POST). If this property is not\nnot defined, the default value will be GET.\ndata: This is the name-value string that will be sent as the transaction\ndata.  If the request is HTTP GET, the data become part of\nquerystring. If HTTP POST, the data are sent in the message body.\nxdr: Defines the transport to be used for cross-domain requests.  By\nsetting this property, the transaction will use the specified\ntransport instead of XMLHttpRequest.  Currently, the only alternate\ntransport supported is Flash (e.g., { xdr: 'flash' }).\nform: This is a defined object used to process HTML form as data.  The\nproperties are:\n{\nid: object, \/\/HTML form object or id of HTML form\nuseDisabled: boolean, \/\/Allow disabled HTML form field values\nto be sent as part of the data.\n}\non: This is a defined object used to create and handle specific\nevents during a transaction lifecycle.  These events will fire in\naddition to the global io events. The events are:\nstart - This event is fired when a request is sent to a resource.\ncomplete - This event fires when the transaction is complete.\nsuccess - This event fires when the response status resolves to\nHTTP 2xx.\nfailure - This event fires when the response status resolves to\nHTTP 4xx, 5xx; and, for all transaction exceptions,\nincluding aborted transactions and transaction timeouts.\nend -  This even is fired at the conclusion of the transaction\nlifecycle, after a success or failure resolution.\nThe properties are:\n{\nstart: function(id, args){},\ncomplete: function(id, responseobject, args){},\nsuccess: function(id, responseobject, args){},\nfailure: function(id, responseobject, args){},\nend: function(id, args){}\n}\nEach property can reference a function or be written as an\ninline function.\ncontext: Object reference for an event handler when it is implemented\nas a method of a base object. Defining \"context\" will preserve\nthe proper reference of \"this\" used in the event handler.\nheaders: This is a defined object of client headers, as many as.\ndesired for the transaction.  These headers are sentThe object\npattern is:\n{\nheader: value\n}\ntimeout: This value, defined as milliseconds, is a time threshold for the\ntransaction. When this threshold is reached, and the transaction's\nComplete event has not yet fired, the transaction will be aborted.\narguments: Object, array, string, or number passed to all registered\nevent handlers.  This value is available as the second\nargument in the \"start\" and \"abort\" event handlers; and, it is\nthe third argument in the \"complete\", \"success\", and \"failure\"\nevent handlers.",
          "params": [
            {
              "name": "uri",
              "type": "string",
              "description": " - qualified path to transaction resource."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            },
            {
              "name": "i",
              "type": "number",
              "description": " - transaction id, if already set by queue."
            }
          ],
          "return": {
            "type": "",
            "description": "object"
          }
        },
        "_xdr": {
          "guessedname": "xdr",
          "private": "",
          "param": "{string} uri - qualified path to transaction resource.",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create() in io-base."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ],
          "description": "Sets event handlers for XDomainRequest transactions.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "remove": {
          "public": "",
          "guessedname": "remove",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": " - Reference to queued transaction."
            }
          ],
          "description": "Method for removing a specific, pending transaction from\nthe queue. This is the interface for _remove().",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_resend": {
          "private": "",
          "static": "",
          "description": "Resends an XDR transaction, using the Flash tranport,\nif the native transport fails.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create()."
            },
            {
              "name": "uri",
              "type": "string",
              "description": " - qualified path to transaction resource."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "start": {
          "public": "",
          "guessedname": "start",
          "static": "",
          "guessedtype": "property",
          "description": "Method for setting the queue to active. If there are\ntransactions pending in the queue, they will be processed from the\nqueue in FIFO order. This is the interface for _start().",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "io": {
          "public": "",
          "guessedname": "io",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "uri",
              "type": "string",
              "description": " - qualified path to transaction resource."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ],
          "description": "Method for requesting a transaction. This\nis the interface for _io().",
          "return": {
            "type": "",
            "description": "object"
          }
        },
        "_shift": {
          "private": "",
          "static": "",
          "description": "Method Process the first transaction from the\nqueue in FIFO order.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "xdrResponse": {
          "guessedname": "xdrResponse",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create() in io-base."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            },
            {
              "name": "e",
              "type": "string",
              "description": " - Event name"
            }
          ],
          "description": "Response controller for cross-domain requests when using the\nFlash transport or IE8's XDomainRequest object.",
          "return": {
            "type": "",
            "description": "object"
          }
        },
        "appendData": {
          "private": "",
          "static": "",
          "description": "Parses the POST data object and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.",
          "params": [
            {
              "name": "d",
              "type": "object",
              "description": " The key-value hash map."
            }
          ],
          "return": {
            "type": "array",
            "description": "e Array of created fields."
          }
        },
        "_ioSuccess": {
          "private": "",
          "static": "",
          "description": "Fires event \"io:success\" and creates, fires a\ntransaction-specific \"success\" event, if config.on.success is\ndefined.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - transaction object."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_startTimeout": {
          "private": "",
          "param": "{object} o Transaction object generated by _create().",
          "static": "",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create()."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - Configuration object passed to YUI.io()."
            }
          ],
          "description": "Starts timeout count if the configuration object\nhas a defined timeout property.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_ioStart": {
          "private": "",
          "static": "",
          "description": "Fires event \"io:start\" and creates, fires a\ntransaction-specific start event, if config.on.start is\ndefined.",
          "params": [
            {
              "name": "id",
              "type": "number",
              "description": " - transaction id"
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_queue": {
          "private": "",
          "static": "",
          "description": "Method for requesting a transaction, and queueing the\nrequest before it is sent to the resource.",
          "return": {
            "type": "",
            "description": "Object"
          }
        },
        "_setHeader": {
          "private": "",
          "static": "",
          "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.",
          "params": [
            {
              "name": "l",
              "type": "string",
              "description": " - HTTP header"
            },
            {
              "name": "v",
              "type": "string",
              "description": " - HTTP header value"
            }
          ],
          "return": {
            "type": "",
            "description": "int"
          }
        },
        "xdrReady": {
          "guessedname": "xdrReady",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "number",
              "description": " - transaction id"
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ],
          "description": "Fires event \"io:xdrReady\"",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_create": {
          "private": "",
          "static": "",
          "description": "Method that creates a unique transaction object for each\nrequest.",
          "params": [
            {
              "name": "xdr",
              "type": "number",
              "description": " - XDR configuration object"
            },
            {
              "name": "i",
              "type": "number",
              "description": " - transaction id"
            }
          ],
          "return": {
            "type": "",
            "description": "object"
          }
        },
        "transport": {
          "public": "",
          "guessedname": "transport",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - object of transport configurations."
            }
          ],
          "description": "Method to initialize the desired transport.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_ioFailure": {
          "private": "",
          "static": "",
          "description": "Fires event \"io:failure\" and creates, fires a\ntransaction-specific \"failure\" event, if config.on.failure is\ndefined.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - transaction object."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_handleResponse": {
          "private": "",
          "static": "",
          "description": "Method that determines if a transaction response qualifies\nas success or failure, based on the response HTTP status code, and\nfires the appropriate success or failure events.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create()."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - Configuration object passed to io()."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_abort": {
          "private": "",
          "static": "",
          "description": "Method for intiating an XDR transaction abort.",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " - Transaction object generated by _create() in io-base."
            },
            {
              "name": "c",
              "type": "object",
              "description": " - configuration object for the transaction."
            }
          ]
        },
        "_clearTimeout": {
          "private": "",
          "param": "{number} id - Transaction id.",
          "static": "",
          "params": [
            {
              "name": "id",
              "type": "number",
              "description": " - Transaction id."
            }
          ],
          "description": "Clears the timeout interval started by _startTimeout().",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_concat": {
          "private": "",
          "static": "",
          "description": "Method that concatenates string data for HTTP GET transactions.",
          "params": [
            {
              "name": "s",
              "type": "string",
              "description": " - URI or root data."
            },
            {
              "name": "d",
              "type": "string",
              "description": " - data to be concatenated onto URI."
            }
          ],
          "return": {
            "type": "",
            "description": "int"
          }
        }
      },
      "name": "io",
      "module": "io",
      "namespace": "",
      "events": {
        "io:failure": {
          "guessedname": "E_FAILURE",
          "type": "Event Custom",
          "guessedtype": "property",
          "description": "This event is fired by YUI.io when a transaction is complete, and\nthe HTTP status resolves to HTTP4xx, 5xx and above."
        },
        "io:success": {
          "guessedname": "E_SUCCESS",
          "type": "Event Custom",
          "guessedtype": "property",
          "description": "This event is fired by YUI.io when a transaction is complete, and\nthe HTTP status resolves to HTTP2xx."
        },
        "io:complete": {
          "guessedname": "E_COMPLETE",
          "type": "Event Custom",
          "guessedtype": "property",
          "description": "This event is fired by YUI.io when a transaction is complete.\nResponse status and data are accessible, if available."
        },
        "io:start": {
          "guessedname": "E_START",
          "type": "Event Custom",
          "guessedtype": "property",
          "description": "This event is fired by YUI.io when a transaction is initiated."
        },
        "io:xdrReady": {
          "guessedname": "E_XDR_READY",
          "type": "Event Custom",
          "guessedtype": "property",
          "description": "This event is fired by YUI.io when the specified transport is\nready for use."
        },
        "io:end": {
          "guessedname": "E_END",
          "type": "Event Custom",
          "guessedtype": "property",
          "description": "This event signifies the end of the transaction lifecycle.  The\ntransaction transport is destroyed."
        }
      },
      "description": "The io class is a utility that brokers HTTP requests through a simplified\ninterface.  Specifically, it allows JavaScript to make HTTP requests to\na resource without a page reload.  The underlying transport for making\nsame-domain requests is the XMLHttpRequest object.  YUI.io can also use\nFlash, if specified as a transport, for cross-domain requests.",
      "file": "io-base.js",
      "properties": {
        "_rS": {
          "guessedname": "_rS",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Map of transaction state used when XDomainRequest is the\nXDR transport."
        },
        "_qState": {
          "guessedname": "_qState",
          "private": "",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Property to determine whether the queue is set to\n1 (active) or 0 (inactive).  When inactive, transactions\nwill be stored in the queue until the queue is set to active."
        },
        "_yQ": {
          "guessedname": "_q",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Array of transactions queued for processing"
        },
        "_timeOut": {
          "guessedname": "_timeout",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Object that stores timeout values for any transaction with\na defined \"timeout\" configuration property."
        },
        "_transport": {
          "guessedname": "_transport",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Map of io transports."
        },
        "transactionId": {
          "guessedname": "transactionId",
          "private": "",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "A transaction counter that increments for each transaction."
        },
        "_e": {
          "private": "",
          "static": "",
          "type": "Object",
          "description": "Reference to \"io:complete\" event handler."
        },
        "_fn": {
          "guessedname": "_fn",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Object that stores callback handlers for cross-domain requests\nwhen using Flash as the transport."
        },
        "_headers": {
          "guessedname": "_headers",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Object of default HTTP headers to be initialized and sent\nfor all transactions."
        }
      }
    },
    "DOMEventFacade": {
      "shortname": "DOMEventFacade",
      "methods": {
        "preventDefault": {
          "guessedname": "preventDefault",
          "guessedtype": "function",
          "description": "Prevents the event's default behavior",
          "params": [
            {
              "name": "returnValue",
              "type": "string",
              "description": "  sets the returnValue of the event to this value\n(rather than the default false value).  This can be used to add a customized \nconfirmation query to the beforeunload event)."
            }
          ]
        },
        "halt": {
          "guessedname": "halt",
          "guessedtype": "function",
          "description": "Stops the event propagation and prevents the default\nevent behavior.",
          "params": [
            {
              "name": "immediate",
              "type": "boolean",
              "description": "  if true additional listeners\non the current target will not be executed"
            }
          ]
        },
        "stopPropagation": {
          "guessedname": "stopPropagation",
          "guessedtype": "function",
          "description": "Stops the propagation to the next bubble target"
        },
        "resolve": {
          "guessedname": "resolve",
          "private": "",
          "guessedtype": "function",
          "description": "Returns a wrapped node.  Intended to be used on event targets,\nso it will return the node's parent if the target is a text\nnode"
        },
        "stopImmediatePropagation": {
          "guessedname": "stopImmediatePropagation",
          "guessedtype": "function",
          "description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target."
        }
      },
      "name": "DOMEventFacade",
      "module": "event",
      "namespace": "",
      "param": "ev {Event} the DOM event",
      "description": "Wraps a DOM event, properties requiring browser abstraction are\nfixed here.  Provids a security layer when required.",
      "file": "event-facade-dom.js",
      "properties": {
        "pageX": {
          "guessedname": "pageX",
          "type": "int",
          "guessedtype": "property",
          "description": "The X location of the event on the page (including scroll)"
        },
        "wheelDelta": {
          "guessedname": "type",
          "type": "int",
          "guessedtype": "property",
          "description": "Number representing the direction and velocity of the movement of the mousewheel.\nNegative is down, the higher the number, the faster.  Applies to the mousewheel event."
        },
        "button": {
          "guessedname": "button",
          "type": "int",
          "guessedtype": "property",
          "description": "The button that was pushed."
        },
        "pageY": {
          "guessedname": "pageY",
          "type": "int",
          "guessedtype": "property",
          "description": "The Y location of the event on the page (including scroll)"
        },
        "charCode": {
          "guessedname": "charCode",
          "type": "int",
          "guessedtype": "property",
          "description": "The charCode for key events.  Same as keyCode"
        },
        "keyCode": {
          "guessedname": "keyCode",
          "type": "int",
          "guessedtype": "property",
          "description": "The keyCode for key events.  Uses charCode if keyCode is not available"
        },
        "_event": {
          "guessedname": "_event",
          "guessedtype": "property",
          "description": "The native event"
        },
        "target": {
          "propery": "target",
          "guessedname": "target",
          "type": "Node",
          "guessedtype": "property",
          "description": "Node reference for the targeted element"
        },
        "relatedTarget": {
          "propery": "relatedTarget",
          "guessedname": "relatedTarget",
          "type": "Node",
          "guessedtype": "property",
          "description": "Node reference to the relatedTarget"
        },
        "which": {
          "guessedname": "which",
          "type": "int",
          "guessedtype": "property",
          "description": "The button that was pushed.  Same as button."
        },
        "webkitKeymap": {
          "guessedname": "webkitKeymap",
          "private": "",
          "guessedtype": "property",
          "description": "webkit key remapping required for Safari < 3.1"
        },
        "currentTarget": {
          "propery": "currentTarget",
          "guessedname": "currentTarget",
          "type": "Node",
          "guessedtype": "property",
          "description": "Node reference for the element that the listener was attached to."
        }
      }
    },
    "Do.AlterReturn": {
      "shortname": "Do.AlterReturn",
      "name": "Do.AlterReturn",
      "guessedname": "AlterReturn",
      "module": "event-custom",
      "namespace": "",
      "guessedtype": "function",
      "description": "Return an AlterReturn object when you want to change the result returned\nfrom the core method to the caller",
      "file": "event-do.js"
    },
    "Base": {
      "shortname": "Base",
      "methods": {
        "_filterAttrCfs": {
          "guessedname": "_filterAttrCfgs",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "clazz",
              "type": "Function",
              "description": " The class for which the desired attributes are required."
            },
            {
              "name": "allCfgs",
              "type": "Object",
              "description": " The set of all attribute configurations for this instance. \nAttributes will be removed from this set, if they belong to the filtered class, so\nthat by the time all classes are processed, allCfgs will be empty."
            }
          ],
          "description": "A helper method used when processing ATTRS across the class hierarchy during \ninitialization. Returns a disposable object with the attributes defined for \nthe provided class, extracted from the set of all attributes passed in .",
          "return": {
            "type": "Object",
            "description": "The set of attributes belonging to the class passed in, in the form\nof an object with attribute name\/configuration pairs."
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Default toString implementation. Provides the constructor NAME\nand the instance ID.",
          "return": {
            "type": "String",
            "description": "String representation for this object"
          }
        },
        "destroy": {
          "final": "",
          "guessedname": "destroy",
          "chainable": "",
          "guessedtype": "function",
          "description": "<p>\nDestroy lifecycle method. Fires the destroy\nevent, prior to invoking destructors for the\nclass hierarchy.\n<\/p>\n<p>\nSubscribers to the destroy\nevent can invoke preventDefault on the event object, to prevent destruction\nfrom proceeding.\n<\/p>",
          "return": {
            "type": "Base",
            "description": "A reference to this object"
          }
        },
        "Base.plug": {
          "guessedname": "plug",
          "static": "",
          "guessedtype": "property",
          "description": "Alias for <a href=\"Plugin.Host.html#method_Plugin.Host.plug\">Plugin.Host.plug<\/a>. See aliased \nmethod for argument and return value details."
        },
        "_destroyHierarchy": {
          "guessedname": "_destroyHierarchy",
          "private": "",
          "guessedtype": "function",
          "description": "Destroys the class hierarchy for this instance by invoking\nthe descructor method on the prototype of each class in the hierarchy."
        },
        "_aggregateAttrs": {
          "guessedname": "_aggregateAttrs",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "allAttrs",
              "type": "Array",
              "description": " An array of ATTRS definitions across classes in the hierarchy \n(subclass first, Base last)"
            }
          ],
          "description": "A helper method, used by _initHierarchyData to aggregate \nattribute configuration across the instances class hierarchy.\nThe method will potect the attribute configuration value to protect the statically defined \ndefault value in ATTRS if required (if the value is an object literal, array or the \nattribute configuration has cloneDefaultValue set to shallow or deep).",
          "return": {
            "type": "Object",
            "description": "The aggregate set of ATTRS definitions for the instance"
          }
        },
        "Base.unplug": {
          "guessedname": "unplug",
          "static": "",
          "guessedtype": "property",
          "description": "Alias for <a href=\"Plugin.Host.html#method_Plugin.Host.unplug\">Plugin.Host.unplug<\/a>. See the \naliased method for argument and return value details."
        },
        "_getAttrCfgs": {
          "guessedname": "_getAttrCfgs",
          "guessedtype": "function",
          "protected": "",
          "description": "Returns an aggregated set of attribute configurations, by traversing the class hierarchy.",
          "return": {
            "type": "Object",
            "description": "The hash of attribute configurations, aggregated across classes in the hierarchy\nThis value is cached the first time the method, or _getClasses, is invoked. Subsequent invocations return\nthe cached value."
          }
        },
        "init": {
          "final": "",
          "guessedname": "init",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": " Object with configuration property name\/value pairs"
            }
          ],
          "description": "Init lifecycle method, invoked during construction.\nFires the init event prior to setting up attributes and \ninvoking initializers for the class hierarchy.",
          "return": {
            "type": "Base",
            "description": "A reference to this object"
          }
        },
        "_initHierarchy": {
          "private": "",
          "guessedname": "_initHierarchy",
          "guessedtype": "function",
          "description": "Initializes the class hierarchy for the instance, which includes \ninitializing attributes for each class defined in the class's \nstatic <a href=\"#property_Base.ATTRS\">ATTRS<\/a> property and \ninvoking the initializer method on the prototype of each class in the hierarchy.",
          "params": [
            {
              "name": "userVals",
              "type": "Object",
              "description": " Object with configuration property name\/value pairs"
            }
          ]
        },
        "_getClasses": {
          "guessedname": "_getClasses",
          "guessedtype": "function",
          "protected": "",
          "description": "Returns the class hierarchy for this object, with Base being the last class in the array.",
          "return": {
            "type": "Function[]",
            "description": "An array of classes (constructor functions), making up the class hierarchy for this object.\nThis value is cached the first time the method, or _getAttrCfgs, is invoked. Subsequent invocations return the \ncached value."
          }
        },
        "_defDestroyFn": {
          "guessedname": "_defDestroyFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Default destroy event handler",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " Event object"
            }
          ]
        },
        "_initHierarchyData": {
          "guessedname": "_initHierarchyData",
          "private": "",
          "guessedtype": "function",
          "description": "A helper method used by _getClasses and _getAttrCfgs, which determines both\nthe array of classes and aggregate set of attribute configurations\nacross the class hierarchy for the instance."
        },
        "Base.build": {
          "guessedname": "build",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "Function",
              "description": " The name of the new class. Used to defined the NAME property for the new class."
            },
            {
              "name": "main",
              "type": "Function",
              "description": " The main class on which to base the built class"
            },
            {
              "name": "extensions",
              "type": "Function[]",
              "description": " The set of extension classes which will be\naugmented\/aggregated to the built class."
            },
            {
              "name": "cfg",
              "type": "Object",
              "description": " Optional. Build configuration for the class (see description)."
            }
          ],
          "description": "<p>\nBuilds a custom constructor function (class) from the\nmain function, and array of extension functions (classes)\nprovided. The NAME field for the constructor function is \ndefined by the first argument passed in.\n<\/p>\n<p>\nThe cfg object supports the following properties\n<\/p>\n<dl>\n<dt>dynamic &#60;boolean&#62;<\/dt>\n<dd>\n<p>If true (default), a completely new class\nis created which extends the main class, and acts as the \nhost on which the extension classes are augmented.<\/p>\n<p>If false, the extensions classes are augmented directly to\nthe main class, modifying the main class' prototype.<\/p>\n<\/dd>\n<dt>aggregates &#60;String[]&#62;<\/dt>\n<dd>An array of static property names, which will get aggregated\non to the built class, in addition to the default properties build \nwill always aggregate as defined by the main class' static _buildCfg\nproperty.\n<\/dd>\n<\/dl>",
          "return": {
            "type": "Function",
            "description": "A custom class, created from the provided main and extension classes"
          }
        },
        "_defInitFn": {
          "guessedname": "_defInitFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Default init event handler",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."
            }
          ]
        }
      },
      "name": "Base",
      "module": "base",
      "namespace": "",
      "events": {
        "initializedChange": {
          "name": "initializedChange",
          "description": "Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "destroy": {
          "preventable": "_defDestroyFn",
          "description": "<p>\nLifecycle event for the destroy phase, \nfired prior to destruction. Invoking the preventDefault \nmethod on the event object provided to subscribers will \nprevent destruction from proceeding.\n<\/p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter destruction is complete (and as a result cannot prevent\ndestruction).\n<\/p>",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " Event object"
            }
          ]
        },
        "init": {
          "preventable": "_defInitFn",
          "description": "<p>\nLifecycle event for the init phase, fired prior to initialization. \nInvoking the preventDefault() method on the event object provided \nto subscribers will prevent initialization from occuring.\n<\/p>\n<p>\nSubscribers to the \"after\" momemt of this event, will be notified\nafter initialization of the object is complete (and therefore\ncannot prevent initialization).\n<\/p>",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."
            }
          ]
        },
        "destroyedChange": {
          "name": "destroyedChange",
          "description": "Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "<p>\nA base class which objects requiring attributes and custom event support can \nextend. Base also handles the chaining of initializer and destructor methods across \nthe hierarchy as part of object construction and destruction. Additionally, attributes configured \nthrough the static <a href=\"#property_Base.ATTRS\">ATTRS<\/a> property for each class \nin the hierarchy will be initialized by Base.\n<\/p>\n<p>\nThe static <a href=\"#property_Base.NAME\">NAME<\/a> property of each class extending \nfrom Base will be used as the identifier for the class, and is used by Base to prefix \nall events fired by instances of that class.\n<\/p>",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": " Object with configuration property name\/value pairs"
            }
          ]
        }
      ],
      "description": "<p>\nA base class which objects requiring attributes and custom event support can \nextend. Base also handles the chaining of initializer and destructor methods across \nthe hierarchy as part of object construction and destruction. Additionally, attributes configured \nthrough the static <a href=\"#property_Base.ATTRS\">ATTRS<\/a> property for each class \nin the hierarchy will be initialized by Base.\n<\/p>\n<p>\nThe static <a href=\"#property_Base.NAME\">NAME<\/a> property of each class extending \nfrom Base will be used as the identifier for the class, and is used by Base to prefix \nall events fired by instances of that class.\n<\/p>",
      "file": "Base.js",
      "configs": {
        "initialized": {
          "guessedname": "initialized",
          "default": "false",
          "readonly": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag indicating whether or not this object\nhas been through the init lifecycle phase."
        },
        "destroyed": {
          "guessedname": "destroyed",
          "default": "false",
          "readonly": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag indicating whether or not this object\nhas been through the destroy lifecycle phase."
        }
      },
      "properties": {
        "name": {
          "guessedname": "prefix",
          "type": "String",
          "guessedtype": "property",
          "description": "The string used to identify the class of this object.",
          "deprecated": "Use this.constructor.NAME"
        },
        "Base._ATTR_CFG": {
          "guessedname": "_ATTR_CFG",
          "private": "",
          "static": "",
          "type": "Array",
          "guessedtype": "property",
          "description": "The list of properties which can be configured for \neach attribute (e.g. setter, getter, writeOnce, readOnly etc.)"
        },
        "Base.ATTRS": {
          "guessedname": "ATTRS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "The default set of attributes which will be available for instances of this class, and \ntheir configuration. In addition to the configuration properties listed by \nAttribute's <a href=\"Attribute.html#method_addAttr\">addAttr<\/a> method, the attribute \ncan also be configured with a \"cloneDefaultValue\" property, which defines how the statically\ndefined value field should be protected (\"shallow\", \"deep\" and false are supported values). \nBy default if the value is an object literal or an array it will be \"shallow\" cloned, to \nprotect the default value."
        },
        "Base._buildCfg": {
          "final": "",
          "guessedname": "_buildCfg",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "The build configuration for the Base class.\nDefines the static fields which need to be aggregated\nwhen the Base class is used as the main class passed to \nthe <a href=\"#method_Base.build\">Base.build<\/a> method."
        },
        "Base.NAME": {
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "<p>\nThe string to be used to identify instances of \nthis class, for example in prefixing events.\n<\/p>\n<p>\nClasses extending Base, should define their own\nstatic NAME property, which should be camelCase by\nconvention (e.g. MyClass.NAME = \"myClass\";).\n<\/p>"
        }
      },
      "uses": [
        "Attribute",
        "Plugin.Host"
      ]
    },
    "DataSchema.JSON": {
      "shortname": "DataSchema.JSON",
      "superclass": "DataSchema.Base",
      "methods": {
        "DataSchema.JSON.getLocationValue": {
          "guessedname": "getLocationValue",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "path",
              "type": "String[]",
              "description": "  Locator path."
            },
            {
              "name": "data",
              "type": "String",
              "description": "  Data to traverse."
            }
          ],
          "description": "Utility function to walk a path and return the value located there.",
          "return": {
            "type": "Object",
            "description": "Data value at location."
          }
        },
        "DataSchema.JSON.getPath": {
          "guessedname": "getPath",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "locator",
              "type": "String",
              "description": "  JSON value locator."
            }
          ],
          "description": "Utility function converts JSON locator strings into walkable paths",
          "return": {
            "type": "String[]",
            "description": "Walkable path to data value."
          }
        },
        "apply": {
          "guessedname": "apply",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "schema",
              "type": "Object",
              "description": "  Schema to apply."
            },
            {
              "name": "data",
              "type": "Object",
              "description": "  JSON data."
            }
          ],
          "description": "Applies a given schema to given JSON data.",
          "return": {
            "type": "Object",
            "description": "Schema-parsed data."
          }
        },
        "_parseMeta": {
          "guessedname": "_parseMeta",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "metaFields",
              "type": "Object",
              "description": "  Metafields definitions."
            },
            {
              "name": "json_in",
              "type": "Object",
              "description": "  JSON to parse."
            },
            {
              "name": "data_out",
              "type": "Object",
              "description": "  In-progress parsed data to update."
            }
          ],
          "description": "Parses results data according to schema",
          "return": {
            "type": "Object",
            "description": "Schema-parsed meta data."
          }
        },
        "_parseResults": {
          "guessedname": "_parseResults",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "schema",
              "type": "Object",
              "description": "  Schema to parse against."
            },
            {
              "name": "json_in",
              "type": "Object",
              "description": "  JSON to parse."
            },
            {
              "name": "data_out",
              "type": "Object",
              "description": "  In-progress parsed data to update."
            }
          ],
          "description": "Schema-parsed list of results from full data",
          "return": {
            "type": "Object",
            "description": "Parsed data object."
          }
        },
        "_getFieldValues": {
          "guessedname": "_getFieldValues",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "fields",
              "type": "Array",
              "description": "  Fields to find."
            },
            {
              "name": "array_in",
              "type": "Array",
              "description": "  Results to parse."
            },
            {
              "name": "data_out",
              "type": "Object",
              "description": "  In-progress parsed data to update."
            }
          ],
          "description": "Get field data values out of list of full results",
          "return": {
            "type": "Object",
            "description": "Parsed data object."
          }
        }
      },
      "name": "DataSchema.JSON",
      "extends": "DataSchema.Base",
      "guessedname": "LANG",
      "module": "dataschema",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "JSON subclass for the DataSchema Utility.",
      "file": "dataschema-json.js"
    },
    "Plugin.DDNodeScroll": {
      "shortname": "DDNodeScroll",
      "superclass": "DD.Scroll",
      "name": "Plugin.DDNodeScroll",
      "extends": "DD.Scroll",
      "guessedname": "NS",
      "module": "dd",
      "namespace": "Plugin",
      "events": {
        "nodeChange": {
          "name": "nodeChange",
          "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Extends the Scroll class to make a parent node scroll while dragging."
        }
      ],
      "guessedtype": "function",
      "description": "Extends the Scroll class to make a parent node scroll while dragging.",
      "configs": {
        "node": {
          "guessedname": "node",
          "type": "Node",
          "guessedtype": "property",
          "description": "The node we want to scroll. Used to set the internal parentScroll attribute."
        }
      },
      "file": "scroll.js"
    },
    "Plugin.Drag": {
      "shortname": "Drag",
      "superclass": "DD.Drag",
      "name": "Plugin.Drag",
      "extends": "DD.Drag",
      "guessedname": "Drag",
      "module": "dd",
      "namespace": "Plugin",
      "constructors": [
        {
          "description": "This is a simple Drag plugin that can be attached to a Node via the plug method."
        }
      ],
      "guessedtype": "function",
      "description": "This is a simple Drag plugin that can be attached to a Node via the plug method.",
      "file": "dd-plugin.js",
      "properties": {
        "NAME": {
          "guessedname": "NAME",
          "type": "{String}",
          "guessedtype": "property",
          "description": "dd-plugin"
        },
        "NS": {
          "guessedname": "NS",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The Drag instance will be placed on the Node instance under the dd namespace. It can be accessed via Node.dd;"
        }
      }
    },
    "Widget": {
      "shortname": "Widget",
      "superclass": "Base",
      "methods": {
        "_afterDisabledChange": {
          "guessedname": "_afterDisabledChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default disabled attribute state change handler",
          "params": [
            {
              "name": "evt",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "_moveStyles": {
          "private": "",
          "guessedname": "_moveStyles",
          "guessedtype": "function",
          "description": "Moves a pre-defined set of style rules (WRAP_STYLES) from one node to another.",
          "params": [
            {
              "name": "nodeFrom",
              "type": "Node",
              "description": " The node to gather the styles from"
            },
            {
              "name": "nodeTo",
              "type": "Node",
              "description": " The node to apply the styles to"
            }
          ]
        },
        "_parseHTML": {
          "guessedname": "_parseHTML",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "  Root node to use to parse markup for configuration data"
            }
          ],
          "description": "Utilitity method used to apply the <code>HTML_PARSER<\/code> configuration for the \ninstance, to retrieve config data values.",
          "return": {
            "type": "Object",
            "description": "config  configuration object, with values found in the HTML, populated"
          }
        },
        "_afterHeightChange": {
          "guessedname": "_afterHeightChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default height attribute state change handler",
          "params": [
            {
              "name": "evt",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "_uiSetDisabled": {
          "guessedname": "_uiSetDisabled",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the disabled state for the UI",
          "params": [
            {
              "name": "val",
              "type": "boolean",
              "description": ""
            }
          ]
        },
        "renderUI": {
          "guessedname": "renderUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Adds nodes to the DOM \nThis method is not called by framework and is not chained \nautomatically for the class hierarchy."
        },
        "getClassName": {
          "guessedname": "getClassName",
          "param": "{String}+ One or more classname bits to be joined and prefixed",
          "guessedtype": "function",
          "description": "Generate a standard prefixed classname for the Widget, prefixed by the default prefix defined\nby the <code>Y.config.classNamePrefix<\/code> attribute used by <code>ClassNameManager<\/code> and \n<code>Widget.NAME.toLowerCase()<\/code> (e.g. \"yui-widget-xxxxx-yyyyy\", based on default values for \nthe prefix and widget class name).\n<p>\nThe instance based version of this method can be used to generate standard prefixed classnames,\nbased on the instances NAME, as opposed to Widget.NAME. This method should be used when you\nneed to use a constant class name across different types instances.\n<\/p>",
          "params": [
            {
              "name": "args*",
              "type": "String*",
              "description": " 0..n strings which should be concatenated, using the default separator defined by ClassNameManager, to create the class name"
            }
          ]
        },
        "_setStrings": {
          "guessedname": "_setStrings",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets strings for a particular locale, merging with any existing\nstrings which may already be defined for the locale.",
          "params": [
            {
              "name": "strings",
              "type": "Object",
              "description": " The hash of string key\/values to set"
            },
            {
              "name": "locale",
              "type": "Object",
              "description": " The locale for the string values being set"
            }
          ]
        },
        "_renderBox": {
          "private": "",
          "guessedname": "_renderBox",
          "guessedtype": "function",
          "description": "Helper method to collect the boundingBox and contentBox, set styles and append to the provided parentNode, if not\nalready a child. The owner document of the boundingBox, or the owner document of the contentBox will be used \nas the document into which the Widget is rendered if a parentNode is node is not provided. If both the boundingBox and\nthe contentBox are not currently in the document, and no parentNode is provided, the widget will be rendered \nto the current document's body.",
          "params": [
            {
              "name": "parentNode",
              "type": "Node",
              "description": " The parentNode to render the widget to. If not provided, and both the boundingBox and\nthe contentBox are not currently in the document, the widget will be rendered to the current document's body."
            }
          ]
        },
        "_getStrings": {
          "guessedname": "_getStrings",
          "guessedtype": "function",
          "protected": "",
          "description": "Returns the strings key\/value hash for a paricular locale, without locale lookup applied.",
          "params": [
            {
              "name": "locale",
              "type": "Object",
              "description": ""
            }
          ]
        },
        "hide": {
          "guessedname": "hide",
          "guessedtype": "function",
          "description": "Shows the Module element by setting the \"visible\" attribute to \"false\"."
        },
        "_uiSetHeight": {
          "guessedname": "_uiSetHeight",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the height on the widget's bounding box element",
          "params": [
            {
              "name": "val",
              "type": "String | Number",
              "description": ""
            }
          ]
        },
        "_bindDOMListeners": {
          "guessedname": "_bindDOMListeners",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets up DOM listeners, on elements rendered by the widget."
        },
        "_getHtmlParser": {
          "guessedname": "_getHtmlParser",
          "guessedtype": "function",
          "description": "Gets the HTML_PARSER definition for this instance, by merging HTML_PARSER\ndefinitions across the class hierarchy.",
          "return": {
            "type": "Object",
            "description": "HTML_PARSER definition for this instance"
          }
        },
        "_uiSetWidth": {
          "guessedname": "_uiSetWidth",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the width on the widget's bounding box element",
          "params": [
            {
              "name": "val",
              "type": "String | Number",
              "description": ""
            }
          ]
        },
        "getStrings": {
          "description": "Gets the entire strings hash for a particular locale, performing locale lookup.\n<p>\nIf no values of the key are defined for a particular locale the value for the \ndefault locale (in initial locale set for the class) is returned.\n<\/p>",
          "params": [
            {
              "name": "locale",
              "type": "String",
              "description": " (optional) The locale for which the string value is required. Defaults to the current locale, if not provided."
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Generic toString implementation for all widgets.",
          "return": {
            "type": "String",
            "description": "The default string value for the widget [ displays the NAME of the instance, and the unique id ]"
          }
        },
        "_onDocMouseDown": {
          "guessedname": "_onDocMouseDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mousedown\" event handler for the owner document of the \nwidget's bounding box.",
          "params": [
            {
              "name": "evt",
              "type": "EventFacade",
              "description": " The event facade for the DOM focus event"
            }
          ]
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Causes the Widget to receive the focus by setting the \"focused\" \nattribute to \"true\"."
        },
        "render": {
          "final": "",
          "guessedname": "render",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "parentNode",
              "type": "Object | String",
              "description": "  Optional. The Node under which the \nWidget is to be rendered. This can be a Node instance or a CSS selector string. \n<p>\nIf the selector string returns more than one Node, the first node will be used \nas the parentNode. NOTE: This argument is required if both the boundingBox and contentBox\nare not currently in the document. If it's not provided, the Widget will be rendered\nto the body of the current document in this case.\n<\/p>"
            }
          ],
          "description": "Establishes the initial DOM for the widget. Invoking this\nmethod will lead to the creating of all DOM elements for\nthe widget (or the manipulation of existing DOM elements \nfor the progressive enhancement use case).\n<p>\nThis method should only be invoked once for an initialized\nwidget.\n<\/p>\n<p>\nIt delegates to the widget specific renderer method to do\nthe actual work.\n<\/p>"
        },
        "_afterVisibleChange": {
          "guessedname": "_afterVisibleChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default visible attribute state change handler",
          "params": [
            {
              "name": "evt",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "enable": {
          "guessedname": "enable",
          "guessedtype": "function",
          "description": "Set the Widget's \"disabled\" attribute to \"false\"."
        },
        "_uiSetTabIndex": {
          "guessedname": "_uiSetTabIndex",
          "guessedtype": "function",
          "protected": "",
          "description": "Set the tabIndex on the widget's rendered UI",
          "params": [
            {
              "name": "Number",
              "type": "",
              "description": ""
            }
          ]
        },
        "_bindUI": {
          "guessedname": "_bindUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets up DOM and CustomEvent listeners for the widget."
        },
        "_syncUI": {
          "guessedname": "_syncUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the widget UI to reflect the attribute state."
        },
        "renderer": {
          "guessedname": "renderer",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by render() and is not chained \nautomatically for the class hierarchy (like initializer, destructor) \nso it should be chained manually for subclasses if required."
        },
        "_uiSetVisible": {
          "guessedname": "_uiSetVisible",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the visible state for the UI",
          "params": [
            {
              "name": "val",
              "type": "boolean",
              "description": ""
            }
          ]
        },
        "_setBoundingBox": {
          "guessedname": "_setBoundingBox",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "Node\/String",
              "type": "",
              "description": ""
            }
          ],
          "description": "Setter for the boundingBox attribute",
          "return": {
            "type": "",
            "description": "Node"
          }
        },
        "_defRenderFn": {
          "guessedname": "_defRenderFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Default render handler",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The Event object"
            },
            {
              "name": "parentNode",
              "type": "Node",
              "description": " The parent node to render to, if passed in to the <code>render<\/code> method"
            }
          ]
        },
        "syncUI": {
          "guessedname": "syncUI",
          "guessedtype": "function",
          "description": "Refreshes the rendered UI, based on Widget State\nThis method is not called by framework and is not chained\nautomatically for the class hierarchy."
        },
        "initializer": {
          "guessedname": "initializer",
          "guessedtype": "function",
          "protected": "",
          "description": "Initializer lifecycle implementation for the Widget class. Registers the \nwidget instance, and runs through the Widget's HTML_PARSER definition.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Configuration object literal for the widget"
            }
          ]
        },
        "_afterWidthChange": {
          "guessedname": "_afterWidthChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default widget attribute state change handler",
          "params": [
            {
              "name": "evt",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "blur": {
          "guessedname": "blur",
          "guessedtype": "function",
          "description": "Causes the Widget to lose focus by setting the \"focused\" attribute \nto \"false\""
        },
        "destructor": {
          "guessedname": "destructor",
          "guessedtype": "function",
          "protected": "",
          "description": "Descructor lifecycle implementation for the Widget class. Purges events attached\nto the bounding box (and all child nodes) and removes the Widget from the \nlist of registered widgets."
        },
        "Widget.getByNode": {
          "guessedname": "getByNode",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "Node | String",
              "description": "  The node for which to return a Widget instance. If a selector\nstring is passed in, which selects more than one node, the first node found is used."
            }
          ],
          "description": "Returns the widget instance whose bounding box contains, or is, the given node. \n<p>\nIn the case of nested widgets, the nearest bounding box ancestor is used to\nreturn the widget instance.\n<\/p>",
          "return": {
            "type": "Widget",
            "description": "Widget instance, or null if not found."
          }
        },
        "getString": {
          "guessedname": "getString",
          "guessedtype": "function",
          "description": "Gets the string for a particular key, for a particular locale, performing locale lookup.\n<p>\nIf no values if defined for the key, for the given locale, the value for the \ndefault locale (in initial locale set for the class) is returned.\n<\/p>",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The key."
            },
            {
              "name": "locale",
              "type": "String",
              "description": " (optional) The locale for which the string value is required. Defaults to the current locale, if not provided."
            }
          ]
        },
        "show": {
          "guessedname": "show",
          "guessedtype": "function",
          "description": "Shows the Module element by setting the \"visible\" attribute to \"true\"."
        },
        "_renderBoxClassNames": {
          "guessedname": "_renderBoxClassNames",
          "guessedtype": "function",
          "protected": "",
          "description": "Applies standard class names to the boundingBox and contentBox"
        },
        "_onFocus": {
          "guessedname": "_onFocus",
          "guessedtype": "function",
          "protected": "",
          "description": "DOM focus event handler, used to sync the state of the Widget with the DOM",
          "params": [
            {
              "name": "evt",
              "type": "EventFacade",
              "description": " The event facade for the DOM focus event"
            }
          ]
        },
        "bindUI": {
          "guessedname": "bindUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Configures\/Sets up listeners to bind Widget State to UI\/DOM\nThis method is not called by framework and is not chained \nautomatically for the class hierarchy."
        },
        "disabled": {
          "guessedname": "disable",
          "guessedtype": "function",
          "description": "Set the Widget's \"disabled\" attribute to \"true\"."
        },
        "_renderUI": {
          "guessedname": "_renderUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Initializes the UI state for the Widget's bounding\/content boxes.",
          "params": [
            {
              "name": "The",
              "type": "Node",
              "description": " parent node to rendering the widget into"
            }
          ]
        },
        "getDefaultLocale": {
          "guessedname": "getDefaultLocale",
          "guessedtype": "function",
          "description": "Returns the default locale for the widget (the locale value defined by the\nwidget class, or provided by the user during construction).",
          "return": {
            "type": "String",
            "description": "The default locale for the widget"
          }
        },
        "_setContentBox": {
          "guessedname": "_setContentBox",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "Node|String",
              "description": ""
            }
          ],
          "description": "Setter for the contentBox attribute",
          "return": {
            "type": "",
            "description": "Node"
          }
        },
        "_afterFocusedChange": {
          "guessedname": "_afterFocusedChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default focused attribute state change handler",
          "params": [
            {
              "name": "evt",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "_uiSetFocused": {
          "guessedname": "_uiSetFocused",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the focused state for the UI",
          "params": [
            {
              "name": "val",
              "type": "boolean",
              "description": ""
            },
            {
              "name": "src",
              "type": "string",
              "description": " String representing the source that triggered an update to \nthe UI."
            }
          ]
        },
        "_setBox": {
          "guessedname": "_setBox",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "Node|String",
              "description": " The node reference"
            },
            {
              "name": "template",
              "type": "String",
              "description": " HTML string template for the node"
            }
          ],
          "description": "Helper method to set the bounding\/content box, or create it from\nthe provided template if not found.",
          "return": {
            "type": "Node",
            "description": "The node"
          }
        }
      },
      "name": "Widget",
      "extends": "Base",
      "module": "widget",
      "namespace": "",
      "events": {
        "widthChange": {
          "name": "widthChange",
          "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "focusedChange": {
          "name": "focusedChange",
          "description": "Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "heightChange": {
          "name": "heightChange",
          "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "contentBoxChange": {
          "name": "contentBoxChange",
          "description": "Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "disabledChange": {
          "name": "disabledChange",
          "description": "Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "widget:render": {
          "preventable": "_defRenderFn",
          "guessedname": "queuable",
          "guessedtype": "property",
          "description": "Lifcyle event for the render phase, fired prior to rendering the UI \nfor the widget (prior to invoking the widgets renderer method).\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore the widget is rendered.\n<\/p>\n<p>\nSubscribers to the \"after\" momemt of this event, will be notified\nafter rendering is complete.\n<\/p>",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The Event Facade"
            }
          ]
        },
        "moveStylesChange": {
          "name": "moveStylesChange",
          "description": "Fires when the value for the configuration attribute 'moveStyles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "boundingBoxChange": {
          "name": "boundingBoxChange",
          "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "tabIndexChange": {
          "name": "tabIndexChange",
          "description": "Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "widget:contentUpdate": {
          "preventable": "false",
          "guessedname": "preventable",
          "guessedtype": "property",
          "description": "Notification event, which widget implementations can fire, when\nthey change the content of the widget. This event has no default\nbehavior and cannot be prevented, so the \"on\" or \"after\"\nmoments are effectively equivalent (with on listeners being invoked before \nafter listeners).",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The Event Facade"
            }
          ]
        },
        "visibleChange": {
          "name": "visibleChange",
          "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "renderedChange": {
          "name": "renderedChange",
          "description": "Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "stringsChange": {
          "name": "stringsChange",
          "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "localeChange": {
          "name": "localeChange",
          "description": "Fires when the value for the configuration attribute 'locale' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base<\/li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI<\/li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, focused, strings<\/li>\n<\/ul>",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Object literal specifying widget configuration \nproperties."
            }
          ]
        }
      ],
      "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base<\/li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI<\/li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, focused, strings<\/li>\n<\/ul>",
      "file": "Widget.js",
      "configs": {
        "moveStyles": {
          "guessedname": "moveStyles",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag defining whether or not style properties from the content box\nshould be moved to the bounding box when wrapped (as defined by the WRAP_STYLES property)"
        },
        "rendered": {
          "guessedname": "rendered",
          "default": "false",
          "readonly": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag indicating whether or not this object\nhas been through the render lifecycle phase."
        },
        "boundingBox": {
          "guessedname": "boundingBox",
          "type": "Node",
          "guessedtype": "property",
          "description": "The outermost DOM node for the Widget, used for sizing and positioning \nof a Widget as well as a containing element for any decorator elements used \nfor skinning."
        },
        "focused": {
          "guessedname": "focused",
          "default": "false",
          "readonly": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Boolean indicating if the Widget, or one of its descendants, \nhas focus."
        },
        "strings": {
          "guessedname": "strings",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "description": "Collection of strings used to label elements of the Widget's UI."
        },
        "tabIndex": {
          "guessedname": "tabIndex",
          "default": "null",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number (between -32767 to 32767) indicating the widget's \nposition in the default tab flow.  The value is used to set the \n\"tabIndex\" attribute on the widget's bounding box.  Negative values allow\nthe widget to receive DOM focus programmatically (by calling the focus\nmethod), while being removed from the default tab flow.  A value of \nnull removes the \"tabIndex\" attribute from the widget's bounding box."
        },
        "height": {
          "guessedname": "height",
          "default": "\"\"",
          "type": "{String | Number}",
          "guessedtype": "property",
          "description": "String with units, or number, representing the height of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used."
        },
        "disabled": {
          "guessedname": "disabled",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Boolean indicating if the Widget should be disabled. The disabled implementation\nis left to the specific classes extending widget."
        },
        "locale": {
          "guessedname": "locale",
          "default": "\"en\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The default locale for the widget. NOTE: Using get\/set on the \"strings\" attribute will\nreturn\/set strings for this locale."
        },
        "contentBox": {
          "guessedname": "contentBox",
          "type": "Node",
          "guessedtype": "property",
          "description": "A DOM node that is a direct descendent of a Widget's bounding box that \nhouses its content."
        },
        "visible": {
          "guessedname": "visible",
          "default": "true",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Boolean indicating weather or not the Widget is visible."
        },
        "width": {
          "guessedname": "width",
          "default": "\"\"",
          "type": "{String | Number}",
          "guessedtype": "property",
          "description": "String with units, or number, representing the width of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used."
        }
      },
      "properties": {
        "Widget.HTML_PARSER": {
          "guessedname": "HTML_PARSER",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box. e.g.:\n<pre>\n{\n\/\/ Set single Node references using selector syntax \n\/\/ (selector is run through node.query)\ntitleNode: \"span.yui-title\",\n\/\/ Set NodeList references using selector syntax \n\/\/ (array indicates selector is to be run through node.queryAll)\nlistNodes: [\"li.yui-item\"],\n\/\/ Set other attribute types, using a parse function. \n\/\/ Context is set to the widget instance.\nlabel: function(contentBox) {\nreturn contentBox.query(\"span.title\").get(\"innerHTML\");\n}\n}\n<\/pre>"
        },
        "Widget.NAME": {
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Static property provides a string to identify the class.\n<p>\nCurrently used to apply class identifiers to the bounding box \nand to classify events fired by the widget.\n<\/p>"
        },
        "_buildCfg": {
          "final": "",
          "guessedname": "_buildCfg",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "The build configuration for the Widget class.\n<p>\nDefines the static fields which need to be aggregated,\nwhen this class is used as the main class passed to \nthe <a href=\"Base.html#method_build\">Base.build<\/a> method.\n<\/p>"
        },
        "BOUNDING_TEMPLATE": {
          "guessedname": "BOUNDING_TEMPLATE",
          "type": "String",
          "guessedtype": "property",
          "description": "Static property defining the markup template for bounding box."
        },
        "DEF_UNIT": {
          "guessedname": "DEF_UNIT",
          "guessedtype": "property",
          "description": "Default unit to use for dimension values"
        },
        "CONTENT_TEMPLATE": {
          "guessedname": "CONTENT_TEMPLATE",
          "type": "String",
          "guessedtype": "property",
          "description": "Static property defining the markup template for content box."
        },
        "Widget.UI_SRC": {
          "final": "",
          "guessedname": "UI_SRC",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to identify state changes originating from\nthe DOM (as opposed to the JavaScript model)."
        },
        "_strings": {
          "private": "",
          "guessedname": "_strings",
          "type": "Object",
          "guessedtype": "property",
          "description": "Private stings hash, used to store strings in locale specific buckets."
        },
        "Widget.ATTRS": {
          "guessedname": "ATTRS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Static property used to define the default attribute \nconfiguration for the Widget."
        },
        "WRAP_STYLES": {
          "guessedname": "WRAP_STYLES",
          "type": "Object",
          "guessedtype": "property",
          "description": "Static property listing the styles that are mimiced on the bounding box from the content box."
        },
        "Widget._NAME_LOWERCASE": {
          "private": "",
          "guessedname": "_NAME_LOWERCASE",
          "static": "",
          "guessedtype": "property",
          "description": "Cached lowercase version of Widget.NAME"
        }
      }
    },
    "Test.Wait": {
      "shortname": "Wait",
      "name": "Test.Wait",
      "guessedname": "Wait",
      "module": "test",
      "namespace": "Test",
      "constructors": [
        {
          "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing.",
          "params": [
            {
              "name": "segment",
              "type": "Function",
              "description": " A function to run when the wait is over."
            },
            {
              "name": "delay",
              "type": "int",
              "description": " The number of milliseconds to wait before running the code."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing.",
      "file": "TestCase.js",
      "properties": {
        "delay": {
          "guessedname": "delay",
          "type": "int",
          "guessedtype": "property",
          "description": "The delay before running the segment of code."
        },
        "segment": {
          "guessedname": "segment",
          "type": "Function",
          "guessedtype": "property",
          "description": "The segment of code to run when the wait is over."
        }
      }
    },
    "Pollable": {
      "shortname": "Pollable",
      "superclass": "DataSource.Local",
      "methods": {
        "clearAllIntervals": {
          "guessedname": "clearAllIntervals",
          "guessedtype": "function",
          "description": "Clears all intervals."
        },
        "setInterval": {
          "guessedname": "setInterval",
          "guessedtype": "function",
          "description": "Sets up a polling mechanism to send requests at set intervals and forward\nresponses to given callback.",
          "params": [
            {
              "name": "msec",
              "type": "Number",
              "description": "  Length of interval in milliseconds."
            },
            {
              "name": "request",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "callback",
              "type": "Object",
              "description": "  An object literal with the following properties:\n<dl>\n<dt><code>success<\/code><\/dt>\n<dd>The function to call when the data is ready.<\/dd>\n<dt><code>failure<\/code><\/dt>\n<dd>The function to call upon a response failure condition.<\/dd>\n<dt><code>argument<\/code><\/dt>\n<dd>Arbitrary data that will be passed back to the success and failure handlers.<\/dd>\n<\/dl>"
            }
          ],
          "return": {
            "type": "Number",
            "description": "Interval ID."
          }
        },
        "clearInterval": {
          "guessedname": "clearInterval",
          "guessedtype": "function",
          "description": "Disables polling mechanism associated with the given interval ID.",
          "params": [
            {
              "name": "id",
              "type": "Number",
              "description": "  Interval ID."
            }
          ]
        }
      },
      "name": "Pollable",
      "extends": "DataSource.Local",
      "guessedname": "LANG",
      "module": "datasource",
      "namespace": "",
      "guessedtype": "property",
      "description": "Adds polling to the DataSource Utility.",
      "file": "datasource-polling.js",
      "properties": {
        "_intervals": {
          "guessedname": "_intervals",
          "private": "",
          "guessedtype": "property",
          "description": "Hash of polling interval IDs that have been enabled,\nstored here to be able to clear all intervals."
        }
      }
    },
    "Plugin.Base": {
      "shortname": "Plugin.Base",
      "superclass": "Base",
      "methods": {
        "doBefore": {
          "guessedname": "doBefore",
          "guessedtype": "function",
          "description": "Listens for the \"on\" moment of events fired by the host, \nor injects code \"before\" a given method on the host.",
          "params": [
            {
              "name": "sFn",
              "type": "String",
              "description": "  The event to listen for, or method to inject logic before."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  The handler function. For events, the \"on\" moment listener. For methods, the function to execute before the given method is executed."
            },
            {
              "name": "context",
              "type": "Object",
              "description": "  An optional context to call the handler with. The default context is the plugin instance."
            }
          ],
          "return": {
            "type": "EventHandle",
            "description": "handle  The detach handle for the handler."
          }
        },
        "initializer": {
          "guessedname": "initializer",
          "guessedtype": "function",
          "description": "Initializer lifecycle implementation.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": " Configuration object with property name\/value pairs."
            }
          ]
        },
        "destructor": {
          "guessedname": "destructor",
          "guessedtype": "function",
          "description": "Destructor lifecycle implementation.\nRemoves any event listeners or injected methods applied by the Plugin"
        },
        "doAfter": {
          "guessedname": "doAfter",
          "guessedtype": "function",
          "description": "Listens for the \"after\" moment of events fired by the host, \nor injects code \"after\" a given method on the host.",
          "params": [
            {
              "name": "sFn",
              "type": "String",
              "description": "  The event to listen for, or method to inject logic after."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  The handler function. For events, the \"after\" moment listener. For methods, the function to execute after the given method is executed."
            },
            {
              "name": "context",
              "type": "Object",
              "description": "  An optional context to call the handler with. The default context is the plugin instance."
            }
          ],
          "return": {
            "type": "EventHandle",
            "description": "handle  The detach handle for the handler."
          }
        }
      },
      "name": "Plugin.Base",
      "extends": "Base",
      "module": "plugin",
      "namespace": "",
      "param": "{Object} config Configuration object with property name\/value pairs.",
      "events": {
        "hostChange": {
          "name": "hostChange",
          "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "description": "The base class for all Plugin instances.",
      "file": "plugin.js",
      "configs": {
        "host": {
          "guessedname": "host",
          "writeonce": "",
          "type": "Plugin.Host",
          "guessedtype": "property",
          "description": "The plugin's host object."
        }
      },
      "properties": {
        "Plugin.Base.ATTRS": {
          "guessedname": "ATTRS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object defining the set of attributes supported by the Plugin.Base class"
        },
        "Plugin.Base.NAME": {
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The string identifying the Plugin.Base class. Plugins extending\nPlugin.Base should set their own NAME value."
        },
        "Plugin.NS": {
          "guessedname": "NS",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the property the the plugin will be attached to\nwhen plugged into a Plugin Host. Plugins extending Plugin.Base,\nshould set their own NS value."
        },
        "_handles": {
          "guessedname": "_handles",
          "private": "",
          "type": "Array",
          "value": "null",
          "guessedtype": "property",
          "description": "The list of event handles for event listeners or AOP injected methods\napplied by the plugin to the host object."
        }
      }
    },
    "UA": {
      "shortname": "UA",
      "name": "UA",
      "guessedname": "UA",
      "module": "yui",
      "namespace": "",
      "static": "",
      "guessedtype": "function",
      "description": "YUI user agent detection.\nDo not fork for a browser if it can be avoided.  Use feature detection when\nyou can.  Use the user agent as a last resort.  UA stores a version\nnumber for the browser engine, 0 otherwise.  This value may or may not map\nto the version number of the browser using the engine.  The value is \npresented as a float so that it can easily be used for boolean evaluation \nas well as for looking for a particular range of versions.  Because of this, \nsome of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 \nreports 1.8).",
      "file": "yui-ua.js",
      "properties": {
        "gecko": {
          "guessedname": "gecko",
          "static": "",
          "type": "float",
          "guessedtype": "property",
          "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8\nFirefox 3 alpha: 1.9a4   <-- Reports 1.9\n<\/pre>"
        },
        "webkit": {
          "guessedname": "webkit",
          "static": "",
          "type": "float",
          "guessedtype": "property",
          "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG\nand many major issues fixed).\nSafari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic update\nfrom 2.x via the 10.4.11 OS patch\nWebkit nightly 1\/2008:525+    <-- Supports DOMContentLoaded event.\nyahoo.com user agent hack removed.\n<\/pre>\nhttp:\/\/en.wikipedia.org\/wiki\/Safari_(web_browser)#Version_history"
        },
        "os": {
          "guessedname": "os",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "The operating system.  Currently only detecting windows or macintosh"
        },
        "secure": {
          "guessedname": "secure",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Set to true if the page appears to be in SSL"
        },
        "mobile": {
          "guessedname": "mobile",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone\/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini."
        },
        "ie": {
          "guessedname": "ie",
          "static": "",
          "type": "float",
          "guessedtype": "property",
          "description": "Internet Explorer version number or 0.  Example: 6"
        },
        "opera": {
          "guessedname": "opera",
          "static": "",
          "type": "float",
          "guessedtype": "property",
          "description": "Opera version number or 0.  Example: 9.2"
        },
        "caja": {
          "guessedname": "caja",
          "type": "float",
          "guessedtype": "property",
          "description": "Google Caja version number or 0."
        },
        "air": {
          "guessedname": "air",
          "type": "float",
          "guessedtype": "property",
          "description": "Adobe AIR version number or 0.  Only populated if webkit is detected.\nExample: 1.0"
        }
      }
    },
    "DataSchema.XML": {
      "shortname": "DataSchema.XML",
      "superclass": "DataSchema.Base",
      "methods": {
        "_parseMeta": {
          "guessedname": "_parseMeta",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "xmldoc_in",
              "type": "Object",
              "description": "  XML document parse."
            },
            {
              "name": "data_out",
              "type": "Object",
              "description": "  In-progress schema-parsed data to update."
            }
          ],
          "description": "Parses results data according to schema",
          "return": {
            "type": "Object",
            "description": "Schema-parsed data."
          }
        },
        "apply": {
          "guessedname": "apply",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "schema",
              "type": "Object",
              "description": "  Schema to apply."
            },
            {
              "name": "data",
              "type": "XMLDoc",
              "description": "  XML document."
            }
          ],
          "description": "Applies a given schema to given XML data.",
          "return": {
            "type": "Object",
            "description": "Schema-parsed data."
          }
        },
        "_parseResults": {
          "guessedname": "_parseResults",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "schema",
              "type": "Object",
              "description": "  Schema to parse against."
            },
            {
              "name": "xmldoc_in",
              "type": "Object",
              "description": "  XML document parse."
            },
            {
              "name": "data_out",
              "type": "Object",
              "description": "  In-progress schema-parsed data to update."
            }
          ],
          "description": "Schema-parsed list of results from full data",
          "return": {
            "type": "Object",
            "description": "Schema-parsed data."
          }
        },
        "_getLocationValue": {
          "guessedname": "_getLocationValue",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "field",
              "type": "String | Object",
              "description": "  Field definition."
            },
            {
              "name": "context",
              "type": "Object",
              "description": "  XML node or document to search within."
            }
          ],
          "description": "Get an XPath-specified value for a given field from an XML node or document.",
          "return": {
            "type": "Object",
            "description": "Data value or null."
          }
        }
      },
      "name": "DataSchema.XML",
      "extends": "DataSchema.Base",
      "guessedname": "SchemaXML",
      "module": "dataschema",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "XML subclass for the DataSchema Utility.",
      "file": "dataschema-xml.js"
    },
    "Anim": {
      "methods": {
        "run": {
          "guessedname": "run",
          "static": "",
          "chainable": "",
          "guessedtype": "function",
          "description": "Runs all animation instances."
        },
        "pause": {
          "guessedname": "pause",
          "static": "",
          "chainable": "",
          "guessedtype": "function",
          "description": "Pauses all animation instances."
        },
        "stop": {
          "guessedname": "stop",
          "static": "",
          "chainable": "",
          "guessedtype": "function",
          "description": "Stops all animation instances."
        },
        "_runFrame": {
          "private": "",
          "guessedname": "_runFrame",
          "static": "",
          "guessedtype": "function",
          "description": "Called per Interval to handle each animation frame."
        },
        "getBezier": {
          "guessedname": "getBezier",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "points",
              "type": "Array",
              "description": " An array containing Bezier points"
            },
            {
              "name": "t",
              "type": "Number",
              "description": " A number between 0 and 1 which is the basis for determining current position"
            }
          ],
          "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.",
          "return": {
            "type": "Array",
            "description": "An array containing int x and y member data"
          }
        }
      },
      "shortname": "Anim",
      "superclass": "Base",
      "name": "Anim",
      "extends": "Base",
      "guessedname": "RUNNING",
      "module": "anim",
      "namespace": "",
      "events": {
        "iteration": {
          "type": "Event.Custom",
          "description": "fires when an animation begins an iteration.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The iteration event."
            }
          ]
        },
        "startTimeChange": {
          "name": "startTimeChange",
          "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "pause": {
          "type": "Event.Custom",
          "description": "fires when an animation is paused.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The pause event."
            }
          ]
        },
        "tween": {
          "guessedname": "TWEEN",
          "type": "Event.Custom",
          "guessedtype": "property",
          "description": "fires every frame of the animation.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The tween event."
            }
          ]
        },
        "reverseChange": {
          "name": "reverseChange",
          "description": "Fires when the value for the configuration attribute 'reverse' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "toChange": {
          "name": "toChange",
          "description": "Fires when the value for the configuration attribute 'to' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "iterationCountChange": {
          "name": "iterationCountChange",
          "description": "Fires when the value for the configuration attribute 'iterationCount' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "end": {
          "guessedname": "END",
          "type": "Event.Custom",
          "guessedtype": "property",
          "description": "fires after the animation completes.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The end event."
            }
          ]
        },
        "directionChange": {
          "name": "directionChange",
          "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "runningChange": {
          "name": "runningChange",
          "description": "Fires when the value for the configuration attribute 'running' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "start": {
          "guessedname": "START",
          "type": "Event.Custom",
          "guessedtype": "property",
          "description": "fires when an animation begins.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The start event."
            }
          ]
        },
        "iterationsChange": {
          "name": "iterationsChange",
          "description": "Fires when the value for the configuration attribute 'iterations' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "resume": {
          "type": "Event.Custom",
          "description": "fires when an animation is resumed (run from pause).",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The pause event."
            }
          ]
        },
        "elapsedTimeChange": {
          "name": "elapsedTimeChange",
          "description": "Fires when the value for the configuration attribute 'elapsedTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "nodeChange": {
          "name": "nodeChange",
          "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "fromChange": {
          "name": "fromChange",
          "description": "Fires when the value for the configuration attribute 'from' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "durationChange": {
          "name": "durationChange",
          "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "easingChange": {
          "name": "easingChange",
          "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "A class for constructing animation instances."
        }
      ],
      "guessedtype": "property",
      "file": "anim.js",
      "description": "A class for constructing animation instances.",
      "configs": {
        "duration": {
          "guessedname": "duration",
          "type": "NUM",
          "guessedtype": "property",
          "description": "The length of the animation.  Defaults to \"1\" (second)."
        },
        "elapsedTime": {
          "guessedname": "elapsedTime",
          "default": "0",
          "readonly": "",
          "type": "Int",
          "guessedtype": "property",
          "description": "Current time the animation has been running."
        },
        "iterationCount": {
          "guessedname": "iterationCount",
          "default": "0",
          "readonly": "",
          "type": "Int",
          "guessedtype": "property",
          "description": "The number of iterations that have occurred.\nResets when an animation ends (reaches iteration count or stop() called)."
        },
        "reverse": {
          "guessedname": "reverse",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If true, animation begins from last frame"
        },
        "easing": {
          "guessedname": "easing",
          "type": "Function",
          "guessedtype": "property",
          "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"Easing.easeNone\"."
        },
        "running": {
          "guessedname": "running",
          "default": "false",
          "readonly": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the animation is currently running."
        },
        "iterations": {
          "guessedname": "iterations",
          "default": "1",
          "type": "Int",
          "guessedtype": "property",
          "description": "The number of times the animation should run"
        },
        "node": {
          "guessedname": "node",
          "type": "Node",
          "guessedtype": "property",
          "description": "The object to be animated."
        },
        "from": {
          "guessedname": "from",
          "type": "Object",
          "guessedtype": "property",
          "description": "The starting values for the animated properties. \nFields may be strings, numbers, or functions.\nIf a function is used, the return value becomes the from value.\nIf no from value is specified, the DEFAULT_GETTER will be used."
        },
        "to": {
          "guessedname": "to",
          "type": "Object",
          "guessedtype": "property",
          "description": "The ending values for the animated properties. \nFields may be strings, numbers, or functions."
        },
        "startTime": {
          "guessedname": "startTime",
          "default": "0",
          "readonly": "",
          "type": "Int",
          "guessedtype": "property",
          "description": "Date stamp for the first frame of the animation."
        },
        "direction": {
          "guessedname": "direction",
          "default": "\"normal\"",
          "type": "String",
          "guessedtype": "property",
          "description": "How iterations of the animation should behave. \nPossible values are \"normal\" and \"alternate\".\nNormal will repeat the animation, alternate will reverse on every other pass."
        }
      },
      "for": "Anim",
      "properties": {
        "DEFAULT_GETTER": {
          "guessedname": "DEFAULT_GETTER",
          "static": "",
          "guessedtype": "function",
          "description": "The default getter to use when getting object properties."
        },
        "behaviors": {
          "guessedname": "behaviors",
          "static": "",
          "guessedtype": "property",
          "description": "Bucket for custom getters and setters"
        },
        "DEFAULT_UNIT": {
          "guessedname": "DEFAULT_UNIT",
          "static": "",
          "guessedtype": "property",
          "description": "The default unit to use with properties that pass the RE_DEFAULT_UNIT test."
        },
        "RE_DEFAULT_UNIT": {
          "guessedname": "RE_DEFAULT_UNIT",
          "static": "",
          "guessedtype": "property",
          "description": "Regex of properties that should use the default unit."
        },
        "DEFAULT_SETTER": {
          "guessedname": "DEFAULT_SETTER",
          "static": "",
          "guessedtype": "function",
          "description": "The default setter to use when setting object properties."
        }
      }
    },
    "History": {
      "shortname": "History",
      "methods": {
        "_updateIFrame": {
          "private": "",
          "description": "Update the IFrame with our new state.",
          "return": {
            "type": "boolean",
            "description": "true if successful. false otherwise."
          }
        },
        "register": {
          "guessedname": "register",
          "guessedtype": "function",
          "description": "Registers a new module.",
          "params": [
            {
              "name": "moduleId",
              "type": "string",
              "description": " Non-empty string uniquely identifying the\nmodule you wish to register."
            },
            {
              "name": "initialState",
              "type": "string",
              "description": " The initial state of the specified\nmodule corresponding to its earliest history entry."
            }
          ],
          "return": {
            "type": "History.Module",
            "description": "The newly registered module"
          }
        },
        "_initialize": {
          "private": "",
          "description": "Finish up the initialization of the browser utility library."
        },
        "initialize": {
          "public": "",
          "guessedname": "initialize",
          "guessedtype": "function",
          "description": "Initializes the Browser History Manager. Call this method\nfrom a script block located right after the opening body tag.",
          "params": [
            {
              "name": "stateField",
              "type": "string|HTML Element",
              "description": " <input type=\"hidden\"> used\nto store application states. Must be in the static markup."
            },
            {
              "name": "historyIFrame",
              "type": "string|HTML Element",
              "description": " IFrame used to store\nthe history (only required for IE6\/7)"
            }
          ]
        },
        "getCurrentState": {
          "public": "",
          "guessedname": "getCurrentState",
          "guessedtype": "function",
          "params": [
            {
              "name": "moduleId",
              "type": "string",
              "description": " Non-empty string representing your module."
            }
          ],
          "description": "Returns the current state of the specified module.",
          "return": {
            "type": "string",
            "description": "The current state of the specified module."
          }
        },
        "navigate": {
          "public": "",
          "guessedname": "navigate",
          "guessedtype": "function",
          "params": [
            {
              "name": "module",
              "type": "string",
              "description": " Non-empty string representing your module."
            },
            {
              "name": "state",
              "type": "string",
              "description": " String representing the new state of the specified module."
            }
          ],
          "description": "Stores a new entry in the browser history by changing the state of a registered module.",
          "return": {
            "type": "boolean",
            "description": "Indicates whether the new state was successfully added to the history."
          }
        },
        "_getHash": {
          "private": "",
          "description": "Returns the portion of the hash after the '#' symbol.",
          "return": {
            "type": "string",
            "description": "The hash portion of the document's location"
          }
        },
        "_checkIframeLoaded": {
          "private": "",
          "description": "Periodically checks whether our internal IFrame is ready to be used"
        },
        "_storeStates": {
          "private": "",
          "description": "Stores the initial state and current state for all registered modules\nin the (hidden) form field specified during initialization."
        },
        "_handleFQStateChange": {
          "private": "",
          "description": "Sets the new currentState attribute of all modules depending on the new fully\nqualified state. Also notifies the modules which current state has changed.",
          "params": [
            {
              "name": "fqstate",
              "type": "string",
              "description": " fully qualified state"
            }
          ]
        },
        "getBookmarkedState": {
          "public": "",
          "guessedname": "getBookmarkedState",
          "guessedtype": "function",
          "params": [
            {
              "name": "moduleId",
              "type": "string",
              "description": " Non-empty string representing your module."
            }
          ],
          "description": "Returns the state of a module according to the URL fragment\nidentifier. This method is useful to initialize your modules\nif your application was bookmarked from a particular state.",
          "return": {
            "type": "string",
            "description": "The bookmarked state of the specified module."
          }
        },
        "multiNavigate": {
          "public": "",
          "guessedname": "multiNavigate",
          "guessedtype": "function",
          "params": [
            {
              "name": "states",
              "type": "object",
              "description": " Associative array of module-state pairs to set simultaneously."
            }
          ],
          "description": "Stores a new entry in the browser history by changing the state\nof several registered modules in one atomic operation.",
          "return": {
            "type": "boolean",
            "description": "Indicates whether the new state was successfully added to the history."
          }
        },
        "getQueryStringParameter": {
          "public": "",
          "guessedname": "getQueryStringParameter",
          "guessedtype": "function",
          "params": [
            {
              "name": "paramName",
              "type": "string",
              "description": " Name of the parameter we want to look up."
            },
            {
              "name": "queryString",
              "type": "string",
              "description": " Optional URL to look at. If not specified,\nthis method uses the URL in the address bar."
            }
          ],
          "description": "Returns the value of the specified query string parameter.\nThis method is not used internally by the Browser History Manager.\nHowever, it is provided here as a helper since many applications\nusing the Browser History Manager will want to read the value of\nurl parameters to initialize themselves.",
          "return": {
            "type": "string",
            "description": "The value of the specified parameter, or null."
          }
        }
      },
      "name": "History",
      "module": "history",
      "namespace": "",
      "events": {
        "history:globalStateChange": {
          "guessedname": "EV_HISTORY_GLOBAL_STATE_CHANGE",
          "type": "Event.Custom",
          "guessedtype": "property",
          "description": "Fires when the global state of the page has changed (that is,\nwhen the state of at least one browser history module has changed)"
        },
        "history:moduleStateChange": {
          "guessedname": "EV_HISTORY_MODULE_STATE_CHANGE",
          "type": "Event.Custom",
          "guessedtype": "property",
          "description": "Fires when the state of a history module object has changed"
        },
        "history:ready": {
          "guessedname": "EV_HISTORY_READY",
          "type": "Event.Custom",
          "guessedtype": "property",
          "description": "Fires when the browser history utility is ready"
        }
      },
      "constructors": [
        {
          "description": "This class represents an instance of the browser history utility."
        }
      ],
      "description": "This class represents an instance of the browser history utility.",
      "file": "history.js"
    },
    "YUI~array~extras": {
      "shortname": "YUI~array~extras",
      "methods": {
        "Array.reject": {
          "guessedname": "reject",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to iterate"
            },
            {
              "name": "f",
              "type": "Function",
              "description": "  the function to execute on each item"
            },
            {
              "name": "o",
              "type": "",
              "description": " Optional context object"
            }
          ],
          "description": "The inverse of filter. Executes the supplied function on each item. \nReturns a new array containing the items that the supplied\nfunction returned *false* for.",
          "return": {
            "type": "Array",
            "description": "The items on which the supplied function\nreturned false."
          }
        },
        "Array.partition": {
          "guessedname": "partition",
          "static": "",
          "paran": "f {Function} a function that will receive each item \nin the collection and its index.",
          "guessedtype": "function",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  a collection to iterate over"
            },
            {
              "name": "o",
              "type": "",
              "description": " Optional execution context of f."
            }
          ],
          "description": "Partitions an array into two new arrays, one with the items\nthat match the supplied function, and one with the items that\ndo not.",
          "return": {
            "type": "",
            "description": "An object with two members, 'matches' and 'rejects',\nthat are arrays containing the items that were selected or \nrejected by the test function (or an empty array)."
          }
        },
        "Array.grep": {
          "guessedname": "grep",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  a collection to iterate over"
            },
            {
              "name": "pattern",
              "type": "RegExp",
              "description": "  The regular expression to test against \neach item"
            }
          ],
          "description": "Iterates over an array, returning a new array of all the elements\nthat match the supplied regular expression",
          "return": {
            "type": "Array",
            "description": "All the items in the collection that \nproduce a match against the supplied regular expression. \nIf no items match, an empty array is returned."
          }
        },
        "Array.filter": {
          "guessedname": "filter",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to iterate"
            },
            {
              "name": "f",
              "type": "Function",
              "description": "  the function to execute on each item"
            },
            {
              "name": "o",
              "type": "",
              "description": " Optional context object"
            }
          ],
          "description": "Executes the supplied function on each item in the array.\nReturns a new array containing the items that the supplied\nfunction returned true for.",
          "return": {
            "type": "Array",
            "description": "The items on which the supplied function\nreturned true. If no items matched an empty array is \nreturned."
          }
        },
        "Array.zip": {
          "guessedname": "zip",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  a collection to iterate over"
            },
            {
              "name": "a2",
              "type": "Array",
              "description": "  another collection whose members will be \npaired with members of the first parameter"
            }
          ],
          "description": "Creates an array of arrays by pairing the corresponding\nelements of two arrays together into a new array.",
          "return": {
            "type": "",
            "description": "An array of arrays formed by pairing each element \nof the first collection with an item in the second collection \nhaving the corresponding index."
          }
        },
        "Array.find": {
          "guessedname": "find",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to search"
            },
            {
              "name": "f",
              "type": "Function",
              "description": "  the function to execute on each item. \nIteration is stopped as soon as this function returns true\non an item."
            },
            {
              "name": "o",
              "type": "",
              "description": " Optional context object"
            }
          ],
          "description": "Executes the supplied function on each item in the array,\nsearching for the first item that matches the supplied\nfunction.",
          "return": {
            "type": "object",
            "description": "the first item that the supplied function\nreturns true for, or null if it never returns true"
          }
        },
        "Array.unique": {
          "guessedname": "unique",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to find the subset of uniques for"
            },
            {
              "name": "sort",
              "type": "bool",
              "description": "  flag to denote if the array is sorted or not. Defaults to false, the more general operation"
            }
          ],
          "description": "Returns a copy of the array with the duplicate entries removed",
          "return": {
            "type": "Array",
            "description": "a copy of the array with duplicate entries removed"
          }
        },
        "Array.reduce": {
          "guessedname": "reduce",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to iterate"
            },
            {
              "name": "init",
              "type": "",
              "description": " The initial value to start from"
            },
            {
              "name": "f",
              "type": "Function",
              "description": "  the function to execute on each item. It\nis responsible for returning the updated value of the\ncomputation."
            },
            {
              "name": "o",
              "type": "",
              "description": " Optional context object"
            }
          ],
          "description": "Executes the supplied function on each item in the array.\nReduce \"folds\" the array into a single value.",
          "return": {
            "type": "",
            "description": "A value that results from iteratively applying the\nsupplied function to each element in the array."
          }
        },
        "Array.every": {
          "guessedname": "every",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to iterate"
            },
            {
              "name": "f",
              "type": "Function",
              "description": "  the function to execute on each item"
            },
            {
              "name": "o",
              "type": "",
              "description": " Optional context object"
            }
          ],
          "description": "Executes the supplied function on each item in the array.",
          "return": {
            "type": "boolean",
            "description": "true if every item in the array returns true\nfrom the supplied function."
          }
        },
        "Array.map": {
          "guessedname": "map",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "a",
              "type": "Array",
              "description": "  the array to iterate"
            },
            {
              "name": "f",
              "type": "Function",
              "description": "  the function to execute on each item"
            },
            {
              "name": "o",
              "type": "",
              "description": " Optional context object"
            }
          ],
          "description": "Executes the supplied function on each item in the array.",
          "return": {
            "type": "Array",
            "description": "A new array containing the return value\nof the supplied function for each item in the original\narray."
          }
        }
      },
      "name": "YUI~array~extras",
      "module": "collection",
      "namespace": "",
      "description": "Adds the following array utilities to the YUI instance\n(Y.Array).  This is in addition to the methods provided\nin the core.",
      "file": "array-extras.js",
      "properties": {
        "lastIndexOf": {
          "guessedname": "lastIndexOf",
          "param": "a {Array} the array to search",
          "static": "",
          "guessedtype": "property",
          "description": "Returns the index of the last item in the array\nthat contains the specified value, -1 if the\nvalue isn't found.\nmethod Array.lastIndexOf",
          "return": "{int} the index of hte item that contains the value or -1"
        }
      }
    },
    "Assert.ShouldError": {
      "shortname": "ShouldError",
      "superclass": "Assert.Error",
      "name": "Assert.ShouldError",
      "extends": "Assert.Error",
      "guessedname": "ShouldError",
      "module": "test",
      "namespace": "Assert",
      "constructors": [
        {
          "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the error that occurred."
        }
      }
    },
    "Node": {
      "methods": {
        "replace": {
          "guessedname": "replace",
          "chainable": "",
          "guessedtype": "function",
          "description": "Replace the node with the other node. This is a DOM update only\nand does not change the node bound to the Node instance.\nShortcut for myNode.get('parentNode').replaceChild(newNode, myNode);"
        },
        "removeClass": {
          "chainable": "",
          "description": "Removes a class name from each node.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " the class name to remove from the node's class attribute"
            }
          ]
        },
        "setX": {
          "chainable": "",
          "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.",
          "params": [
            {
              "name": "x",
              "type": "Int",
              "description": " X value for new position (coordinates are page-based)"
            }
          ]
        },
        "setY": {
          "chainable": "",
          "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.",
          "params": [
            {
              "name": "y",
              "type": "Int",
              "description": " Y value for new position (coordinates are page-based)"
            }
          ]
        },
        "hasClass": {
          "description": "Determines whether each node has the given className.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " the class name to search for"
            }
          ],
          "return": {
            "type": "Array",
            "description": "An array of booleans for each node bound to the NodeList."
          }
        },
        "getElementsByTagName": {
          "description": "Passes through to DOM method.",
          "params": [
            {
              "name": "tagName",
              "type": "String",
              "description": " The tagName to collect"
            }
          ],
          "return": {
            "type": "NodeList",
            "description": "A NodeList representing the HTMLCollection"
          }
        },
        "Y.get": {
          "guessedname": "get",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "String | HTMLElement",
              "description": " a node or Selector"
            },
            {
              "name": "doc",
              "type": "Y.Node || HTMLElement",
              "description": " an optional document to scan. Defaults to Y.config.doc."
            }
          ],
          "deprecated": "Use Y.one",
          "description": "Returns a single Node instance bound to the node or the\nfirst element matching the given selector."
        },
        "inDoc": {
          "guessedname": "inDoc",
          "guessedtype": "function",
          "description": "Determines whether the node is appended to the document.",
          "params": [
            {
              "name": "doc",
              "type": "Node|HTMLElement",
              "description": " optional An optional document to check against.\nDefaults to current document."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not this node is appended to the document."
          }
        },
        "previous": {
          "guessedname": "previous",
          "guessedtype": "function",
          "description": "Returns the previous matching sibling. \nReturns the nearest element node sibling if no method provided.",
          "params": [
            {
              "name": "fn",
              "type": "String | Function",
              "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."
            }
          ],
          "return": {
            "type": "Node",
            "description": "Node instance or null if not found"
          }
        },
        "all": {
          "guessedname": "all",
          "guessedtype": "function",
          "description": "Retrieves a nodeList based on the given CSS selector.",
          "params": [
            {
              "name": "selector",
              "type": "string",
              "description": " The CSS selector to test against."
            }
          ],
          "return": {
            "type": "NodeList",
            "description": "A NodeList instance for the matching HTMLCollection\/Array."
          }
        },
        "size": {
          "guessedname": "size",
          "guessedtype": "function",
          "description": "Returns the current number of items in the Node.",
          "deprecated": "Use NodeList",
          "return": {
            "type": "Int",
            "description": "The number of items in the Node."
          }
        },
        "hasAttribute": {
          "description": "Passes through to DOM method.",
          "params": [
            {
              "name": "attribute",
              "type": "String",
              "description": " The attribute to test for"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the attribute is present"
          }
        },
        "intersect": {
          "guessedname": "intersect",
          "guessedtype": "function",
          "description": "Compares the intersection of the node with another node or region",
          "params": [
            {
              "name": "node2",
              "type": "Node|Object",
              "description": " The node or region to compare with."
            },
            {
              "name": "altRegion",
              "type": "Object",
              "description": " An alternate region to use (rather than this node's)."
            }
          ],
          "return": {
            "type": "Object",
            "description": "An object representing the intersection of the regions."
          }
        },
        "submit": {
          "chainable": "",
          "description": "Passes through to DOM method.\nOnly valid on FORM elements"
        },
        "setXY": {
          "chainable": "",
          "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.",
          "params": [
            {
              "name": "xy",
              "type": "Array",
              "description": " Contains X & Y values for new position (coordinates are page-based)"
            }
          ]
        },
        "getStyle": {
          "description": "Returns the style's current value.",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The style attribute to retrieve."
            }
          ],
          "return": {
            "type": "String",
            "description": "The current value of the style property for the element."
          }
        },
        "each": {
          "guessedname": "each",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": " The function to apply"
            },
            {
              "name": "context",
              "type": "Object",
              "description": " optional An optional context to apply the function with\nDefault context is the NodeList instance"
            }
          ],
          "deprecated": "Use NodeList",
          "description": "Applies the given function to each Node in the NodeList."
        },
        "addClass": {
          "chainable": "",
          "description": "Adds a class name to each node.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " the class name to add to the node's class attribute"
            }
          ]
        },
        "getComputedStyle": {
          "description": "Returns the computed value for the given style property.",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The style attribute to retrieve."
            }
          ],
          "return": {
            "type": "String",
            "description": "The computed value of the style property for the element."
          }
        },
        "compareTo": {
          "guessedname": "compareTo",
          "guessedtype": "function",
          "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and\/or HTMLElements.",
          "params": [
            {
              "name": "refNode",
              "type": "HTMLElement | Node",
              "description": " The reference node to compare to the node."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True if the nodes match, false if they do not."
          }
        },
        "removeChild": {
          "description": "Passes through to DOM method.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement | Node",
              "description": " Node to be removed"
            }
          ],
          "return": {
            "type": "Node",
            "description": "The removed node"
          }
        },
        "setAttribute": {
          "chainable": "",
          "description": "Allows setting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": " The attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": " The value to set"
            }
          ]
        },
        "setStyle": {
          "chainable": "",
          "description": "Sets a style property of the node.",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The style attribute to set."
            },
            {
              "name": "val",
              "type": "String|Number",
              "description": " The value."
            }
          ]
        },
        "insertBefore": {
          "description": "Passes through to DOM method.",
          "params": [
            {
              "name": "newNode",
              "type": "HTMLElement | Node",
              "description": " Node to be appended"
            },
            {
              "name": "refNode",
              "type": "HTMLElement | Node",
              "description": " Node to be inserted before"
            }
          ],
          "return": {
            "type": "Node",
            "description": "The inserted node"
          }
        },
        "focus": {
          "chainable": "",
          "description": "Passes through to DOM method."
        },
        "removeAttribute": {
          "chainable": "",
          "description": "Passes through to DOM method.",
          "params": [
            {
              "name": "attribute",
              "type": "String",
              "description": " The attribute to be removed"
            }
          ]
        },
        "appendChild": {
          "description": "Passes through to DOM method.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement | Node",
              "description": " Node to be appended"
            }
          ],
          "return": {
            "type": "Node",
            "description": "The appended node"
          }
        },
        "insert": {
          "guessedname": "insert",
          "chainable": "",
          "guessedtype": "function",
          "description": "Inserts the content before the reference node.",
          "params": [
            {
              "name": "content",
              "type": "String | Y.Node | HTMLElement",
              "description": " The content to insert"
            },
            {
              "name": "where",
              "type": "Int | Y.Node | HTMLElement | String",
              "description": " The position to insert at."
            }
          ]
        },
        "setContent": {
          "guessedname": "setContent",
          "chainable": "",
          "guessedtype": "function",
          "description": "Replaces the node's current content with the content.",
          "params": [
            {
              "name": "content",
              "type": "String | Y.Node | HTMLElement",
              "description": " The content to insert"
            }
          ]
        },
        "getXY": {
          "description": "Gets the current position of the node in page coordinates.",
          "return": {
            "type": "Array",
            "description": "The XY position of the node"
          }
        },
        "inRegion": {
          "guessedname": "inRegion",
          "guessedtype": "function",
          "description": "Determines whether or not the node is within the giving region.",
          "params": [
            {
              "name": "node2",
              "type": "Node|Object",
              "description": " The node or region to compare with."
            },
            {
              "name": "all",
              "type": "Boolean",
              "description": " Whether or not all of the node must be in the region."
            },
            {
              "name": "altRegion",
              "type": "Object",
              "description": " An alternate region to use (rather than this node's)."
            }
          ],
          "return": {
            "type": "Object",
            "description": "An object representing the intersection of the regions."
          }
        },
        "remove": {
          "guessedname": "remove",
          "chainable": "",
          "guessedtype": "function",
          "description": "Removes the node from its parent.\nShortcut for myNode.get('parentNode').removeChild(myNode);"
        },
        "invoke": {
          "guessedname": "invoke",
          "guessedtype": "function",
          "description": "Invokes a method on the Node instance",
          "params": [
            {
              "name": "method",
              "type": "String",
              "description": " The name of the method to invoke"
            },
            {
              "name": "a,",
              "type": "Any",
              "description": " b, c, etc. Arguments to invoke the method with."
            }
          ],
          "return": {
            "type": "",
            "description": "Whatever the underly method returns. \nDOM Nodes and Collections return values\nare converted to Node\/NodeList instances."
          }
        },
        "simulate": {
          "guessedname": "simulate",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The type of event to simulate (i.e., \"click\")."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) Extra options to copy onto the event object."
            }
          ],
          "description": "Simulates an event on the node.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "append": {
          "guessedname": "append",
          "chainable": "",
          "guessedtype": "function",
          "description": "Inserts the content as the lastChild of the node.",
          "params": [
            {
              "name": "content",
              "type": "String | Y.Node | HTMLElement",
              "description": " The content to insert"
            }
          ]
        },
        "hasChildNodes": {
          "description": "Passes through to DOM method.",
          "return": {
            "type": "Boolean",
            "description": "Whether or not the node has any childNodes"
          }
        },
        "Y.one": {
          "guessedname": "one",
          "static": "",
          "guessedtype": "function",
          "description": "Returns a single Node instance bound to the node or the\nfirst element matching the given selector.",
          "params": [
            {
              "name": "node",
              "type": "String | HTMLElement",
              "description": " a node or Selector"
            },
            {
              "name": "doc",
              "type": "Y.Node || HTMLElement",
              "description": " an optional document to scan. Defaults to Y.config.doc."
            }
          ]
        },
        "toggleClass": {
          "chainable": "",
          "description": "If the className exists on the node it is removed, if it doesn't exist it is added.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " the class name to be toggled"
            }
          ]
        },
        "setStyles": {
          "chainable": "",
          "description": "Sets multiple style properties on the node.",
          "params": [
            {
              "name": "hash",
              "type": "Object",
              "description": " An object literal of property:value pairs."
            }
          ]
        },
        "getX": {
          "description": "Gets the current position of the node in page coordinates.",
          "return": {
            "type": "Int",
            "description": "The X position of the node"
          }
        },
        "one": {
          "guessedname": "one",
          "guessedtype": "function",
          "description": "Retrieves a Node instance of nodes based on the given CSS selector.",
          "params": [
            {
              "name": "selector",
              "type": "string",
              "description": " The CSS selector to test against."
            }
          ],
          "return": {
            "type": "Node",
            "description": "A Node instance for the matching HTMLElement."
          }
        },
        "delegate": {
          "guessedname": "delegate",
          "guessedtype": "function",
          "description": "Functionality to make the node a delegated event container",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "  the event type to delegate"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  the function to execute"
            },
            {
              "name": "selector",
              "type": "String",
              "description": "  a selector that must match the target of the event."
            }
          ],
          "return": {
            "type": "Event.Handle",
            "description": "the detach handle"
          }
        },
        "blur": {
          "chainable": "",
          "description": "Passes through to DOM method."
        },
        "queryAll": {
          "guessedname": "queryAll",
          "guessedtype": "function",
          "params": [
            {
              "name": "selector",
              "type": "string",
              "description": " The CSS selector to test against."
            }
          ],
          "deprecated": "Use all()",
          "description": "Retrieves a nodeList based on the given CSS selector.",
          "return": {
            "type": "NodeList",
            "description": "A NodeList instance for the matching HTMLCollection\/Array."
          }
        },
        "prepend": {
          "guessedname": "prepend",
          "chainable": "",
          "guessedtype": "function",
          "description": "Inserts the content as the firstChild of the node.",
          "params": [
            {
              "name": "content",
              "type": "String | Y.Node | HTMLElement",
              "description": " The content to insert"
            }
          ]
        },
        "getY": {
          "description": "Gets the current position of the node in page coordinates.",
          "return": {
            "type": "Int",
            "description": "The Y position of the node"
          }
        },
        "create": {
          "guessedname": "create",
          "param": "{String} html The markup used to create the element",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "html",
              "type": "String",
              "description": " The markup used to create the element"
            },
            {
              "name": "doc",
              "type": "HTMLDocument",
              "description": " An optional document context"
            }
          ],
          "description": "Creates a new dom node using the provided markup string."
        },
        "Node.getDOMNode": {
          "guessedname": "getDOMNode",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "Y.Node || HTMLNode",
              "description": " The Node instance or an HTMLNode"
            }
          ],
          "description": "Retrieves the DOM node bound to a Node instance",
          "return": {
            "type": "HTMLNode",
            "description": "The DOM node bound to the Node instance.  If a DOM node is passed\nas the node argument, it is simply returned."
          }
        },
        "reset": {
          "chainable": "",
          "description": "Passes through to DOM method.\nOnly valid on FORM elements"
        },
        "next": {
          "guessedname": "next",
          "guessedtype": "function",
          "description": "Returns the next matching sibling. \nReturns the nearest element node sibling if no method provided.",
          "params": [
            {
              "name": "fn",
              "type": "String | Function",
              "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."
            }
          ],
          "return": {
            "type": "Node",
            "description": "Node instance or null if not found"
          }
        },
        "select": {
          "chainable": "",
          "description": "Passes through to DOM method."
        },
        "replaceClass": {
          "chainable": "",
          "description": "Replace a class with another class for each node.\nIf no oldClassName is present, the newClassName is simply added.",
          "params": [
            {
              "name": "oldClassName",
              "type": "String",
              "description": " the class name to be replaced"
            },
            {
              "name": "newClassName",
              "type": "String",
              "description": " the class name that will be replacing the old class name"
            }
          ]
        },
        "getAttribute": {
          "description": "Allows getting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": " The attribute name"
            }
          ],
          "return": {
            "type": "string",
            "description": "The attribute value"
          }
        },
        "replaceChild": {
          "description": "Passes through to DOM method.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement | Node",
              "description": " Node to be inserted"
            },
            {
              "name": "refNode",
              "type": "HTMLElement | Node",
              "description": " Node to be replaced"
            }
          ],
          "return": {
            "type": "Node",
            "description": "The replaced node"
          }
        },
        "scrollIntoView": {
          "chainable": "",
          "description": "Passes through to DOM method."
        },
        "test": {
          "guessedname": "test",
          "guessedtype": "function",
          "description": "Test if the supplied node matches the supplied selector.",
          "params": [
            {
              "name": "selector",
              "type": "string",
              "description": " The CSS selector to test against."
            }
          ],
          "return": {
            "type": "boolean",
            "description": "Whether or not the node matches the selector."
          }
        },
        "contains": {
          "description": "Determines whether the ndoe is an ancestor of another HTML element in the DOM hierarchy.",
          "params": [
            {
              "name": "needle",
              "type": "Node | HTMLElement",
              "description": " The possible node or descendent"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not this node is the needle its ancestor"
          }
        },
        "cloneNode": {
          "description": "Passes through to DOM method.",
          "params": [
            {
              "name": "deep",
              "type": "Boolean",
              "description": " Whether or not to perform a deep clone, which includes\nsubtree and attributes"
            }
          ],
          "return": {
            "type": "Node",
            "description": "The clone"
          }
        },
        "ancestor": {
          "guessedname": "ancestor",
          "guessedtype": "function",
          "description": "Returns the nearest ancestor that passes the test applied by supplied boolean method.",
          "params": [
            {
              "name": "fn",
              "type": "String | Function",
              "description": " A selector string or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."
            }
          ],
          "return": {
            "type": "Node",
            "description": "The matching Node instance or null if not found"
          }
        },
        "item": {
          "guessedname": "item",
          "guessedtype": "function",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": " The index of the target Node."
            }
          ],
          "deprecated": "Use NodeList",
          "description": "Retrieves the Node instance at the given index.",
          "return": {
            "type": "Node",
            "description": "The Node instance at the given index."
          }
        },
        "query": {
          "guessedname": "query",
          "guessedtype": "function",
          "params": [
            {
              "name": "selector",
              "type": "string",
              "description": " The CSS selector to test against."
            }
          ],
          "deprecated": "Use one()",
          "description": "Retrieves a Node instance of nodes based on the given CSS selector.",
          "return": {
            "type": "Node",
            "description": "A Node instance for the matching HTMLElement."
          }
        }
      },
      "shortname": "Node",
      "name": "Node",
      "module": "node",
      "namespace": "",
      "constructors": [
        {
          "description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set\/get methods.\nUse Y.get() to retrieve Node instances.\n<strong>NOTE:<\/strong> Node properties are accessed using\nthe <code>set<\/code> and <code>get<\/code> methods."
        }
      ],
      "configs": {
        "docHeight": {
          "type": "{Int}",
          "description": "Document height"
        },
        "region": {
          "guessedname": "region",
          "type": "Node",
          "guessedtype": "property",
          "description": "Returns a region object for the node"
        },
        "winWidth": {
          "type": "{Int}",
          "description": "Returns the inner width of the viewport (exludes scrollbar)."
        },
        "docScrollX": {
          "type": "{Int}",
          "description": "Amount page has been scroll vertically"
        },
        "docScrollY": {
          "type": "{Int}",
          "description": "Amount page has been scroll horizontally"
        },
        "text": {
          "guessedname": "text",
          "type": "String",
          "guessedtype": "property",
          "description": "Allows for getting and setting the text of an element.\nFormatting is preserved and special characters are treated literally."
        },
        "viewportRegion": {
          "guessedname": "viewportRegion",
          "type": "Node",
          "guessedtype": "property",
          "description": "Returns a region object for the node's viewport"
        },
        "winHeight": {
          "type": "{Int}",
          "description": "Returns the inner height of the viewport (exludes scrollbar)."
        },
        "children": {
          "readonly": "",
          "type": "NodeList",
          "description": "Returns a NodeList instance of all HTMLElement children."
        }
      },
      "file": "node.js",
      "description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set\/get methods.\nUse Y.get() to retrieve Node instances.\n<strong>NOTE:<\/strong> Node properties are accessed using\nthe <code>set<\/code> and <code>get<\/code> methods.",
      "for": "Node"
    },
    "DataType.Date.Locale": {
      "shortname": "DataType.Date.Locale",
      "name": "DataType.Date.Locale",
      "guessedname": "YDateEn",
      "module": "datatype",
      "namespace": "",
      "requires": "oop",
      "static": "",
      "guessedtype": "property",
      "description": "The Date.Locale class is a container for all localised date strings\nused by Y.DataType.Date. It is used internally, but may be extended\nto provide new date localisations.\nTo create your own Locale, follow these steps:\n<ol>\n<li>Find an existing locale that matches closely with your needs<\/li>\n<li>Use this as your base class.  Use Y.DataType.Date.Locale[\"en\"] if nothing\nmatches.<\/li>\n<li>Create your own class as an extension of the base class using\nY.merge, and add your own localisations where needed.<\/li>\n<\/ol>\nSee the Y.DataType.Date.Locale[\"en-US\"] and Y.DataType.Date.Locale[\"en-GB\"]\nclasses which extend Y.DataType.Date.Locale[\"en\"].\nFor example, to implement locales for French french and Canadian french,\nwe would do the following:\n<ol>\n<li>For French french, we have no existing similar locale, so use\nY.DataType.Date.Locale[\"en\"] as the base, and extend it:\n<pre>\nY.DataType.Date.Locale[\"fr\"] = Y.merge(Y.DataType.Date.Locale, {\na: [\"dim\", \"lun\", \"mar\", \"mer\", \"jeu\", \"ven\", \"sam\"],\nA: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\nb: [\"jan\", \"f&eacute;v\", \"mar\", \"avr\", \"mai\", \"jun\", \"jui\", \"ao&ucirc;\", \"sep\", \"oct\", \"nov\", \"d&eacute;c\"],\nB: [\"janvier\", \"f&eacute;vrier\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"ao&ucirc;t\", \"septembre\", \"octobre\", \"novembre\", \"d&eacute;cembre\"],\nc: \"%a %d %b %Y %T %Z\",\np: [\"\", \"\"],\nP: [\"\", \"\"],\nx: \"%d.%m.%Y\",\nX: \"%T\"\n});\n<\/pre>\n<\/li>\n<li>For Canadian french, we start with French french and change the meaning of \\%x:\n<pre>\nY.DataType.Date.Locale[\"fr-CA\"] = Y.merge(Y.DataType.Date.Locale[\"fr\"], {\nx: \"%Y-%m-%d\"\n});\n<\/pre>\n<\/li>\n<\/ol>\nWith that, you can use your new locales:\n<pre>\nvar d = new Date(\"2008\/04\/22\");\nY.DataType.Date.format(d, { format: \"%A, %d %B == %x\", locale: \"fr\" });\n<\/pre>\nwill return:\n<pre>\nmardi, 22 avril == 22.04.2008\n<\/pre>\nAnd\n<pre>\nY.DataType.Date.format(d, {format: \"%A, %d %B == %x\", locale: \"fr-CA\" });\n<\/pre>\nWill return:\n<pre>\nmardi, 22 avril == 2008-04-22\n<\/pre>",
      "file": "datatype-date-locale.js"
    },
    "Plugin.ConsoleFilters": {
      "shortname": "ConsoleFilters",
      "methods": {
        "hideSource": {
          "guessedname": "hideSource",
          "guessedtype": "function",
          "description": "Hides any number of sources from the UI.  Convenience method for\nmyConsole.filter.set('source.foo', false); set('source.bar', false);\nand so on.",
          "params": [
            {
              "name": "src*",
              "type": "String",
              "description": "  1..n sources to filter out of the UI"
            }
          ]
        },
        "_onEntry": {
          "guessedname": "_onEntry",
          "guessedtype": "function",
          "protected": "",
          "description": "Ensures a filter is set up for any new categories or sources and\ncollects the messages in _entries.  If the message is stamped with a\ncategory or source that is currently being filtered out, the message\nwill not pass to the Console's print buffer.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the custom event object"
            }
          ]
        },
        "renderUI": {
          "guessedname": "renderUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Adds the category and source filter sections to the Console footer."
        },
        "_afterSourceChange": {
          "guessedname": "_afterSourceChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Triggers the Console to update if a known source filter\nchanges value (e.g. visible => hidden).  Updates the appropriate\ncheckbox's checked state if necessary.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the attribute change event object"
            }
          ]
        },
        "hideCategory": {
          "guessedname": "hideCategory",
          "guessedtype": "function",
          "description": "Hides any number of categories from the UI.  Convenience method for\nmyConsole.filter.set('category.foo', false); set('category.bar', false);\nand so on.",
          "params": [
            {
              "name": "cat*",
              "type": "String",
              "description": "  1..n categories to filter out of the UI"
            }
          ]
        },
        "_onSourceCheckboxClick": {
          "guessedname": "_onSourceCheckboxClick",
          "guessedtype": "function",
          "protected": "",
          "description": "Passes checkbox clicks on to the source attribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the DOM event"
            }
          ]
        },
        "_afterCategoryChange": {
          "guessedname": "_afterCategoryChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Triggers the Console to update if a known category filter\nchanges value (e.g. visible => hidden).  Updates the appropriate\ncheckbox's checked state if necessary.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the attribute change event object"
            }
          ]
        },
        "_filterBuffer": {
          "guessedname": "_filterBuffer",
          "guessedtype": "function",
          "protected": "",
          "description": "Flushes the Console's print buffer of any entries that have a category\nor source that is currently being excluded."
        },
        "showCategory": {
          "guessedname": "showCategory",
          "guessedtype": "function",
          "description": "Shows any number of categories in the UI.  Convenience method for\nmyConsole.filter.set('category.foo', true); set('category.bar', true);\nand so on.",
          "params": [
            {
              "name": "cat*",
              "type": "String",
              "description": "  1..n categories to allow to display in the UI"
            }
          ]
        },
        "syncUI": {
          "guessedname": "syncUI",
          "guessedtype": "function",
          "description": "Updates the UI to be in accordance with the current state of the plugin."
        },
        "showSource": {
          "guessedname": "showSource",
          "guessedtype": "function",
          "description": "Shows any number of sources in the UI.  Convenience method for\nmyConsole.filter.set('source.foo', true); set('source.bar', true);\nand so on.",
          "params": [
            {
              "name": "src*",
              "type": "String",
              "description": "  1..n sources to allow to display in the UI"
            }
          ]
        },
        "initializer": {
          "guessedname": "initializer",
          "guessedtype": "function",
          "protected": "",
          "description": "Initialize entries collection and attach listeners to host events and\nmethods."
        },
        "_validateSource": {
          "guessedname": "_validateSource",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "cat",
              "type": "String",
              "description": "  the new source:visibility map"
            },
            {
              "name": "v",
              "type": "String",
              "description": "  the subattribute path updated"
            }
          ],
          "description": "Validates source updates are objects and the subattribute is not too\ndeep.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "destructor": {
          "guessedname": "destructor",
          "guessedtype": "function",
          "protected": "",
          "description": "Removes the plugin UI and unwires events."
        },
        "_afterCacheLimitChange": {
          "guessedname": "_afterCacheLimitChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Trims the cache of entries to the appropriate new length.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the attribute change event object"
            }
          ]
        },
        "bindUI": {
          "guessedname": "bindUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Binds to checkbox click events and internal attribute change events to\nmaintain the UI state."
        },
        "refreshConsole": {
          "guessedname": "refreshConsole",
          "guessedtype": "function",
          "description": "Repopulates the Console with entries appropriate to the current filter\nsettings."
        },
        "_afterClearConsole": {
          "guessedname": "_afterClearConsole",
          "guessedtype": "function",
          "protected": "",
          "description": "Flushes the cached entries after a call to the Console's clearConsole()."
        },
        "_uiSetCheckbox": {
          "guessedname": "_uiSetCheckbox",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the checked property of a filter checkbox of the specified type.\nIf no checkbox is found for the input params, one is created.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "  'category' or 'source'"
            },
            {
              "name": "item",
              "type": "String",
              "description": "  the name of the filter (e.g. 'info', 'event')"
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "  value to set the checkbox's checked property"
            }
          ]
        },
        "_onCategoryCheckboxClick": {
          "guessedname": "_onCategoryCheckboxClick",
          "guessedtype": "function",
          "protected": "",
          "description": "Passes checkbox clicks on to the category attribute.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the DOM event"
            }
          ]
        },
        "_validateCategory": {
          "guessedname": "_validateCategory",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "cat",
              "type": "String",
              "description": "  the new category:visibility map"
            },
            {
              "name": "v",
              "type": "String",
              "description": "  the subattribute path updated"
            }
          ],
          "description": "Validates category updates are objects and the subattribute is not too\ndeep.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_createCheckbox": {
          "guessedname": "_createCheckbox",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates a checkbox and label from the ConsoleFilters.FILTER_TEMPLATE for\nthe provided type and name.  The checkbox and label are appended to the\ncontainer node passes as the first arg.",
          "params": [
            {
              "name": "container",
              "type": "Node",
              "description": "  the parentNode of the new checkbox and label"
            },
            {
              "name": "name",
              "type": "String",
              "description": "  the identifier of the filter"
            }
          ]
        }
      },
      "name": "Plugin.ConsoleFilters",
      "module": "console-filters",
      "namespace": "Plugin",
      "events": {
        "sourceChange": {
          "name": "sourceChange",
          "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "categoryChange": {
          "name": "categoryChange",
          "description": "Fires when the value for the configuration attribute 'category' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "defaultVisibilityChange": {
          "name": "defaultVisibilityChange",
          "description": "Fires when the value for the configuration attribute 'defaultVisibility' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "cacheLimitChange": {
          "name": "cacheLimitChange",
          "description": "Fires when the value for the configuration attribute 'cacheLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "description": "<p>Provides Plugin.ConsoleFilters plugin class.<\/p>\n<p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.<\/p>",
      "file": "console-filters.js",
      "configs": {
        "category": {
          "guessedname": "category",
          "type": "Object",
          "guessedtype": "property",
          "description": "<p>Map of entry categories to their visibility status.  Update a\nparticular category's visibility by setting the subattribute to true\n(visible) or false (hidden).<\/p>\n<p>For example, yconsole.filter.set('category.info', false) to hide\nlog entries with the category\/logLevel of 'info'.<\/p>\n<p>Similarly, yconsole.filter.get('category.warn') will return a\nboolean indicating whether that category is currently being included\nin the UI.<\/p>\n<p>Unlike the YUI instance configuration's logInclude and logExclude\nproperties, filtered entries are only hidden from the UI, but\ncan be made visible again.<\/p>"
        },
        "cacheLimit": {
          "guessedname": "cacheLimit",
          "default": "Number.POSITIVE_INFINITY",
          "type": "{Number}",
          "guessedtype": "property",
          "description": "Maximum number of entries to store in the message cache.  Use this to\nlimit the memory footprint in environments with heavy log usage.\nBy default, there is no limit (Number.POSITIVE_INFINITY)."
        },
        "source": {
          "guessedname": "source",
          "type": "Object",
          "guessedtype": "property",
          "description": "<p>Map of entry sources to their visibility status.  Update a\nparticular sources's visibility by setting the subattribute to true\n(visible) or false (hidden).<\/p>\n<p>For example, yconsole.filter.set('sources.slider', false) to hide\nlog entries originating from Y.Slider.<\/p>"
        },
        "defaultVisibility": {
          "guessedname": "defaultVisibility",
          "default": "true",
          "type": "{Boolean}",
          "guessedtype": "property",
          "description": "Default visibility applied to new categories and sources."
        }
      },
      "properties": {
        "ConsoleFilters.SOURCES_TEMPLATE": {
          "guessedname": "SOURCES_TEMPLATE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Markup template used to create the container for the source filters."
        },
        "ConsoleFilters.CHROME_CLASSES": {
          "guessedname": "CHROME_CLASSES",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Classnames used by the templates when creating nodes."
        },
        "_sources": {
          "guessedname": "_sources",
          "type": "Node",
          "guessedtype": "property",
          "protected": "",
          "description": "The container node created to house the source filters."
        },
        "ConsoleFilters.FILTER_TEMPLATE": {
          "guessedname": "FILTER_TEMPLATE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Markup template used to create the category and source filter checkboxes."
        },
        "_entries": {
          "guessedname": "_entries",
          "type": "Array",
          "guessedtype": "property",
          "protected": "",
          "description": "Collection of all log messages passed through since the plugin's\ninstantiation.  This holds all messages regardless of filter status.\nUsed as a single source of truth for repopulating the Console body when\nfilters are changed."
        },
        "_categories": {
          "guessedname": "_categories",
          "type": "Node",
          "guessedtype": "property",
          "protected": "",
          "description": "The container node created to house the category filters."
        },
        "ConsoleFilters.NS": {
          "guessedname": "NS",
          "default": "'filter'",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The namespace hung off the host object that this plugin will inhabit."
        },
        "ConsoleFilters.CATEGORIES_TEMPLATE": {
          "guessedname": "CATEGORIES_TEMPLATE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Markup template used to create the container for the category filters."
        },
        "ConsoleFilters.NAME": {
          "guessedname": "NAME",
          "default": "'consoleFilters'",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Plugin name."
        }
      }
    },
    "WidgetStack": {
      "shortname": "WidgetStack",
      "methods": {
        "_renderUIStack": {
          "guessedname": "_renderUIStack",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates\/Initializes the DOM to support stackability.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>"
        },
        "_getShimTemplate": {
          "private": "",
          "guessedname": "_getShimTemplate",
          "guessedtype": "function",
          "description": "Creates a cloned shim node, using the SHIM_TEMPLATE html template, for use on a new instance.",
          "return": {
            "type": "Node",
            "description": "node A new shim Node instance."
          }
        },
        "_detachStackHandles": {
          "private": "",
          "guessedname": "_detachStackHandles",
          "guessedtype": "function",
          "description": "Detaches any handles stored for the provided key",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " handleKey The key defining the group of handles which should be detached"
            }
          ]
        },
        "_bindUIStack": {
          "guessedname": "_bindUIStack",
          "guessedtype": "function",
          "protected": "",
          "description": "Binds event listeners responsible for updating the UI state in response to \nWidget stack related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>"
        },
        "_renderShimDeferred": {
          "guessedname": "_renderShimDeferred",
          "private": "",
          "guessedtype": "function",
          "description": "Sets up change handlers for the visible attribute, to defer shim creation\/rendering \nuntil the Widget is made visible."
        },
        "_renderShim": {
          "guessedname": "_renderShim",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the shim element and adds it to the DOM"
        },
        "_addShimResizeHandlers": {
          "guessedname": "_addShimResizeHandlers",
          "private": "",
          "guessedtype": "function",
          "description": "Sets up event listeners to resize the shim when the size of the Widget changes.\n<p>\nNOTE: This method is only used for IE6 currently, since IE6 doesn't support a way to\nresize the shim purely through CSS, when the Widget does not have an explicit width\/height \nset.\n<\/p>"
        },
        "_syncUIStack": {
          "guessedname": "_syncUIStack",
          "guessedtype": "function",
          "protected": "",
          "description": "Synchronizes the UI to match the Widgets stack state. This method in \ninvoked after syncUI is invoked for the Widget class using YUI's aop infrastructure."
        },
        "sizeShim": {
          "guessedname": "sizeShim",
          "guessedtype": "function",
          "description": "For IE6, synchronizes the size and position of iframe shim to that of \nWidget bounding box which it is protecting. For all other browsers,\nthis method does not do anything."
        },
        "_setZIndex": {
          "guessedname": "_setZIndex",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "zIndex",
              "type": "String | Number",
              "description": ""
            }
          ],
          "description": "Default setter for zIndex attribute changes. Normalizes zIndex values to \nnumbers, converting non-numerical values to 0.",
          "return": {
            "type": "Number",
            "description": "Normalized zIndex"
          }
        },
        "_afterZIndexChange": {
          "guessedname": "_afterZIndexChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default attribute change listener for the zIndex attribute, responsible\nfor updating the UI, in response to attribute changes.",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "_destroyShim": {
          "guessedname": "_destroyShim",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the shim from the DOM, and detaches any related event\nlisteners."
        },
        "_uiSetZIndex": {
          "guessedname": "_uiSetZIndex",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the UI to reflect the zIndex value passed in.",
          "params": [
            {
              "name": "zIndex",
              "type": "number",
              "description": " The zindex to be reflected in the UI"
            }
          ]
        },
        "_afterShimChange": {
          "guessedname": "_afterShimChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default attribute change listener for the shim attribute, responsible\nfor updating the UI, in response to attribute changes.",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "_uiSetShim": {
          "guessedname": "_uiSetShim",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the UI to enable\/disable the shim. If the widget is not currently visible,\ncreation of the shim is deferred until it is made visible, for performance reasons.",
          "params": [
            {
              "name": "enable",
              "type": "boolean",
              "description": " If true, creates\/renders the shim, if false, removes it."
            }
          ]
        }
      },
      "name": "WidgetStack",
      "module": "widget-stack",
      "namespace": "",
      "param": "{Object} User configuration object",
      "events": {
        "shimChange": {
          "name": "shimChange",
          "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "zIndexChange": {
          "name": "zIndexChange",
          "description": "Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "description": "Widget extension, which can be used to add stackable (z-index) support to the \nbase Widget class along with a shimming solution, through the \n<a href=\"Base.html#method_build\">Base.build<\/a> method.",
      "file": "Widget-Stack.js",
      "configs": {
        "zIndex": {
          "guessedname": "zIndex",
          "default": "0",
          "type": "number",
          "guessedtype": "property",
          "description": "The z-index to apply to the Widgets boundingBox. Non-numerical values for \nzIndex will be converted to 0"
        },
        "shim": {
          "guessedname": "shim",
          "default": "false, for all browsers other than IE6, for which a shim is enabled by default.",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Boolean flag to indicate whether or not a shim should be added to the Widgets\nboundingBox, to protect it from select box bleedthrough."
        }
      },
      "properties": {
        "WidgetStack.HTML_PARSER": {
          "guessedname": "HTML_PARSER",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "The HTML parsing rules for the WidgetStack class."
        },
        "WidgetStack.SHIM_TEMPLATE": {
          "guessedname": "SHIM_TEMPLATE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Default markup template used to generate the shim element."
        },
        "WidgetStack.ATTRS": {
          "guessedname": "ATTRS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStack."
        },
        "WidgetStack.SHIM_CLASS_NAME": {
          "guessedname": "SHIM_CLASS_NAME",
          "default": "\"yui-widget-shim\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Default class used to mark the shim element"
        },
        "WidgetStack.STACKED_CLASS_NAME": {
          "guessedname": "STACKED_CLASS_NAME",
          "default": "\"yui-widget-stacked\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Default class used to mark the boundingBox of a stacked widget."
        }
      }
    },
    "Plugin.Drop": {
      "shortname": "Drop",
      "superclass": "DD.Drop",
      "name": "Plugin.Drop",
      "extends": "DD.Drop",
      "guessedname": "Drop",
      "module": "dd",
      "namespace": "Plugin",
      "constructors": [
        {
          "description": "This is a simple Drop plugin that can be attached to a Node via the plug method."
        }
      ],
      "guessedtype": "function",
      "description": "This is a simple Drop plugin that can be attached to a Node via the plug method.",
      "file": "dd-drop-plugin.js",
      "properties": {
        "NAME": {
          "guessedname": "NAME",
          "type": "{String}",
          "guessedtype": "property",
          "description": "dd-drop-plugin"
        },
        "NS": {
          "guessedname": "NS",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The Drop instance will be placed on the Node instance under the drop namespace. It can be accessed via Node.drop;"
        }
      }
    },
    "JSON": {
      "name": "JSON",
      "shortname": "JSON",
      "methods": {
        "_revive": {
          "guessedname": "_revive",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "data",
              "type": "MIXED",
              "description": "  Any JavaScript data"
            },
            {
              "name": "reviver",
              "type": "Function",
              "description": "  filter or mutation function"
            }
          ],
          "description": "Traverses nested objects, applying a reviver function to each (key,value)\nfrom the scope if the key:value's containing object.  The value returned\nfrom the function will replace the original value in the key:value pair.\nIf the value returned is undefined, the key will be omitted from the\nreturned object.",
          "return": {
            "type": "MIXED",
            "description": "The results of the filtered data"
          }
        },
        "stringify": {
          "guessedname": "stringify",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "MIXED",
              "description": "  any arbitrary value to convert to JSON string"
            },
            {
              "name": "w",
              "type": "Array|Function",
              "description": "  (optional) whitelist of acceptable object\nkeys to include, or a replacer function to modify the\nraw value before serialization"
            },
            {
              "name": "ind",
              "type": "Number|String",
              "description": "  (optional) indentation character or depth of\nspaces to format the output."
            }
          ],
          "description": "<p>Converts an arbitrary value to a JSON string representation.<\/p>\n<p>Objects with cyclical references will trigger an exception.<\/p>\n<p>If a whitelist is provided, only matching object keys will be\nincluded.  Alternately, a replacer function may be passed as the\nsecond parameter.  This function is executed on every value in the\ninput, and its return value will be used in place of the original value.\nThis is useful to serialize specialized objects or class instances.<\/p>\n<p>If a positive integer or non-empty string is passed as the third\nparameter, the output will be formatted with carriage returns and\nindentation for readability.  If a String is passed (such as \"\\t\") it\nwill be used once for each indentation level.  If a number is passed,\nthat number of spaces will be used.<\/p>",
          "return": {
            "type": "string",
            "description": "JSON string representation of the input"
          }
        },
        "escapeException": {
          "guessedname": "_escapeException",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "c",
              "type": "String",
              "description": "  Unicode character"
            }
          ],
          "description": "Replaces specific unicode characters with their appropriate \\unnnn\nformat. Some browsers ignore certain characters during eval.",
          "return": {
            "type": "String",
            "description": "the \\unnnn escapement of the character"
          }
        },
        "dateToString": {
          "guessedname": "dateToString",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "d",
              "type": "Date",
              "description": "  The Date to serialize"
            }
          ],
          "description": "Serializes a Date instance as a UTC date string.  Used internally by\nstringify.  Override this method if you need Dates serialized in a\ndifferent format.",
          "return": {
            "type": "String",
            "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"
          }
        },
        "parse": {
          "throws": "SyntaxError",
          "static": "",
          "description": "Parse a JSON string, returning the native JavaScript representation.",
          "params": [
            {
              "name": "s",
              "type": "string",
              "description": "  JSON string data"
            },
            {
              "name": "reviver",
              "type": "function",
              "description": "  (optional) function(k,v) passed each key value\npair of object literals, allowing pruning or altering values"
            }
          ],
          "return": {
            "type": "MIXED",
            "description": "the native JavaScript representation of the JSON string"
          }
        }
      },
      "module": "json",
      "namespace": "",
      "static": "",
      "file": "json-parse.js",
      "description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.<\/p>\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).<\/p>\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.<\/p>\n<p>The <code>json<\/code> module is a rollup of <code>json-parse<\/code> and\n<code>json-stringify<\/code>.<\/p>\n<p>As their names suggest, <code>json-parse<\/code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify<\/code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.<\/p>",
      "properties": {
        "_VALUES": {
          "private": "",
          "guessedname": "_VALUES",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "Second step in the safety evaluation.  Regex used to replace all simple\nvalues with ']' characters."
        },
        "useNativeParse": {
          "guessedname": "useNativeParse",
          "default": "true",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Leverage native JSON parse if the browser has a native implementation.\nIn general, this is a good idea.  See the Known Issues section in the\nJSON user guide for caveats.  The default value is true for browsers with\nnative JSON support."
        },
        "Native": {
          "private": "",
          "guessedname": "_JSON",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "Alias to native browser implementation of the JSON object if available."
        },
        "_UNSAFE": {
          "private": "",
          "guessedname": "_UNSAFE",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "Final step in the safety evaluation.  Regex used to test the string left\nafter all previous replacements for invalid characters."
        },
        "_ESCAPES": {
          "private": "",
          "guessedname": "_ESCAPES",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "First step in the safety evaluation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character)."
        },
        "JSON.useNativeStringify": {
          "guessedname": "useNativeStringify",
          "default": "true",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Leverage native JSON stringify if the browser has a native\nimplementation.  In general, this is a good idea.  See the Known Issues\nsection in the JSON user guide for caveats.  The default value is true\nfor browsers with native JSON support."
        },
        "_UNICODE_EXCEPTIONS": {
          "private": "",
          "guessedname": "_UNICODE_EXCEPTIONS",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "Replace certain Unicode characters that JavaScript may handle incorrectly\nduring eval--either by deleting them or treating them as line\nendings--with escape sequences.\nIMPORTANT NOTE: This regex will be used to modify the input if a match is\nfound."
        },
        "_BRACKETS": {
          "private": "",
          "guessedname": "_BRACKETS",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "Third step in the safety evaluation.  Regex used to remove all open\nsquare brackets following a colon, comma, or at the beginning of the\nstring."
        }
      }
    },
    "DataSourceJSONSchema": {
      "shortname": "DataSourceJSONSchema",
      "superclass": "Plugin.Base",
      "methods": {
        "_beforeDefDataFn\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<\/dl>": {
          "guessedname": "_beforeDefDataFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Parses raw data into a normalized response."
        },
        "initializer": {
          "private": "",
          "guessedname": "initializer",
          "guessedtype": "function",
          "description": "Internal init() handler.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Config object."
            }
          ]
        }
      },
      "name": "DataSourceJSONSchema",
      "extends": "Plugin.Base",
      "guessedname": "DataSourceJSONSchema",
      "module": "datasource",
      "namespace": "",
      "guessedtype": "function",
      "description": "Adds schema-parsing to the DataSource Utility.",
      "file": "datasource-jsonschema.js",
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"dataSourceJSONSchema\"",
          "guessedtype": "property",
          "description": "Class name."
        },
        "NS": {
          "final": "",
          "guessedname": "NS",
          "static": "",
          "type": "String",
          "value": "\"schema\"",
          "guessedtype": "property",
          "description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance."
        }
      }
    },
    "WidgetPosition": {
      "shortname": "WidgetPosition",
      "methods": {
        "_validateXY": {
          "guessedname": "_validateXY",
          "guessedtype": "function",
          "description": "Default validator for the XY attribute",
          "params": [
            {
              "name": "val",
              "type": "Array",
              "description": " The XY page co-ordinate value which is being set."
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if valid, false if not."
          }
        },
        "_setX": {
          "guessedname": "_setX",
          "guessedtype": "function",
          "description": "Default setter for the X attribute. The setter passes the X value through\nto the XY attribute, which is the sole store for the XY state.",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": " The X page co-ordinate value"
            }
          ]
        },
        "_getX": {
          "guessedname": "_getX",
          "guessedtype": "function",
          "description": "Default getter for the X attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.",
          "return": {
            "type": "Number",
            "description": "The X page co-ordinate value"
          }
        },
        "_setY": {
          "guessedname": "_setY",
          "guessedtype": "function",
          "description": "Default setter for the Y attribute. The setter passes the Y value through\nto the XY attribute, which is the sole store for the XY state.",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": " The Y page co-ordinate value"
            }
          ]
        },
        "_getY": {
          "guessedname": "_getY",
          "guessedtype": "function",
          "description": "Default getter for the Y attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.",
          "return": {
            "type": "Number",
            "description": "The Y page co-ordinate value"
          }
        },
        "_syncUIPosition": {
          "guessedname": "_syncUIPosition",
          "guessedtype": "function",
          "protected": "",
          "description": "Synchronizes the UI to match the Widgets xy page position state.\n<p>\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>"
        },
        "_bindUIPosition": {
          "guessedname": "_bindUIPosition",
          "guessedtype": "function",
          "protected": "",
          "description": "Binds event listeners responsible for updating the UI state in response to \nWidget position related state changes.\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>"
        },
        "_afterXYChange": {
          "guessedname": "_afterXYChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default attribute change listener for the xy attribute, responsible\nfor updating the UI, in response to attribute changes.",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "_uiSetXY": {
          "guessedname": "_uiSetXY",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the UI to reflect the XY page co-ordinates passed in.",
          "params": [
            {
              "name": "val",
              "type": "String",
              "description": " The XY page co-ordinates value to be reflected in the UI"
            }
          ]
        },
        "move": {
          "guessedname": "move",
          "guessedtype": "function",
          "description": "Moves the Widget to the specified page xy co-ordinate position.",
          "params": [
            {
              "name": "x",
              "type": "Number",
              "description": " The new x position"
            },
            {
              "name": "y",
              "type": "Number",
              "description": " The new y position\n<p>Or<\/p>"
            },
            {
              "name": "x,",
              "type": "Array",
              "description": " y values passed as an array ([x, y]), to support\nsimple pass through of Node.getXY results"
            }
          ]
        },
        "syncXY": {
          "guessedname": "syncXY",
          "guessedtype": "function",
          "description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the \nWidget's position in the DOM."
        },
        "_renderUIPosition": {
          "guessedname": "_renderUIPosition",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates\/Initializes the DOM to support xy page positioning.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>"
        }
      },
      "name": "WidgetPosition",
      "module": "widget-position",
      "namespace": "",
      "param": "{Object} config User configuration object",
      "events": {
        "yChange": {
          "name": "yChange",
          "description": "Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "xChange": {
          "name": "xChange",
          "description": "Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "xyChange": {
          "name": "xyChange",
          "description": "Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "description": "Widget extension, which can be used to add positioning support to the base Widget class, \nthrough the <a href=\"Base.html#method_build\">Base.build<\/a> method.",
      "file": "Widget-Position.js",
      "configs": {
        "xy": {
          "guessedname": "xy",
          "default": "[0,0]",
          "type": "Array",
          "guessedtype": "property",
          "description": "Page XY co-ordinate pair for the widget."
        },
        "x": {
          "guessedname": "x",
          "default": "0",
          "type": "number",
          "guessedtype": "property",
          "description": "Page X co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events."
        },
        "y": {
          "guessedname": "y",
          "default": "0",
          "type": "number",
          "guessedtype": "property",
          "description": "Page Y co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events."
        }
      },
      "properties": {
        "WidgetPosition.POSITIONED_CLASS_NAME": {
          "guessedname": "POSITIONED_CLASS_NAME",
          "default": "\"yui-widget-positioned\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Default class used to mark the boundingBox of a positioned widget."
        },
        "WidgetPosition.ATTRS": {
          "guessedname": "ATTRS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPosition."
        }
      }
    },
    "DataType.Number": {
      "methods": {
        "format": {
          "guessedname": "format",
          "guessedtype": "function",
          "description": "Takes a Number and formats to string for display to user.",
          "params": [
            {
              "name": "data",
              "type": "Number",
              "description": "  Number."
            },
            {
              "name": "config",
              "type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>prefix {String}<\/dd>\n<dd>String prepended before each number, like a currency designator \"$\"<\/dd>\n<dt>decimalPlaces {Number}<\/dd>\n<dd>Number of decimal places to round. Must be a number 0 to 20.<\/dd>\n<dt>decimalSeparator {String}<\/dd>\n<dd>Decimal separator<\/dd>\n<dt>thousandsSeparator {String}<\/dd>\n<dd>Thousands separator<\/dd>\n<dt>suffix {String",
              "description": " <\/dd>\n<dd>String appended after each number, like \" items\" (note the space)<\/dd>\n<\/dl>"
            }
          ],
          "return": {
            "type": "String",
            "description": "Formatted number for display. Note, the following values\nreturn as \"\": null, undefined, NaN, \"\"."
          }
        },
        "parse": {
          "guessedname": "parse",
          "guessedtype": "function",
          "description": "Converts data to type Number.",
          "params": [
            {
              "name": "data",
              "type": "String | Number | Boolean",
              "description": "  Data to convert. The following\nvalues return as null: null, undefined, NaN, \"\"."
            }
          ],
          "return": {
            "type": "Number",
            "description": "A number, or null."
          }
        }
      },
      "shortname": "DataType.Number",
      "name": "DataType.Number",
      "guessedname": "LANG",
      "module": "datatype",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "file": "datatype-number-format.js",
      "description": "DataType.Number provides a set of utility functions to operate against Number objects."
    },
    "Object": {
      "shortname": "Object",
      "methods": {
        "keys": {
          "guessedname": "keys",
          "static": "",
          "guessedtype": "function",
          "todo": "use native Object.keys() if available",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " an object"
            }
          ],
          "description": "Returns an array containing the object's keys",
          "return": {
            "type": "string[]",
            "description": "the keys"
          }
        },
        "size": {
          "guessedname": "size",
          "static": "",
          "guessedtype": "function",
          "todo": "use native Object.size() if available",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " an object"
            }
          ],
          "description": "Returns the size of an object",
          "return": {
            "type": "int",
            "description": "the size"
          }
        },
        "()": {
          "guessedname": "Object",
          "static": "",
          "guessedtype": "function",
          "todo": "Use native Object.create() when available",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " the supplier object"
            }
          ],
          "description": "Y.Object(o) returns a new object based upon the supplied object.",
          "return": {
            "type": "Object",
            "description": "the new object"
          }
        },
        "hasValue": {
          "guessedname": "hasValue",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " an object"
            },
            {
              "name": "v",
              "type": "",
              "description": " the value to query"
            }
          ],
          "description": "Returns true if the object contains a given value",
          "return": {
            "type": "boolean",
            "description": "true if the object contains the value"
          }
        },
        "_extract": {
          "guessedname": "_extract",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " the object"
            },
            {
              "name": "what",
              "type": "",
              "description": " what to extract (0: keys, 1: values, 2: size)"
            }
          ],
          "description": "Extracts the keys, values, or size from an object",
          "return": {
            "type": "boolean|Array",
            "description": "the extracted info"
          }
        },
        "each": {
          "guessedname": "each",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " the object to iterate"
            },
            {
              "name": "f",
              "type": "function",
              "description": "  the function to execute"
            },
            {
              "name": "c",
              "type": "",
              "description": " the execution context"
            },
            {
              "name": "proto",
              "type": "boolean",
              "description": "  include proto"
            }
          ],
          "description": "Executes a function on each item. The function\nreceives the value, the key, and the object\nas paramters (in that order).",
          "return": {
            "type": "YUI",
            "description": "the YUI instance"
          }
        },
        "owns": {
          "guessedname": "owns",
          "static": "",
          "guessedtype": "function",
          "todo": "Remove in B1",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": "  The object being testing"
            },
            {
              "name": "p",
              "type": "string",
              "description": "  the property to look for"
            }
          ],
          "deprecated": "Safari 1.x support has been removed, so this is simply a \nwrapper for the native implementation.  Use the native implementation\ndirectly instead.",
          "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.",
          "return": {
            "type": "boolean",
            "description": "true if the object has the property on the instance"
          }
        },
        "values": {
          "guessedname": "values",
          "static": "",
          "guessedtype": "function",
          "todo": "use native Object.values() if available",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " an object"
            }
          ],
          "description": "Returns an array containing the object's values",
          "return": {
            "type": "Array",
            "description": "the values"
          }
        },
        "setValue": {
          "guessedname": "setValue",
          "guessedtype": "function",
          "description": "Sets the sub-attribute value at the provided path on the \nvalue object.  Returns the modified value object, or \nundefined if the path is invalid.",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": "             The object on which to set the sub value."
            },
            {
              "name": "path",
              "type": "Array",
              "description": "   A path array, specifying the object traversal path\nat which to set the sub value."
            },
            {
              "name": "val",
              "type": "Any",
              "description": "      The new value for the sub-attribute."
            }
          ],
          "return": {
            "type": "Object",
            "description": "The modified object, with the new sub value set, or \nundefined, if the path was invalid."
          }
        },
        "hasKey": {
          "guessedname": "hasKey",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " an object"
            },
            {
              "name": "k",
              "type": "",
              "description": " the key to query"
            }
          ],
          "description": "Returns true if the object contains a given key",
          "return": {
            "type": "boolean",
            "description": "true if the object contains the key"
          }
        },
        "getValue": {
          "guessedname": "getValue",
          "guessedtype": "function",
          "description": "Retrieves the sub value at the provided path,\nfrom the value object provided.",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object from which to extract the property value"
            },
            {
              "name": "path",
              "type": "Array",
              "description": "  A path array, specifying the object traversal path\nfrom which to obtain the sub value."
            }
          ],
          "return": {
            "type": "Any",
            "description": "The value stored in the path, undefined if not found.\nReturns the source object if an empty path is provided."
          }
        }
      },
      "name": "Object",
      "module": "yui",
      "namespace": "",
      "description": "Adds the following Object utilities to the YUI instance",
      "file": "yui-object.js"
    },
    "Profiler": {
      "shortname": "Profiler",
      "methods": {
        "getAverage": {
          "guessedname": "getAverage",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."
            }
          ],
          "description": "Returns the average amount of time (in milliseconds) that the function\nwith the given name takes to execute.",
          "return": {
            "type": "float",
            "description": "The average time it takes the function to execute."
          }
        },
        "unregisterFunction": {
          "guessedname": "unregisterConstructor",
          "param": "{String} name The full name of the function including namespacing. This\nis the name of the function that is stored in the report.",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."
            }
          ],
          "description": "Removes a constructor function from profiling. Reverses the registerConstructor() method.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "stop": {
          "guessedname": "stop",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the data point."
            }
          ],
          "description": "Stops profiling information for a given name.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "clear": {
          "guessedname": "clear",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " (Optional) The name of the report to clear. If\nomitted, then all report data is cleared."
            }
          ],
          "description": "Removes all report data from the profiler.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "pause": {
          "guessedname": "pause",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the data point."
            }
          ],
          "description": "Pauses profiling information for a given name.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "registerConstructor": {
          "guessedname": "registerConstructor",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": " The fully-qualified name of the function including namespace information."
            },
            {
              "name": "owner",
              "type": "Object",
              "description": " (Optional) The object that owns the function (namespace or containing object)."
            }
          ],
          "description": "Sets up a constructor for profiling, including all properties and methods on the prototype.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getReport": {
          "guessedname": "getReport",
          "static": "",
          "guessedtype": "function",
          "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).",
          "return": {
            "type": "Object",
            "description": "An object containing profile data for a given function."
          }
        },
        "registerObject": {
          "guessedname": "registerObject",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the object to profile (shows up in report)."
            },
            {
              "name": "owner",
              "type": "Object",
              "description": " (Optional) The object represented by the name."
            },
            {
              "name": "recurse",
              "type": "Boolean",
              "description": " (Optional) Determines if subobject methods are also profiled."
            }
          ],
          "description": "Sets up an object for profiling. It takes the object and looks for functions.\nWhen a function is found, registerMethod() is called on it. If set to recrusive\nmode, it will also setup objects found inside of this object for profiling, \nusing the same methodology.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getFunctionReport": {
          "guessedname": "getFunctionReport",
          "static": "",
          "guessedtype": "function",
          "deprecated": "Use getReport() instead.",
          "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).",
          "return": {
            "type": "Object",
            "description": "An object containing profile data for a given function."
          }
        },
        "getCallCount": {
          "guessedname": "getCallCount",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function whose data should be returned."
            }
          ],
          "description": "Returns the number of times that the given function has been called.",
          "return": {
            "type": "int",
            "description": "The number of times the function was called."
          }
        },
        "getFullReport": {
          "guessedname": "getFullReport",
          "static": "",
          "guessedtype": "function",
          "description": "Returns an object containing profiling data for all of the functions \nthat were profiled. The object has an entry for each function and \nreturns all information (min, max, average, calls, etc.) for each\nfunction.",
          "return": {
            "type": "Object",
            "description": "An object containing all profile data."
          }
        },
        "start": {
          "guessedname": "start",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the data point."
            }
          ],
          "description": "Start profiling information for a given name. The name cannot be the name\nof a registered function or object. This is used to start timing for a\nparticular block of code rather than instrumenting the entire function.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getMax": {
          "guessedname": "getMax",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."
            }
          ],
          "description": "Returns the maximum amount of time (in milliseconds) that the function\nwith the given name takes to execute.",
          "return": {
            "type": "float",
            "description": "The maximum time it takes the function to execute."
          }
        },
        "unregisterObject": {
          "guessedname": "unregisterObject",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the object to unregister."
            },
            {
              "name": "recurse",
              "type": "Boolean",
              "description": " (Optional) Determines if subobject methods should also be\nunregistered."
            }
          ],
          "description": "Unregisters an object for profiling. It takes the object and looks for functions.\nWhen a function is found, unregisterMethod() is called on it. If set to recrusive\nmode, it will also unregister objects found inside of this object, \nusing the same methodology.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getOriginal": {
          "guessedname": "getOriginal",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function\/object to retrieve."
            }
          ],
          "description": "Returns the uninstrumented version of a function\/object.",
          "return": {
            "type": "Function|Object",
            "description": "The uninstrumented version of a function\/object."
          }
        },
        "instrument": {
          "guessedname": "instrument",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the report for the function."
            },
            {
              "name": "method",
              "type": "Function",
              "description": " The function to instrument."
            }
          ],
          "description": "Instruments a method to have profiling calls.",
          "return": {
            "type": "Function",
            "description": "An instrumented version of the function."
          }
        },
        "registerFunction": {
          "guessedname": "registerFunction",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."
            },
            {
              "name": "owner",
              "type": "Object",
              "description": " (Optional) The object that owns the function. If the function\nisn't global then this argument is required. This could be the namespace that\nthe function belongs to or the object on which it's\na method."
            },
            {
              "name": "registerPrototype",
              "type": "Boolean",
              "description": " (Optional) Indicates that the prototype should\nalso be instrumented. Setting to true has the same effect as calling\nregisterConstructor()."
            }
          ],
          "description": "Sets up a function for profiling. It essentially overwrites the function with one\nthat has instrumentation data. This method also creates an entry for the function\nin the profile report. The original function is stored on the container object.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getMin": {
          "guessedname": "getMin",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."
            }
          ],
          "description": "Returns the minimum amount of time (in milliseconds) that the function\nwith the given name takes to execute.",
          "return": {
            "type": "float",
            "description": "The minimum time it takes the function to execute."
          }
        }
      },
      "name": "Profiler",
      "guessedname": "Profiler",
      "module": "profiler",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "Profiles functions in JavaScript.",
      "file": "Profiler.js"
    },
    "DD.Scroll": {
      "shortname": "Scroll",
      "superclass": "Base",
      "methods": {
        "_setDimCache": {
          "guessedname": "_setDimCache",
          "private": "",
          "guessedtype": "function",
          "description": "Set the cache of the dragNode dims."
        },
        "_checkWinScroll": {
          "private": "",
          "guessedname": "_checkWinScroll",
          "guessedtype": "function",
          "description": "Check to see if we need to fire the scroll timer. If scroll timer is running this will scroll the window.",
          "params": [
            {
              "name": "move",
              "type": "Boolean",
              "description": " Should we move the window. From Y.later"
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "General toString method for logging",
          "return": {
            "type": "",
            "description": "String name for the object"
          }
        },
        "end": {
          "guessedname": "end",
          "guessedtype": "function",
          "description": "Called from the drag:end event"
        },
        "start": {
          "guessedname": "start",
          "guessedtype": "function",
          "description": "Called from the drag:start event"
        },
        "_getVPRegion": {
          "guessedname": "_getVPRegion",
          "private": "",
          "guessedtype": "function",
          "description": "Sets the _vpRegionCache property with an Object containing the dims from the viewport."
        },
        "align": {
          "guessedname": "align",
          "guessedtype": "function",
          "description": "Called from the drag:align event to determine if we need to scroll."
        },
        "_initScroll": {
          "guessedname": "_initScroll",
          "private": "",
          "guessedtype": "function",
          "description": "Cancel a previous scroll timer and init a new one."
        },
        "_cancelScroll": {
          "guessedname": "_cancelScroll",
          "private": "",
          "guessedtype": "function",
          "description": "Cancel a currently running scroll timer."
        }
      },
      "name": "DD.Scroll",
      "extends": "Base",
      "guessedname": "S",
      "module": "dd",
      "namespace": "DD",
      "events": {
        "horizontalChange": {
          "name": "horizontalChange",
          "description": "Fires when the value for the configuration attribute 'horizontal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "hostChange": {
          "name": "hostChange",
          "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "windowScrollChange": {
          "name": "windowScrollChange",
          "description": "Fires when the value for the configuration attribute 'windowScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "bufferChange": {
          "name": "bufferChange",
          "description": "Fires when the value for the configuration attribute 'buffer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "scrollDelayChange": {
          "name": "scrollDelayChange",
          "description": "Fires when the value for the configuration attribute 'scrollDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "verticalChange": {
          "name": "verticalChange",
          "description": "Fires when the value for the configuration attribute 'vertical' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "parentScrollChange": {
          "name": "parentScrollChange",
          "description": "Fires when the value for the configuration attribute 'parentScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "This class is the base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."
        }
      ],
      "guessedtype": "function",
      "description": "This class is the base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin.",
      "configs": {
        "buffer": {
          "guessedname": "buffer",
          "type": "Number",
          "guessedtype": "property",
          "description": "The number of pixels from the edge of the screen to turn on scrolling. Default: 30"
        },
        "scrollDelay": {
          "guessedname": "scrollDelay",
          "type": "Number",
          "guessedtype": "property",
          "description": "The number of milliseconds delay to pass to the auto scroller. Default: 235"
        },
        "vertical": {
          "guessedname": "vertical",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Allow vertical scrolling, default: true."
        },
        "parentScroll": {
          "guessedname": "parentScroll",
          "type": "Node",
          "guessedtype": "property",
          "description": "Internal config option to hold the node that we are scrolling. Should not be set by the developer."
        },
        "windowScroll": {
          "guessedname": "windowScroll",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Turn on window scroll support, default: false"
        },
        "horizontal": {
          "guessedname": "horizontal",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Allow horizontal scrolling, default: true."
        },
        "host": {
          "guessedname": "host",
          "type": "Object",
          "guessedtype": "property",
          "description": "The host we are plugged into."
        }
      },
      "file": "scroll.js",
      "properties": {
        "_scrolling": {
          "private": "",
          "guessedname": "_scrolling",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Tells if we are actively scrolling or not."
        },
        "_scrollTimer": {
          "private": "",
          "guessedname": "_scrollTimer",
          "type": "{Y.later}",
          "guessedtype": "property",
          "description": "Holder for the Timer object returned from Y.later."
        },
        "_dimCache": {
          "private": "",
          "guessedname": "_dimCache",
          "type": "Object",
          "guessedtype": "property",
          "description": "Cache of the dragNode dims."
        },
        "_vpRegionCache": {
          "private": "",
          "guessedname": "_vpRegionCache",
          "type": "Object",
          "guessedtype": "property",
          "description": "Cache of the Viewport dims."
        }
      }
    },
    "Assert.Error": {
      "shortname": "Error",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the error.",
          "return": {
            "type": "String",
            "description": "A string representation of the error."
          }
        },
        "getMessage": {
          "guessedname": "getMessage",
          "guessedtype": "function",
          "description": "Returns a fully formatted error for an assertion failure. This should\nbe overridden by all subclasses to provide specific information.",
          "return": {
            "type": "String",
            "description": "A string describing the error."
          }
        },
        "valueOf": {
          "guessedname": "valueOf",
          "guessedtype": "function",
          "description": "Returns a primitive value version of the error. Same as toString().",
          "return": {
            "type": "String",
            "description": "A primitive value version of the error."
          }
        }
      },
      "name": "Assert.Error",
      "guessedname": "Error",
      "module": "test",
      "namespace": "Assert",
      "constructors": [
        {
          "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the error that occurred."
        }
      }
    },
    "History.Module": {
      "shortname": "History.Module",
      "name": "History.Module",
      "guessedname": "Module",
      "module": "history",
      "namespace": "",
      "constructors": [
        {
          "description": "This class represents a browser history module.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "  the module identifier"
            },
            {
              "name": "initialState",
              "type": "String",
              "description": "  the module's initial state"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "This class represents a browser history module.",
      "file": "history.js",
      "properties": {
        "upcomingState": {
          "final": "",
          "guessedname": "upcomingState",
          "private": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The module's upcoming state. There can be a slight delay between the\ntime a state is changed, and the time a state change is detected.\nThis property allows us to not fire the module state changed event\nmultiple times, making client code simpler."
        },
        "initialState": {
          "final": "",
          "guessedname": "initialState",
          "type": "String",
          "guessedtype": "property",
          "description": "The module's initial state"
        },
        "currentState": {
          "final": "",
          "guessedname": "currentState",
          "type": "String",
          "guessedtype": "property",
          "description": "The module's current state"
        },
        "id": {
          "final": "",
          "guessedname": "id",
          "type": "String",
          "guessedtype": "property",
          "description": "The module identifier"
        }
      }
    },
    "NodeList": {
      "shortname": "NodeList",
      "methods": {
        "removeClass": {
          "chainable": "",
          "description": "Removes a class name from each node.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " the class name to remove from the node's class attribute"
            }
          ],
          "see": "Node.removeClass"
        },
        "get": {
          "guessedname": "get",
          "guessedtype": "function",
          "description": "Called on each Node instance",
          "see": "Node"
        },
        "hasClass": {
          "description": "Determines whether each node has the given className.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " the class name to search for"
            }
          ],
          "see": "Node.hasClass",
          "return": {
            "type": "Array",
            "description": "An array of booleans for each node bound to the NodeList."
          }
        },
        "size": {
          "guessedname": "size",
          "guessedtype": "function",
          "description": "Returns the current number of items in the NodeList.",
          "return": {
            "type": "Int",
            "description": "The number of items in the NodeList."
          }
        },
        "set": {
          "description": "Called on each Node instance",
          "see": "Node.set"
        },
        "each": {
          "guessedname": "each",
          "chainable": "",
          "guessedtype": "function",
          "description": "Applies the given function to each Node in the NodeList.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": " The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance"
            },
            {
              "name": "context",
              "type": "Object",
              "description": " optional An optional context to apply the function with\nDefault context is the current Node instance"
            }
          ]
        },
        "getStyle": {
          "description": "Returns an array of values for each node.",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The style attribute to retrieve."
            }
          ],
          "see": "Node.getStyle",
          "return": {
            "type": "Array",
            "description": "The current values of the style property for the element."
          }
        },
        "addClass": {
          "chainable": "",
          "description": "Adds a class name to each node.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " the class name to add to the node's class attribute"
            }
          ],
          "see": "Node.addClass"
        },
        "getComputedStyle": {
          "description": "Returns an array of the computed value for each node.",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The style attribute to retrieve."
            }
          ],
          "see": "Node.getComputedStyle",
          "return": {
            "type": "Array",
            "description": "The computed values for each node."
          }
        },
        "filter": {
          "guessedname": "filter",
          "guessedtype": "function",
          "params": [
            {
              "name": "selector",
              "type": "String",
              "description": " The selector to filter against"
            }
          ],
          "see": "Selector",
          "description": "Filters the NodeList instance down to only nodes matching the given selector.",
          "return": {
            "type": "NodeList",
            "description": "NodeList containing the updated collection"
          }
        },
        "setAttribute": {
          "chainable": "",
          "see": "Node",
          "description": "Allows setting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": " The attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": " The value to set"
            }
          ]
        },
        "after": {
          "guessedname": "after",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The event being listened for"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The handler to call when the event fires"
            },
            {
              "name": "context",
              "type": "Object",
              "description": " The context to call the handler with.\nDefault is the NodeList instance."
            }
          ],
          "see": "Event.on",
          "description": "Applies an event listener to each Node bound to the NodeList. \nThe handler is called only after all on() handlers are called\nand the event is not prevented.",
          "return": {
            "type": "Object",
            "description": "Returns an event handle that can later be use to detach()."
          }
        },
        "toDocFrag": {
          "guessedname": "toFrag",
          "guessedtype": "function",
          "description": "Creates a documenFragment from the nodes bound to the NodeList instance",
          "return": {
            "type": "",
            "description": "Node a Node instance bound to the documentFragment"
          }
        },
        "odd": {
          "guessedname": "odd",
          "guessedtype": "function",
          "description": "Creates a new NodeList containing all nodes at odd indices\n(zero-based index).",
          "return": {
            "type": "NodeList",
            "description": "NodeList containing the updated collection"
          }
        },
        "setStyle": {
          "chainable": "",
          "description": "Sets a style property on each node.",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The style attribute to set."
            },
            {
              "name": "val",
              "type": "String|Number",
              "description": " The value."
            }
          ],
          "see": "Node.setStyle"
        },
        "detachAll": {
          "description": "Called on each Node instance",
          "see": "Node.detachAll"
        },
        "insert": {
          "description": "Called on each Node instance",
          "see": "NodeInsert"
        },
        "setContent": {
          "description": "Called on each Node instance",
          "see": "Node.setContent"
        },
        "remove": {
          "description": "Called on each Node instance",
          "see": "Node.remove"
        },
        "toggleClass": {
          "chainable": "",
          "description": "If the className exists on the node it is removed, if it doesn't exist it is added.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " the class name to be toggled"
            }
          ],
          "see": "Node.toggleClass"
        },
        "even": {
          "guessedname": "even",
          "guessedtype": "function",
          "description": "Creates a new NodeList containing all nodes at even indices\n(zero-based index), including zero.",
          "return": {
            "type": "NodeList",
            "description": "NodeList containing the updated collection"
          }
        },
        "append": {
          "description": "Called on each Node instance",
          "see": "Node.append"
        },
        "setStyles": {
          "chainable": "",
          "description": "Sets multiple style properties on each node.",
          "params": [
            {
              "name": "hash",
              "type": "Object",
              "description": " An object literal of property:value pairs."
            }
          ],
          "see": "Node.setStyles"
        },
        "indexOf": {
          "guessedname": "indexOf",
          "guessedtype": "function",
          "description": "Returns the index of the node in the NodeList instance\nor -1 if the node isn't found.",
          "params": [
            {
              "name": "node",
              "type": "Y.Node || DOMNode",
              "description": " the node to search for"
            }
          ],
          "return": {
            "type": "Int",
            "description": "the index of the node value or -1 if not found"
          }
        },
        "prepend": {
          "description": "Called on each Node instance",
          "see": "Node.prepend"
        },
        "NodeList.getDOMNodes": {
          "guessedname": "getDOMNodes",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "Y.NodeList",
              "description": " The NodeList instance"
            }
          ],
          "description": "Retrieves the DOM nodes bound to a NodeList instance",
          "return": {
            "type": "Array",
            "description": "The array of DOM nodes bound to the NodeList"
          }
        },
        "replaceClass": {
          "chainable": "",
          "description": "Replace a class with another class for each node.\nIf no oldClassName is present, the newClassName is simply added.",
          "params": [
            {
              "name": "oldClassName",
              "type": "String",
              "description": " the class name to be replaced"
            },
            {
              "name": "newClassName",
              "type": "String",
              "description": " the class name that will be replacing the old class name"
            }
          ],
          "see": "Node.replaceClass"
        },
        "getAttribute": {
          "description": "Allows getting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": " The attribute name"
            }
          ],
          "see": "Node",
          "return": {
            "type": "string",
            "description": "The attribute value"
          }
        },
        "on": {
          "guessedname": "on",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The event being listened for"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The handler to call when the event fires"
            },
            {
              "name": "context",
              "type": "Object",
              "description": " The context to call the handler with.\nDefault is the NodeList instance."
            }
          ],
          "see": "Event.on",
          "description": "Applies an event listener to each Node bound to the NodeList.",
          "return": {
            "type": "Object",
            "description": "Returns an event handle that can later be use to detach()."
          }
        },
        "some": {
          "guessedname": "some",
          "guessedtype": "function",
          "description": "Executes the function once for each node until a true value is returned.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": " The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance"
            },
            {
              "name": "context",
              "type": "Object",
              "description": " optional An optional context to execute the function from.\nDefault context is the current Node instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the function returned true for any node."
          }
        },
        "item": {
          "guessedname": "item",
          "guessedtype": "function",
          "description": "Retrieves the Node instance at the given index.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": " The index of the target Node."
            }
          ],
          "return": {
            "type": "Node",
            "description": "The Node instance at the given index."
          }
        },
        "detach": {
          "description": "Called on each Node instance",
          "see": "Node.detach"
        }
      },
      "name": "NodeList",
      "guessedname": "_diff",
      "module": "node",
      "namespace": "",
      "constructors": [
        {
          "description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set\/get methods.\nUse Y.all() to retrieve NodeList instances."
        }
      ],
      "guessedtype": "function",
      "description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set\/get methods.\nUse Y.all() to retrieve NodeList instances.",
      "file": "nodelist.js"
    },
    "Get": {
      "shortname": "Get",
      "methods": {
        "script": {
          "guessedname": "script",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "url",
              "type": "string|string[]",
              "description": "  the url or urls to the script(s)"
            },
            {
              "name": "opts",
              "type": "object",
              "description": "  Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>onTimeout<\/dt>\n<dd>\ncallback to execute when a timeout occurs.\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>onEnd<\/dt>\n<dd>a function that executes when the transaction finishes, regardless of the exit path<\/dd>\n<dt>onFailure<\/dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted successfully<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>context<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>autopurge<\/dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge \nthe script once loaded\n<\/dd>\n<dt>purgethreshold<\/dt>\n<dd>\nThe number of transaction before autopurge should be initiated\n<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<\/dl>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8 (deprecated, use the attributes config)<\/dd>\n<dt>attributes<\/dt>\n<dd>An object literal containing additional attributes to add to the link tags<\/dd>\n<dt>timeout<\/dt>\n<dd>Number of milliseconds to wait before aborting and firing the timeout event<\/dd>\n<pre>\n&nbsp;&nbsp;Y.Get.script(\n&nbsp;&nbsp;[\"http:\/\/yui.yahooapis.com\/2.5.2\/build\/yahoo\/yahoo-min.js\",\n&nbsp;&nbsp;&nbsp;\"http:\/\/yui.yahooapis.com\/2.5.2\/build\/event\/event-min.js\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because Y is the context\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.data); \/\/ foo\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.nodes.length === 2) \/\/ true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/ o.purge(); \/\/ optionally remove the script nodes immediately\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction failed\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onTimeout: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction timed out\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",\n&nbsp;&nbsp;&nbsp;&nbsp;timeout: 10000, \/\/ 10 second timeout\n&nbsp;&nbsp;&nbsp;&nbsp;context: Y, \/\/ make the YUI instance\n&nbsp;&nbsp;&nbsp;&nbsp;\/\/ win: otherframe \/\/ target another window\/frame\n&nbsp;&nbsp;&nbsp;&nbsp;autopurge: true \/\/ allow the utility to choose when to remove the nodes\n&nbsp;&nbsp;&nbsp;&nbsp;purgetheshold: 1 \/\/ purge previous transaction before next transaction\n&nbsp;&nbsp;&#125;);\n<\/pre>"
            }
          ],
          "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.",
          "return": {
            "type": "tId: string",
            "description": "an object containing info about the transaction"
          }
        },
        "_timeout": {
          "private": "",
          "guessedname": "_timeout",
          "guessedtype": "function",
          "description": "Timeout detected",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the request"
            }
          ]
        },
        "css": {
          "guessedname": "css",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "  the url or urls to the css file(s)"
            },
            {
              "name": "opts",
              "type": "",
              "description": " Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win<\/dl>\n<dd>the window the link nodes(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>context<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8 (deprecated, use the attributes config)<\/dd>\n<dt>attributes<\/dt>\n<dd>An object literal containing additional attributes to add to the link tags<\/dd>\n<\/dl>\n<pre>\nY.Get.css(\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\");\n<\/pre>\n<pre>\n&nbsp;&nbsp;Y.Get.css(\n&nbsp;&nbsp;[\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\",\n&nbsp;&nbsp;&nbsp;\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/logger\/assets\/skins\/sam\/logger.css\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;insertBefore: 'custom-styles' \/\/ nodes will be inserted before the specified node\n&nbsp;&nbsp;&#125;);\n<\/pre>"
            }
          ],
          "description": "Fetches and inserts one or more css link nodes into the \nhead of the current document or the document in a specified\nwindow.",
          "return": {
            "type": "tId: string",
            "description": "an object containing info about the transaction"
          }
        },
        "_node": {
          "guessedname": "_node",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type of element"
            },
            {
              "name": "attr",
              "type": "string",
              "description": "  the attributes"
            },
            {
              "name": "win",
              "type": "Window",
              "description": "  optional window to create the element in"
            }
          ],
          "description": "Generates an HTML element, this is not appended to a document",
          "return": {
            "type": "HTMLElement",
            "description": "the generated node"
          }
        },
        "_scriptNode": {
          "guessedname": "_scriptNode",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "  the url for the script file"
            },
            {
              "name": "win",
              "type": "Window",
              "description": "  optional window to create the node in"
            },
            {
              "name": "attributes",
              "type": "",
              "description": " optional attributes collection to apply to the new node"
            }
          ],
          "description": "Generates a script node",
          "return": {
            "type": "HTMLElement",
            "description": "the generated node"
          }
        },
        "_purge": {
          "guessedname": "_purge",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the nodes for the specified queue"
        },
        "_track": {
          "private": "",
          "guessedname": "_track",
          "guessedtype": "function",
          "description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type of node to track"
            },
            {
              "name": "n",
              "type": "HTMLElement",
              "description": "  the node to track"
            },
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the request"
            },
            {
              "name": "url",
              "type": "string",
              "description": "  the url that is being loaded"
            },
            {
              "name": "win",
              "type": "Window",
              "description": "  the targeted window"
            },
            {
              "name": "qlength",
              "type": "",
              "description": " the number of remaining items in the queue,\nincluding this one"
            },
            {
              "name": "trackfn",
              "type": "Function",
              "description": "  function to execute when finished\nthe default is _next"
            }
          ]
        },
        "_returnData": {
          "guessedname": "_returnData",
          "private": "",
          "guessedtype": "function",
          "description": "Returns the data payload for callback functions"
        },
        "_linkNode": {
          "guessedname": "_linkNode",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "  the url for the css file"
            },
            {
              "name": "win",
              "type": "Window",
              "description": "  optional window to create the node in"
            },
            {
              "name": "attributes",
              "type": "",
              "description": " optional attributes collection to apply to the new node"
            }
          ],
          "description": "Generates a link node",
          "return": {
            "type": "HTMLElement",
            "description": "the generated node"
          }
        },
        "queue": {
          "private": "",
          "guessedname": "_queue",
          "guessedtype": "function",
          "description": "Saves the state for the request and begins loading\nthe requested urls",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type of node to insert"
            },
            {
              "name": "url",
              "type": "string",
              "description": "  the url to load"
            },
            {
              "name": "opts",
              "type": "",
              "description": " the hash of options for this request"
            }
          ]
        },
        "_end": {
          "private": "",
          "guessedname": "_end",
          "guessedtype": "function",
          "description": "The transaction is finished",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the request"
            }
          ]
        },
        "_next": {
          "private": "",
          "guessedname": "_next",
          "guessedtype": "function",
          "description": "Loads the next item for a given request",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the request"
            },
            {
              "name": "loaded",
              "type": "string",
              "description": "  the url that was just loaded, if any"
            }
          ]
        },
        "abort": {
          "guessedname": "abort",
          "static": "",
          "guessedtype": "function",
          "description": "Abort a transaction",
          "params": [
            {
              "name": "o",
              "type": "string|object",
              "description": "  Either the tId or the object returned from\nscript() or css()"
            }
          ]
        },
        "_finish": {
          "private": "",
          "guessedname": "_finish",
          "guessedtype": "function",
          "description": "The request is complete, so executing the requester's callback",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the request"
            }
          ]
        },
        "_autoPurge": {
          "guessedname": "_autoPurge",
          "private": "",
          "guessedtype": "function",
          "description": "Removes processed queues and corresponding nodes"
        },
        "_finalize": {
          "guessedname": "_finalize",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the transaction id"
            }
          ],
          "description": "Called by the the helper for detecting script load in Safari"
        }
      },
      "name": "Get",
      "guessedname": "Get",
      "module": "yui",
      "namespace": "",
      "static": "",
      "guessedtype": "function",
      "description": "Fetches and inserts one or more script or link nodes into the document",
      "file": "get.js",
      "properties": {
        "qidx": {
          "private": "",
          "guessedname": "qidx",
          "type": "int",
          "guessedtype": "property",
          "description": "queue index used to generate transaction ids"
        },
        "queues": {
          "guessedname": "queues",
          "private": "",
          "guessedtype": "property",
          "description": "hash of queues to manage multiple requests"
        },
        "PURGE_THRESH": {
          "guessedname": "PURGE_THRESH",
          "private": "",
          "default": "20",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The number of request required before an automatic purge.\nCan be configured via the 'purgethreshold' config\nproperty PURGE_THRESH"
        },
        "purging": {
          "private": "",
          "guessedname": "purging",
          "type": "boolean",
          "guessedtype": "property",
          "description": "interal property used to prevent multiple simultaneous purge \nprocesses"
        }
      }
    },
    "Test.Format.Mock": {
      "shortname": "Mock",
      "methods": {
        "expect": {
          "guessedname": "expect",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "mock",
              "type": "Object",
              "description": " The object to add the expectation to."
            },
            {
              "name": "expectation",
              "type": "Object",
              "description": " An object defining the expectation. For\na method, the keys \"method\" and \"args\" are required with\nan optional \"returns\" key available. For properties, the keys\n\"property\" and \"value\" are required."
            }
          ],
          "description": "Assigns an expectation to a mock object. This is used to create\nmethods and properties on the mock object that are monitored for\ncalls and changes, respectively.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "verify": {
          "guessedname": "verify",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "mock",
              "type": "Object",
              "description": " The object to verify.."
            }
          ],
          "description": "Verifies that all expectations of a mock object have been met and\nthrows an assertion error if not.",
          "return": {
            "type": "void",
            "description": ""
          }
        }
      },
      "name": "Test.Format.Mock",
      "guessedname": "Mock",
      "module": "test",
      "namespace": "Test.Format",
      "constructors": [
        {
          "description": "Creates a new mock object.",
          "params": [
            {
              "name": "template",
              "type": "Object",
              "description": " (Optional) An object whose methods\nshould be stubbed out on the mock object."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Creates a new mock object.",
      "file": "Mock.js"
    },
    "DD.DDM": {
      "name": "DD.DDM",
      "shortname": "DDM",
      "superclass": "Base",
      "methods": {
        "_regDrag": {
          "private": "",
          "guessedname": "_regDrag",
          "guessedtype": "function",
          "description": "Adds a reference to the drag object to the DDM._drags array, called in the constructor of Drag.",
          "params": [
            {
              "name": "d",
              "type": "Drag",
              "description": " The Drag object"
            }
          ]
        },
        "_createFrame": {
          "private": "",
          "guessedname": "_createFrame",
          "guessedtype": "function",
          "description": "Create the proxy element if it doesn't already exist and set the DD.DDM._proxy value"
        },
        "stopDrag": {
          "guessedname": "stopDrag",
          "chainable": "",
          "guessedtype": "function",
          "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "_pg_size": {
          "guessedname": "_pg_size",
          "private": "",
          "guessedtype": "function",
          "description": "Sizes the shim on: activatation, window:scroll, window:resize"
        },
        "getDrag": {
          "guessedname": "getDrag",
          "guessedtype": "function",
          "description": "Get a valid Drag instance back from a Node or a selector string, false otherwise",
          "params": [
            {
              "name": "node",
              "type": "String\/Object",
              "description": " The Node instance or Selector string to check for a valid Drag Object"
            }
          ],
          "return": {
            "type": "Object",
            "description": ""
          }
        },
        "_setFrame": {
          "private": "",
          "guessedname": "_setFrame",
          "guessedtype": "function",
          "description": "If resizeProxy is set to true (default) it will resize the proxy element to match the size of the Drag Element.\nIf positionProxy is set to true (default) it will position the proxy element in the same location as the Drag Element."
        },
        "clearCache": {
          "guessedname": "clearCache",
          "guessedtype": "function",
          "description": "Clears the cache data used for this interaction."
        },
        "_calcTickArray": {
          "guessedname": "_calcTickArray",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "pos",
              "type": "Number",
              "description": " The current X or Y position"
            },
            {
              "name": "ticks",
              "type": "Number",
              "description": " The array containing our custom tick positions."
            },
            {
              "name": "off1",
              "type": "Number",
              "description": " The min offset that we can't pass (region)"
            },
            {
              "name": "off2",
              "type": "Number",
              "description": " The max offset that we can't pass (region)"
            }
          ],
          "description": "This method is used with the tickXArray and tickYArray config options",
          "return": {
            "type": "",
            "description": "The tick position"
          }
        },
        "getBestMatch": {
          "guessedname": "getBestMatch",
          "guessedtype": "function",
          "description": "This method will gather the area for all potential targets and see which has the hightest covered area and return it.",
          "params": [
            {
              "name": "drops",
              "type": "Array",
              "description": " An Array of drops to scan for the best match."
            },
            {
              "name": "all",
              "type": "Boolean",
              "description": " If present, it returns an Array. First item is best match, second is an Array of the other items in the original Array."
            }
          ],
          "return": {
            "type": "Object or Array",
            "description": ""
          }
        },
        "_dropMove": {
          "guessedname": "_dropMove",
          "private": "",
          "guessedtype": "function",
          "description": "This method is called when the move method is called on the Drag Object."
        },
        "cssSizestoObject": {
          "guessedname": "cssSizestoObject",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "gutter",
              "type": "String",
              "description": " CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)"
            }
          ],
          "description": "\/\/TODO Private, rename??...",
          "return": {
            "type": "Object",
            "description": "The gutter Object Literal."
          }
        },
        "_handleTargetOver": {
          "guessedname": "_handleTargetOver",
          "private": "",
          "guessedtype": "function",
          "description": "This method execs _handleTargetOver on all valid Drop Targets"
        },
        "_setupListeners": {
          "guessedname": "_setupListeners",
          "private": "",
          "guessedtype": "function",
          "description": "Add the document listeners."
        },
        "_removeValid": {
          "guessedname": "_removeValid",
          "private": "",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "drop",
              "type": "Object",
              "description": ""
            }
          ],
          "description": "Removes a Drop Target from the list of Valid Targets. This list get's regenerated on each new drag operation.",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "syncActiveShims": {
          "guessedname": "syncActiveShims",
          "guessedtype": "function",
          "description": "This method will sync the position of the shims on the Drop Targets that are currently active.",
          "params": [
            {
              "name": "force",
              "type": "Boolean",
              "description": " Resize\/sync all Targets."
            }
          ]
        },
        "_start": {
          "guessedname": "_start",
          "private": "",
          "guessedtype": "function",
          "description": "Internal method used by Drag to signal the start of a drag operation"
        },
        "_setDragMode": {
          "guessedname": "_setDragMode",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "String\/Number",
              "type": "",
              "description": " The Number value or the String for the DragMode to default all future drag instances to."
            }
          ],
          "description": "Handler for dragMode attribute setter.",
          "return": {
            "type": "",
            "description": "Number The Mode to be set"
          }
        },
        "_calcTicks": {
          "guessedname": "_calcTicks",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "pos",
              "type": "Number",
              "description": " The current X or Y position"
            },
            {
              "name": "start",
              "type": "Number",
              "description": " The start X or Y position"
            },
            {
              "name": "tick",
              "type": "Number",
              "description": " The X or Y tick increment"
            },
            {
              "name": "off1",
              "type": "Number",
              "description": " The min offset that we can't pass (region)"
            },
            {
              "name": "off2",
              "type": "Number",
              "description": " The max offset that we can't pass (region)"
            }
          ],
          "description": "Helper method to calculate the tick offsets for a given position",
          "return": {
            "type": "Number",
            "description": "The new position based on the tick calculation"
          }
        },
        "_addValid": {
          "guessedname": "_addValid",
          "private": "",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "drop",
              "type": "Object",
              "description": ""
            }
          ],
          "description": "Add a Drop Target to the list of Valid Targets. This list get's regenerated on each new drag operation.",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "isOverTarget": {
          "guessedname": "isOverTarget",
          "guessedtype": "function",
          "description": "Check to see if the Drag element is over the target, method varies on current mode",
          "params": [
            {
              "name": "drop",
              "type": "Object",
              "description": " The drop to check against"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_deactivateTargets": {
          "guessedname": "_deactivateTargets",
          "private": "",
          "guessedtype": "function",
          "description": "This method fires the drop:hit, drag:drophit, drag:dropmiss methods and deactivates the shims.."
        },
        "_unregTarget": {
          "private": "",
          "guessedname": "_unregTarget",
          "guessedtype": "function",
          "description": "Remove the passed in Target from the targets collection",
          "params": [
            {
              "name": "drop",
              "type": "Object",
              "description": " The Target to remove from the targets collection"
            }
          ]
        },
        "_lookup": {
          "private": "",
          "guessedname": "_lookup",
          "guessedtype": "function",
          "description": "Filters the list of Drops down to those in the viewport.",
          "return": {
            "type": "Array",
            "description": "The valid Drop Targets that are in the viewport."
          }
        },
        "_addActiveShim": {
          "private": "",
          "guessedname": "_addActiveShim",
          "guessedtype": "function",
          "description": "Adds a Drop Target to the list of active shims",
          "params": [
            {
              "name": "d",
              "type": "Object",
              "description": " The Drop instance to add to the list."
            }
          ]
        },
        "_startDrag": {
          "private": "",
          "guessedname": "_startDrag",
          "guessedtype": "function",
          "description": "Factory method to be overwritten by other DDM's",
          "params": [
            {
              "name": "x",
              "type": "Number",
              "description": " The x position of the drag element"
            },
            {
              "name": "y",
              "type": "Number",
              "description": " The y position of the drag element"
            },
            {
              "name": "w",
              "type": "Number",
              "description": " The width of the drag element"
            },
            {
              "name": "h",
              "type": "Number",
              "description": " The height of the drag element"
            }
          ]
        },
        "_move": {
          "private": "",
          "guessedname": "_move",
          "guessedtype": "function",
          "description": "Internal listener for the mousemove DOM event to pass to the Drag's move method.",
          "params": [
            {
              "name": "ev",
              "type": "Event.Facade",
              "description": " The Dom mousemove Event"
            }
          ]
        },
        "_removeActiveShim": {
          "private": "",
          "guessedname": "_removeActiveShim",
          "guessedtype": "function",
          "description": "Removes a Drop Target to the list of active shims",
          "params": [
            {
              "name": "d",
              "type": "Object",
              "description": " The Drop instance to remove from the list."
            }
          ]
        },
        "_hasActiveShim": {
          "private": "",
          "guessedname": "_hasActiveShim",
          "guessedtype": "function",
          "description": "This method checks the _activeShims Object to see if there is a shim active.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_pg_deactivate": {
          "guessedname": "_pg_deactivate",
          "private": "",
          "guessedtype": "function",
          "description": "Deactivates the shim"
        },
        "_endDrag": {
          "guessedname": "_endDrag",
          "private": "",
          "guessedtype": "function",
          "description": "Factory method to be overwritten by other DDM's"
        },
        "_unregDrag": {
          "private": "",
          "guessedname": "_unregDrag",
          "guessedtype": "function",
          "description": "Remove this drag object from the DDM._drags array.",
          "params": [
            {
              "name": "d",
              "type": "Drag",
              "description": " The drag object."
            }
          ]
        },
        "getDrop": {
          "guessedname": "getDrop",
          "guessedtype": "function",
          "description": "Get a valid Drop instance back from a Node or a selector string, false otherwise",
          "params": [
            {
              "name": "node",
              "type": "String\/Object",
              "description": " The Node instance or Selector string to check for a valid Drop Object"
            }
          ],
          "return": {
            "type": "Object",
            "description": ""
          }
        },
        "_pg_activate": {
          "guessedname": "_pg_activate",
          "private": "",
          "guessedtype": "function",
          "description": "Activates the shim"
        },
        "_regTarget": {
          "private": "",
          "guessedname": "_regTarget",
          "guessedtype": "function",
          "description": "Add the passed in Target to the targets collection",
          "params": [
            {
              "name": "t",
              "type": "Object",
              "description": " The Target to add to the targets collection"
            }
          ]
        },
        "_end": {
          "guessedname": "_end",
          "private": "",
          "guessedtype": "function",
          "description": "Internal method used by Drag to signal the end of a drag operation"
        },
        "_activateTargets": {
          "guessedname": "_activateTargets",
          "private": "",
          "guessedtype": "function",
          "description": "Clear the cache and activate the shims of all the targets"
        },
        "_createPG": {
          "guessedname": "_createPG",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the shim and adds it's listeners to it."
        }
      },
      "extends": "Base",
      "guessedname": "DDMBase",
      "module": "dd",
      "namespace": "DD",
      "events": {
        "clickPixelThreshChange": {
          "name": "clickPixelThreshChange",
          "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "clickTimeThreshChange": {
          "name": "clickTimeThreshChange",
          "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "dragCursorChange": {
          "name": "dragCursorChange",
          "description": "Fires when the value for the configuration attribute 'dragCursor' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "ddm:end": {
          "type": "{Event.Custom}",
          "description": "Fires from the DDM after the DDM finishes, before the drag end events."
        },
        "dragModeChange": {
          "name": "dragModeChange",
          "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "ddm:start": {
          "type": "{Event.Custom}",
          "description": "Fires from the DDM before all drag events fire."
        }
      },
      "constructors": [
        {
          "description": "Provides the base Drag Drop Manger required for making a Node draggable."
        }
      ],
      "guessedtype": "function",
      "file": "ddm-base.js",
      "description": "Provides the base Drag Drop Manger required for making a Node draggable.",
      "configs": {
        "dragMode": {
          "guessedname": "dragMode",
          "type": "String",
          "guessedtype": "property",
          "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of all future Drag instances."
        },
        "clickPixelThresh": {
          "guessedname": "clickPixelThresh",
          "type": "Number",
          "guessedtype": "property",
          "description": "The number of pixels to move to start a drag operation, default is 3."
        },
        "clickTimeThresh": {
          "guessedname": "clickTimeThresh",
          "type": "Number",
          "guessedtype": "property",
          "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000."
        },
        "dragCursor": {
          "guessedname": "dragCursor",
          "type": "String",
          "guessedtype": "property",
          "description": "The cursor to apply when dragging, if shimmed the shim will get the cursor."
        }
      },
      "properties": {
        "STRICT": {
          "private": "",
          "guessedname": "STRICT",
          "type": "Number",
          "guessedtype": "property",
          "description": "In strict mode, a Drop is targeted by the \"entire\" drag node being over the Target"
        },
        "_pg": {
          "private": "",
          "guessedname": "_pg",
          "type": "{Node}",
          "guessedtype": "property",
          "description": "The shim placed over the screen to track the mousemove event."
        },
        "_activeShims": {
          "private": "",
          "guessedname": "_activeShims",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "Placeholder for all active shims on the page"
        },
        "_drags": {
          "private": "",
          "guessedname": "_drags",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "Holder for all registered drag elements."
        },
        "mode": {
          "private": "",
          "guessedname": "mode",
          "type": "Number",
          "guessedtype": "property",
          "description": "The mode that the drag operations will run in 0 for Point, 1 for Intersect, 2 for Strict"
        },
        "useHash": {
          "guessedname": "useHash",
          "type": "{Boolean}",
          "guessedtype": "property",
          "description": "Should we only check targets that are in the viewport on drags (for performance), default: true"
        },
        "targets": {
          "guessedname": "targets",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "All of the Targets"
        },
        "_debugShim": {
          "private": "",
          "guessedname": "_debugShim",
          "type": "{Boolean}",
          "guessedtype": "property",
          "description": "Set this to true to set the shims opacity to .5 for debugging it, default: false."
        },
        "activeDrag": {
          "guessedname": "activeDrag",
          "type": "{Drag}",
          "guessedtype": "property",
          "description": "A reference to the currently active draggable object."
        },
        "CSS_PREFIX": {
          "guessedname": "CSS_PREFIX",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The PREFIX to attach to all DD CSS class names"
        },
        "_noShim": {
          "private": "",
          "guessedname": "_noShim",
          "type": "{Boolean}",
          "guessedtype": "property",
          "description": "This flag turns off the use of the mouseover\/mouseout shim. It should not be used unless you know what you are doing."
        },
        "POINT": {
          "private": "",
          "guessedname": "POINT",
          "type": "Number",
          "guessedtype": "property",
          "description": "In point mode, a Drop is targeted by the cursor being over the Target"
        },
        "_active": {
          "guessedname": "_active",
          "type": "{Boolean}",
          "guessedtype": "property",
          "description": "flag set when we activate our first drag, so DDM can start listening for events."
        },
        "validDrops": {
          "type": "{Array}",
          "description": "An array of the valid Drop Targets for this interaction."
        },
        "INTERSECT": {
          "private": "",
          "guessedname": "INTERSECT",
          "type": "Number",
          "guessedtype": "property",
          "description": "In intersect mode, a Drop is targeted by \"part\" of the drag node being over the Target"
        },
        "otherDrops": {
          "guessedname": "otherDrops",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "An object literal of Other Drop Targets that we encountered during this interaction (in the case of overlapping Drop Targets)"
        },
        "activeDrop": {
          "guessedname": "activeDrop",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "A reference to the active Drop Target"
        }
      }
    },
    "YUI~substitute": {
      "shortname": "YUI~substitute",
      "methods": {
        "substitute": {
          "guessedname": "substitute",
          "guessedtype": "function",
          "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key\/value\npairs if Y.dump is available (if dump isn't available, toString()\nis used).\nThis method is included in the 'substitute' module.  It is not included\nin the YUI module.",
          "params": [
            {
              "name": "s",
              "type": "string",
              "description": "  The string that will be modified."
            },
            {
              "name": "o",
              "type": "",
              "description": " An object containing the replacement values"
            },
            {
              "name": "f",
              "type": "function",
              "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."
            }
          ],
          "return": {
            "type": "string",
            "description": "the substituted string"
          }
        }
      },
      "name": "YUI~substitute",
      "module": "substitute",
      "namespace": "",
      "description": "The following methods are added to the YUI instance",
      "file": "substitute.js"
    },
    "Do.Halt": {
      "shortname": "Do.Halt",
      "name": "Do.Halt",
      "guessedname": "Halt",
      "module": "event-custom",
      "namespace": "",
      "guessedtype": "function",
      "description": "Return a Halt object when you want to terminate the execution\nof all subsequent subscribers as well as the wrapped method\nif it has not exectued yet.",
      "file": "event-do.js"
    },
    "DD.Drag": {
      "shortname": "Drag",
      "superclass": "Base",
      "methods": {
        "addInvalid": {
          "guessedname": "addInvalid",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": " The selector to test against to determine if this is an invalid drag handle."
            }
          ],
          "description": "Add a selector string to test the handle against. If the test passes the drag operation will not continue.",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "stopDrag": {
          "guessedname": "stopDrag",
          "chainable": "",
          "guessedtype": "function",
          "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "_alignNode": {
          "private": "",
          "guessedname": "_alignNode",
          "guessedtype": "function",
          "description": "This method performs the alignment before the element move.",
          "params": [
            {
              "name": "eXY",
              "type": "Array",
              "description": " The XY to move the element to, usually comes from the mousemove DOM event."
            }
          ]
        },
        "removeHandle": {
          "guessedname": "removeHandle",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": " The selector for the handle to be removed."
            }
          ],
          "description": "Remove a Selector added by addHandle",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "_defMouseDownFn": {
          "private": "",
          "guessedname": "_defMouseDownFn",
          "guessedtype": "function",
          "description": "Handler for the mousedown DOM event",
          "params": [

          ]
        },
        "_createEvents": {
          "guessedname": "_createEvents",
          "private": "",
          "guessedtype": "function",
          "description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling."
        },
        "_handleMouseDownEvent": {
          "private": "",
          "guessedname": "_handleMouseDownEvent",
          "guessedtype": "function",
          "description": "Handler for the mousedown DOM event",
          "params": [

          ]
        },
        "validClick": {
          "guessedname": "validClick",
          "guessedtype": "function",
          "description": "Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.",
          "params": [

          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "addToGroup": {
          "guessedname": "addToGroup",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "g",
              "type": "String",
              "description": " The group to add this Drag Instance to."
            }
          ],
          "description": "Add this Drag instance to a group, this should be used for on-the-fly group additions.",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "addHandle": {
          "guessedname": "addHandle",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": " The selector to test for a valid handle. Must be a child of the element."
            }
          ],
          "description": "Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "_fixDragStart": {
          "guessedname": "_fixDragStart",
          "private": "",
          "guessedtype": "function",
          "description": "The function we use as the ondragstart handler when we start a drag in Internet Explorer. This keeps IE from blowing up on images as drag handles."
        },
        "_handleMouseUp": {
          "private": "",
          "guessedname": "_handleMouseUp",
          "guessedtype": "function",
          "description": "Handler for the mouseup DOM event",
          "params": [

          ]
        },
        "_prep": {
          "guessedname": "_prep",
          "private": "",
          "guessedtype": "function",
          "description": "Attach event listners and add classname"
        },
        "_fixIEMouseUp": {
          "guessedname": "_fixIEMouseUp",
          "private": "",
          "guessedtype": "function",
          "description": "This method copies the _ieSelectFix property back to the onselectstart listner on the document."
        },
        "end": {
          "guessedname": "end",
          "chainable": "",
          "guessedtype": "function",
          "description": "Ends the drag operation",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "_move": {
          "private": "",
          "guessedname": "_move",
          "guessedtype": "function",
          "description": "Fired from DragDropMgr (DDM) on mousemove.",
          "params": [
            {
              "name": "ev",
              "type": "Event.Facade",
              "description": " The mousemove DOM event"
            }
          ]
        },
        "_handleTarget": {
          "guessedname": "_handleTarget",
          "private": "",
          "guessedtype": "function",
          "params": [

          ],
          "description": "Attribute handler for the target config attribute.",
          "return": {
            "type": "Boolean\/Object",
            "description": ""
          }
        },
        "_timeoutCheck": {
          "guessedname": "_timeoutCheck",
          "private": "",
          "guessedtype": "function",
          "description": "The method passed to setTimeout to determine if the clickTimeThreshold was met."
        },
        "start": {
          "guessedname": "start",
          "chainable": "",
          "guessedtype": "function",
          "description": "Starts the drag operation",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "initializer": {
          "guessedname": "initializer",
          "private": "",
          "guessedtype": "function",
          "description": "Internal init handler"
        },
        "_defDragFn": {
          "private": "",
          "guessedname": "_defDragFn",
          "guessedtype": "function",
          "description": "Default function for drag:drag. Fired from _moveNode.",
          "params": [
            {
              "name": "ev",
              "type": "Event.Facade",
              "description": " The drag:drag event"
            }
          ]
        },
        "_unprep": {
          "guessedname": "_unprep",
          "private": "",
          "guessedtype": "function",
          "description": "Detach event listeners and remove classname"
        },
        "_defAlignFn": {
          "private": "",
          "guessedname": "_defAlignFn",
          "guessedtype": "function",
          "description": "Calculates the offsets and set's the XY that the element will move to.",
          "params": [
            {
              "name": "e",
              "type": "Event.Facade",
              "description": " The drag:align event."
            }
          ]
        },
        "destructor": {
          "guessedname": "destructor",
          "private": "",
          "guessedtype": "function",
          "description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners"
        },
        "_moveNode": {
          "guessedname": "_moveNode",
          "private": "",
          "guessedtype": "function",
          "description": "This method performs the actual element move."
        },
        "removeFromGroup": {
          "guessedname": "removeFromGroup",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "g",
              "type": "String",
              "description": " The group to remove this Drag Instance from."
            }
          ],
          "description": "Remove this Drag instance from a group, this should be used for on-the-fly group removals.",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "removeInvalid": {
          "guessedname": "removeInvalid",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": " The invalid handle to remove from the internal list."
            }
          ],
          "description": "Remove an invalid handle added by addInvalid",
          "return": {
            "type": "Self",
            "description": ""
          }
        },
        "_fixIEMouseDown": {
          "guessedname": "_fixIEMouseDown",
          "private": "",
          "guessedtype": "function",
          "description": "This method copies the onselectstart listner on the document to the _ieSelectFix property"
        },
        "_align": {
          "private": "",
          "guessedname": "_align",
          "guessedtype": "function",
          "description": "Calculates the offsets and set's the XY that the element will move to.",
          "params": [
            {
              "name": "xy",
              "type": "Array",
              "description": " The xy coords to align with."
            }
          ]
        },
        "_prevEndFn": {
          "guessedname": "_prevEndFn",
          "private": "",
          "guessedtype": "function",
          "description": "Handler for preventing the drag:end event. It will reset the node back to it's start position"
        },
        "_ieSelectFix": {
          "guessedname": "_ieSelectFix",
          "private": "",
          "guessedtype": "function",
          "description": "The function we use as the onselectstart handler when we start a drag in Internet Explorer"
        },
        "_setStartPosition": {
          "private": "",
          "guessedname": "_setStartPosition",
          "guessedtype": "function",
          "description": "Sets the current position of the Element and calculates the offset",
          "params": [
            {
              "name": "xy",
              "type": "Array",
              "description": " The XY coords to set the position to."
            }
          ]
        }
      },
      "name": "DD.Drag",
      "extends": "Base",
      "guessedname": "DDM",
      "module": "dd",
      "namespace": "DD",
      "events": {
        "draggingChange": {
          "name": "draggingChange",
          "description": "Fires when the value for the configuration attribute 'dragging' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drag:end": {
          "guessedname": "EV_END",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires at the end of a drag operation."
        },
        "drag:mouseDown": {
          "preventable": "_defMouseDownFn",
          "guessedname": "EV_MOUSE_DOWN",
          "type": "{Event.Custom}",
          "bubbles": "DDM",
          "guessedtype": "property",
          "params": [
            {
              "name": "ev",
              "type": "Event.Facade",
              "description": " The mousedown event."
            }
          ],
          "description": "Handles the mousedown DOM event, checks to see if you have a valid handle then starts the drag timers."
        },
        "clickPixelThreshChange": {
          "name": "clickPixelThreshChange",
          "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drag:align": {
          "preventable": "_defAlignFn",
          "guessedname": "EV_ALIGN",
          "type": "{Event.Custom}",
          "bubbles": "DDM",
          "guessedtype": "property",
          "description": "Fires when this node is aligned."
        },
        "targetChange": {
          "name": "targetChange",
          "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "clickTimeThreshChange": {
          "name": "clickTimeThreshChange",
          "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "bubblesChange": {
          "name": "bubblesChange",
          "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drag:exit": {
          "type": "{Event.Custom}",
          "bubbles": "DDM",
          "description": "Fires when this node exits a Drop Target. (Fired from dd-drop)"
        },
        "drag:removeInvalid": {
          "guessedname": "EV_REMOVE_INVALID",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires after an invalid selector is removed."
        },
        "groupsChange": {
          "name": "groupsChange",
          "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "moveChange": {
          "name": "moveChange",
          "description": "Fires when the value for the configuration attribute 'move' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "lockChange": {
          "name": "lockChange",
          "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drag:addHandle": {
          "guessedname": "EV_ADD_HANDLE",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires after a handle is added."
        },
        "drag:dropmiss": {
          "guessedname": "Drag",
          "type": "{Event.Custom}",
          "guessedtype": "function",
          "bubbles": "DDM",
          "description": "Fires when this node is dropped on an invalid Drop Target. (Fired from dd-ddm-drop)"
        },
        "dragNodeChange": {
          "name": "dragNodeChange",
          "description": "Fires when the value for the configuration attribute 'dragNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drag:start": {
          "guessedname": "EV_START",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires at the start of a drag operation."
        },
        "dataChange": {
          "name": "dataChange",
          "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "nodeChange": {
          "name": "nodeChange",
          "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "useShimChange": {
          "name": "useShimChange",
          "description": "Fires when the value for the configuration attribute 'useShim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drag:removeHandle": {
          "guessedname": "EV_REMOVE_HANDLE",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires after a handle is removed."
        },
        "primaryButtonOnlyChange": {
          "name": "primaryButtonOnlyChange",
          "description": "Fires when the value for the configuration attribute 'primaryButtonOnly' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "handlesChange": {
          "name": "handlesChange",
          "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drag:over": {
          "type": "{Event.Custom}",
          "bubbles": "DDM",
          "description": "Fires when this node is over a Drop Target. (Fired from dd-drop)"
        },
        "drag:drag": {
          "guessedname": "EV_DRAG",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires every mousemove during a drag operation."
        },
        "drag:addInvalid": {
          "guessedname": "EV_ADD_INVALID",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires after an invalid selector is added."
        },
        "activeHandleChange": {
          "name": "activeHandleChange",
          "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drag:enter": {
          "type": "{Event.Custom}",
          "bubbles": "DDM",
          "description": "Fires when this node enters a Drop Target. (Fired from dd-drop)"
        },
        "dragModeChange": {
          "name": "dragModeChange",
          "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "offsetNodeChange": {
          "name": "offsetNodeChange",
          "description": "Fires when the value for the configuration attribute 'offsetNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drag:drophit": {
          "type": "{Event.Custom}",
          "bubbles": "DDM",
          "description": "Fires when this node is dropped on a valid Drop Target. (Fired from dd-ddm-drop)"
        },
        "drag:afterMouseDown": {
          "guessedname": "EV_AFTER_MOUSE_DOWN",
          "type": "{Event.Custom}",
          "bubbles": "DDM",
          "guessedtype": "property",
          "params": [
            {
              "name": "ev",
              "type": "Event.Facade",
              "description": " The mousedown event."
            }
          ],
          "description": "Fires after the mousedown event has been cleared."
        }
      },
      "constructors": [
        {
          "description": "This class provides the ability to drag a Node."
        }
      ],
      "guessedtype": "property",
      "description": "This class provides the ability to drag a Node.",
      "file": "drag.js",
      "configs": {
        "groups": {
          "guessedname": "groups",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of groups to add this drag into."
        },
        "dragNode": {
          "guessedname": "dragNode",
          "type": "Node",
          "guessedtype": "property",
          "description": "Y.Node instanace to use as the draggable element, defaults to node"
        },
        "data": {
          "guessedname": "data",
          "type": "Mixed",
          "guessedtype": "property",
          "description": "A payload holder to store arbitrary data about this drag object, can be used to store any value."
        },
        "dragMode": {
          "guessedname": "dragMode",
          "type": "String",
          "guessedtype": "property",
          "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of this Drag instance."
        },
        "node": {
          "guessedname": "node",
          "type": "Node",
          "guessedtype": "property",
          "description": "Y.Node instanace to use as the element to initiate a drag operation"
        },
        "primaryButtonOnly": {
          "guessedname": "primaryButtonOnly",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "By default a drag operation will only begin if the mousedown occurred with the primary mouse button. Setting this to false will allow for all mousedown events to trigger a drag."
        },
        "useShim": {
          "guessedname": "useShim",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Use the protective shim on all drag operations: default true. Only works with dd-ddm, not dd-ddm-base."
        },
        "handles": {
          "guessedname": "handles",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of valid handles to add. Adding something here will set all handles, even if previously added with addHandle"
        },
        "lock": {
          "guessedname": "lock",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Set to lock this drag element so that it can't be dragged: default false."
        },
        "activeHandle": {
          "guessedname": "activeHandle",
          "type": "Node",
          "guessedtype": "property",
          "description": "This config option is set by Drag to inform you of which handle fired the drag event (in the case that there are several handles): default false."
        },
        "dragging": {
          "guessedname": "dragging",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "This attribute is not meant to be used by the implementor, it is meant to be used as an Event tracker so you can listen for it to change."
        },
        "clickPixelThresh": {
          "guessedname": "clickPixelThresh",
          "type": "Number",
          "guessedtype": "property",
          "description": "The number of pixels to move to start a drag operation, default is 3."
        },
        "move": {
          "guessedname": "move",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If this is false, the drag element will not move with the cursor: default true. Can be used to \"resize\" the element."
        },
        "bubbles": {
          "guessedname": "bubbles",
          "type": "Object",
          "guessedtype": "property",
          "description": "Controls the default bubble parent for this Drag instance. Default: Y.DD.DDM. Set to false to disable bubbling."
        },
        "target": {
          "guessedname": "target",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "This attribute only works if the dd-drop module has been loaded. It will make this node a drop target as well as draggable."
        },
        "clickTimeThresh": {
          "guessedname": "clickTimeThresh",
          "type": "Number",
          "guessedtype": "property",
          "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000."
        },
        "offsetNode": {
          "guessedname": "offsetNode",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Offset the drag element by the difference in cursor position: default true"
        }
      },
      "properties": {
        "region": {
          "guessedname": "region",
          "type": "Object",
          "guessedtype": "property",
          "description": "A region object associated with this drag, used for checking regions while dragging."
        },
        "_endTime": {
          "private": "",
          "guessedname": "_endTime",
          "type": "Date",
          "guessedtype": "property",
          "description": "The getTime of the mouseup event. Not used, just here in case someone wants\/needs to use it."
        },
        "lastXY": {
          "guessedname": "lastXY",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "The position of the element as it's moving (for offset calculations)"
        },
        "actXY": {
          "guessedname": "actXY",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "The xy that the node will be set to. Changing this will alter the position as it's dragged."
        },
        "realXY": {
          "guessedname": "realXY",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "The real xy position of the node."
        },
        "_fromTimeout": {
          "private": "",
          "guessedname": "_fromTimeout",
          "type": "{Boolean}",
          "guessedtype": "property",
          "description": "Flag to determine if the drag operation came from a timeout"
        },
        "_dragThreshMet": {
          "private": "",
          "guessedname": "_dragThreshMet",
          "type": "{Boolean}",
          "guessedtype": "property",
          "description": "Private flag to see if the drag threshhold was met"
        },
        "_clickTimeout": {
          "private": "",
          "guessedname": "_clickTimeout",
          "type": "{Boolean}",
          "guessedtype": "property",
          "description": "Holder for the setTimeout call"
        },
        "deltaXY": {
          "guessedname": "deltaXY",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "The offset of the mouse position to the element's position"
        },
        "nodeXY": {
          "guessedname": "nodeXY",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "The initial element position"
        },
        "_invalids": {
          "private": "",
          "guessedname": "_invalids",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "A private hash of the invalid selector strings"
        },
        "startXY": {
          "guessedname": "startXY",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "The initial mouse position"
        },
        "_invalidsDefault": {
          "private": "",
          "guessedname": "_invalidsDefault",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "A private hash of the default invalid selector strings: {'textarea': true, 'input': true, 'a': true, 'button': true, 'select': true}"
        },
        "target": {
          "guessedname": "target",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "This will be a reference to the Drop instance associated with this drag if the target: true config attribute is set.."
        },
        "_ev_md": {
          "private": "",
          "guessedname": "_ev_md",
          "type": "{Event.Facade}",
          "guessedtype": "property",
          "description": "A private reference to the mousedown DOM event"
        },
        "_groups": {
          "private": "",
          "guessedname": "_groups",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "Storage Array for the groups this drag belongs to."
        },
        "_startTime": {
          "private": "",
          "guessedname": "_startTime",
          "type": "Date",
          "guessedtype": "property",
          "description": "The getTime of the mousedown event. Not used, just here in case someone wants\/needs to use it."
        },
        "_ieSelectBack": {
          "guessedname": "_ieSelectBack",
          "private": "",
          "guessedtype": "property",
          "description": "We will hold a copy of the current \"onselectstart\" method on this property, and reset it after we are done using it."
        },
        "mouseXY": {
          "guessedname": "mouseXY",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "The XY coords of the mousemove"
        },
        "_handles": {
          "private": "",
          "guessedname": "_handles",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "A private hash of the valid drag handles"
        }
      }
    },
    "YUI": {
      "shortname": "YUI",
      "methods": {
        "applyTo": {
          "guessedname": "applyTo",
          "guessedtype": "function",
          "description": "Executes a method on a YUI instance with\nthe specified id if the specified method is whitelisted.",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the YUI instance id"
            },
            {
              "name": "method",
              "type": "string",
              "description": "  the name of the method to exectute.\nEx: 'Object.keys'"
            },
            {
              "name": "args",
              "type": "Array",
              "description": "  the arguments to apply to the method"
            }
          ],
          "return": {
            "type": "object",
            "description": "the return value from the applied method or null"
          }
        },
        "merge": {
          "guessedname": "merge",
          "guessedtype": "function",
          "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.  Passing in a\nsingle object will create a shallow copy of it.  For a deep\ncopy, use clone.",
          "params": [
            {
              "name": "arguments",
              "type": "Object*",
              "description": "  the objects to merge"
            }
          ],
          "return": {
            "type": "object",
            "description": "the new merged object"
          }
        },
        "add": {
          "guessedname": "add",
          "guessedtype": "function",
          "description": "Register a module",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "  module name"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  entry point into the module that\nis used to bind module to the YUI instance"
            },
            {
              "name": "version",
              "type": "string",
              "description": "  version string"
            },
            {
              "name": "details",
              "type": "",
              "description": " optional config data: \nrequires   - features that should be present before loading\noptional   - optional features that should be present if load optional defined\nuse  - features that should be attached automatically\nskinnable  -\nrollup\nomit - features that should not be loaded if this module is present"
            }
          ],
          "return": {
            "type": "YUI",
            "description": "the YUI instance"
          }
        },
        "guid": {
          "guessedname": "guid",
          "guessedtype": "function",
          "description": "Generate an id that is unique among all YUI instances",
          "params": [
            {
              "name": "pre",
              "type": "string",
              "description": "  optional guid prefix"
            }
          ],
          "return": {
            "type": "string",
            "description": "the guid"
          }
        },
        "namespace": {
          "guessedname": "namespace",
          "guessedtype": "function",
          "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYUI.namespace(\"property.package\");\nYUI.namespace(\"YAHOO.property.package\");\n<\/pre>\nEither of the above would create YUI.property, then\nYUI.property.package (YAHOO is scrubbed out, this is\nto remain compatible with YUI2)\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYUI.namespace(\"really.long.nested.namespace\");\n<\/pre>\nThis fails because \"long\" is a future reserved word in ECMAScript",
          "params": [
            {
              "name": "arguments",
              "type": "string*",
              "description": " 1-n namespaces to create"
            }
          ],
          "return": {
            "type": "object",
            "description": "A reference to the last namespace object created"
          }
        },
        "Node.plug": {
          "guessedname": "plug",
          "static": "",
          "guessedtype": "function",
          "description": "Registers plugins to be instantiated at the class level (plugins \nwhich should be plugged into every instance of Node by default).",
          "params": [
            {
              "name": "plugin",
              "type": "Function | Array",
              "description": " Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)"
            },
            {
              "name": "config",
              "type": "Object",
              "description": " (Optional) If plugin is the plugin class, the configuration for the plugin"
            }
          ]
        },
        "log": {
          "guessedname": "log",
          "guessedtype": "function",
          "description": "If the 'debug' config is true, a 'yui:log' event will be\ndispatched, which the Console widget and anything else\ncan consume.  If the 'useBrowserConsole' config is true, it will\nwrite to the browser console if available.  YUI-specific log\nmessages will only be present in the -debug versions of the\nJS files.  The build system is supposed to remove log statements\nfrom the raw and minified versions of the files.",
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "  The message to log."
            },
            {
              "name": "cat",
              "type": "String",
              "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"
            },
            {
              "name": "src",
              "type": "String",
              "description": "  The source of the the message (opt)"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": " If true, the log event won't fire"
            }
          ],
          "return": {
            "type": "YUI",
            "description": "YUI instance"
          }
        },
        "simulate": {
          "guessedname": "simulate",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The DOM element that's the target of the event."
            },
            {
              "name": "type",
              "type": "String",
              "description": " The type of event to simulate (i.e., \"click\")."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) Extra options to copy onto the event object."
            }
          ],
          "description": "Simulates the event with the given name on a target.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "mix": {
          "guessedname": "mix",
          "guessedtype": "function",
          "todo": "add constants for the modes",
          "params": [
            {
              "name": "r",
              "type": "Function",
              "description": "  the object to receive the augmentation"
            },
            {
              "name": "s",
              "type": "Function",
              "description": "  the object that supplies the properties to augment"
            },
            {
              "name": "ov",
              "type": "boolean",
              "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."
            },
            {
              "name": "wl",
              "type": "string[]",
              "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."
            },
            {
              "name": "mode",
              "type": "int",
              "description": " what should be copies, and to where\ndefault(0): object to object\n1: prototype to prototype (old augment)\n2: prototype to prototype and object props (new augment)\n3: prototype to object\n4: object to prototype"
            },
            {
              "name": "merge",
              "type": "boolean",
              "description": "  merge objects instead of overwriting\/ignoring\nUsed by Y.aggregate"
            }
          ],
          "description": "Applies the supplier's properties to the receiver.  By default\nall prototype and static propertes on the supplier are applied\nto the corresponding spot on the receiver.  By default all\nproperties are applied, and a property that is already on the\nreciever will not be overwritten.  The default behavior can\nbe modified by supplying the appropriate parameters.",
          "return": {
            "type": "object",
            "description": "the augmented object"
          }
        },
        "delegate": {
          "guessedname": "delegate",
          "guessedtype": "function",
          "description": "Sets up event delegation on a container element.  The delegated event\nwill use a supplied selector to test if the target or one of the\ndescendants of the target match it.  The supplied callback function \nwill only be executed if a match was encountered, and, in fact, \nwill be executed for each element that matches if you supply an \nambiguous selector.\nThe event object for the delegated event is supplied to the callback\nfunction.  It is modified slightly in order to support all properties\nthat may be needed for event delegation.  'currentTarget' is set to\nthe element that matched the delegation specifcation.  'container' is\nset to the element that the listener is bound to (this normally would\nbe the 'currentTarget').",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the event type to delegate"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  the callback function to execute.  This function\nwill be provided the event object for the delegated event."
            },
            {
              "name": "el",
              "type": "string|node",
              "description": "  the element that is the delegation container"
            },
            {
              "name": "spec",
              "type": "string",
              "description": "  a selector that must match the target of the\nevent."
            },
            {
              "name": "context",
              "type": "",
              "description": " optional argument that specifies what 'this' refers to."
            },
            {
              "name": "args*",
              "type": "",
              "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."
            }
          ],
          "return": {
            "type": "EventHandle",
            "description": "the detach handle"
          }
        },
        "stamp": {
          "guessedname": "stamp",
          "guessedtype": "function",
          "description": "Returns a guid associated with an object.  If the object\ndoes not have one, a new one is created unless readOnly\nis specified.",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to stamp"
            },
            {
              "name": "readOnly",
              "type": "boolean",
              "description": "  if true, a valid guid will only\nbe returned if the object has one assigned to it."
            }
          ],
          "return": {
            "type": "string",
            "description": "The object's guid or null"
          }
        },
        "later": {
          "guessedname": "later",
          "guessedtype": "function",
          "description": "Executes the supplied function in the context of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.",
          "params": [
            {
              "name": "when",
              "type": "int",
              "description": "  the number of milliseconds to wait until the fn \nis executed."
            },
            {
              "name": "o",
              "type": "",
              "description": " the context object."
            },
            {
              "name": "fn",
              "type": "Function|String",
              "description": "  the function to execute or the name of \nthe method in the 'o' object to execute."
            },
            {
              "name": "data",
              "type": "",
              "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]."
            },
            {
              "name": "periodic",
              "type": "boolean",
              "description": "  if true, executes continuously at supplied \ninterval until canceled."
            }
          ],
          "return": {
            "type": "object",
            "description": "a timer object. Call the cancel() method on this object to \nstop the timer."
          }
        },
        "use": {
          "guessedname": "use",
          "guessedtype": "function",
          "todo": "Implement versioning?  loader can load different versions?\nShould sub-modules\/plugins be normal modules, or do\nwe add syntax for specifying these?\nYUI().use('dragdrop')\nYUI().use('dragdrop:2.4.0'); \/\/ specific version\nYUI().use('dragdrop:2.4.0-'); \/\/ at least this version\nYUI().use('dragdrop:2.4.0-2.9999.9999'); \/\/ version range\nYUI().use('*'); \/\/ use all available modules\nYUI().use('lang+dump+substitute'); \/\/ use lang and some plugins\nYUI().use('lang+*'); \/\/ use lang and all known plugins",
          "params": [
            {
              "name": "modules*",
              "type": "string",
              "description": "  1-n modules to bind (uses arguments array)"
            },
            {
              "name": "*callback",
              "type": "function",
              "description": "  callback function executed when \nthe instance has the required functionality.  If included, it\nmust be the last parameter."
            }
          ],
          "description": "Bind a module to a YUI instance",
          "return": {
            "type": "YUI",
            "description": "the YUI instance"
          }
        },
        "cached": {
          "guessedname": "cached",
          "function": "cached",
          "guessedtype": "function",
          "params": [
            {
              "name": "source",
              "type": "function",
              "description": "  the function to memoize"
            },
            {
              "name": "cache",
              "type": "",
              "description": " an optional cache seed"
            },
            {
              "name": "refetch",
              "type": "",
              "description": " if supplied, this value is tested against the cached\nvalue.  If the values are equal, the wrapped function is executed again."
            }
          ],
          "description": "Returns a wrapper for a function which caches the\nreturn value of that function, keyed off of the combined \nargument values.",
          "return": {
            "type": "Function",
            "description": "the wrapped function"
          }
        },
        "message": {
          "guessedname": "message",
          "guessedtype": "function",
          "description": "Write a system message.  This message will be preserved in the\nminified and raw versions of the YUI files, unlike log statements.",
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "  The message to log."
            },
            {
              "name": "cat",
              "type": "String",
              "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"
            },
            {
              "name": "src",
              "type": "String",
              "description": "  The source of the the message (opt)"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": " If true, the log event won't fire"
            }
          ],
          "return": {
            "type": "YUI",
            "description": "YUI instance"
          }
        },
        "_init": {
          "guessedname": "_init",
          "private": "",
          "guessedtype": "function",
          "description": "Initialize this YUI instance"
        },
        "error": {
          "guessedname": "error",
          "guessedtype": "function",
          "description": "Report an error.  The reporting mechanism is controled by\nthe 'throwFail' configuration attribute.  If throwFail is\nnot specified, the message is written to the Logger, otherwise\na JS error is thrown",
          "params": [
            {
              "name": "msg",
              "type": "string",
              "description": "  the error message"
            },
            {
              "name": "e",
              "type": "Error",
              "description": "  Optional JS error that was caught.  If supplied\nand throwFail is specified, this error will be re-thrown."
            }
          ],
          "return": {
            "type": "YUI",
            "description": "this YUI instance"
          }
        },
        "Node.unplug": {
          "guessedname": "unplug",
          "static": "",
          "guessedtype": "function",
          "description": "Unregisters any class level plugins which have been registered by the Node",
          "params": [
            {
              "name": "plugin",
              "type": "Function | Array",
              "description": " The plugin class, or an array of plugin classes"
            }
          ]
        },
        "_setup": {
          "guessedname": "_setup",
          "private": "",
          "guessedtype": "function",
          "description": "Finishes the instance setup. Attaches whatever modules were defined\nwhen the yui modules was registered."
        }
      },
      "name": "YUI",
      "module": "yui",
      "namespace": "",
      "events": {
        "mousewheel": {
          "guessedname": "mousewheel",
          "guessedtype": "property",
          "description": "Mousewheel event.  This listener is automatically attached to the\ncorrect target, so one should not be supplied.  Mouse wheel \ndirection and velocity is stored in the 'mouseDelta' field.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  'mousewheel'"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  the callback to execute"
            },
            {
              "name": "context",
              "type": "",
              "description": " optional context object"
            },
            {
              "name": "args",
              "type": "",
              "description": " 0..n additional arguments to provide to the listener."
            }
          ],
          "return": "{EventHandle} the detach handle"
        },
        "contentready": {
          "guessedname": "contentready",
          "guessedtype": "property",
          "description": "Executes the callback as soon as the specified element \nis detected in the DOM with a nextSibling property\n(indicating that the element's children are available)",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  'contentready'"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  the callback function to execute."
            },
            {
              "name": "el",
              "type": "string|HTMLElement|collection",
              "description": "  the element(s) to attach"
            },
            {
              "name": "context",
              "type": "",
              "description": " optional argument that specifies what 'this' refers to."
            },
            {
              "name": "args*",
              "type": "",
              "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."
            }
          ],
          "return": "{EventHandle} the detach handle"
        },
        "available": {
          "guessedname": "available",
          "guessedtype": "property",
          "description": "Executes the callback as soon as the specified element \nis detected in the DOM.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  'available'"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  the callback function to execute."
            },
            {
              "name": "el",
              "type": "string|HTMLElement|collection",
              "description": "  the element(s) to attach"
            },
            {
              "name": "context",
              "type": "",
              "description": " optional argument that specifies what 'this' refers to."
            },
            {
              "name": "args*",
              "type": "",
              "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."
            }
          ],
          "return": "{EventHandle} the detach handle"
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "property",
          "description": "Adds a DOM focus listener.  Uses the focusin event in IE,\nand the capture phase otherwise so that\nthe event propagates in a way that enables event delegation.\nNote: if you are registering this event on the intended target\nrather than an ancestor, the element must be in the DOM in\norder for it to work in Opera.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  'focus'"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  the callback function to execute"
            },
            {
              "name": "o",
              "type": "string|HTMLElement|collection",
              "description": "  the element(s) to bind"
            },
            {
              "name": "context",
              "type": "",
              "description": " optional context object"
            },
            {
              "name": "args",
              "type": "",
              "description": " 0..n additional arguments to provide to the listener."
            }
          ],
          "return": "{EventHandle} the detach handle"
        },
        "blur": {
          "guessedname": "blur",
          "guessedtype": "property",
          "description": "Adds a DOM blur listener.  Uses the focusout event in IE,\nand the capture phase otherwise so that\nthe event propagates in a way that enables event delegation.\nNote: if you are registering this event on the intended target\nrather than an ancestor, the element must be in the DOM \nat the time of registration in order for it to work in Opera.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  'focus'"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  the callback function to execute"
            },
            {
              "name": "o",
              "type": "string|HTMLElement|collection",
              "description": "  the element(s) to bind"
            },
            {
              "name": "context",
              "type": "",
              "description": " optional context object"
            },
            {
              "name": "args",
              "type": "",
              "description": " 0..n additional arguments to provide to the listener."
            }
          ],
          "return": "{EventHandle} the detach handle"
        },
        "delegate": {
          "guessedname": "delegate",
          "guessedtype": "property",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  'delegate'"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  the callback function to execute.  This function\nwill be provided the event object for the delegated event."
            },
            {
              "name": "el",
              "type": "string|node",
              "description": "  the element that is the delegation container"
            },
            {
              "name": "delegateType",
              "type": "string",
              "description": "  the event type to delegate"
            },
            {
              "name": "spec",
              "type": "string",
              "description": "  a selector that must match the target of the\nevent."
            },
            {
              "name": "context",
              "type": "",
              "description": " optional argument that specifies what 'this' refers to."
            },
            {
              "name": "args*",
              "type": "",
              "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."
            }
          ],
          "deprecated": "use Y.delegate",
          "description": "Sets up event delegation on a container element.  The delegated event\nwill use a supplied selector to test if the target or one of the\ndescendants of the target match it.  The supplied callback function \nwill only be executed if a match was encountered, and, in fact, \nwill be executed for each element that matches if you supply an \nambiguous selector.\nThe event object for the delegated event is supplied to the callback\nfunction.  It is modified slightly in order to support all properties\nthat may be needed for event delegation.  'currentTarget' is set to\nthe element that matched the delegation specifcation.  'container' is\nset to the element that the listener is bound to (this normally would\nbe the 'currentTarget').",
          "return": "{EventHandle} the detach handle"
        },
        "windowresize": {
          "guessedname": "windowresize",
          "guessedtype": "property",
          "description": "Firefox fires the window resize event once when the resize action\nfinishes, other browsers fire the event periodically during the\nresize.  This code uses timeout logic to simulate the Firefox \nbehavior in other browsers."
        },
        "key": {
          "guessedname": "key",
          "guessedtype": "property",
          "description": "Add a key listener.  The listener will only be notified if the\nkeystroke detected meets the supplied specification.  The\nspec consists of the key event type, followed by a colon,\nfollowed by zero or more comma separated key codes, followed\nby zero or more modifiers delimited by a plus sign.  Ex:\npress:12,65+shift+ctrl",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  'key'"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  the function to execute"
            },
            {
              "name": "id",
              "type": "string|HTMLElement|collection",
              "description": "  the element(s) to bind"
            },
            {
              "name": "spec",
              "type": "string",
              "description": "  the keyCode and modifier specification"
            },
            {
              "name": "o",
              "type": "",
              "description": " optional context object"
            },
            {
              "name": "args",
              "type": "",
              "description": " 0..n additional arguments to provide to the listener."
            }
          ],
          "return": "{Event.Handle} the detach handle"
        },
        "mouseleave": {
          "guessedname": "mouseleave",
          "guessedtype": "property",
          "description": "Sets up a \"mouseleave\" listener&#151;a listener that is called the first time \nthe user's mouse leaves the specified element(s).  By passing a CSS selector \nas the fourth argument, can also be used to delegate a \"mouseleave\" \nevent listener.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  \"mouseleave\""
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  The method the event invokes."
            },
            {
              "name": "el",
              "type": "string|node",
              "description": "  The element(s) to assign the listener to."
            },
            {
              "name": "spec",
              "type": "string",
              "description": "  Optional.  String representing a selector that must \nmatch the target of the event in order for the listener to be called."
            }
          ],
          "return": "{EventHandle} the detach handle"
        },
        "mouseenter": {
          "guessedname": "mouseenter",
          "guessedtype": "property",
          "description": "Sets up a \"mouseenter\" listener&#151;a listener that is called the first time \nthe user's mouse enters the specified element(s).  By passing a CSS selector \nas the fourth argument, can also be used to delegate a \"mouseenter\" \nevent listener.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  \"mouseenter\""
            },
            {
              "name": "fn",
              "type": "function",
              "description": "  The method the event invokes."
            },
            {
              "name": "el",
              "type": "string|node",
              "description": "  The element(s) to assign the listener to."
            },
            {
              "name": "spec",
              "type": "string",
              "description": "  Optional.  String representing a selector that must \nmatch the target of the event in order for the listener to be called."
            }
          ],
          "return": "{EventHandle} the detach handle"
        }
      },
      "constructors": [
        {
          "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.",
          "params": [
            {
              "name": "o*",
              "type": "",
              "description": " Up to five optional configuration objects.  This object is stored\nin YUI.config.  See config for the list of supported properties."
            }
          ]
        }
      ],
      "global": "",
      "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.",
      "file": "yui.js",
      "uses": [
        "EventTarget"
      ],
      "properties": {
        "Global": {
          "guessedname": "Global",
          "type": "EventTarget",
          "guessedtype": "property",
          "description": "Hosts YUI page level events.  This is where events bubble to\nwhen the broadcast config is set to 2.  This property is\nonly available if the custom event module is loaded."
        }
      }
    },
    "DataSourceXMLSchema": {
      "shortname": "DataSourceXMLSchema",
      "superclass": "Plugin.Base",
      "methods": {
        "_beforeDefDataFn\n<dl>\n<dt>tId (Number)<\/dt> <dd>Unique transaction ID.<\/dd>\n<dt>request (Object)<\/dt> <dd>The request.<\/dd>\n<dt>callback (Object)<\/dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)<\/dt> <dd>Success handler.<\/dd>\n<dt>failure (Function)<\/dt> <dd>Failure handler.<\/dd>\n<\/dl>\n<\/dd>\n<dt>data (Object)<\/dt> <dd>Raw data.<\/dd>\n<\/dl>": {
          "guessedname": "_beforeDefDataFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Parses raw data into a normalized response."
        },
        "initializer": {
          "private": "",
          "guessedname": "initializer",
          "guessedtype": "function",
          "description": "Internal init() handler.",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Config object."
            }
          ]
        }
      },
      "name": "DataSourceXMLSchema",
      "extends": "Plugin.Base",
      "guessedname": "DataSourceXMLSchema",
      "module": "datasource",
      "namespace": "",
      "guessedtype": "function",
      "description": "Adds schema-parsing to the DataSource Utility.",
      "file": "datasource-xmlschema.js",
      "properties": {
        "NAME": {
          "final": "",
          "guessedname": "NAME",
          "static": "",
          "type": "String",
          "value": "\"dataSourceXMLSchema\"",
          "guessedtype": "property",
          "description": "Class name."
        },
        "NS": {
          "final": "",
          "guessedname": "NS",
          "static": "",
          "type": "String",
          "value": "\"schema\"",
          "guessedtype": "property",
          "description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance."
        }
      }
    },
    "WidgetStdMod": {
      "shortname": "WidgetStdMod",
      "methods": {
        "_renderUIStdMod": {
          "guessedname": "_renderUIStdMod",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates\/Initializes the DOM for standard module support.\n<p>\nThis method is invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>"
        },
        "fillHeight": {
          "guessedname": "fillHeight",
          "guessedtype": "function",
          "description": "Sets the height on the provided header, body or footer element to \nfill out the height of the Widget. It determines the height of the \nwidgets bounding box, based on it's configured height value, and \nsets the height of the provided section to fill out any \nspace remaining after the other standard module section heights \nhave been accounted for.\n<p><strong>NOTE:<\/strong> This method is not designed to work if an explicit \nheight has not been set on the Widget, since for an \"auto\" height Widget, \nthe heights of the header\/body\/footer will drive the height of the Widget.<\/p>",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": " The node which should be resized to fill out the height\nof the Widget bounding box. Should be a standard module section node which belongs\nto the widget."
            }
          ]
        },
        "_afterFooterChange": {
          "guessedname": "_afterFooterChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default attribute change listener for the footerContent attribute, responsible\nfor updating the UI, in response to attribute changes.",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "_validateFillHeight": {
          "guessedname": "_validateFillHeight",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "String",
              "description": " The section which should be setup to fill height, or false\/null to disable fillHeight"
            }
          ],
          "description": "Default validator for the fillHeight attribute. Verifies that the \nvalue set is a valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER,\nor a falsey value if fillHeight is to be disabled.",
          "return": {
            "type": "",
            "description": "true if valid, false if not"
          }
        },
        "_fillHeight": {
          "guessedname": "_fillHeight",
          "private": "",
          "guessedtype": "function",
          "description": "Updates the rendered UI, to resize the current section specified by the fillHeight attribute, so\nthat the standard module fills out the Widget height. If a height has not been set on Widget,\nthe section is not resized (height is set to \"auto\")."
        },
        "_renderStdMod": {
          "guessedname": "_renderStdMod",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "section",
              "type": "String",
              "description": " The section to create\/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."
            }
          ],
          "description": "Creates the DOM node for the given section, and inserts it into the correct location in the contentBox.",
          "return": {
            "type": "Node",
            "description": "A reference to the added section node"
          }
        },
        "_getPreciseHeight": {
          "guessedname": "_getPreciseHeight",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": " The node for which the precise height is required."
            }
          ],
          "description": "Helper method to obtain the precise height of the node provided, including padding and border.\nThe height could be a sub-pixel value for certain browsers, such as Firefox 3.",
          "return": {
            "type": "Number",
            "description": "The height of the Node including borders and padding, possibly a float."
          }
        },
        "_getStdModContent": {
          "guessedname": "_getStdModContent",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "section",
              "type": "String",
              "description": " The standard module section whose child nodes are to be retrieved. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."
            }
          ],
          "description": "Retrieves the child nodes (content) of a standard module section",
          "return": {
            "type": "Node",
            "description": "The child node collection of the standard module section."
          }
        },
        "_afterFillHeightChange": {
          "guessedname": "_afterFillHeightChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default attribute change listener for the fillHeight attribute, responsible\nfor updating the UI, in response to attribute changes.",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "_getStdModTemplate": {
          "guessedname": "_getStdModTemplate",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "section",
              "type": "String",
              "description": " The section to create a new node for. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."
            }
          ],
          "description": "Gets a new Node reference for the given standard module section, by cloning\nthe stored template node.",
          "return": {
            "type": "Node",
            "description": "The new Node instance for the section"
          }
        },
        "_bindUIStdMod": {
          "guessedname": "_bindUIStdMod",
          "guessedtype": "function",
          "protected": "",
          "description": "Binds event listeners responsible for updating the UI state in response to \nWidget standard module related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>"
        },
        "setStdModContent": {
          "guessedname": "setStdModContent",
          "guessedtype": "function",
          "description": "Updates the body section of the standard module with the content provided (either an HTML string, or node reference).\n<p>\nThis method can be used instead of the corresponding section content attribute if you'd like to retain the current content of the section,\nand insert content before or after it, by specifying the <code>where<\/code> argument.\n<\/p>",
          "params": [
            {
              "name": "section",
              "type": "String",
              "description": " The standard module section whose content is to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."
            },
            {
              "name": "content",
              "type": "String | Node",
              "description": " The content to be added, either an HTML string or a Node reference."
            },
            {
              "name": "where",
              "type": "String",
              "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."
            }
          ]
        },
        "_syncUIStdMod": {
          "guessedname": "_syncUIStdMod",
          "guessedtype": "function",
          "protected": "",
          "description": "Synchronizes the UI to match the Widgets standard module state.\n<p>\nThis method is invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>"
        },
        "_afterHeaderChange": {
          "guessedname": "_afterHeaderChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default attribute change listener for the headerContent attribute, responsible\nfor updating the UI, in response to attribute changes.",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "getStdModNode": {
          "guessedname": "getStdModNode",
          "guessedtype": "function",
          "description": "Returns the node reference for the given section. Note: The DOM is not queried for the node reference. The reference\nstored by the widget instance is returned if set.",
          "params": [
            {
              "name": "section",
              "type": "String",
              "description": " The section whose node reference is required. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."
            }
          ],
          "return": {
            "type": "Node",
            "description": "The node reference for the section, or null if not set."
          }
        },
        "_insertStdModSection": {
          "private": "",
          "guessedname": "_insertStdModSection",
          "guessedtype": "function",
          "description": "Helper method to insert the Node for the given section into the correct location in the contentBox.",
          "params": [
            {
              "name": "contentBox",
              "type": "Node",
              "description": " A reference to the Widgets content box."
            },
            {
              "name": "section",
              "type": "String",
              "description": " The section to create\/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."
            },
            {
              "name": "sectionNode",
              "type": "Node",
              "description": " The Node for the section."
            }
          ]
        },
        "_uiSetStdMod": {
          "guessedname": "_uiSetStdMod",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the rendered UI, adding the provided content (either an HTML string, or node reference),\nto the specified section. The content is either added before, after or replaces existing content\nin the section, based on the value of the <code>where<\/code> argument.",
          "params": [
            {
              "name": "section",
              "type": "String",
              "description": " The section to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."
            },
            {
              "name": "content",
              "type": "String | Node",
              "description": " The new content (either as an HTML string, or Node reference) to add to the section"
            },
            {
              "name": "where",
              "type": "String",
              "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."
            }
          ]
        },
        "_findStdModSection": {
          "guessedname": "_findStdModSection",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "section",
              "type": "String",
              "description": " The section for which the render Node is to be found. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."
            }
          ],
          "description": "Helper method to query the rendered contents of the contentBox to find the\nnode for the given section if it exists.",
          "return": {
            "type": "Node",
            "description": "The rendered node for the given section, or null if not found."
          }
        },
        "_afterBodyChange": {
          "guessedname": "_afterBodyChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Default attribute change listener for the bodyContent attribute, responsible\nfor updating the UI, in response to attribute changes.",
          "params": [
            {
              "name": "e",
              "type": "EventFacade",
              "description": " The event facade for the attribute change"
            }
          ]
        },
        "_addNodeHTML": {
          "private": "",
          "guessedname": "_addNodeHTML",
          "guessedtype": "function",
          "description": "Helper method to add the given HTML string to the node reference provided.\nThe HTML is added either before, after or replaces the existing node content \nbased on the value of the <code>where<\/code> argument.",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": " The section Node to be updated."
            },
            {
              "name": "html",
              "type": "String",
              "description": " The new content HTML string to be added to the section Node."
            },
            {
              "name": "where",
              "type": "String",
              "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace Nodes existing content."
            }
          ]
        },
        "_addNodeRef": {
          "private": "",
          "guessedname": "_addNodeRef",
          "guessedtype": "function",
          "description": "Helper method to add nodes, to another node.\nThe child node(s) are added either before, after or replaces the existing node content \nbased on the value of the <code>where<\/code> argument.",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": " The section Node to be updated."
            },
            {
              "name": "children",
              "type": "Node|NodeList",
              "description": " The new content Node, or NodeList to be added to section Node provided."
            },
            {
              "name": "where",
              "type": "String",
              "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the Node."
            }
          ]
        },
        "_uiSetFillHeight": {
          "guessedname": "_uiSetFillHeight",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the rendered UI, to resize the provided section so that the standard module fills out \nthe specified widget height. Note: This method does not check whether or not a height is set \non the Widget.",
          "params": [
            {
              "name": "fillSection",
              "type": "String",
              "description": " A valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER"
            }
          ]
        },
        "_parseStdModHTML": {
          "guessedname": "_parseStdModHTML",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "section",
              "type": "String",
              "description": ""
            }
          ],
          "description": "Utility method, used by WidgetStdMods HTML_PARSER implementation\nto extract data for each section from markup.",
          "return": {
            "type": "String",
            "description": "Inner HTML string with the contents of the section"
          }
        }
      },
      "name": "WidgetStdMod",
      "module": "widget-stdmod",
      "namespace": "",
      "param": "{Object} The user configuration object",
      "events": {
        "fillHeightChange": {
          "name": "fillHeightChange",
          "description": "Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "footerContentChange": {
          "name": "footerContentChange",
          "description": "Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "headerContentChange": {
          "name": "headerContentChange",
          "description": "Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "bodyContentChange": {
          "name": "bodyContentChange",
          "description": "Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        }
      },
      "description": "Widget extension, which can be used to add Standard Module support to the \nbase Widget class, through the <a href=\"Base.html#method_build\">Base.build<\/a> \nmethod.\n<p>\nThe extension adds header, body and footer sections to the Widget's content box and \nprovides the corresponding methods and attributes to modify the contents of these sections.\n<\/p>",
      "file": "Widget-StdMod.js",
      "configs": {
        "fillHeight": {
          "guessedname": "fillHeight",
          "default": "WidgetStdMod.BODY",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a \nheight is set on the Widget. If a height is not set on the widget, then all sections are sized based on \ntheir content."
        },
        "headerContent": {
          "guessedname": "headerContent",
          "default": "undefined",
          "type": "{String | Node}",
          "guessedtype": "property",
          "description": "The content to be added to the header section. This will replace any existing content\nin the header. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent<\/a> method."
        },
        "bodyContent": {
          "guessedname": "bodyContent",
          "default": "undefined",
          "type": "{String | Node}",
          "guessedtype": "property",
          "description": "The content to be added to the body section. This will replace any existing content\nin the body. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent<\/a> method."
        },
        "footerContent": {
          "guessedname": "footerContent",
          "default": "undefined",
          "type": "{String | Node}",
          "guessedtype": "property",
          "description": "The content to be added to the footer section. This will replace any existing content\nin the footer. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent<\/a> method."
        }
      },
      "properties": {
        "WidgetStdMod.REPLACE": {
          "guessedname": "REPLACE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\n<em>Replaces<\/em> the sections existing content, with new content.\n<\/p>"
        },
        "WidgetStdMod.HTML_PARSER": {
          "guessedname": "HTML_PARSER",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "The HTML parsing rules for the WidgetStdMod class."
        },
        "WidgetStdMod.BEFORE": {
          "guessedname": "BEFORE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before<\/em> the sections existing content.\n<\/p>"
        },
        "WidgetStdMod.BODY": {
          "guessedname": "BODY",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to refer the the standard module body, in methods which expect a section specifier"
        },
        "WidgetStdMod.ATTRS": {
          "guessedname": "ATTRS",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStdMod."
        },
        "WidgetStdMod.HEADER": {
          "guessedname": "HEADER",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to refer the the standard module header, in methods which expect a section specifier"
        },
        "WidgetStdMod.TEMPLATES": {
          "guessedname": "TEMPLATES",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "The template HTML strings for each of the standard module sections. Section entries are keyed by the section constants,\nWidgetStdMod.HEADER, WidgetStdMod.BODY, WidgetStdMod.FOOTER, and contain the HTML to be added for each section.\ne.g.\n<pre>\n{\nheader : '&lt;div class=\"yui-widget-hd\"&gt;&lt;\/div&gt;',\nbody : '&lt;div class=\"yui-widget-bd\"&gt;&lt;\/div&gt;',\nfooter : '&lt;div class=\"yui-widget-ft\"&gt;&lt;\/div&gt;'\n}\n<\/pre>"
        },
        "WidgetStdMod.AFTER": {
          "guessedname": "AFTER",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to specify insertion position, when adding content to sections of the standard module in \nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before<\/em> the sections existing content.\n<\/p>"
        },
        "WidgetStdMod.SECTION_CLASS_NAMES": {
          "guessedname": "SECTION_CLASS_NAMES",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Static hash of default class names used for the header,\nbody and footer sections of the standard module, keyed by\nthe section identifier (WidgetStdMod.STD_HEADER, WidgetStdMod.STD_BODY, WidgetStdMod.STD_FOOTER)"
        },
        "WidgetStdMod.FOOTER": {
          "guessedname": "FOOTER",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to refer the the standard module footer, in methods which expect a section specifier"
        }
      }
    },
    "Do.Prevent": {
      "shortname": "Do.Prevent",
      "name": "Do.Prevent",
      "guessedname": "Prevent",
      "module": "event-custom",
      "namespace": "",
      "guessedtype": "function",
      "description": "Return a Prevent object when you want to prevent the wrapped function\nfrom executing, but want the remaining listeners to execute",
      "file": "event-do.js"
    },
    "DD.Drop": {
      "shortname": "Drop",
      "superclass": "Base",
      "methods": {
        "_createShim": {
          "guessedname": "_createShim",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the Target shim and adds it to the DDM's playground.."
        },
        "_handleOverEvent": {
          "guessedname": "_handleOverEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the mouseover DOM event on the Target Shim"
        },
        "_createEvents": {
          "guessedname": "_createEvents",
          "private": "",
          "guessedtype": "function",
          "description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling."
        },
        "_deactivateShim": {
          "guessedname": "_deactivateShim",
          "private": "",
          "guessedtype": "function",
          "description": "Removes classes from the target, resets some flags and sets the shims deactive position [-999, -999]"
        },
        "_handleOverTarget": {
          "guessedname": "_handleTargetOver",
          "private": "",
          "guessedtype": "function",
          "description": "This handles the over target call made from this object or from the DDM"
        },
        "_activateShim": {
          "guessedname": "_activateShim",
          "private": "",
          "guessedtype": "function",
          "description": "Activates the shim and adds some interaction CSS classes"
        },
        "inGroup": {
          "guessedname": "inGroup",
          "guessedtype": "function",
          "description": "Check if this target is in one of the supplied groups.",
          "params": [
            {
              "name": "groups",
              "type": "Array",
              "description": " The groups to check against"
            }
          ],
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "initializer": {
          "guessedname": "initializer",
          "private": "",
          "guessedtype": "function",
          "description": "Private lifecycle method"
        },
        "sizeShim": {
          "guessedname": "sizeShim",
          "guessedtype": "function",
          "description": "Positions and sizes the shim with the raw data from the node, this can be used to programatically adjust the Targets shim for Animation.."
        },
        "_handleOut": {
          "guessedname": "_handleOut",
          "private": "",
          "guessedtype": "function",
          "description": "Handles out of target calls\/checks"
        },
        "destructor": {
          "guessedname": "destructor",
          "private": "",
          "guessedtype": "function",
          "description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners"
        },
        "_handleOutEvent": {
          "guessedname": "_handleOutEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the mouseout DOM event on the Target Shim"
        }
      },
      "name": "DD.Drop",
      "extends": "Base",
      "guessedname": "NODE",
      "module": "dd",
      "namespace": "DD",
      "events": {
        "drop:exit": {
          "guessedname": "EV_DROP_EXIT",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires when a drag element exits this target."
        },
        "drop:over": {
          "guessedname": "EV_DROP_OVER",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires when a drag element is over this target."
        },
        "bubblesChange": {
          "name": "bubblesChange",
          "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drop:enter": {
          "guessedname": "EV_DROP_ENTER",
          "type": "{Event.Custom}",
          "guessedtype": "property",
          "bubbles": "DDM",
          "description": "Fires when a drag element enters this target."
        },
        "groupsChange": {
          "name": "groupsChange",
          "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "lockChange": {
          "name": "lockChange",
          "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "paddingChange": {
          "name": "paddingChange",
          "description": "Fires when the value for the configuration attribute 'padding' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "nodeChange": {
          "name": "nodeChange",
          "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed.",
          "params": [
            {
              "name": "event",
              "type": "Event.Facade",
              "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"
            }
          ]
        },
        "drop:hit": {
          "guessedname": "Drop",
          "type": "{Event.Custom}",
          "guessedtype": "function",
          "bubbles": "DDM",
          "description": "Fires when a draggable node is dropped on this Drop Target. (Fired from dd-ddm-drop)"
        }
      },
      "constructors": [
        {
          "description": "This class provides the ability to create a Drop Target."
        }
      ],
      "guessedtype": "property",
      "description": "This class provides the ability to create a Drop Target.",
      "file": "drop.js",
      "configs": {
        "groups": {
          "guessedname": "groups",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of groups to add this drop into."
        },
        "node": {
          "guessedname": "node",
          "type": "Node",
          "guessedtype": "property",
          "description": "Y.Node instanace to use as the element to make a Drop Target"
        },
        "lock": {
          "guessedname": "lock",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Set to lock this drop element."
        },
        "padding": {
          "guessedname": "padding",
          "type": "String",
          "guessedtype": "property",
          "description": "CSS style padding to make the Drop Target bigger than the node."
        },
        "bubbles": {
          "guessedname": "bubbles",
          "type": "Object",
          "guessedtype": "property",
          "description": "Controls the default bubble parent for this Drop instance. Default: Y.DD.DDM. Set to false to disable bubbling."
        }
      },
      "properties": {
        "region": {
          "guessedname": "region",
          "type": "Object",
          "guessedtype": "property",
          "description": "A region object associated with this target, used for checking regions while dragging."
        },
        "shim": {
          "guessedname": "shim",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "Node reference to the targets shim"
        },
        "_groups": {
          "private": "",
          "guessedname": "_groups",
          "type": "Array",
          "guessedtype": "property",
          "description": "The groups this target belongs to."
        },
        "_valid": {
          "private": "",
          "guessedname": "_valid",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag for determining if the target is valid in this operation."
        },
        "overTarget": {
          "guessedname": "overTarget",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "This flag is tripped when a drag element is over this target."
        }
      }
    },
    "AsyncQueue": {
      "shortname": "AsyncQueue",
      "superclass": "EventTarget",
      "methods": {
        "promote": {
          "guessedname": "promote",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "callback",
              "type": "String|Object",
              "description": "  the callback object or a callback's id"
            }
          ],
          "description": "Promotes the named callback to the top of the queue. If a callback is\ncurrently executing or looping (via until or iterations), the promotion\nis scheduled to occur after the current callback has completed.",
          "return": {
            "type": "AsyncQueue",
            "description": "the AsyncQueue instance"
          }
        },
        "_defExecFn": {
          "guessedname": "_defExecFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Default functionality for the &quot;execute&quot; event.  Executes the\ncallback function",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the event object"
            }
          ]
        },
        "run": {
          "guessedname": "run",
          "chainable": "",
          "guessedtype": "function",
          "description": "Sets the queue in motion.  All queued callbacks will be executed in\norder unless pause() or stop() is called or if one of the callbacks is\nconfigured with autoContinue: false.",
          "return": {
            "type": "AsyncQueue",
            "description": "the AsyncQueue instance"
          }
        },
        "size": {
          "guessedname": "size",
          "guessedtype": "function",
          "description": "Returns the number of callbacks in the queue.",
          "return": {
            "type": "Number",
            "description": ""
          }
        },
        "add": {
          "guessedname": "add",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "callback*",
              "type": "Function|Object",
              "description": "  0..n callbacks"
            }
          ],
          "description": "Add any number of callbacks to the end of the queue. Callbacks may be\nprovided as functions or objects.",
          "return": {
            "type": "AsyncQueue",
            "description": "the AsyncQueue instance"
          }
        },
        "stop": {
          "guessedname": "stop",
          "chainable": "",
          "guessedtype": "function",
          "description": "Stop and clear the queue after the current execution of the\ncurrent callback completes.",
          "return": {
            "type": "AsyncQueue",
            "description": "the AsyncQueue instance"
          }
        },
        "_execute": {
          "guessedname": "_execute",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "callback",
              "type": "Object",
              "description": "  the callback object to execute"
            }
          ],
          "description": "Handles the execution of callbacks. Returns a boolean indicating\nwhether it is appropriate to continue running.",
          "return": {
            "type": "Boolean",
            "description": "whether the run loop should continue"
          }
        },
        "_schedule": {
          "guessedname": "_schedule",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "callback",
              "type": "Object",
              "description": "  the callback object to execute"
            }
          ],
          "description": "Schedules the execution of asynchronous callbacks.",
          "return": {
            "type": "Boolean",
            "description": "whether the run loop should continue"
          }
        },
        "pause": {
          "guessedname": "pause",
          "chainable": "",
          "guessedtype": "function",
          "description": "Pause the execution of the queue after the execution of the current\ncallback completes.  If called from code outside of a queued callback,\nclears the timeout for the pending callback. Paused queue can be\nrestarted with q.run()",
          "return": {
            "type": "AsyncQueue",
            "description": "the AsyncQueue instance"
          }
        },
        "isRunning": {
          "guessedname": "isRunning",
          "guessedtype": "function",
          "description": "Determines if the queue is waiting for a callback to complete execution.",
          "return": {
            "type": "Boolean",
            "description": "true if queue is waiting for a \nfrom any initiated transactions"
          }
        },
        "_defPromoteFn": {
          "guessedname": "_defPromoteFn",
          "guessedtype": "function",
          "protected": "",
          "description": "<p>Default functionality for the &quot;promote&quot; event.  Promotes the\nnamed callback to the head of the queue.<\/p>\n<p>The event object will contain a property &quot;callback&quot;, which\nholds the id of a callback or the callback object itself.<\/p>",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the custom event"
            }
          ]
        },
        "remove": {
          "guessedname": "remove",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "callback",
              "type": "String|Object",
              "description": "  the callback object or a callback's id"
            }
          ],
          "description": "Removes the callback from the queue.  If the queue is active, the\nremoval is scheduled to occur after the current callback has completed.",
          "return": {
            "type": "AsyncQueue",
            "description": "the AsyncQueue instance"
          }
        },
        "_defShiftFn": {
          "guessedname": "_defShiftFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Default functionality for the &quot;shift&quot; event.  Shifts the\ncallback stored in the event object's <em>callback<\/em> property from\nthe queue if it is the first item.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  The event object"
            }
          ]
        },
        "_defAddFn": {
          "guessedname": "_defAddFn",
          "guessedtype": "function",
          "protected": "",
          "description": "Default functionality for the &quot;add&quot; event.  Adds the callbacks\nin the event facade to the queue. Callbacks successfully added to the\nqueue are present in the event's <code>added<\/code> property in the\nafter phase.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the event object"
            }
          ]
        },
        "getCallback": {
          "guessedname": "getCallback",
          "guessedtype": "function",
          "description": "Retrieve a callback by its id.  Useful to modify the configuration\nwhile the queue is running.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "  the id assigned to the callback"
            }
          ],
          "return": {
            "type": "Object",
            "description": "the callback object"
          }
        },
        "indexOf": {
          "guessedname": "indexOf",
          "guessedtype": "function",
          "description": "Returns the current index of a callback.  Pass in either the id or\ncallback function from getCallback.",
          "params": [
            {
              "name": "callback",
              "type": "String|Function",
              "description": "  the callback or its specified id"
            }
          ],
          "return": {
            "type": "Number",
            "description": "index of the callback or -1 if not found"
          }
        },
        "next": {
          "guessedname": "next",
          "guessedtype": "function",
          "description": "Returns the next callback needing execution.  If a callback is\nconfigured to repeat via iterations or until, it will be returned until\nthe completion criteria is met.\nWhen the queue is empty, null is returned.",
          "return": {
            "type": "Function",
            "description": "the callback to execute"
          }
        },
        "_defRemoveFn": {
          "guessedname": "_defRemoveFn",
          "guessedtype": "function",
          "protected": "",
          "description": "<p>Default functionality for the &quot;remove&quot; event.  Removes the\ncallback from the queue.<\/p>\n<p>The event object will contain a property &quot;callback&quot;, which\nholds the id of a callback or the callback object itself.<\/p>",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the custom event"
            }
          ]
        },
        "_prepare": {
          "guessedname": "_prepare",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "callback",
              "type": "Object|Function",
              "description": "  the raw callback"
            }
          ],
          "description": "Creates a wrapper function to execute the callback using the aggregated \nconfiguration generated by combining the static AsyncQueue.defaults, the\ninstance defaults, and the specified callback settings.\nThe wrapper function is decorated with the callback configuration as\nproperties for runtime modification.",
          "return": {
            "type": "Function",
            "description": "a decorated function wrapper to execute the callback"
          }
        },
        "_init": {
          "guessedname": "_init",
          "guessedtype": "function",
          "protected": "",
          "description": "Initializes the AsyncQueue instance properties and events."
        },
        "_initEvents": {
          "guessedname": "_initEvents",
          "guessedtype": "function",
          "protected": "",
          "description": "Initializes the instance events."
        }
      },
      "name": "AsyncQueue",
      "extends": "EventTarget",
      "guessedname": "AsyncQueue",
      "module": "queue-run",
      "namespace": "",
      "events": {
        "complete": {
          "description": "Event fired after the last queued callback is executed."
        }
      },
      "constructors": [
        {
          "description": "<p>A specialized queue class that supports scheduling callbacks to execute\nsequentially, iteratively, even asynchronously.<\/p>\n<p>Callbacks can be function refs or objects with the following keys.  Only\nthe <code>fn<\/code> key is required.<\/p>\n<ul>\n<li><code>fn<\/code> -- The callback function<\/li>\n<li><code>context<\/code> -- The execution context for the callbackFn.<\/li>\n<li><code>args<\/code> -- Arguments to pass to callbackFn.<\/li>\n<li><code>timeout<\/code> -- Millisecond delay before executing callbackFn.\n(Applies to each iterative execution of callback)<\/li>\n<li><code>iterations<\/code> -- Number of times to repeat the callback.\n<li><code>until<\/code> -- Repeat the callback until this function returns\ntrue.  This setting trumps iterations.<\/li>\n<li><code>autoContinue<\/code> -- Set to false to prevent the AsyncQueue from\nexecuting the next callback in the Queue after\nthe callback completes.<\/li>\n<li><code>id<\/code> -- Name that can be used to get, promote, get the\nindexOf, or delete this callback.<\/li>\n<\/ul>",
          "params": [
            {
              "name": "callback*",
              "type": "Function|Object",
              "description": "  0..n callbacks to seed the queue"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "<p>A specialized queue class that supports scheduling callbacks to execute\nsequentially, iteratively, even asynchronously.<\/p>\n<p>Callbacks can be function refs or objects with the following keys.  Only\nthe <code>fn<\/code> key is required.<\/p>\n<ul>\n<li><code>fn<\/code> -- The callback function<\/li>\n<li><code>context<\/code> -- The execution context for the callbackFn.<\/li>\n<li><code>args<\/code> -- Arguments to pass to callbackFn.<\/li>\n<li><code>timeout<\/code> -- Millisecond delay before executing callbackFn.\n(Applies to each iterative execution of callback)<\/li>\n<li><code>iterations<\/code> -- Number of times to repeat the callback.\n<li><code>until<\/code> -- Repeat the callback until this function returns\ntrue.  This setting trumps iterations.<\/li>\n<li><code>autoContinue<\/code> -- Set to false to prevent the AsyncQueue from\nexecuting the next callback in the Queue after\nthe callback completes.<\/li>\n<li><code>id<\/code> -- Name that can be used to get, promote, get the\nindexOf, or delete this callback.<\/li>\n<\/ul>",
      "file": "queue-run.js",
      "properties": {
        "AsyncQueue.defaults": {
          "guessedname": "defaults",
          "static": "",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "<p>Static default values used to populate callback configuration properties.\nPreconfigured defaults include:<\/p>\n<ul>\n<li><code>autoContinue<\/code>: <code>true<\/code><\/li>\n<li><code>iterations<\/code>: 1<\/li>\n<li><code>timeout<\/code>: -1 (synchronous operation)<\/li>\n<li><code>until<\/code>: (function to run until iterations &lt;= 0)<\/li>\n<\/ul>"
        },
        "_running": {
          "guessedname": "_running",
          "type": "{Boolean|Object} true for synchronous callback execution, the\nreturn handle from Y.later for async callbacks",
          "guessedtype": "property",
          "protected": "",
          "description": "Used to indicate the queue is currently executing a callback."
        },
        "defaults": {
          "guessedname": "defaults",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "Callback defaults for this instance.  Static defaults that are not\noverridden are also included."
        }
      }
    },
    "Do.AlterArgs": {
      "shortname": "Do.AlterArgs",
      "name": "Do.AlterArgs",
      "guessedname": "AlterArgs",
      "module": "event-custom",
      "namespace": "",
      "guessedtype": "function",
      "description": "Return an AlterArgs object when you want to change the arguments that\nwere passed into the function.  An example would be a service that scrubs\nout illegal characters prior to executing the core business logic.",
      "file": "event-do.js"
    },
    "Lang": {
      "shortname": "Lang",
      "methods": {
        "isObject": {
          "guessedname": "isObject",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to test"
            },
            {
              "name": "failfn",
              "type": "boolean",
              "description": "  fail if the input is a function"
            }
          ],
          "description": "Determines whether or not the provided item is of type object\nor function",
          "return": {
            "type": "boolean",
            "description": "true if o is an object"
          }
        },
        "isNumber": {
          "guessedname": "isNumber",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to test"
            }
          ],
          "description": "Determines whether or not the provided item is a legal number",
          "return": {
            "type": "boolean",
            "description": "true if o is a number"
          }
        },
        "isBoolean": {
          "guessedname": "isBoolean",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to test"
            }
          ],
          "description": "Determines whether or not the provided item is a boolean",
          "return": {
            "type": "boolean",
            "description": "true if o is a boolean"
          }
        },
        "isFunction": {
          "guessedname": "isFunction",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to test"
            }
          ],
          "description": "Determines whether or not the provided item is a function\nNote: Internet Explorer thinks certain functions are objects:\nvar obj = document.createElement(\"object\");\nY.Lang.isFunction(obj.getAttribute) \/\/ reports false in IE\nvar input = document.createElement(\"input\"); \/\/ append to body\nY.Lang.isFunction(input.focus) \/\/ reports false in IE\nYou will have to implement additional tests if these functions\nmatter to you.",
          "return": {
            "type": "boolean",
            "description": "true if o is a function"
          }
        },
        "isDate": {
          "guessedname": "isDate",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to test"
            }
          ],
          "description": "Determines whether or not the supplied item is a date instance",
          "return": {
            "type": "boolean",
            "description": "true if o is a date"
          }
        },
        "trim": {
          "guessedname": "trim",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "s",
              "type": "string",
              "description": "  the string to trim"
            }
          ],
          "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.",
          "return": {
            "type": "string",
            "description": "the trimmed string"
          }
        },
        "type": {
          "guessedname": "type",
          "guessedtype": "function",
          "description": "Returns a string representing the type of the item passed in.",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " the item to test"
            }
          ],
          "return": {
            "type": "string",
            "description": "the detected type"
          }
        },
        "isNull": {
          "guessedname": "isNull",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to test"
            }
          ],
          "description": "Determines whether or not the provided item is null",
          "return": {
            "type": "boolean",
            "description": "true if o is null"
          }
        },
        "isUndefined": {
          "guessedname": "isUndefined",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to test"
            }
          ],
          "description": "Determines whether or not the provided item is undefined",
          "return": {
            "type": "boolean",
            "description": "true if o is undefined"
          }
        },
        "isArray": {
          "guessedname": "isArray",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to test"
            }
          ],
          "description": "Determines whether or not the provided item is an array.\nReturns false for array-like collections such as the\nfunction arguments collection or HTMLElement collection\nwill return false.  You can use @see Array.test if you \nwant to",
          "return": {
            "type": "boolean",
            "description": "true if o is an array"
          }
        },
        "isValue": {
          "guessedname": "isValue",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The item to test"
            }
          ],
          "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null\/undefined\/NaN, true for other values, \nincluding 0\/false\/''",
          "return": {
            "type": "boolean",
            "description": "true if it is not null\/undefined\/NaN || false"
          }
        },
        "isString": {
          "guessedname": "isString",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " The object to test"
            }
          ],
          "description": "Determines whether or not the provided item is a string",
          "return": {
            "type": "boolean",
            "description": "true if o is a string"
          }
        }
      },
      "name": "Lang",
      "guessedname": "Lang",
      "module": "yui",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "Provides the language utilites and extensions used by the library",
      "file": "yui-lang.js"
    },
    "Assert.ObjectAssert": {
      "shortname": "ObjectAssert",
      "methods": {
        "ownsKeys": {
          "guessedname": "ownsKeys",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that all properties exist on an object instance (not on its prototype).",
          "params": [
            {
              "name": "properties",
              "type": "Array",
              "description": " An array of property names that should be on the object."
            },
            {
              "name": "object",
              "type": "Object",
              "description": " The object to search."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "ownsNoKeys": {
          "guessedname": "ownsNoKeys",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that an object owns no properties.",
          "params": [
            {
              "name": "object",
              "type": "Object",
              "description": " The object to check."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "hasKeys": {
          "guessedname": "hasKeys",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that an object has all properties of a reference object.",
          "params": [
            {
              "name": "properties",
              "type": "Array",
              "description": " An array of property names that should be on the object."
            },
            {
              "name": "object",
              "type": "Object",
              "description": " The object to search."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "ownsKey": {
          "guessedname": "ownsKey",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a property with the given name exists on an object instance (not on its prototype).",
          "params": [
            {
              "name": "propertyName",
              "type": "String",
              "description": " The name of the property to test."
            },
            {
              "name": "object",
              "type": "Object",
              "description": " The object to search."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "hasKey": {
          "guessedname": "hasKey",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that an object has a property with the given name.",
          "params": [
            {
              "name": "propertyName",
              "type": "String",
              "description": " The name of the property to test."
            },
            {
              "name": "object",
              "type": "Object",
              "description": " The object to search."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        }
      },
      "name": "Assert.ObjectAssert",
      "guessedname": "ObjectAssert",
      "module": "test",
      "namespace": "Assert",
      "static": "",
      "guessedtype": "property",
      "description": "The ObjectAssert object provides functions to test JavaScript objects\nfor a variety of cases.",
      "file": "ObjectAssert.js"
    }
  }
}
