{
  "modules": {
    "button": {
      "name": "button",
      "subdata": {

      },
      "optional": "container, menu",
      "title": "Button",
      "classlist": [
        "YAHOO.widget.ButtonGroup",
        "YAHOO.widget.Button"
      ],
      "requires": "yahoo, dom, element, event",
      "filelist": [
        "buttongroup.js",
        "button.js"
      ],
      "description": "<p>The Button Control enables the creation of rich, graphical \nbuttons that function like traditional HTML form buttons.  <em>Unlike</em> \ntraditional HTML form buttons, buttons created with the Button Control can have \na label that is different from its value.  With the inclusion of the optional \n<a href=\"module_menu.html\">Menu Control</a>, the Button Control can also be\nused to create menu buttons and split buttons, controls that are not \navailable natively in HTML.  The Button Control can also be thought of as a \nway to create more visually engaging implementations of the browser's \ndefault radio-button and check-box controls.</p>\n<p>The Button Control supports the following types:</p>\n<dl>\n<dt>push</dt>\n<dd>Basic push button that can execute a user-specified command when \npressed.</dd>\n<dt>link</dt>\n<dd>Navigates to a specified url when pressed.</dd>\n<dt>submit</dt>\n<dd>Submits the parent form when pressed.</dd>\n<dt>reset</dt>\n<dd>Resets the parent form when pressed.</dd>\n<dt>checkbox</dt>\n<dd>Maintains a \"checked\" state that can be toggled on and off.</dd>\n<dt>radio</dt>\n<dd>Maintains a \"checked\" state that can be toggled on and off.  Use with \nthe ButtonGroup class to create a set of controls that are mutually \nexclusive; checking one button in the set will uncheck all others in \nthe group.</dd>\n<dt>menu</dt>\n<dd>When pressed will show/hide a menu.</dd>\n<dt>split</dt>\n<dd>Can execute a user-specified command or display a menu when pressed.</dd>\n</dl>",
      "submodules": [

      ]
    },
    "swfstore": {
      "name": "swfstore",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.SWFStore"
      ],
      "filelist": [
        "swfstore.js"
      ],
      "description": "Provides a swf based storage implementation",
      "submodules": [

      ]
    },
    "get": {
      "name": "get",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.Get"
      ],
      "requires": "yahoo",
      "filelist": [
        "Get.js"
      ],
      "description": "Provides a mechanism to fetch remote resources and\ninsert them into a document",
      "submodules": [

      ]
    },
    "element-delegate": {
      "name": "element-delegate",
      "subdata": {

      },
      "title": "Element Event Delegation Module",
      "classlist": [

      ],
      "requires": "element, event-delegate",
      "filelist": [
        "Element-Delegate.js"
      ],
      "description": "Augments the Element Utility with a <code>delegate</code> method that \nfacilitates easy creation of delegated event listeners.  (Note: Using CSS \nselectors as the filtering criteria for delegated event listeners requires \ninclusion of the Selector Utility.)",
      "submodules": [

      ]
    },
    "carousel": {
      "name": "carousel",
      "subdata": {

      },
      "optional": "animation",
      "title": "Carousel Widget",
      "classlist": [
        "YAHOO.widget.Carousel"
      ],
      "requires": "yahoo, dom, event, element",
      "beta": "",
      "filelist": [
        "Carousel.js"
      ],
      "description": "The Carousel module provides a widget for browsing among a set of like\nobjects represented pictorially.",
      "submodules": [

      ]
    },
    "profiler": {
      "name": "profiler",
      "subdata": {

      },
      "classlist": [
        "YAHOO.tool.Profiler"
      ],
      "requires": "yahoo",
      "filelist": [
        "Profiler.js"
      ],
      "description": "The YUI JavaScript profiler.",
      "submodules": [

      ]
    },
    "layout": {
      "name": "layout",
      "subdata": {

      },
      "classlist": [
        "YAHOO.widget.LayoutUnit",
        "YAHOO.widget.Layout"
      ],
      "requires": "yahoo, dom, element, event",
      "filelist": [
        "layoutunit.js",
        "layout.js"
      ],
      "description": "<p>Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</p>",
      "submodules": [

      ]
    },
    "history": {
      "name": "history",
      "subdata": {

      },
      "title": "Browser History Manager",
      "classlist": [
        "YAHOO.util.History"
      ],
      "requires": "yahoo,event",
      "filelist": [
        "history.js"
      ],
      "description": "The Browser History Manager provides the ability to use the back/forward\nnavigation buttons in a DHTML application. It also allows a DHTML\napplication to be bookmarked in a specific state.\nThis library requires the following static markup:\n&lt;iframe id=\"yui-history-iframe\" src=\"path-to-real-asset-in-same-domain\"&gt;&lt;/iframe&gt;\n&lt;input id=\"yui-history-field\" type=\"hidden\"&gt;",
      "submodules": [

      ]
    },
    "dom": {
      "name": "dom",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.Dom.Color",
        "YAHOO.util.Dom.IEStyle",
        "YAHOO.util.Region",
        "YAHOO.util.Point",
        "YAHOO.util.Dom"
      ],
      "filelist": [
        "Color.js",
        "IEStyle.js",
        "Region.js",
        "Dom.js"
      ],
      "description": "The dom module provides helper methods for manipulating Dom elements.",
      "submodules": [

      ]
    },
    "resize": {
      "name": "resize",
      "subdata": {

      },
      "optional": "animation",
      "classlist": [
        "YAHOO.util.Resize"
      ],
      "requires": "yahoo, dom, dragdrop, element, event",
      "filelist": [
        "resize.js"
      ],
      "description": "<p>Makes an element resizable</p>",
      "submodules": [

      ]
    },
    "swf": {
      "name": "swf",
      "subdata": {

      },
      "title": "SWF Utility",
      "classlist": [
        "YAHOO.widget.SWF"
      ],
      "requires": "yahoo, dom, event",
      "filelist": [
        "swf.js"
      ],
      "description": "The SWF utility is a tool for embedding Flash applications in HTMl pages.",
      "submodules": [

      ]
    },
    "datemath": {
      "name": "datemath",
      "subdata": {

      },
      "classlist": [
        "YAHOO.widget.DateMath"
      ],
      "filelist": [
        "DateMath.js"
      ],
      "description": "The datemath module provides utility methods for basic JavaScript Date object manipulation and \ncomparison.",
      "submodules": [

      ]
    },
    "connection": {
      "name": "connection",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.Connect"
      ],
      "requires": "yahoo",
      "filelist": [
        "connectionx.js",
        "connection_core.js",
        "connection_xdr.js"
      ],
      "description": "The Connection Manager provides a simplified interface to the XMLHttpRequest\nobject.  It handles cross-browser instantiantion of XMLHttpRequest, negotiates the\ninteractive states and server response, returning the results to a pre-defined\ncallback you create.",
      "submodules": [

      ]
    },
    "dragdrop": {
      "name": "dragdrop",
      "subdata": {

      },
      "title": "Drag and Drop",
      "classlist": [
        "YAHOO.util.DDTarget",
        "YAHOO.util.DD",
        "YAHOO.util.DDProxy",
        "YAHOO.util.DragDropMgr",
        "YAHOO.util.DragDropMgr.ElementWrapper",
        "YAHOO.util.DragDrop"
      ],
      "requires": "yahoo,dom,event",
      "filelist": [
        "DDTarget.js",
        "DD.js",
        "DDProxy.js",
        "DragDropMgr.js",
        "DragDrop.js"
      ],
      "description": "The drag and drop utility provides a framework for building drag and drop\napplications.  In addition to enabling drag and drop for specific elements,\nthe drag and drop elements are tracked by the manager class, and the\ninteractions between the various elements are tracked during the drag and\nthe implementing code is notified about these important moments.",
      "submodules": [

      ]
    },
    "stylesheet": {
      "name": "stylesheet",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.StyleSheet"
      ],
      "requires": "yahoo",
      "beta": "",
      "filelist": [
        "stylesheet.js"
      ],
      "description": "The StyleSheet component is a utility for managing css rules at the\nstylesheet level",
      "submodules": [

      ]
    },
    "event-simulate": {
      "name": "event-simulate",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.UserAction"
      ],
      "requires": "yahoo,dom,event",
      "filelist": [
        "UserAction.js"
      ],
      "description": "DOM event simulation utility",
      "submodules": [

      ]
    },
    "container": {
      "name": "container",
      "subdata": {

      },
      "optional": "dragdrop, animation, button",
      "title": "Container",
      "classlist": [
        "YAHOO.widget.ContainerEffect",
        "YAHOO.widget.Overlay",
        "YAHOO.widget.Panel",
        "YAHOO.widget.Dialog",
        "YAHOO.widget.Tooltip",
        "YAHOO.util.Config",
        "YAHOO.widget.Module",
        "YAHOO.widget.SimpleDialog",
        "YAHOO.widget.OverlayManager"
      ],
      "requires": "yahoo, dom, event",
      "filelist": [
        "ContainerEffect.js",
        "Overlay.js",
        "Panel.js",
        "Dialog.js",
        "Tooltip.js",
        "Config.js",
        "Module.js",
        "SimpleDialog.js",
        "OverlayManager.js"
      ],
      "description": "The Container family of components is designed to enable developers to \ncreate different kinds of content-containing modules on the web. Module \nand Overlay are the most basic containers, and they can be used directly \nor extended to build custom containers. Also part of the Container family \nare four UI controls that extend Module and Overlay: Tooltip, Panel, \nDialog, and SimpleDialog.",
      "submodules": [

      ]
    },
    "tabview": {
      "name": "tabview",
      "subdata": {

      },
      "guessedname": "Y",
      "classlist": [
        "YAHOO.widget.TabView",
        "YAHOO.widget.Tab"
      ],
      "requires": "yahoo, dom, event, element",
      "guessedtype": "property",
      "filelist": [
        "TabView.js",
        "Tab.js"
      ],
      "description": "The tabview module provides a widget for managing content bound to tabs.",
      "submodules": [

      ]
    },
    "yuiloader": {
      "name": "yuiloader",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.YUILoader"
      ],
      "filelist": [
        "yuiloader.js"
      ],
      "description": "Provides dynamic loading for the YUI library.  It includes the dependency\ninfo for the library, and will automatically pull in dependencies for\nthe modules requested.  It supports rollup files (such as utilities.js\nand yahoo-dom-event.js), and will automatically use these when\nappropriate in order to minimize the number of http connections\nrequired to load all of the dependencies.",
      "submodules": [

      ]
    },
    "yahoo": {
      "name": "yahoo",
      "subdata": {

      },
      "title": "YAHOO Global",
      "classlist": [
        "YAHOO.lang",
        "YAHOO.env",
        "YAHOO.env.ua",
        "YAHOO_config",
        "YAHOO"
      ],
      "filelist": [
        "Lang.js",
        "Env.js",
        "YAHOO.js"
      ],
      "description": "The YAHOO object is the single global object used by YUI Library.  It\ncontains utility function for setting up namespaces, inheritance, and\nlogging.  YAHOO.util, YAHOO.widget, and YAHOO.example are namespaces\ncreated automatically for and used by the library.",
      "submodules": [

      ]
    },
    "editor": {
      "name": "editor",
      "subdata": {

      },
      "optional": "container_core, dragdrop",
      "classlist": [
        "YAHOO.widget.Toolbar",
        "YAHOO.widget.Editor",
        "YAHOO.widget.EditorWindow",
        "YAHOO.widget.SimpleEditor",
        "YAHOO.widget.EditorInfo",
        "YAHOO.widget.ToolbarButtonAdvanced",
        "YAHOO.widget.ToolbarButton"
      ],
      "requires": "yahoo, dom, element, event, toolbarbutton",
      "filelist": [
        "toolbar.js",
        "editor.js",
        "simple-editor.js",
        "toolbar-button.js"
      ],
      "description": "<p>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p>",
      "submodules": [

      ]
    },
    "event-delegate": {
      "name": "event-delegate",
      "subdata": {

      },
      "title": "Event Utility Event Delegation Module",
      "classlist": [

      ],
      "requires": "event",
      "filelist": [
        "Delegate.js"
      ],
      "description": "Augments the Event Utility with a <code>delegate</code> method that \nfacilitates easy creation of delegated event listeners.  (Note: Using CSS \nselectors as the filtering criteria for delegated event listeners requires \ninclusion of the Selector Utility.)",
      "submodules": [

      ]
    },
    "treeview": {
      "name": "treeview",
      "subdata": {

      },
      "optional": "animation, json, calendar",
      "title": "TreeView Widget",
      "classlist": [
        "YAHOO.widget.Node",
        "YAHOO.widget.DateNode",
        "YAHOO.widget.RootNode",
        "YAHOO.widget.MenuNode",
        "YAHOO.widget.TreeView",
        "YAHOO.widget.HTMLNode",
        "YAHOO.widget.TextNode",
        "YAHOO.widget.TVAnim",
        "YAHOO.widget.TVFadeOut",
        "YAHOO.widget.TVFadeIn"
      ],
      "requires": "yahoo, dom, event",
      "filelist": [
        "Node.js",
        "DateNode.js",
        "RootNode.js",
        "MenuNode.js",
        "TreeView.js",
        "HTMLNode.js",
        "TextNode.js",
        "TreeViewEd.js",
        "TVAnim.js",
        "TVFadeOut.js",
        "TVFadeIn.js"
      ],
      "description": "The treeview widget is a generic tree building tool.",
      "submodules": [

      ]
    },
    "datasource": {
      "name": "datasource",
      "subdata": {

      },
      "optional": "json, get, connection",
      "title": "DataSource Utility",
      "classlist": [
        "YAHOO.util.DataSourceBase",
        "YAHOO.util.LocalDataSource",
        "YAHOO.util.FunctionDataSource",
        "YAHOO.util.ScriptNodeDataSource",
        "YAHOO.util.XHRDataSource",
        "YAHOO.util.DataSource",
        "YAHOO.util.Number",
        "YAHOO.util.Date",
        "YAHOO.util.DateLocale"
      ],
      "requires": "yahoo, event",
      "filelist": [
        "DataSource.js",
        "Type.js"
      ],
      "description": "The DataSource utility provides a common configurable interface for widgets to\naccess a variety of data, from JavaScript arrays to online database servers.",
      "submodules": [

      ]
    },
    "slider": {
      "name": "slider",
      "subdata": {

      },
      "optional": "animation",
      "title": "Slider Widget",
      "classlist": [
        "YAHOO.widget.Slider",
        "YAHOO.widget.SliderThumb",
        "YAHOO.widget.DualSlider"
      ],
      "requires": "yahoo,dom,dragdrop,event",
      "filelist": [
        "Slider.js",
        "SliderThumb.js",
        "DualSlider.js"
      ],
      "description": "The Slider component is a UI control that enables the user to adjust \nvalues in a finite range along one or two axes. Typically, the Slider \ncontrol is used in a web application as a rich, visual replacement \nfor an input box that takes a number as input. The Slider control can \nalso easily accommodate a second dimension, providing x,y output for \na selection point chosen from a rectangular region.",
      "submodules": [

      ]
    },
    "imageloader": {
      "name": "imageloader",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.ImageLoader.group",
        "YAHOO.util.ImageLoader.imgObj",
        "YAHOO.util.ImageLoader.bgImgObj",
        "YAHOO.util.ImageLoader.srcImgObj",
        "YAHOO.util.ImageLoader.pngBgImgObj"
      ],
      "requires": "yahoo, dom, event",
      "filelist": [
        "ImageLoader.js"
      ],
      "description": "The ImageLoader Utility is a framework to dynamically load images according to certain triggers,\nenabling faster load times and a more responsive UI.",
      "submodules": [

      ]
    },
    "datatable": {
      "name": "datatable",
      "subdata": {

      },
      "optional": "dragdrop, dragdrop",
      "title": "DataTable Widget",
      "classlist": [
        "YAHOO.widget.ScrollingDataTable",
        "YAHOO.widget.RecordSet",
        "YAHOO.widget.Record",
        "YAHOO.util.Chain",
        "YAHOO.widget.BaseCellEditor",
        "YAHOO.widget.CheckboxCellEditor",
        "YAHOO.widget.DateCellEditor",
        "YAHOO.widget.DropdownCellEditor",
        "YAHOO.widget.RadioCellEditor",
        "YAHOO.widget.TextareaCellEditor",
        "YAHOO.widget.TextboxCellEditor",
        "YAHOO.widget.CellEditor",
        "YAHOO.widget.DataTable",
        "YAHOO.widget.ColumnSet",
        "YAHOO.widget.Column",
        "YAHOO.util.Sort",
        "YAHOO.util.ColumnDD",
        "YAHOO.util.ColumnResizer"
      ],
      "requires": "yahoo, dom, event, element, datasource",
      "filelist": [
        "ScrollingDataTable.js",
        "RecordSet.js",
        "Chain.js",
        "CellEditor.js",
        "DataTable.js",
        "ColumnSet.js"
      ],
      "description": "The DataTable widget provides a progressively enhanced DHTML control for\ndisplaying tabular data across A-grade browsers.",
      "submodules": [

      ]
    },
    "cookie": {
      "name": "cookie",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.Cookie"
      ],
      "filelist": [
        "Cookie.js"
      ],
      "description": "Utilities for cookie management",
      "submodules": [

      ]
    },
    "animation": {
      "name": "animation",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.Anim",
        "YAHOO.util.Bezier",
        "YAHOO.util.Scroll",
        "YAHOO.util.ColorAnim",
        "YAHOO.util.Motion",
        "YAHOO.util.AnimMgr",
        "YAHOO.util.Easing"
      ],
      "requires": "yahoo, event, dom",
      "filelist": [
        "Anim.js",
        "Bezier.js",
        "Scroll.js",
        "ColorAnim.js",
        "Motion.js",
        "AnimMgr.js",
        "Easing.js"
      ],
      "description": "The animation module provides allows effects to be added to HTMLElements.",
      "submodules": [

      ]
    },
    "json": {
      "name": "json",
      "subdata": {

      },
      "classlist": [
        "YAHOO.lang.JSON"
      ],
      "filelist": [
        "JSON.js"
      ],
      "description": "Provides methods to parse JSON strings and convert objects to JSON strings.",
      "submodules": [

      ]
    },
    "event": {
      "name": "event",
      "subdata": {

      },
      "title": "Event Utility",
      "classlist": [
        "EventProvider",
        "YAHOO.util.KeyListener",
        "YAHOO.util.CustomEvent",
        "YAHOO.util.Subscriber",
        "YAHOO.util.Event"
      ],
      "requires": "yahoo",
      "filelist": [
        "EventProvider.js",
        "KeyListener.js",
        "CustomEvent.js",
        "Event.js"
      ],
      "description": "The Event Utility provides utilities for managing DOM Events and tools\nfor building event systems",
      "submodules": [

      ]
    },
    "swfdetect": {
      "name": "swfdetect",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.SWFDetect"
      ],
      "filelist": [
        "swfdetect.js"
      ],
      "description": "Utility for Flash version detection",
      "submodules": [

      ]
    },
    "uploader": {
      "name": "uploader",
      "subdata": {

      },
      "title": "Uploader",
      "classlist": [
        "YAHOO.widget.Uploader",
        "YAHOO.widget.FlashAdapter"
      ],
      "requires": "yahoo, dom, element, event",
      "filelist": [
        "swfobject.js",
        "Uploader.js",
        "FlashAdapter.js"
      ],
      "description": "The YUI Uploader Control",
      "submodules": [

      ]
    },
    "yuitest": {
      "name": "yuitest",
      "subdata": {

      },
      "optional": "event-simulte",
      "classlist": [
        "YAHOO.util.Assert",
        "YAHOO.util.AssertionError",
        "YAHOO.util.ComparisonFailure",
        "YAHOO.util.UnexpectedValue",
        "YAHOO.util.ShouldFail",
        "YAHOO.util.ShouldError",
        "YAHOO.util.UnexpectedError",
        "YAHOO.util.ObjectAssert",
        "YAHOO.tool.TestSuite",
        "YAHOO.tool.TestLogger",
        "YAHOO.tool.TestCase",
        "YAHOO.tool.TestCase.Wait",
        "YAHOO.tool.TestNode",
        "YAHOO.tool.TestRunner",
        "YAHOO.util.DateAssert",
        "YAHOO.tool.TestReporter",
        "YAHOO.tool.TestManager",
        "YAHOO.util.ArrayAssert"
      ],
      "requires": "yahoo,dom,event,logger",
      "filelist": [
        "Assert.js",
        "ObjectAssert.js",
        "TestSuite.js",
        "TestFormat.js",
        "TestLogger.js",
        "TestCase.js",
        "TestRunner.js",
        "DateAssert.js",
        "TestReporter.js",
        "TestManager.js",
        "ArrayAssert.js"
      ],
      "description": "The YUI test tool",
      "submodules": [

      ]
    },
    "logger": {
      "name": "logger",
      "subdata": {

      },
      "optional": "dragdrop",
      "title": "Logger Widget",
      "classlist": [
        "LogMsg",
        "LogWriter",
        "LogReader",
        "YAHOO.widget.Logger"
      ],
      "requires": "yahoo, event, dom",
      "filelist": [
        "LogMsg.js",
        "LogWriter.js",
        "LogReader.js",
        "Logger.js"
      ],
      "description": "The Logger widget provides a simple way to read or write log messages in\nJavaScript code. Integration with the YUI Library's debug builds allow\nimplementers to access under-the-hood events, errors, and debugging messages.\nOutput may be read through a LogReader console and/or output to a browser\nconsole.",
      "submodules": [

      ]
    },
    "element": {
      "name": "element",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.Element",
        "YAHOO.util.Attribute",
        "YAHOO.util.AttributeProvider"
      ],
      "requires": "yahoo, dom, event",
      "filelist": [
        "Element.js",
        "Attribute.js",
        "AttributeProvider.js"
      ],
      "description": "Element provides an wrapper object to simplify adding\nevent listeners, using dom methods, and managing attributes.",
      "submodules": [

      ]
    },
    "colorpicker": {
      "name": "colorpicker",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.Color",
        "YAHOO.widget.ColorPicker"
      ],
      "requires": "yahoo, dom, event, element, slider",
      "filelist": [
        "Color.js",
        "ColorPicker.js"
      ],
      "description": "The colorpicker module provides a widget for selecting colors",
      "submodules": [

      ]
    },
    "event-mouseenter": {
      "name": "event-mouseenter",
      "subdata": {

      },
      "title": "Event Utility mouseenter and mouseout Module",
      "classlist": [

      ],
      "requires": "event",
      "filelist": [
        "MouseEnter.js"
      ],
      "description": "Augments the Event Utility with support for the mouseenter and mouseleave \nevents:  A mouseenter event fires the first time the mouse enters an \nelement; a mouseleave event first the first time the mouse leaves an \nelement.",
      "submodules": [

      ]
    },
    "paginator": {
      "name": "paginator",
      "subdata": {

      },
      "guessedname": "Dom",
      "classlist": [
        "YAHOO.widget.Paginator.ui.PageLinks",
        "YAHOO.widget.Paginator.ui.NextPageLink",
        "YAHOO.widget.Paginator.ui.LastPageLink",
        "YAHOO.widget.Paginator.ui.CurrentPageReport",
        "YAHOO.widget.Paginator",
        "YAHOO.widget.Paginator.ui.RowsPerPageDropdown",
        "YAHOO.widget.Paginator.ui.FirstPageLink",
        "YAHOO.widget.Paginator.ui.PreviousPageLink",
        "YAHOO.widget.Paginator.ui.YourComponent"
      ],
      "guessedtype": "property",
      "filelist": [
        "PageLinks.js",
        "NextPageLink.js",
        "LastPageLink.js",
        "CurrentPageReport.js",
        "Paginator.js",
        "RowsPerPageDropDown.js",
        "FirstPageLink.js",
        "PreviousPageLink.js",
        "UIComponentTemplate.js"
      ],
      "description": "The Paginator widget provides a set of controls to navigate through paged\ndata.",
      "submodules": [

      ],
      "uses": "YAHOO.util.EventProvider"
    },
    "progressbar": {
      "name": "progressbar",
      "subdata": {

      },
      "optional": "animation",
      "title": "ProgressBar Widget",
      "classlist": [
        "YAHOO.widget.ProgressBar"
      ],
      "requires": "yahoo, dom, event, element",
      "filelist": [
        "ProgressBar.js"
      ],
      "submodules": [

      ]
    },
    "menu": {
      "name": "menu",
      "subdata": {

      },
      "title": "Menu",
      "classlist": [
        "YAHOO.widget.MenuManager",
        "YAHOO.widget.Menu",
        "YAHOO.widget.MenuBarItem",
        "YAHOO.widget.MenuBar",
        "YAHOO.widget.ContextMenu",
        "YAHOO.widget.MenuItem",
        "YAHOO.widget.ContextMenuItem"
      ],
      "requires": "Event, Dom, Container",
      "filelist": [
        "menuariaplugin.js",
        "menumanager.js",
        "menu.js",
        "menubaritem.js",
        "menubar.js",
        "contextmenu.js",
        "menuitem.js",
        "contextmenuitem.js"
      ],
      "description": "<p>The Menu family of components features a collection of \ncontrols that make it easy to add menus to your website or web application.  \nWith the Menu Controls you can create website fly-out menus, customized \ncontext menus, or application-style menu bars with just a small amount of \nscripting.</p><p>The Menu family of controls features:</p>\n<ul>\n<li>Keyboard and mouse navigation.</li>\n<li>A rich event model that provides access to all of a menu's \ninteresting moments.</li>\n<li>Support for \n<a href=\"http://en.wikipedia.org/wiki/Progressive_Enhancement\">Progressive\nEnhancement</a>; Menus can be created from simple, \nsemantic markup on the page or purely through JavaScript.</li>\n</ul>",
      "submodules": [

      ]
    },
    "profilerviewer": {
      "name": "profilerviewer",
      "subdata": {

      },
      "classlist": [
        "YAHOO.widget.ProfilerViewer"
      ],
      "requires": "yahoo, dom, event, element, profiler, yuiloader",
      "filelist": [
        "profilerviewer.js"
      ],
      "description": "The ProfilerViewer module provides a graphical display for viewing\nthe output of the YUI Profiler <http://developer.yahoo.com/yui/profiler>.",
      "submodules": [

      ]
    },
    "selector": {
      "name": "selector",
      "subdata": {

      },
      "title": "Selector Utility",
      "classlist": [
        "YAHOO.util.Selector"
      ],
      "requires": "yahoo, dom",
      "filelist": [
        "Selector.js"
      ],
      "description": "The selector module provides helper methods allowing CSS3 Selectors to be used with DOM elements.",
      "submodules": [

      ]
    },
    "imagecropper": {
      "name": "imagecropper",
      "subdata": {

      },
      "classlist": [
        "YAHOO.widget.ImageCropper"
      ],
      "requires": "yahoo, dom, dragdrop, element, event, resize",
      "beta": "",
      "filelist": [
        "crop.js"
      ],
      "description": "<p>Creates a Image Cropper control.</p>",
      "submodules": [

      ]
    },
    "Storage": {
      "name": "Storage",
      "subdata": {

      },
      "classlist": [
        "YAHOO.util.StorageEngineHTML5",
        "YAHOO.util.StorageManager",
        "YAHOO.util.Storage",
        "YAHOO.util.StorageEvent",
        "YAHOO.util.StorageEngineKeyed",
        "YAHOO.util.StorageEngineGears",
        "YAHOO.util.StorageEngineSWF"
      ],
      "filelist": [
        "StorageEngineHTML5.js",
        "StorageManager.js",
        "Storage.js",
        "gears_init.js",
        "StorageEvent.js",
        "StorageEngineKeyed.js",
        "StorageEngineGears.js",
        "StorageEngineSWF.js"
      ],
      "description": "The Storage module manages client-side data storage.",
      "submodules": [

      ]
    },
    "autocomplete": {
      "name": "autocomplete",
      "subdata": {

      },
      "optional": "animation",
      "title": "AutoComplete Widget",
      "classlist": [
        "YAHOO.widget.AutoComplete"
      ],
      "requires": "yahoo, dom, event, datasource",
      "filelist": [
        "AutoComplete.js"
      ],
      "description": "The AutoComplete control provides the front-end logic for text-entry suggestion and\ncompletion functionality.",
      "submodules": [

      ]
    },
    "charts": {
      "name": "charts",
      "subdata": {

      },
      "title": "Charts Widget",
      "classlist": [
        "YAHOO.widget.PieChart",
        "YAHOO.widget.Series",
        "YAHOO.widget.CartesianSeries",
        "YAHOO.widget.ColumnSeries",
        "YAHOO.widget.LineSeries",
        "YAHOO.widget.BarSeries",
        "YAHOO.widget.PieSeries",
        "YAHOO.widget.StackedBarSeries",
        "YAHOO.widget.StackedColumnSeries",
        "YAHOO.widget.TimeAxis",
        "YAHOO.widget.NumericAxis",
        "YAHOO.widget.CategoryAxis",
        "YAHOO.widget.CartesianChart",
        "YAHOO.widget.Chart",
        "YAHOO.widget.LineChart",
        "YAHOO.widget.ColumnChart",
        "YAHOO.widget.BarChart",
        "YAHOO.widget.StackedColumnChart",
        "YAHOO.widget.StackedBarChart",
        "YAHOO.widget.Axis"
      ],
      "requires": "yahoo, dom, event, datasource",
      "experimental": "",
      "filelist": [
        "PieChart.js",
        "Series.js",
        "TimeAxis.js",
        "NumericAxis.js",
        "CategoryAxis.js",
        "CartesianChart.js",
        "Chart.js",
        "ChartTypes.js",
        "Axis.js"
      ],
      "description": "The Charts widget provides a Flash control for displaying data\ngraphically by series across A-grade browsers with Flash Player installed.",
      "submodules": [

      ]
    },
    "calendar": {
      "name": "calendar",
      "subdata": {

      },
      "title": "Calendar",
      "classlist": [
        "YAHOO.widget.CalendarNavigator",
        "YAHOO.widget.Calendar",
        "YAHOO.widget.Calendar_Core",
        "YAHOO.widget.CalendarGroup",
        "YAHOO.widget.Calendar2up"
      ],
      "requires": "yahoo,dom,event",
      "filelist": [
        "CalendarNavigator.js",
        "Calendar.js",
        "CalendarGroup.js"
      ],
      "description": "The Calendar component is a UI control that enables users to choose one or more dates from a graphical calendar presented in a one-month or\nmulti-month interface. Calendars are generated entirely via script and can be navigated without any page refreshes.",
      "submodules": [

      ]
    }
  },
  "filemap": {
    "DDProxy.js": {
      "name": "DDProxy.js",
      "module": "dragdrop",
      "classlist": [
        "YAHOO.util.DDProxy"
      ]
    },
    "menubaritem.js": {
      "name": "menubaritem.js",
      "module": "menu",
      "classlist": [
        "YAHOO.widget.MenuBarItem"
      ]
    },
    "IEStyle.js": {
      "name": "IEStyle.js",
      "module": "dom",
      "classlist": [
        "YAHOO.util.Dom.IEStyle"
      ]
    },
    "contextmenuitem.js": {
      "name": "contextmenuitem.js",
      "module": "menu",
      "classlist": [
        "YAHOO.widget.ContextMenuItem"
      ]
    },
    "ScrollingDataTable.js": {
      "name": "ScrollingDataTable.js",
      "module": "datatable",
      "classlist": [
        "YAHOO.widget.ScrollingDataTable"
      ]
    },
    "YAHOO.js": {
      "name": "YAHOO.js",
      "module": "yahoo",
      "classlist": [
        "YAHOO_config",
        "YAHOO"
      ]
    },
    "CartesianChart.js": {
      "name": "CartesianChart.js",
      "module": "charts",
      "classlist": [
        "YAHOO.widget.CartesianChart"
      ]
    },
    "crop.js": {
      "name": "crop.js",
      "module": "imagecropper",
      "classlist": [
        "YAHOO.widget.ImageCropper"
      ]
    },
    "DataTable.js": {
      "name": "DataTable.js",
      "module": "datatable",
      "classlist": [
        "YAHOO.widget.DataTable"
      ]
    },
    "AttributeProvider.js": {
      "name": "AttributeProvider.js",
      "module": "element",
      "classlist": [
        "YAHOO.util.AttributeProvider"
      ]
    },
    "LastPageLink.js": {
      "name": "LastPageLink.js",
      "module": "paginator",
      "classlist": [
        "YAHOO.widget.Paginator.ui.LastPageLink"
      ]
    },
    "Config.js": {
      "name": "Config.js",
      "module": "container",
      "classlist": [
        "YAHOO.util.Config"
      ]
    },
    "menuariaplugin.js": {
      "name": "menuariaplugin.js",
      "module": "menu",
      "classlist": [

      ]
    },
    "yuiloader.js": {
      "name": "yuiloader.js",
      "module": "yuiloader",
      "classlist": [
        "YAHOO.util.YUILoader"
      ]
    },
    "StorageEngineGears.js": {
      "name": "StorageEngineGears.js",
      "module": "Storage",
      "classlist": [
        "YAHOO.util.StorageEngineGears"
      ]
    },
    "StorageManager.js": {
      "name": "StorageManager.js",
      "module": "Storage",
      "classlist": [
        "YAHOO.util.StorageManager"
      ]
    },
    "Type.js": {
      "name": "Type.js",
      "module": "datasource",
      "classlist": [
        "YAHOO.util.Number",
        "YAHOO.util.Date",
        "YAHOO.util.DateLocale"
      ]
    },
    "Dom.js": {
      "name": "Dom.js",
      "module": "dom",
      "classlist": [
        "YAHOO.util.Dom"
      ]
    },
    "UserAction.js": {
      "name": "UserAction.js",
      "module": "event-simulate",
      "classlist": [
        "YAHOO.util.UserAction"
      ]
    },
    "LogWriter.js": {
      "name": "LogWriter.js",
      "module": "logger",
      "classlist": [
        "LogWriter"
      ]
    },
    "OverlayManager.js": {
      "name": "OverlayManager.js",
      "module": "container",
      "classlist": [
        "YAHOO.widget.OverlayManager"
      ]
    },
    "buttongroup.js": {
      "name": "buttongroup.js",
      "module": "button",
      "classlist": [
        "YAHOO.widget.ButtonGroup"
      ]
    },
    "swf.js": {
      "name": "swf.js",
      "module": "swf",
      "classlist": [
        "YAHOO.widget.SWF"
      ]
    },
    "history.js": {
      "name": "history.js",
      "module": "history",
      "classlist": [
        "YAHOO.util.History"
      ]
    },
    "DateMath.js": {
      "name": "DateMath.js",
      "module": "datemath",
      "classlist": [
        "YAHOO.widget.DateMath"
      ]
    },
    "Tab.js": {
      "name": "Tab.js",
      "module": "tabview",
      "classlist": [
        "YAHOO.widget.Tab"
      ]
    },
    "AnimMgr.js": {
      "name": "AnimMgr.js",
      "module": "animation",
      "classlist": [
        "YAHOO.util.AnimMgr"
      ]
    },
    "ColumnSet.js": {
      "name": "ColumnSet.js",
      "module": "datatable",
      "classlist": [
        "YAHOO.widget.ColumnSet",
        "YAHOO.widget.Column",
        "YAHOO.util.Sort",
        "YAHOO.util.ColumnDD",
        "YAHOO.util.ColumnResizer"
      ]
    },
    "Storage.js": {
      "name": "Storage.js",
      "module": "Storage",
      "classlist": [
        "YAHOO.util.Storage"
      ]
    },
    "gears_init.js": {
      "name": "gears_init.js",
      "module": "Storage",
      "classlist": [

      ]
    },
    "Calendar.js": {
      "name": "Calendar.js",
      "module": "calendar",
      "classlist": [
        "YAHOO.widget.Calendar",
        "YAHOO.widget.Calendar_Core"
      ]
    },
    "Event.js": {
      "name": "Event.js",
      "module": "event",
      "classlist": [
        "YAHOO.util.Event"
      ]
    },
    "swfdetect.js": {
      "name": "swfdetect.js",
      "module": "swfdetect",
      "classlist": [
        "YAHOO.util.SWFDetect"
      ]
    },
    "Lang.js": {
      "name": "Lang.js",
      "module": "yahoo",
      "classlist": [
        "YAHOO.lang"
      ]
    },
    "connectionx.js": {
      "name": "connectionx.js",
      "module": "connection",
      "classlist": [

      ]
    },
    "ImageLoader.js": {
      "name": "ImageLoader.js",
      "module": "imageloader",
      "classlist": [
        "YAHOO.util.ImageLoader.group",
        "YAHOO.util.ImageLoader.imgObj",
        "YAHOO.util.ImageLoader.bgImgObj",
        "YAHOO.util.ImageLoader.srcImgObj",
        "YAHOO.util.ImageLoader.pngBgImgObj"
      ]
    },
    "TestCase.js": {
      "name": "TestCase.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.tool.TestCase",
        "YAHOO.tool.TestCase.Wait"
      ]
    },
    "DragDrop.js": {
      "name": "DragDrop.js",
      "module": "dragdrop",
      "classlist": [
        "YAHOO.util.DragDrop"
      ]
    },
    "TestReporter.js": {
      "name": "TestReporter.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.tool.TestReporter"
      ]
    },
    "DDTarget.js": {
      "name": "DDTarget.js",
      "module": "dragdrop",
      "classlist": [
        "YAHOO.util.DDTarget"
      ]
    },
    "contextmenu.js": {
      "name": "contextmenu.js",
      "module": "menu",
      "classlist": [
        "YAHOO.widget.ContextMenu"
      ]
    },
    "StorageEngineSWF.js": {
      "name": "StorageEngineSWF.js",
      "module": "Storage",
      "classlist": [
        "YAHOO.util.StorageEngineSWF"
      ]
    },
    "Tooltip.js": {
      "name": "Tooltip.js",
      "module": "container",
      "classlist": [
        "YAHOO.widget.Tooltip"
      ]
    },
    "editor.js": {
      "name": "editor.js",
      "module": "editor",
      "classlist": [
        "YAHOO.widget.Editor",
        "YAHOO.widget.EditorWindow"
      ]
    },
    "swfobject.js": {
      "name": "swfobject.js",
      "module": "uploader",
      "classlist": [

      ]
    },
    "CustomEvent.js": {
      "name": "CustomEvent.js",
      "module": "event",
      "classlist": [
        "YAHOO.util.CustomEvent",
        "YAHOO.util.Subscriber"
      ]
    },
    "RootNode.js": {
      "name": "RootNode.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.RootNode"
      ]
    },
    "DualSlider.js": {
      "name": "DualSlider.js",
      "module": "slider",
      "classlist": [
        "YAHOO.widget.DualSlider"
      ]
    },
    "simple-editor.js": {
      "name": "simple-editor.js",
      "module": "editor",
      "classlist": [
        "YAHOO.widget.SimpleEditor",
        "YAHOO.widget.EditorInfo"
      ]
    },
    "Node.js": {
      "name": "Node.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.Node"
      ]
    },
    "Profiler.js": {
      "name": "Profiler.js",
      "module": "profiler",
      "classlist": [
        "YAHOO.tool.Profiler"
      ]
    },
    "Dialog.js": {
      "name": "Dialog.js",
      "module": "container",
      "classlist": [
        "YAHOO.widget.Dialog"
      ]
    },
    "layoutunit.js": {
      "name": "layoutunit.js",
      "module": "layout",
      "classlist": [
        "YAHOO.widget.LayoutUnit"
      ]
    },
    "Module.js": {
      "name": "Module.js",
      "module": "container",
      "classlist": [
        "YAHOO.widget.Module"
      ]
    },
    "Element-Delegate.js": {
      "name": "Element-Delegate.js",
      "module": "element-delegate",
      "classlist": [

      ]
    },
    "Color.js": {
      "name": "Color.js",
      "module": "dom",
      "classlist": [
        "YAHOO.util.Dom.Color"
      ]
    },
    "connection_xdr.js": {
      "name": "connection_xdr.js",
      "module": "connection",
      "classlist": [

      ]
    },
    "Uploader.js": {
      "name": "Uploader.js",
      "module": "uploader",
      "classlist": [
        "YAHOO.widget.Uploader"
      ]
    },
    "Region.js": {
      "name": "Region.js",
      "module": "dom",
      "classlist": [
        "YAHOO.util.Region",
        "YAHOO.util.Point"
      ]
    },
    "ContainerEffect.js": {
      "name": "ContainerEffect.js",
      "module": "container",
      "classlist": [
        "YAHOO.widget.ContainerEffect"
      ]
    },
    "TestSuite.js": {
      "name": "TestSuite.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.tool.TestSuite"
      ]
    },
    "CurrentPageReport.js": {
      "name": "CurrentPageReport.js",
      "module": "paginator",
      "classlist": [
        "YAHOO.widget.Paginator.ui.CurrentPageReport"
      ]
    },
    "Motion.js": {
      "name": "Motion.js",
      "module": "animation",
      "classlist": [
        "YAHOO.util.Motion"
      ]
    },
    "TestFormat.js": {
      "name": "TestFormat.js",
      "module": "yuitest",
      "classlist": [

      ]
    },
    "Chart.js": {
      "name": "Chart.js",
      "module": "charts",
      "classlist": [
        "YAHOO.widget.Chart"
      ]
    },
    "stylesheet.js": {
      "name": "stylesheet.js",
      "module": "stylesheet",
      "classlist": [
        "YAHOO.util.StyleSheet"
      ]
    },
    "Get.js": {
      "name": "Get.js",
      "module": "get",
      "classlist": [
        "YAHOO.util.Get"
      ]
    },
    "Bezier.js": {
      "name": "Bezier.js",
      "module": "animation",
      "classlist": [
        "YAHOO.util.Bezier"
      ]
    },
    "resize.js": {
      "name": "resize.js",
      "module": "resize",
      "classlist": [
        "YAHOO.util.Resize"
      ]
    },
    "swfstore.js": {
      "name": "swfstore.js",
      "module": "swfstore",
      "classlist": [
        "YAHOO.util.SWFStore"
      ]
    },
    "toolbar.js": {
      "name": "toolbar.js",
      "module": "editor",
      "classlist": [
        "YAHOO.widget.Toolbar"
      ]
    },
    "menubar.js": {
      "name": "menubar.js",
      "module": "menu",
      "classlist": [
        "YAHOO.widget.MenuBar"
      ]
    },
    "menuitem.js": {
      "name": "menuitem.js",
      "module": "menu",
      "classlist": [
        "YAHOO.widget.MenuItem"
      ]
    },
    "ArrayAssert.js": {
      "name": "ArrayAssert.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.util.ArrayAssert"
      ]
    },
    "PieChart.js": {
      "name": "PieChart.js",
      "module": "charts",
      "classlist": [
        "YAHOO.widget.PieChart"
      ]
    },
    "HTMLNode.js": {
      "name": "HTMLNode.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.HTMLNode"
      ]
    },
    "AutoComplete.js": {
      "name": "AutoComplete.js",
      "module": "autocomplete",
      "classlist": [
        "YAHOO.widget.AutoComplete"
      ]
    },
    "TreeViewEd.js": {
      "name": "TreeViewEd.js",
      "module": "treeview",
      "classlist": [

      ]
    },
    "MouseEnter.js": {
      "name": "MouseEnter.js",
      "module": "event-mouseenter",
      "classlist": [

      ]
    },
    "TestManager.js": {
      "name": "TestManager.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.tool.TestManager"
      ]
    },
    "KeyListener.js": {
      "name": "KeyListener.js",
      "module": "event",
      "classlist": [
        "YAHOO.util.KeyListener"
      ]
    },
    "CalendarGroup.js": {
      "name": "CalendarGroup.js",
      "module": "calendar",
      "classlist": [
        "YAHOO.widget.CalendarGroup",
        "YAHOO.widget.Calendar2up"
      ]
    },
    "Carousel.js": {
      "name": "Carousel.js",
      "module": "carousel",
      "classlist": [
        "YAHOO.widget.Carousel"
      ]
    },
    "Cookie.js": {
      "name": "Cookie.js",
      "module": "cookie",
      "classlist": [
        "YAHOO.util.Cookie"
      ]
    },
    "NumericAxis.js": {
      "name": "NumericAxis.js",
      "module": "charts",
      "classlist": [
        "YAHOO.widget.NumericAxis"
      ]
    },
    "Anim.js": {
      "name": "Anim.js",
      "module": "animation",
      "classlist": [
        "YAHOO.util.Anim"
      ]
    },
    "FlashAdapter.js": {
      "name": "FlashAdapter.js",
      "module": "uploader",
      "classlist": [
        "YAHOO.widget.FlashAdapter"
      ]
    },
    "profilerviewer.js": {
      "name": "profilerviewer.js",
      "module": "profilerviewer",
      "classlist": [
        "YAHOO.widget.ProfilerViewer"
      ]
    },
    "TestRunner.js": {
      "name": "TestRunner.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.tool.TestNode",
        "YAHOO.tool.TestRunner"
      ]
    },
    "Env.js": {
      "name": "Env.js",
      "module": "yahoo",
      "classlist": [
        "YAHOO.env",
        "YAHOO.env.ua"
      ]
    },
    "ObjectAssert.js": {
      "name": "ObjectAssert.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.util.ObjectAssert"
      ]
    },
    "StorageEngineHTML5.js": {
      "name": "StorageEngineHTML5.js",
      "module": "Storage",
      "classlist": [
        "YAHOO.util.StorageEngineHTML5"
      ]
    },
    "MenuNode.js": {
      "name": "MenuNode.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.MenuNode"
      ]
    },
    "menumanager.js": {
      "name": "menumanager.js",
      "module": "menu",
      "classlist": [
        "YAHOO.widget.MenuManager"
      ]
    },
    "TabView.js": {
      "name": "TabView.js",
      "module": "tabview",
      "classlist": [
        "YAHOO.widget.TabView"
      ]
    },
    "layout.js": {
      "name": "layout.js",
      "module": "layout",
      "classlist": [
        "YAHOO.widget.Layout"
      ]
    },
    "RowsPerPageDropDown.js": {
      "name": "RowsPerPageDropDown.js",
      "module": "paginator",
      "classlist": [
        "YAHOO.widget.Paginator.ui.RowsPerPageDropdown"
      ]
    },
    "Chain.js": {
      "name": "Chain.js",
      "module": "datatable",
      "classlist": [
        "YAHOO.util.Chain"
      ]
    },
    "PageLinks.js": {
      "name": "PageLinks.js",
      "module": "paginator",
      "classlist": [
        "YAHOO.widget.Paginator.ui.PageLinks"
      ]
    },
    "ChartTypes.js": {
      "name": "ChartTypes.js",
      "module": "charts",
      "classlist": [
        "YAHOO.widget.LineChart",
        "YAHOO.widget.ColumnChart",
        "YAHOO.widget.BarChart",
        "YAHOO.widget.StackedColumnChart",
        "YAHOO.widget.StackedBarChart"
      ]
    },
    "Delegate.js": {
      "name": "Delegate.js",
      "module": "event-delegate",
      "classlist": [

      ]
    },
    "CalendarNavigator.js": {
      "name": "CalendarNavigator.js",
      "module": "calendar",
      "classlist": [
        "YAHOO.widget.CalendarNavigator"
      ]
    },
    "SimpleDialog.js": {
      "name": "SimpleDialog.js",
      "module": "container",
      "classlist": [
        "YAHOO.widget.SimpleDialog"
      ]
    },
    "Element.js": {
      "name": "Element.js",
      "module": "element",
      "classlist": [
        "YAHOO.util.Element"
      ]
    },
    "Selector.js": {
      "name": "Selector.js",
      "module": "selector",
      "classlist": [
        "YAHOO.util.Selector"
      ]
    },
    "Paginator.js": {
      "name": "Paginator.js",
      "module": "paginator",
      "classlist": [
        "YAHOO.widget.Paginator"
      ]
    },
    "Series.js": {
      "name": "Series.js",
      "module": "charts",
      "classlist": [
        "YAHOO.widget.Series",
        "YAHOO.widget.CartesianSeries",
        "YAHOO.widget.ColumnSeries",
        "YAHOO.widget.LineSeries",
        "YAHOO.widget.BarSeries",
        "YAHOO.widget.PieSeries",
        "YAHOO.widget.StackedBarSeries",
        "YAHOO.widget.StackedColumnSeries"
      ]
    },
    "StorageEvent.js": {
      "name": "StorageEvent.js",
      "module": "Storage",
      "classlist": [
        "YAHOO.util.StorageEvent"
      ]
    },
    "connection_core.js": {
      "name": "connection_core.js",
      "module": "connection",
      "classlist": [
        "YAHOO.util.Connect"
      ]
    },
    "LogReader.js": {
      "name": "LogReader.js",
      "module": "logger",
      "classlist": [
        "LogReader"
      ]
    },
    "NextPageLink.js": {
      "name": "NextPageLink.js",
      "module": "paginator",
      "classlist": [
        "YAHOO.widget.Paginator.ui.NextPageLink"
      ]
    },
    "Scroll.js": {
      "name": "Scroll.js",
      "module": "animation",
      "classlist": [
        "YAHOO.util.Scroll"
      ]
    },
    "TVFadeOut.js": {
      "name": "TVFadeOut.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.TVFadeOut"
      ]
    },
    "StorageEngineKeyed.js": {
      "name": "StorageEngineKeyed.js",
      "module": "Storage",
      "classlist": [
        "YAHOO.util.StorageEngineKeyed"
      ]
    },
    "TimeAxis.js": {
      "name": "TimeAxis.js",
      "module": "charts",
      "classlist": [
        "YAHOO.widget.TimeAxis"
      ]
    },
    "Overlay.js": {
      "name": "Overlay.js",
      "module": "container",
      "classlist": [
        "YAHOO.widget.Overlay"
      ]
    },
    "CellEditor.js": {
      "name": "CellEditor.js",
      "module": "datatable",
      "classlist": [
        "YAHOO.widget.BaseCellEditor",
        "YAHOO.widget.CheckboxCellEditor",
        "YAHOO.widget.DateCellEditor",
        "YAHOO.widget.DropdownCellEditor",
        "YAHOO.widget.RadioCellEditor",
        "YAHOO.widget.TextareaCellEditor",
        "YAHOO.widget.TextboxCellEditor",
        "YAHOO.widget.CellEditor"
      ]
    },
    "DD.js": {
      "name": "DD.js",
      "module": "dragdrop",
      "classlist": [
        "YAHOO.util.DD"
      ]
    },
    "DateAssert.js": {
      "name": "DateAssert.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.util.DateAssert"
      ]
    },
    "TVFadeIn.js": {
      "name": "TVFadeIn.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.TVFadeIn"
      ]
    },
    "Logger.js": {
      "name": "Logger.js",
      "module": "logger",
      "classlist": [
        "YAHOO.widget.Logger"
      ]
    },
    "ProgressBar.js": {
      "name": "ProgressBar.js",
      "module": "progressbar",
      "classlist": [
        "YAHOO.widget.ProgressBar"
      ]
    },
    "DragDropMgr.js": {
      "name": "DragDropMgr.js",
      "module": "dragdrop",
      "classlist": [
        "YAHOO.util.DragDropMgr",
        "YAHOO.util.DragDropMgr.ElementWrapper"
      ]
    },
    "DateNode.js": {
      "name": "DateNode.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.DateNode"
      ]
    },
    "Easing.js": {
      "name": "Easing.js",
      "module": "animation",
      "classlist": [
        "YAHOO.util.Easing"
      ]
    },
    "button.js": {
      "name": "button.js",
      "module": "button",
      "classlist": [
        "YAHOO.widget.Button"
      ]
    },
    "Slider.js": {
      "name": "Slider.js",
      "module": "slider",
      "classlist": [
        "YAHOO.widget.Slider"
      ]
    },
    "TestLogger.js": {
      "name": "TestLogger.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.tool.TestLogger"
      ]
    },
    "DataSource.js": {
      "name": "DataSource.js",
      "module": "datasource",
      "classlist": [
        "YAHOO.util.DataSourceBase",
        "YAHOO.util.LocalDataSource",
        "YAHOO.util.FunctionDataSource",
        "YAHOO.util.ScriptNodeDataSource",
        "YAHOO.util.XHRDataSource",
        "YAHOO.util.DataSource"
      ]
    },
    "Attribute.js": {
      "name": "Attribute.js",
      "module": "element",
      "classlist": [
        "YAHOO.util.Attribute"
      ]
    },
    "UIComponentTemplate.js": {
      "name": "UIComponentTemplate.js",
      "module": "paginator",
      "classlist": [
        "YAHOO.widget.Paginator.ui.YourComponent"
      ]
    },
    "ColorAnim.js": {
      "name": "ColorAnim.js",
      "module": "animation",
      "classlist": [
        "YAHOO.util.ColorAnim"
      ]
    },
    "SliderThumb.js": {
      "name": "SliderThumb.js",
      "module": "slider",
      "classlist": [
        "YAHOO.widget.SliderThumb"
      ]
    },
    "PreviousPageLink.js": {
      "name": "PreviousPageLink.js",
      "module": "paginator",
      "classlist": [
        "YAHOO.widget.Paginator.ui.PreviousPageLink"
      ]
    },
    "LogMsg.js": {
      "name": "LogMsg.js",
      "module": "logger",
      "classlist": [
        "LogMsg"
      ]
    },
    "RecordSet.js": {
      "name": "RecordSet.js",
      "module": "datatable",
      "classlist": [
        "YAHOO.widget.RecordSet",
        "YAHOO.widget.Record"
      ]
    },
    "TextNode.js": {
      "name": "TextNode.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.TextNode"
      ]
    },
    "FirstPageLink.js": {
      "name": "FirstPageLink.js",
      "module": "paginator",
      "classlist": [
        "YAHOO.widget.Paginator.ui.FirstPageLink"
      ]
    },
    "EventProvider.js": {
      "name": "EventProvider.js",
      "module": "event",
      "classlist": [
        "EventProvider"
      ]
    },
    "Assert.js": {
      "name": "Assert.js",
      "module": "yuitest",
      "classlist": [
        "YAHOO.util.Assert",
        "YAHOO.util.AssertionError",
        "YAHOO.util.ComparisonFailure",
        "YAHOO.util.UnexpectedValue",
        "YAHOO.util.ShouldFail",
        "YAHOO.util.ShouldError",
        "YAHOO.util.UnexpectedError"
      ]
    },
    "TreeView.js": {
      "name": "TreeView.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.TreeView"
      ]
    },
    "CategoryAxis.js": {
      "name": "CategoryAxis.js",
      "module": "charts",
      "classlist": [
        "YAHOO.widget.CategoryAxis"
      ]
    },
    "toolbar-button.js": {
      "name": "toolbar-button.js",
      "module": "editor",
      "classlist": [
        "YAHOO.widget.ToolbarButtonAdvanced",
        "YAHOO.widget.ToolbarButton"
      ]
    },
    "menu.js": {
      "name": "menu.js",
      "module": "menu",
      "classlist": [
        "YAHOO.widget.Menu"
      ]
    },
    "JSON.js": {
      "name": "JSON.js",
      "module": "json",
      "classlist": [
        "YAHOO.lang.JSON"
      ]
    },
    "Axis.js": {
      "name": "Axis.js",
      "module": "charts",
      "classlist": [
        "YAHOO.widget.Axis"
      ]
    },
    "ColorPicker.js": {
      "name": "ColorPicker.js",
      "module": "colorpicker",
      "classlist": [
        "YAHOO.widget.ColorPicker"
      ]
    },
    "TVAnim.js": {
      "name": "TVAnim.js",
      "module": "treeview",
      "classlist": [
        "YAHOO.widget.TVAnim"
      ]
    },
    "Panel.js": {
      "name": "Panel.js",
      "module": "container",
      "classlist": [
        "YAHOO.widget.Panel"
      ]
    }
  },
  "majorversion": 2,
  "namespaces": [
    "YAHOO.widget",
    "YAHOO.util",
    "YAHOO.util.Dom",
    "YAHOO.util.ImageLoader",
    "YAHOO.lang",
    "YAHOO.widget.Paginator.ui",
    "YAHOO.tool",
    "YAHOO.tool.TestFormat",
    "YAHOO.tool.TestCase"
  ],
  "version": "2.8.0r4",
  "classmap": {
    "YAHOO.widget.MenuItem": {
      "shortname": "MenuItem",
      "methods": {
        "configSelected": {
          "guessedname": "configSelected",
          "guessedtype": "function",
          "description": "Event handler for when the \"selected\" configuration property \nof the menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "removeClassNameForState": {
          "private": "",
          "guessedname": "removeClassNameForState",
          "guessedtype": "function",
          "description": "Removes a class name from a MenuItem instance's &#60;LI&#62; and &#60;A&#62; elements\nthat represents a MenuItem's state - \"disabled,\" \"checked,\" etc.",
          "params": [
            {
              "name": "state",
              "type": "String",
              "description": " String representing a state - \"disabled,\" \"checked,\" etc."
            }
          ]
        },
        "configOnClick": {
          "guessedname": "configOnClick",
          "guessedtype": "function",
          "description": "Event handler for when the \"onclick\" configuration property \nof the menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "getPreviousSibling": {
          "guessedname": "getPreviousSibling",
          "guessedtype": "function",
          "description": "Finds the menu item's previous sibling.",
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "getClassNameForState": {
          "private": "",
          "guessedname": "getClassNameForState",
          "guessedtype": "function",
          "description": "Returns a class name for the specified prefix and state.  If the class name does not \nyet exist, it is created and stored in the CLASS_NAMES object to increase performance.",
          "params": [
            {
              "name": "prefix",
              "type": "String",
              "description": " String representing the prefix for the class name"
            },
            {
              "name": "state",
              "type": "String",
              "description": " String representing a state - \"disabled,\" \"checked,\" etc."
            }
          ]
        },
        "configTarget": {
          "guessedname": "configTarget",
          "guessedtype": "function",
          "description": "Event handler for when the \"target\" configuration property \nof the menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "_onSubmenuBeforeHide": {
          "private": "",
          "guessedname": "_onSubmenuBeforeHide",
          "guessedtype": "function",
          "description": "\"beforehide\" Custom Event handler for a submenu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "_createKeyListener": {
          "private": "",
          "guessedname": "_createKeyListener",
          "guessedtype": "function",
          "description": "\"show\" event handler for a Menu instance - responsible for \nsetting up the KeyListener instance for a MenuItem.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "args",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "keyData",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "configClassName": {
          "guessedname": "configClassName",
          "guessedtype": "function",
          "description": "Event handler for when the \"classname\" configuration \nproperty of a menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "getNextEnabledSibling": {
          "guessedname": "getNextEnabledSibling",
          "guessedtype": "function",
          "description": "Finds the menu item's next enabled sibling.",
          "return": {
            "type": "",
            "description": "YAHOO.widget.MenuItem"
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the menu item.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "getPreviousEnabledSibling": {
          "guessedname": "getPreviousEnabledSibling",
          "guessedtype": "function",
          "description": "Finds the menu item's previous enabled sibling.",
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "getNextSibling": {
          "guessedname": "getNextSibling",
          "guessedtype": "function",
          "description": "Finds the menu item's next sibling.",
          "return": {
            "type": "",
            "description": "YAHOO.widget.MenuItem"
          }
        },
        "configStrongEmphasis": {
          "guessedname": "configStrongEmphasis",
          "guessedtype": "function",
          "description": "Event handler for when the \"strongemphasis\" configuration \nproperty of the menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the menu item's <code>&#60;li&#62;</code> element \nfrom its parent <code>&#60;ul&#62;</code> element."
        },
        "_dispatchClickEvent": {
          "guessedname": "_dispatchClickEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Dispatches a DOM \"click\" event to the anchor element of a \nMenuItem instance."
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Causes the menu item to receive the focus and fires the \nfocus event."
        },
        "configHelpText": {
          "guessedname": "configHelpText",
          "guessedtype": "function",
          "description": "Event handler for when the \"helptext\" configuration property \nof the menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "configText": {
          "guessedname": "configText",
          "guessedtype": "function",
          "description": "Event handler for when the \"text\" configuration property of \nthe menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "_initSubTree": {
          "guessedname": "_initSubTree",
          "private": "",
          "guessedtype": "function",
          "description": "Iterates the source element's childNodes collection and uses \nthe child nodes to instantiate other menus."
        },
        "configURL": {
          "guessedname": "configURL",
          "guessedtype": "function",
          "description": "Event handler for when the \"url\" configuration property of \nthe menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "blur": {
          "guessedname": "blur",
          "guessedtype": "function",
          "description": "Causes the menu item to lose focus and fires the \nblur event."
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The MenuItem class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references \nfor pre-existing markup, and creates required markup if it is not \nalready present.",
          "params": [
            {
              "name": "p_oObject",
              "type": "String",
              "description": " String specifying the text of the menu item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>",
              "description": " Object specifying \nthe <code>&#60;li&#62;</code> element of the menu item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>",
              "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the menu item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>",
              "description": " Object \nspecifying the <code>&#60;option&#62;</code> element of the menu item."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the menu item. See configuration class documentation \nfor more details."
            }
          ]
        },
        "configDisabled": {
          "guessedname": "configDisabled",
          "guessedtype": "function",
          "description": "Event handler for when the \"disabled\" configuration property \nof the menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "configChecked": {
          "guessedname": "configChecked",
          "guessedtype": "function",
          "description": "Event handler for when the \"checked\" configuration property \nof the menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "configSubmenu": {
          "guessedname": "configSubmenu",
          "guessedtype": "function",
          "description": "Event handler for when the \"submenu\" configuration property \nof the menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "_createRootNodeStructure": {
          "guessedname": "_createRootNodeStructure",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the core DOM structure for the menu item."
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes an item's configurable properties."
        },
        "configKeyListener": {
          "guessedname": "configKeyListener",
          "guessedtype": "function",
          "description": "Event handler for when the \"keylistener\" configuration \nproperty of a menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "addClassNameForState": {
          "private": "",
          "guessedname": "addClassNameForState",
          "guessedtype": "function",
          "description": "Applies a class name to a MenuItem instance's &#60;LI&#62; and &#60;A&#62; elements\nthat represents a MenuItem's state - \"disabled,\" \"checked,\" etc.",
          "params": [
            {
              "name": "state",
              "type": "String",
              "description": " String representing a state - \"disabled,\" \"checked,\" etc."
            }
          ]
        },
        "configEmphasis": {
          "guessedname": "configEmphasis",
          "guessedtype": "function",
          "description": "Event handler for when the \"emphasis\" configuration property\nof the menu item changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item\nthat fired the event."
            }
          ]
        },
        "hasFocus": {
          "guessedname": "hasFocus",
          "guessedtype": "function",
          "description": "Returns a boolean indicating whether or not the menu item\nhas focus.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        }
      },
      "name": "YAHOO.widget.MenuItem",
      "guessedname": "MenuItem",
      "module": "menu",
      "namespace": "YAHOO.widget",
      "events": {
        "keyPressEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user presses an alphanumeric key when the \nmenu item has focus.  Passes back the DOM Event object as an argument."
        },
        "mouseOverEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the mouse has entered the menu item.  Passes \nback the DOM Event object as an argument."
        },
        "focusEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the menu item receives focus."
        },
        "keyUpEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user releases a key when the menu item has \nfocus.  Passes back the DOM Event object as an argument."
        },
        "destroyEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the menu item's <code>&#60;li&#62;</code> \nelement is removed from its parent <code>&#60;ul&#62;</code> element."
        },
        "mouseUpEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user releases a mouse button while the mouse \nis over the menu item.  Passes back the DOM Event object as an argument."
        },
        "keyDownEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user presses a key when the menu item has \nfocus.  Passes back the DOM Event object as an argument."
        },
        "clickEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user clicks the on the menu item.  Passes \nback the DOM Event object as an argument."
        },
        "mouseDownEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user mouses down on the menu item.  Passes \nback the DOM Event object as an argument."
        },
        "blurEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the menu item loses the input focus."
        },
        "mouseOutEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the mouse has left the menu item.  Passes back \nthe DOM Event object as an argument."
        }
      },
      "constructors": [
        {
          "description": "Creates an item for a menu.",
          "params": [
            {
              "name": "p_oObject",
              "type": "String",
              "description": " String specifying the text of the menu item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>",
              "description": " Object specifying \nthe <code>&#60;li&#62;</code> element of the menu item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>",
              "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the menu item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>",
              "description": " Object \nspecifying the <code>&#60;option&#62;</code> element of the menu item."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the menu item. See configuration class documentation \nfor more details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Creates an item for a menu.",
      "file": "menuitem.js",
      "configs": {
        "checked": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the menu item should be rendered \nwith a checkmark."
        },
        "submenu": {
          "default": "null",
          "type": "Menu|String|Object|<a href=\"http://www.w3.org/TR/2000/\nWD-DOM-Level-1-20000929/level-one-html.html#ID-58190037\">\nHTMLElement</a>",
          "description": "Object specifying the submenu to be appended to the \nmenu item.  The value can be one of the following: <ul><li>Object \nspecifying a Menu instance.</li><li>Object literal specifying the\nmenu to be created.  Format: <code>{ id: [menu id], itemdata: \n[<a href=\"YAHOO.widget.Menu.html#itemData\">array of values for \nitems</a>] }</code>.</li><li>String specifying the id attribute \nof the <code>&#60;div&#62;</code> element of the menu.</li><li>\nObject specifying the <code>&#60;div&#62;</code> element of the \nmenu.</li></ul>"
        },
        "helptext": {
          "default": "null",
          "type": "String|<a href=\"http://www.w3.org/TR/\n2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-58190037\">\nHTMLElement</a>",
          "description": "String specifying additional instructional text to \naccompany the text for the menu item.",
          "deprecated": "Use \"text\" configuration property to add help text markup.  \nFor example: <code>oMenuItem.cfg.setProperty(\"text\", \"Copy &#60;em \nclass=\\\"helptext\\\"&#62;Ctrl + C&#60;/em&#62;\");</code>"
        },
        "classname": {
          "default": "null",
          "type": "String",
          "description": "CSS class to be applied to the menu item's root \n<code>&#60;li&#62;</code> element.  The specified class(es) are \nappended in addition to the default class as specified by the menu \nitem's CSS_CLASS_NAME constant."
        },
        "text": {
          "default": "\"\"",
          "type": "String",
          "description": "String specifying the text label for the menu item.  \nWhen building a menu from existing HTML the value of this property\nwill be interpreted from the menu's markup."
        },
        "url": {
          "default": "\"#\"",
          "type": "String",
          "description": "String specifying the URL for the menu item's anchor's \n\"href\" attribute.  When building a menu from existing HTML the value \nof this property will be interpreted from the menu's markup."
        },
        "selected": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the menu item should \nbe highlighted."
        },
        "onclick": {
          "default": "null",
          "type": "Object",
          "description": "Object literal representing the code to be executed when \nthe item is clicked.  Format:<br> <code> {<br> \n<strong>fn:</strong> Function,   &#47;&#47; The handler to call when \nthe event fires.<br> <strong>obj:</strong> Object, &#47;&#47; An \nobject to  pass back to the handler.<br> <strong>scope:</strong> \nObject &#47;&#47; The object to use for the scope of the handler.\n<br> } </code>"
        },
        "emphasis": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the text of the menu item will be \nrendered with emphasis.",
          "deprecated": "Use the \"text\" configuration property to add emphasis.  \nFor example: <code>oMenuItem.cfg.setProperty(\"text\", \"&#60;em&#62;Some \nText&#60;/em&#62;\");</code>"
        },
        "disabled": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the menu item should be disabled.  \n(Disabled menu items are  dimmed and will not respond to user input \nor fire events.)"
        },
        "target": {
          "default": "null",
          "type": "String",
          "description": "String specifying the value for the \"target\" attribute \nof the menu item's anchor element. <strong>Specifying a target will \nrequire the user to click directly on the menu item's anchor node in\norder to cause the browser to navigate to the specified URL.</strong> \nWhen building a menu from existing HTML the value of this property \nwill be interpreted from the menu's markup."
        },
        "keylistener": {
          "default": "null",
          "type": "Object",
          "description": "Object literal representing the key(s) that can be used \nto trigger the MenuItem's \"click\" event.  Possible attributes are \nshift (boolean), alt (boolean), ctrl (boolean) and keys (either an int \nor an array of ints representing keycodes)."
        },
        "strongemphasis": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the text of the menu item will be \nrendered with strong emphasis.",
          "deprecated": "Use the \"text\" configuration property to add strong emphasis.  \nFor example: <code>oMenuItem.cfg.setProperty(\"text\", \"&#60;strong&#62; \nSome Text&#60;/strong&#62;\");</code>"
        }
      },
      "properties": {
        "parent": {
          "guessedname": "parent",
          "default": "null",
          "type": "YAHOO.widget.Menu",
          "guessedtype": "property",
          "description": "Object reference to the menu item's parent menu."
        },
        "CSS_CLASS_NAME": {
          "final": "",
          "guessedname": "CSS_CLASS_NAME",
          "default": "\"yuimenuitem\"",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the CSS class(es) to be applied to the \n<code>&#60;li&#62;</code> element of the menu item."
        },
        "srcElement": {
          "guessedname": "srcElement",
          "default": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-74680021\">HTMLLIElement</a>|<a href=\"http://www.\nw3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-38450247\"\n>HTMLOptGroupElement</a>|<a href=\"http://www.w3.org/TR/2000/WD-DOM-\nLevel-1-20000929/level-one-html.html#ID-70901257\">HTMLOptionElement</a>",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>|<a href=\"http://www.w3.\norg/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-38450247\">\nHTMLOptGroupElement</a>|<a href=\"http://www.w3.org/TR/2000/WD-DOM-\nLevel-1-20000929/level-one-html.html#ID-70901257\">HTMLOptionElement</a>",
          "guessedtype": "property",
          "description": "Object reference to the HTML element (either \n<code>&#60;li&#62;</code>, <code>&#60;optgroup&#62;</code> or \n<code>&#60;option&#62;</code>) used create the menu item."
        },
        "id": {
          "guessedname": "id",
          "default": "null",
          "type": "String",
          "guessedtype": "property",
          "description": "Id of the menu item's root <code>&#60;li&#62;</code> \nelement.  This property should be set via the constructor using the \nconfiguration object literal.  If an id is not specified, then one will \nbe created using the \"generateId\" method of the Dom utility."
        },
        "CSS_LABEL_CLASS_NAME": {
          "final": "",
          "guessedname": "CSS_LABEL_CLASS_NAME",
          "default": "\"yuimenuitemlabel\"",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the CSS class(es) to be applied to the \nmenu item's <code>&#60;a&#62;</code> element."
        },
        "_oHelpTextEM": {
          "guessedname": "_oHelpTextEM",
          "private": "",
          "default": "null",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-58190037\">HTMLElement</a>",
          "guessedtype": "property",
          "description": "Object reference to the menu item's help text \n<code>&#60;em&#62;</code> element."
        },
        "constructor": {
          "guessedname": "constructor",
          "default": "YAHOO.widget.MenuItem",
          "type": "YAHOO.widget.MenuItem",
          "guessedtype": "property",
          "description": "Object reference to the menu item's constructor function."
        },
        "value": {
          "guessedname": "value",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object reference to the menu item's value."
        },
        "SUBMENU_TYPE": {
          "final": "",
          "guessedname": "SUBMENU_TYPE",
          "type": "YAHOO.widget.Menu",
          "guessedtype": "property",
          "description": "Object representing the type of menu to instantiate and \nadd when parsing the child nodes of the menu item's source HTML element."
        },
        "_oSubmenu": {
          "guessedname": "_oSubmenu",
          "private": "",
          "default": "null",
          "type": "YAHOO.widget.Menu",
          "guessedtype": "property",
          "description": "Object reference to the menu item's submenu."
        },
        "_oOnclickAttributeValue": {
          "guessedname": "_oOnclickAttributeValue",
          "private": "",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object reference to the menu item's current value for the \n\"onclick\" configuration attribute."
        },
        "_oAnchor": {
          "guessedname": "_oAnchor",
          "private": "",
          "default": "null",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-48250443\">HTMLAnchorElement</a>",
          "guessedtype": "property",
          "description": "Object reference to the menu item's \n<code>&#60;a&#62;</code> element."
        },
        "index": {
          "guessedname": "index",
          "default": "null",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number indicating the ordinal position of the menu item in \nits group."
        },
        "browser": {
          "guessedname": "browser",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the browser.",
          "deprecated": "Use YAHOO.env.ua"
        },
        "groupIndex": {
          "guessedname": "groupIndex",
          "default": "null",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number indicating the index of the group to which the menu \nitem belongs."
        },
        "_sClassName": {
          "guessedname": "_sClassName",
          "private": "",
          "default": "null",
          "type": "String",
          "guessedtype": "property",
          "description": "The current value of the \"classname\" configuration attribute."
        },
        "element": {
          "guessedname": "element",
          "default": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level\n-one-html.html#ID-74680021\">HTMLLIElement</a>",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>",
          "guessedtype": "property",
          "description": "Object reference to the menu item's \n<code>&#60;li&#62;</code> element."
        }
      }
    },
    "YAHOO.widget.ContainerEffect": {
      "shortname": "ContainerEffect",
      "methods": {
        "handleStartAnimateOut": {
          "guessedname": "handleStartAnimateOut",
          "guessedtype": "function",
          "description": "The default onStart handler for the out-animation.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object"
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the object.",
          "return": {
            "type": "String",
            "description": "The string representation of the ContainerEffect"
          }
        },
        "handleCompleteAnimateOut": {
          "guessedname": "handleCompleteAnimateOut",
          "guessedtype": "function",
          "description": "The default onComplete handler for the out-animation.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object"
            }
          ]
        },
        "animateOut": {
          "guessedname": "animateOut",
          "guessedtype": "function",
          "description": "Triggers the out-animation."
        },
        "handleTweenAnimateIn": {
          "guessedname": "handleTweenAnimateIn",
          "guessedtype": "function",
          "description": "The default onTween handler for the in-animation.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object"
            }
          ]
        },
        "handleStartAnimateIn": {
          "guessedname": "handleStartAnimateIn",
          "guessedtype": "function",
          "description": "The default onStart handler for the in-animation.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object"
            }
          ]
        },
        "handleCompleteAnimateIn": {
          "guessedname": "handleCompleteAnimateIn",
          "guessedtype": "function",
          "description": "The default onComplete handler for the in-animation.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object"
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Initializes the animation classes and events."
        },
        "handleTweenAnimateOut": {
          "guessedname": "handleTweenAnimateOut",
          "guessedtype": "function",
          "description": "The default onTween handler for the out-animation.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object"
            }
          ]
        },
        "animateIn": {
          "guessedname": "animateIn",
          "guessedtype": "function",
          "description": "Triggers the in-animation."
        },
        "FADE": {
          "guessedname": "FADE",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "overlay",
              "type": "YAHOO.widget.Overlay",
              "description": " The Overlay object to animate"
            },
            {
              "name": "dur",
              "type": "Number",
              "description": " The duration of the animation"
            }
          ],
          "description": "A pre-configured ContainerEffect instance that can be used for fading \nan overlay in and out.",
          "return": {
            "type": "YAHOO.widget.ContainerEffect",
            "description": "The configured ContainerEffect object"
          }
        },
        "SLIDE": {
          "guessedname": "SLIDE",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "overlay",
              "type": "YAHOO.widget.Overlay",
              "description": " The Overlay object to animate"
            },
            {
              "name": "dur",
              "type": "Number",
              "description": " The duration of the animation"
            }
          ],
          "description": "A pre-configured ContainerEffect instance that can be used for sliding an \noverlay in and out.",
          "return": {
            "type": "YAHOO.widget.ContainerEffect",
            "description": "The configured ContainerEffect object"
          }
        }
      },
      "name": "YAHOO.widget.ContainerEffect",
      "guessedname": "ContainerEffect",
      "module": "container",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "ContainerEffect encapsulates animation transitions that are executed when \nan Overlay is shown or hidden.",
          "params": [
            {
              "name": "overlay",
              "type": "YAHOO.widget.Overlay",
              "description": " The Overlay that the animation \nshould be associated with"
            },
            {
              "name": "attrIn",
              "type": "Object",
              "description": " The object literal representing the animation \narguments to be used for the animate-in transition. The arguments for \nthis literal are: attributes(object, see YAHOO.util.Anim for description), \nduration(Number), and method(i.e. Easing.easeIn)."
            },
            {
              "name": "attrOut",
              "type": "Object",
              "description": " The object literal representing the animation \narguments to be used for the animate-out transition. The arguments for  \nthis literal are: attributes(object, see YAHOO.util.Anim for description), \nduration(Number), and method(i.e. Easing.easeIn)."
            },
            {
              "name": "targetElement",
              "type": "HTMLElement",
              "description": " Optional. The target element that  \nshould be animated during the transition. Defaults to overlay.element."
            },
            {
              "name": "Optional.",
              "type": "class",
              "description": " The animation class to instantiate. Defaults to \nYAHOO.util.Anim. Other options include YAHOO.util.Motion."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ContainerEffect encapsulates animation transitions that are executed when \nan Overlay is shown or hidden.",
      "file": "ContainerEffect.js",
      "properties": {
        "animClass": {
          "guessedname": "animClass",
          "type": "class",
          "guessedtype": "property",
          "description": "The animation class to use for animating the overlay"
        },
        "attrOut": {
          "guessedname": "attrOut",
          "type": "Object",
          "guessedtype": "property",
          "description": "The animation attributes to use when transitioning out of view"
        },
        "attrIn": {
          "guessedname": "attrIn",
          "type": "Object",
          "guessedtype": "property",
          "description": "The animation attributes to use when transitioning into view"
        },
        "targetElement": {
          "guessedname": "targetElement",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The target element to be animated"
        },
        "overlay": {
          "guessedname": "overlay",
          "type": "YAHOO.widget.Overlay",
          "guessedtype": "property",
          "description": "The overlay to animate"
        }
      }
    },
    "YAHOO.widget.Axis": {
      "shortname": "Axis",
      "name": "YAHOO.widget.Axis",
      "guessedname": "Axis",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "Defines a CartesianChart's vertical or horizontal axis."
        }
      ],
      "guessedtype": "function",
      "description": "Defines a CartesianChart's vertical or horizontal axis.",
      "file": "Axis.js",
      "properties": {
        "labelFunction": {
          "guessedname": "labelFunction",
          "type": "String",
          "guessedtype": "property",
          "description": "A string reference to the globally-accessible function that may be called to\ndetermine each of the label values for this axis. Also accepts function references."
        },
        "reverse": {
          "guessedname": "reverse",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If true, the items on the axis will be drawn in opposite direction."
        },
        "title": {
          "guessedname": "title",
          "type": "String",
          "guessedtype": "property",
          "description": "The text that will appear next to the axis to indicate information about the data that it displays."
        },
        "labelSpacing": {
          "guessedname": "labelSpacing",
          "type": "Number",
          "guessedtype": "property",
          "description": "The space, in pixels, between labels on an axis."
        },
        "type": {
          "guessedname": "type",
          "type": "String",
          "guessedtype": "property",
          "description": "The type of axis."
        }
      }
    },
    "YAHOO.widget.StackedBarSeries": {
      "shortname": "StackedBarSeries",
      "name": "YAHOO.widget.StackedBarSeries",
      "guessedname": "StackedBarSeries",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "StackedBarSeries class for the YUI Charts widget."
        }
      ],
      "guessedtype": "function",
      "description": "StackedBarSeries class for the YUI Charts widget.",
      "file": "Series.js",
      "uses": [
        "YAHOO.widget.CartesianSeries"
      ]
    },
    "YAHOO.widget.TVFadeIn": {
      "shortname": "TVFadeIn",
      "methods": {
        "onComplete": {
          "guessedname": "onComplete",
          "guessedtype": "function",
          "description": "Clean up and invoke callback"
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "toString",
          "return": {
            "type": "string",
            "description": "the string representation of the instance"
          }
        },
        "animate": {
          "guessedname": "animate",
          "guessedtype": "function",
          "description": "Performs the animation"
        }
      },
      "name": "YAHOO.widget.TVFadeIn",
      "guessedname": "TVFadeIn",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "A 1/2 second fade-in animation.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  the element to animate"
            },
            {
              "name": "callback",
              "type": "function",
              "description": "  function to invoke when the animation is finished"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A 1/2 second fade-in animation.",
      "file": "TVFadeIn.js",
      "properties": {
        "callback": {
          "guessedname": "callback",
          "type": "function",
          "guessedtype": "property",
          "description": "the callback to invoke when the animation is complete"
        },
        "el": {
          "guessedname": "el",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The element to animate"
        }
      }
    },
    "YAHOO.util.FunctionDataSource": {
      "shortname": "FunctionDataSource",
      "superclass": "YAHOO.util.DataSourceBase",
      "methods": {
        "makeConnection": {
          "guessedname": "makeConnection",
          "guessedtype": "function",
          "description": "Overriding method passes query to a function. The returned response is then\nforwarded to the handleResponse function.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  Callback object literal."
            },
            {
              "name": "oCaller",
              "type": "Object",
              "description": "  (deprecated) Use oCallback.scope."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Transaction ID."
          }
        }
      },
      "name": "YAHOO.util.FunctionDataSource",
      "extends": "YAHOO.util.DataSourceBase",
      "guessedname": "FunctionDataSource",
      "module": "datasource",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "FunctionDataSource class for JavaScript functions.",
          "params": [
            {
              "name": "oLiveData",
              "type": "HTMLElement",
              "description": "   Pointer to live data."
            },
            {
              "name": "oConfigs",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "FunctionDataSource class for JavaScript functions.",
      "file": "DataSource.js",
      "properties": {
        "scope": {
          "guessedname": "scope",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "description": "Context in which to execute the function. By default, is the DataSource\ninstance itself. If set, the function will receive the DataSource instance\nas an additional argument."
        }
      }
    },
    "YAHOO.widget.Slider": {
      "shortname": "Slider",
      "superclass": "YAHOO.util.DragDrop",
      "methods": {
        "b4MouseDown": {
          "guessedname": "b4MouseDown",
          "private": "",
          "guessedtype": "function",
          "description": "Resets the constraints before moving the thumb."
        },
        "getThumb": {
          "guessedname": "getThumb",
          "guessedtype": "function",
          "description": "Returns a reference to this slider's thumb",
          "return": {
            "type": "SliderThumb",
            "description": "this slider's thumb"
          }
        },
        "YAHOO.widget.Slider.getHorizSlider": {
          "guessedname": "getHorizSlider",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "sBGElId",
              "type": "String",
              "description": " the id of the slider's background element"
            },
            {
              "name": "sHandleElId",
              "type": "String",
              "description": " the id of the thumb element"
            },
            {
              "name": "iLeft",
              "type": "int",
              "description": " the number of pixels the element can move left"
            },
            {
              "name": "iRight",
              "type": "int",
              "description": " the number of pixels the element can move right"
            },
            {
              "name": "iTickSize",
              "type": "int",
              "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."
            }
          ],
          "description": "Factory method for creating a horizontal slider",
          "return": {
            "type": "Slider",
            "description": "a horizontal slider control"
          }
        },
        "handleKeyPress": {
          "guessedname": "handleKeyPress",
          "guessedtype": "function",
          "description": "Executed when a keypress event happens with the control focused.\nPrevents the default behavior for navigation keys.  The actual\nlogic for moving the slider thumb in response to a key event\nhappens in handleKeyDown.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the keypress event"
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Slider toString",
          "return": {
            "type": "string",
            "description": "string representation of the instance"
          }
        },
        "unlock": {
          "guessedname": "unlock",
          "guessedtype": "function",
          "description": "Unlocks the slider, overrides YAHOO.util.DragDrop"
        },
        "initSlider": {
          "guessedname": "initSlider",
          "guessedtype": "function",
          "description": "Initializes the slider.  Executed in the constructor",
          "params": [
            {
              "name": "sType",
              "type": "string",
              "description": " the type of slider (horiz, vert, region)"
            }
          ]
        },
        "focus": {
          "guessedname": "focus",
          "private": "",
          "guessedtype": "function",
          "description": "Try to focus the element when clicked so we can add\naccessibility features"
        },
        "lock": {
          "guessedname": "lock",
          "guessedtype": "function",
          "description": "Locks the slider, overrides YAHOO.util.DragDrop"
        },
        "fireEvents": {
          "private": "",
          "guessedname": "fireEvents",
          "guessedtype": "function",
          "description": "Fires the change event if the value has been changed.  Ignored if we are in\nthe middle of an animation as the event will fire when the animation is\ncomplete",
          "params": [
            {
              "name": "thumbEvent",
              "type": "boolean",
              "description": " set to true if this event is fired from an event\nthat occurred on the thumb.  If it is, the state of the\nthumb dd object should be correct.  Otherwise, the event\noriginated on the background, so the thumb state needs to\nbe refreshed before proceeding."
            }
          ]
        },
        "YAHOO.widget.Slider.getVertSlider": {
          "guessedname": "getVertSlider",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "sBGElId",
              "type": "String",
              "description": " the id of the slider's background element"
            },
            {
              "name": "sHandleElId",
              "type": "String",
              "description": " the id of the thumb element"
            },
            {
              "name": "iUp",
              "type": "int",
              "description": " the number of pixels the element can move up"
            },
            {
              "name": "iDown",
              "type": "int",
              "description": " the number of pixels the element can move down"
            },
            {
              "name": "iTickSize",
              "type": "int",
              "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."
            }
          ],
          "description": "Factory method for creating a vertical slider",
          "return": {
            "type": "Slider",
            "description": "a vertical slider control"
          }
        },
        "getYValue": {
          "guessedname": "getYValue",
          "guessedtype": "function",
          "description": "Returns the slider's thumb Y offset from the start position",
          "return": {
            "type": "int",
            "description": "the current vertical offset"
          }
        },
        "endMove": {
          "guessedname": "endMove",
          "private": "",
          "guessedtype": "function",
          "description": "Fired when the slider movement ends"
        },
        "verifyOffset": {
          "guessedname": "verifyOffset",
          "guessedtype": "function",
          "description": "Checks the background position element position.  If it has moved from the\nbaseline position, the constraints for the thumb are reset",
          "return": {
            "type": "boolean",
            "description": "True if the offset is the same as the baseline."
          }
        },
        "onSliderEnd": {
          "guessedname": "onSlideEnd",
          "guessedtype": "function",
          "description": "Event that fires at the end of a slider thumb move",
          "deprecated": "use instance.subscribe(\"slideEnd\") instead"
        },
        "_setRegionValue": {
          "guessedname": "_setRegionValue",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "source",
              "type": "int",
              "description": "  what triggered the set (e.g. Slider.SOURCE_SET_VALUE)"
            },
            {
              "name": "newOffset",
              "type": "int",
              "description": " the number of pixels the thumb should be\npositioned away from the initial start point (x axis for region)"
            },
            {
              "name": "newOffset2",
              "type": "int",
              "description": " the number of pixels the thumb should be\npositioned away from the initial start point (y axis for region)"
            },
            {
              "name": "skipAnim",
              "type": "boolean",
              "description": " set to true to disable the animation\nfor this move action (but not others)."
            },
            {
              "name": "force",
              "type": "boolean",
              "description": " ignore the locked setting and set value anyway"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": " when true, do not fire events"
            }
          ],
          "description": "Worker function to execute the value set operation.  Accepts type of\nset operation in addition to the usual setValue params.",
          "return": {
            "type": "boolean",
            "description": "true if the move was performed, false if it failed"
          }
        },
        "setValue": {
          "guessedname": "setValue",
          "guessedtype": "function",
          "description": "Provides a way to set the value of the slider in code.",
          "params": [
            {
              "name": "newOffset",
              "type": "int",
              "description": " the number of pixels the thumb should be\npositioned away from the initial start point"
            },
            {
              "name": "skipAnim",
              "type": "boolean",
              "description": " set to true to disable the animation\nfor this move action (but not others)."
            },
            {
              "name": "force",
              "type": "boolean",
              "description": " ignore the locked setting and set value anyway"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": " when true, do not fire events"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if the move was performed, false if it failed"
          }
        },
        "YAHOO.widget.Slider.getSliderRegion": {
          "guessedname": "getSliderRegion",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "sBGElId",
              "type": "String",
              "description": " the id of the slider's background element"
            },
            {
              "name": "sHandleElId",
              "type": "String",
              "description": " the id of the thumb element"
            },
            {
              "name": "iLeft",
              "type": "int",
              "description": " the number of pixels the element can move left"
            },
            {
              "name": "iRight",
              "type": "int",
              "description": " the number of pixels the element can move right"
            },
            {
              "name": "iUp",
              "type": "int",
              "description": " the number of pixels the element can move up"
            },
            {
              "name": "iDown",
              "type": "int",
              "description": " the number of pixels the element can move down"
            },
            {
              "name": "iTickSize",
              "type": "int",
              "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."
            }
          ],
          "description": "Factory method for creating a slider region like the one in the color\npicker example",
          "return": {
            "type": "Slider",
            "description": "a slider region control"
          }
        },
        "getXValue": {
          "guessedname": "getXValue",
          "guessedtype": "function",
          "description": "Returns the slider's thumb X offset from the start position",
          "return": {
            "type": "int",
            "description": "the current horizontal offset"
          }
        },
        "resetThumbConstraints": {
          "guessedname": "resetThumbConstraints",
          "guessedtype": "function",
          "protected": "",
          "description": "Resets the X and Y contraints for the thumb.  Used in lieu of the thumb\ninstance's inherited resetConstraints because some logic was not\napplicable."
        },
        "_getNextX": {
          "guessedname": "_getNextX",
          "private": "",
          "guessedtype": "function",
          "description": "Returns the next X tick value based on the current coord and the target coord."
        },
        "setThumbCenterPoint": {
          "guessedname": "setThumbCenterPoint",
          "guessedtype": "function",
          "description": "When the thumb is available, we cache the centerpoint of the element so\nwe can position the element correctly when the background is clicked"
        },
        "moveOneTick": {
          "private": "",
          "guessedname": "moveOneTick",
          "guessedtype": "function",
          "description": "Move the slider one tick mark towards its final coordinate.  Used\nfor the animation when tick marks are defined",
          "params": [
            {
              "name": "the",
              "type": "int[]",
              "description": " destination coordinate"
            }
          ]
        },
        "moveThumb": {
          "private": "",
          "guessedname": "moveThumb",
          "guessedtype": "function",
          "description": "Move the associated slider moved to a timeout to try to get around the \nmousedown stealing moz does when I move the slider element between the \ncursor and the background during the mouseup event",
          "params": [
            {
              "name": "x",
              "type": "int",
              "description": " the X coordinate of the click"
            },
            {
              "name": "y",
              "type": "int",
              "description": " the Y coordinate of the click"
            },
            {
              "name": "skipAnim",
              "type": "boolean",
              "description": " don't animate if the move happend onDrag"
            },
            {
              "name": "midMove",
              "type": "boolean",
              "description": " set to true if this is not terminating\nthe slider movement"
            }
          ]
        },
        "handleKeyDown": {
          "guessedname": "handleKeyDown",
          "guessedtype": "function",
          "description": "Executed when a keydown event happens with the control focused.\nUpdates the slider value and display when the keypress is an\narrow key, home, or end as long as enableKeys is set to true.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the keydown event"
            }
          ]
        },
        "_setValue": {
          "guessedname": "_setValue",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "source",
              "type": "int",
              "description": "  what triggered the set (e.g. Slider.SOURCE_SET_VALUE)"
            },
            {
              "name": "newOffset",
              "type": "int",
              "description": " the number of pixels the thumb should be\npositioned away from the initial start point"
            },
            {
              "name": "skipAnim",
              "type": "boolean",
              "description": " set to true to disable the animation\nfor this move action (but not others)."
            },
            {
              "name": "force",
              "type": "boolean",
              "description": " ignore the locked setting and set value anyway"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": " when true, do not fire events"
            }
          ],
          "description": "Worker function to execute the value set operation.  Accepts type of\nset operation in addition to the usual setValue params.",
          "return": {
            "type": "boolean",
            "description": "true if the move was performed, false if it failed"
          }
        },
        "_getNextY": {
          "guessedname": "_getNextY",
          "private": "",
          "guessedtype": "function",
          "description": "Returns the next Y tick value based on the current coord and the target coord."
        },
        "onChange": {
          "guessedname": "onChange",
          "guessedtype": "function",
          "description": "Event that fires when the value of the slider has changed",
          "params": [
            {
              "name": "firstOffset",
              "type": "int",
              "description": " the number of pixels the thumb has moved\nfrom its start position. Normal horizontal and vertical sliders will only\nhave the firstOffset.  Regions will have both, the first is the horizontal\noffset, the second the vertical."
            },
            {
              "name": "secondOffset",
              "type": "int",
              "description": " the y offset for region sliders"
            }
          ],
          "deprecated": "use instance.subscribe(\"change\") instead"
        },
        "onMouseDown": {
          "guessedname": "onMouseDown",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the mousedown event for the slider background"
        },
        "getValue": {
          "guessedname": "getValue",
          "guessedtype": "function",
          "description": "Returns the slider's thumb offset from the start position",
          "return": {
            "type": "int",
            "description": "the current value"
          }
        },
        "setStartSliderState": {
          "guessedname": "setStartSliderState",
          "guessedtype": "function",
          "description": "Initialization that sets up the value offsets once the elements are ready"
        },
        "onSlideStart": {
          "guessedname": "onSlideStart",
          "guessedtype": "function",
          "description": "Event that fires when the at the beginning of the slider thumb move",
          "deprecated": "use instance.subscribe(\"slideStart\") instead"
        },
        "setRegionValue": {
          "guessedname": "setRegionValue",
          "guessedtype": "function",
          "description": "Provides a way to set the value of the region slider in code.",
          "params": [
            {
              "name": "newOffset",
              "type": "int",
              "description": " the number of pixels the thumb should be\npositioned away from the initial start point (x axis for region)"
            },
            {
              "name": "newOffset2",
              "type": "int",
              "description": " the number of pixels the thumb should be\npositioned away from the initial start point (y axis for region)"
            },
            {
              "name": "skipAnim",
              "type": "boolean",
              "description": " set to true to disable the animation\nfor this move action (but not others)."
            },
            {
              "name": "force",
              "type": "boolean",
              "description": " ignore the locked setting and set value anyway"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": " when true, do not fire events"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if the move was performed, false if it failed"
          }
        },
        "YAHOO.widget.Slider.getHorizDualSlider": {
          "guessedname": "getHorizDualSlider",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "bg",
              "type": "String",
              "description": " the id of the slider's background element"
            },
            {
              "name": "minthumb",
              "type": "String",
              "description": " the id of the min thumb"
            },
            {
              "name": "maxthumb",
              "type": "String",
              "description": " the id of the thumb thumb"
            },
            {
              "name": "range",
              "type": "int",
              "description": " the number of pixels the thumbs can move within"
            },
            {
              "name": "iTickSize",
              "type": "int",
              "description": " (optional) the element should move this many pixels\nat a time"
            },
            {
              "name": "initVals",
              "type": "Array",
              "description": " (optional) [min,max] Initial thumb placement"
            }
          ],
          "description": "Factory method for creating a horizontal dual-thumb slider",
          "return": {
            "type": "DualSlider",
            "description": "a horizontal dual-thumb slider control"
          }
        },
        "YAHOO.widget.Slider.getVertDualSlider": {
          "guessedname": "getVertDualSlider",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "bg",
              "type": "String",
              "description": " the id of the slider's background element"
            },
            {
              "name": "minthumb",
              "type": "String",
              "description": " the id of the min thumb"
            },
            {
              "name": "maxthumb",
              "type": "String",
              "description": " the id of the thumb thumb"
            },
            {
              "name": "range",
              "type": "int",
              "description": " the number of pixels the thumbs can move within"
            },
            {
              "name": "iTickSize",
              "type": "int",
              "description": " (optional) the element should move this many pixels\nat a time"
            },
            {
              "name": "initVals",
              "type": "Array",
              "description": " (optional) [min,max] Initial thumb placement"
            }
          ],
          "description": "Factory method for creating a vertical dual-thumb slider.",
          "return": {
            "type": "DualSlider",
            "description": "a vertical dual-thumb slider control"
          }
        },
        "onDrag": {
          "guessedname": "onDrag",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the onDrag event for the slider background"
        },
        "onAvailable": {
          "guessedname": "onAvailable",
          "guessedtype": "function",
          "description": "Executed when the slider element is available"
        },
        "_bindKeyEvents": {
          "guessedname": "_bindKeyEvents",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets up the listeners for keydown and key press events."
        },
        "initThumb": {
          "guessedname": "initThumb",
          "guessedtype": "function",
          "description": "Initializes the slider's thumb. Executed in the constructor.",
          "params": [
            {
              "name": "t",
              "type": "YAHOO.widget.SliderThumb",
              "description": " the slider thumb"
            }
          ]
        },
        "thumbMouseUp": {
          "guessedname": "thumbMouseUp",
          "private": "",
          "guessedtype": "function",
          "description": "Handles mouseup event on the thumb"
        }
      },
      "name": "YAHOO.widget.Slider",
      "extends": "YAHOO.util.DragDrop",
      "module": "slider",
      "namespace": "YAHOO.widget",
      "events": {
        "slideEnd": {
          "description": "Event that fires at the end of a slider thumb move"
        },
        "change": {
          "description": "Event the fires when the value of the control changes.  If \nthe control is animated the event will fire every point\nalong the way.",
          "params": [
            {
              "name": "newOffset|x",
              "type": "int",
              "description": " the new offset for normal sliders, or the new\nx offset for region sliders"
            },
            {
              "name": "y",
              "type": "int",
              "description": " the number of pixels the thumb has moved on the y axis\n(region sliders only)"
            }
          ]
        },
        "slideStart": {
          "description": "Event that fires at the beginning of a slider thumb move."
        }
      },
      "constructors": [
        {
          "description": "A DragDrop implementation that can be used as a background for a\nslider.  It takes a reference to the thumb instance \nso it can delegate some of the events to it.  The goal is to make the \nthumb jump to the location on the background when the background is \nclicked.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "     The id of the element linked to this instance"
            },
            {
              "name": "sGroup",
              "type": "String",
              "description": " The group of related DragDrop items"
            },
            {
              "name": "oThumb",
              "type": "SliderThumb",
              "description": " The thumb for this slider"
            },
            {
              "name": "sType",
              "type": "String",
              "description": "  The type of slider (horiz, vert, region)"
            }
          ]
        }
      ],
      "description": "A DragDrop implementation that can be used as a background for a\nslider.  It takes a reference to the thumb instance \nso it can delegate some of the events to it.  The goal is to make the \nthumb jump to the location on the background when the background is \nclicked.",
      "file": "Slider.js",
      "properties": {
        "moveComplete": {
          "guessedname": "moveComplete",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "moveComplete is set to true when the slider has moved to its final\ndestination.  For animated slider, this value can be checked in \nthe onChange handler to make it possible to execute logic only\nwhen the move is complete rather than at all points along the way.\nDeprecated because this flag is only useful when the background is\nclicked and the slider is animated.  If the user drags the thumb,\nthe flag is updated when the drag is over ... the final onDrag event\nfires before the mouseup the ends the drag, so the implementer will\nnever see it.",
          "deprecated": "use the slideEnd event instead"
        },
        "lastOffset": {
          "guessedname": "lastOffset",
          "type": "[int, int]",
          "guessedtype": "property",
          "description": "Saved offset used to protect against NaN problems when slider is\nset to display:none"
        },
        "dragOnly": {
          "guessedname": "dragOnly",
          "default": "true",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Override the default setting of dragOnly to true."
        },
        "Slider.SOURCE_KEY_EVENT": {
          "final": "",
          "guessedname": "SOURCE_KEY_EVENT",
          "default": "2",
          "static": "",
          "guessedtype": "property",
          "description": "Constant for valueChangeSource, indicating that the value was altered\nby hitting any of the supported keyboard characters."
        },
        "enableKeys": {
          "guessedname": "enableKeys",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Enables the arrow, home and end keys, defaults to true."
        },
        "animate": {
          "guessedname": "animate",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag that determines if the thumb will animate when moved"
        },
        "thumb": {
          "guessedname": "thumb",
          "type": "YAHOO.widget.SliderThumb",
          "guessedtype": "property",
          "description": "A YAHOO.widget.SliderThumb instance that we will use to \nreposition the thumb when the background is clicked"
        },
        "tickPause": {
          "guessedname": "tickPause",
          "type": "int",
          "guessedtype": "property",
          "description": "Adjustment factor for tick animation, the more ticks, the\nfaster the animation (by default)"
        },
        "isTarget": {
          "guessedname": "isTarget",
          "private": "",
          "guessedtype": "property",
          "description": "Overrides the isTarget property in YAHOO.util.DragDrop"
        },
        "type": {
          "guessedname": "type",
          "type": "string",
          "guessedtype": "property",
          "description": "The type of the slider (horiz, vert, region)"
        },
        "Slider.SOURCE_UI_EVENT": {
          "final": "",
          "guessedname": "SOURCE_UI_EVENT",
          "default": "1",
          "static": "",
          "guessedtype": "property",
          "description": "Constant for valueChangeSource, indicating that the user clicked or\ndragged the slider to change the value."
        },
        "animationDuration": {
          "guessedname": "animationDuration",
          "default": "0.2",
          "type": "int",
          "guessedtype": "property",
          "description": "If animation is configured, specifies the length of the animation\nin seconds."
        },
        "Slider.SOURCE_SET_VALUE": {
          "final": "",
          "guessedname": "SOURCE_SET_VALUE",
          "default": "2",
          "static": "",
          "guessedtype": "property",
          "description": "Constant for valueChangeSource, indicating that the value was altered\nby a programmatic call to setValue/setRegionValue."
        },
        "Slider.ANIM_AVAIL": {
          "guessedname": "ANIM_AVAIL",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "By default, animation is available if the animation utility is detected."
        },
        "keyIncrement": {
          "guessedname": "keyIncrement",
          "type": "int",
          "guessedtype": "property",
          "description": "Specifies the number of pixels the arrow keys will move the slider.\nDefault is 20."
        },
        "valueChangeSource": {
          "guessedname": "valueChangeSource",
          "type": "int",
          "guessedtype": "property",
          "description": "When the slider value changes, this property is set to identify where\nthe update came from.  This will be either 1, meaning the slider was\nclicked or dragged, or 2, meaning that it was set via a setValue() call.\nThis can be used within event handlers to apply some of the logic only\nwhen dealing with one source or another.",
          "since": "2.3.0"
        },
        "baselinePos": {
          "guessedname": "baselinePos",
          "type": "[int, int]",
          "guessedtype": "property",
          "description": "The basline position of the background element, used\nto determine if the background has moved since the last\noperation."
        },
        "SOURCE_UI_EVENT": {
          "final": "",
          "guessedname": "SOURCE_UI_EVENT",
          "default": "1",
          "guessedtype": "property",
          "deprecated": "use static Slider.SOURCE_UI_EVENT",
          "description": "Constant for valueChangeSource, indicating that the user clicked or\ndragged the slider to change the value."
        },
        "backgroundEnabled": {
          "guessedname": "backgroundEnabled",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Set to false to disable a background click thumb move"
        },
        "thumbCenterPoint": {
          "guessedname": "thumbCenterPoint",
          "type": "{\"x\": int, \"y\": int}",
          "guessedtype": "property",
          "description": "The center of the slider element is stored so we can \nplace it in the correct position when the background is clicked."
        },
        "SOURCE_SET_VALUE": {
          "final": "",
          "guessedname": "SOURCE_SET_VALUE",
          "default": "2",
          "guessedtype": "property",
          "deprecated": "use static Slider.SOURCE_SET_VALUE",
          "description": "Constant for valueChangeSource, indicating that the value was altered\nby a programmatic call to setValue/setRegionValue."
        },
        "_silent": {
          "private": "",
          "guessedname": "_silent",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Indicates whether or not events will be supressed for the current\nslide operation"
        },
        "_mouseDown": {
          "guessedname": "_mouseDown",
          "private": "",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Tracks the state of the mouse button to aid in when events are fired."
        }
      },
      "uses": [
        "YAHOO.util.EventProvider"
      ]
    },
    "YAHOO.widget.TVAnim": {
      "shortname": "TVAnim",
      "methods": {
        "getAnim": {
          "guessedname": "getAnim",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type of animation"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  the element to element (probably the children div)"
            },
            {
              "name": "callback",
              "type": "function",
              "description": "  function to invoke when the animation is done."
            }
          ],
          "description": "Returns a ygAnim instance of the given type",
          "return": {
            "type": "YAHOO.util.Animation",
            "description": "the animation instance"
          }
        },
        "isValid": {
          "guessedname": "isValid",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type of animation"
            }
          ],
          "description": "Returns true if the specified animation class is available",
          "return": {
            "type": "boolean",
            "description": "true if valid, false if not"
          }
        }
      },
      "name": "YAHOO.widget.TVAnim",
      "guessedname": "TVAnim",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "static": "",
      "guessedtype": "function",
      "description": "A static factory class for tree view expand/collapse animations",
      "file": "TVAnim.js",
      "properties": {
        "FADE_IN": {
          "guessedname": "FADE_IN",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Constant for the fade in animation"
        },
        "FADE_OUT": {
          "guessedname": "FADE_OUT",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Constant for the fade out animation"
        }
      }
    },
    "YAHOO.tool.TestRunner": {
      "shortname": "TestRunner",
      "methods": {
        "_buildTestTree": {
          "guessedname": "_buildTestTree",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Builds the test tree based on items in the master suite. The tree is a hierarchical\nrepresentation of the test suites, test cases, and test functions. The resulting tree\nis stored in _root and the pointer _cur is set to the root initially.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "run": {
          "guessedname": "run",
          "static": "",
          "guessedtype": "function",
          "description": "Runs the test suite.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "add": {
          "guessedname": "add",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "testObject",
              "type": "",
              "description": " Either a TestCase or a TestSuite that should be run."
            }
          ],
          "description": "Adds a test suite or test case to the list of test objects to run.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "clear": {
          "guessedname": "clear",
          "static": "",
          "guessedtype": "function",
          "description": "Removes all test objects from the runner.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "fireEvent": {
          "guessedname": "fireEvent",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The type of event to fire."
            },
            {
              "name": "data",
              "type": "Object",
              "description": " (Optional) Data for the event."
            }
          ],
          "description": "Fires events for the TestRunner. This overrides the default fireEvent()\nmethod from EventProvider to add the type property to the data that is\npassed through on each event call."
        },
        "_addTestSuiteToTestTree": {
          "guessedname": "_addTestSuiteToTestTree",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "parentNode",
              "type": "TestNode",
              "description": " The node to add the test suite to as a child."
            },
            {
              "name": "testSuite",
              "type": "YAHOO.tool.TestSuite",
              "description": " The test suite to add."
            }
          ],
          "description": "Adds a test suite to the test tree as a child of the specified node.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_addTestCaseToTestTree": {
          "guessedname": "_addTestCaseToTestTree",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "parentNode",
              "type": "TestNode",
              "description": " The node to add the test case to as a child."
            },
            {
              "name": "testCase",
              "type": "YAHOO.tool.TestCase",
              "description": " The test case to add."
            }
          ],
          "description": "Adds a test case to the test tree as a child of the specified node.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "resume": {
          "guessedname": "resume",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "segment",
              "type": "Function",
              "description": " The function to run as the rest\nof the haulted test."
            }
          ],
          "description": "Resumes the TestRunner after wait() was called.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_handleTestObjectComplete": {
          "guessedname": "_handleTestObjectComplete",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "TestNode",
              "description": " The TestNode representing the test object."
            }
          ],
          "description": "Handles the completion of a test object's tests. Tallies test results \nfrom one level up to the next.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_next": {
          "guessedname": "_next",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Retrieves the next node in the test tree.",
          "return": {
            "type": "TestNode",
            "description": "The next node in the test tree or null if the end is reached."
          }
        },
        "_runTest": {
          "name": "_runTest",
          "guessedname": "_runTest",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "TestNode",
              "description": " The TestNode representing the test to run."
            }
          ],
          "description": "Runs a single test based on the data provided in the node.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_run": {
          "guessedname": "_run",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "testObject",
              "type": "YAHOO.tool.TestCase|YAHOO.tool.TestSuite",
              "description": " The test case or test suite to run."
            }
          ],
          "description": "Runs a test case or test suite, returning the results.",
          "return": {
            "type": "Object",
            "description": "Results of the execution with properties passed, failed, and total."
          }
        }
      },
      "name": "YAHOO.tool.TestRunner",
      "module": "yuitest",
      "namespace": "YAHOO.tool",
      "static": "",
      "events": {
        "testsuitecomplete": {
          "description": "Fires when all test cases in a test suite have been\ncompleted."
        },
        "begin": {
          "description": "Fires when the run() method is called."
        },
        "testsuitebegin": {
          "description": "Fires when a test suite is opened but before the first \ntest is executed."
        },
        "complete": {
          "description": "Fires when all test suites and test cases have been completed."
        },
        "testcasebegin": {
          "description": "Fires when a test case is opened but before the first \ntest is executed."
        },
        "pass": {
          "description": "Fires when a test has passed."
        },
        "ignore": {
          "description": "Fires when a test has been ignored."
        },
        "testcasecomplete": {
          "description": "Fires when all tests in a test case have been executed."
        },
        "fail": {
          "description": "Fires when a test has failed."
        }
      },
      "description": "Runs test suites and test cases, providing events to allowing for the\ninterpretation of test results.",
      "file": "TestRunner.js",
      "properties": {
        "_root": {
          "guessedname": "_root",
          "private": "",
          "static": "",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to the root node in the test tree."
        },
        "masterSuite": {
          "private": "",
          "static": "",
          "type": "YAHOO.tool.TestSuite",
          "description": "Suite on which to attach all TestSuites and TestCases to be run."
        },
        "_cur": {
          "guessedname": "_cur",
          "private": "",
          "static": "",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to the current node in the test tree."
        }
      }
    },
    "YAHOO.util.Config": {
      "shortname": "Config",
      "methods": {
        "getProperty": {
          "guessedname": "getProperty",
          "guessedtype": "function",
          "description": "Returns the value of specified property.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The name of the property"
            }
          ],
          "return": {
            "type": "Object",
            "description": "The value of the specified property"
          }
        },
        "checkBoolean": {
          "guessedname": "checkBoolean",
          "guessedtype": "function",
          "description": "Validates that the value passed in is a Boolean.",
          "params": [
            {
              "name": "val",
              "type": "Object",
              "description": " The value to validate"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true, if the value is valid"
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the Config object",
          "return": {
            "type": "String",
            "description": "The Config object in string format."
          }
        },
        "fireEvent": {
          "private": "",
          "guessedname": "fireEvent",
          "guessedtype": "function",
          "description": "Fires a configuration property event using the specified value.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The configuration property's name"
            },
            {
              "name": "Object",
              "type": "value",
              "description": " The value of the correct type for the property"
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Sets all properties to null, unsubscribes all listeners from each \nproperty's change event and all listeners from the configChangedEvent."
        },
        "resetProperty": {
          "guessedname": "resetProperty",
          "guessedtype": "function",
          "description": "Resets the specified property's value to its initial value.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The name of the property"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True is the property was reset, false if not"
          }
        },
        "outputEventQueue": {
          "guessedname": "outputEventQueue",
          "guessedtype": "function",
          "description": "Returns a string representation of the Config object's current \nCustomEvent queue",
          "return": {
            "type": "String",
            "description": "The string list of CustomEvents currently queued \nfor execution"
          }
        },
        "addProperty": {
          "guessedname": "addProperty",
          "guessedtype": "function",
          "description": "Adds a property to the Config Object's private config hash.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The configuration property's name"
            },
            {
              "name": "propertyObject",
              "type": "Object",
              "description": " The Object containing all of this \nproperty's arguments"
            }
          ]
        },
        "setProperty": {
          "guessedname": "setProperty",
          "guessedtype": "function",
          "description": "Sets the value of a property. If the silent property is passed as \ntrue, the property's event will not be fired.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The name of the property"
            },
            {
              "name": "value",
              "type": "String",
              "description": " The value to set the property to"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": " Whether the value should be set silently, \nwithout firing the property event."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True, if the set was successful, false if it failed."
          }
        },
        "refresh": {
          "guessedname": "refresh",
          "guessedtype": "function",
          "description": "Refires the events for all configuration properties using their \ncurrent values."
        },
        "fireQueue": {
          "guessedname": "fireQueue",
          "guessedtype": "function",
          "description": "Fires the normalized list of queued property change events"
        },
        "getConfig": {
          "guessedname": "getConfig",
          "guessedtype": "function",
          "description": "Returns a key-value configuration map of the values currently set in  \nthe Config Object.",
          "return": {
            "type": "Object",
            "description": "The current config, represented in a key-value map"
          }
        },
        "YAHOO.util.Config.alreadySubscribed": {
          "guessedname": "alreadySubscribed",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "evt",
              "type": "YAHOO.util.CustomEvent",
              "description": " The CustomEvent for which to check \nthe subscriptions"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The function to look for in the subscribers list"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The execution scope Object for the subscription"
            }
          ],
          "description": "Checks to determine if a particular function/Object pair are already \nsubscribed to the specified CustomEvent",
          "return": {
            "type": "Boolean",
            "description": "true, if the function/Object pair is already subscribed \nto the CustomEvent passed in"
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Initializes the configuration Object and all of its local members.",
          "params": [
            {
              "name": "owner",
              "type": "Object",
              "description": " The owner Object to which this Config \nObject belongs"
            }
          ]
        },
        "applyConfig": {
          "guessedname": "applyConfig",
          "guessedtype": "function",
          "description": "Applies a key-value Object literal to the configuration, replacing  \nany existing values, and queueing the property events.\nAlthough the values will be set, fireQueue() must be called for their \nassociated events to execute.",
          "params": [
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration Object literal"
            },
            {
              "name": "init",
              "type": "Boolean",
              "description": "  When set to true, the initialConfig will \nbe set to the userConfig passed in, so that calling a reset will \nreset the properties to the passed values."
            }
          ]
        },
        "refireEvent": {
          "guessedname": "refireEvent",
          "guessedtype": "function",
          "description": "Fires the event for a property using the property's current value.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The name of the property"
            }
          ]
        },
        "checkNumber": {
          "guessedname": "checkNumber",
          "guessedtype": "function",
          "description": "Validates that the value passed in is a number.",
          "params": [
            {
              "name": "val",
              "type": "Object",
              "description": " The value to validate"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true, if the value is valid"
          }
        },
        "queueProperty": {
          "guessedname": "queueProperty",
          "guessedtype": "function",
          "description": "Sets the value of a property and queues its event to execute. If the \nevent is already scheduled to execute, it is\nmoved from its current position to the end of the queue.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The name of the property"
            },
            {
              "name": "value",
              "type": "String",
              "description": " The value to set the property to"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true, if the set was successful, false if \nit failed."
          }
        },
        "unsubscribeFromConfigEvent": {
          "guessedname": "unsubscribeFromConfigEvent",
          "guessedtype": "function",
          "description": "Unsubscribes an external handler from the change event for any \ngiven property.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The property name"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": " The handler function to use subscribe to \nthe property's event"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The Object to use for scoping the event \nhandler (see CustomEvent documentation)"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True, if the unsubscription was successful, \notherwise false."
          }
        },
        "subscribeToConfigEvent": {
          "guessedname": "subscribeToConfigEvent",
          "guessedtype": "function",
          "description": "Subscribes an external handler to the change event for any \ngiven property.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The property name"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": " The handler function to use subscribe to \nthe property's event"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The Object to use for scoping the event handler \n(see CustomEvent documentation)"
            },
            {
              "name": "overrideContext",
              "type": "Boolean",
              "description": " Optional. If true, will override\n\"this\" within the handler to map to the scope Object passed into the\nmethod."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True, if the subscription was successful, \notherwise false."
          }
        }
      },
      "name": "YAHOO.util.Config",
      "guessedname": "Config",
      "module": "container",
      "namespace": "YAHOO.util",
      "events": {
        "configChangedEvent": {
          "guessedname": "configChangedEvent",
          "guessedtype": "property",
          "description": "Custom Event, notifying subscribers when Config properties are set \n(setProperty is called without the silent flag"
        }
      },
      "constructors": [
        {
          "description": "Config is a utility used within an Object to allow the implementer to\nmaintain a list of local configuration properties and listen for changes \nto those properties dynamically using CustomEvent. The initial values are \nalso maintained so that the configuration can be reset at any given point \nto its initial state.",
          "params": [
            {
              "name": "owner",
              "type": "Object",
              "description": " The owner Object to which this Config Object belongs"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Config is a utility used within an Object to allow the implementer to\nmaintain a list of local configuration properties and listen for changes \nto those properties dynamically using CustomEvent. The initial values are \nalso maintained so that the configuration can be reset at any given point \nto its initial state.",
      "file": "Config.js",
      "properties": {
        "config": {
          "private": "",
          "guessedname": "config",
          "type": "Object",
          "guessedtype": "property",
          "description": "Maintains the local collection of configuration property objects and \ntheir specified values"
        },
        "eventQueue": {
          "private": "",
          "guessedname": "eventQueue",
          "type": "Object",
          "guessedtype": "property",
          "description": "Maintains the local, normalized CustomEvent queue"
        },
        "queueInProgress": {
          "guessedname": "queueInProgress",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean flag that specifies whether a queue is currently \nbeing executed"
        },
        "initialConfig": {
          "private": "",
          "guessedname": "initialConfig",
          "type": "Object",
          "guessedtype": "property",
          "description": "Maintains the local collection of configuration property objects as \nthey were initially applied.\nThis object is used when resetting a property."
        },
        "YAHOO.util.Config.CONFIG_CHANGED_EVENT": {
          "final": "",
          "guessedname": "CONFIG_CHANGED_EVENT",
          "private": "",
          "static": "",
          "guessedtype": "property",
          "description": "Constant representing the CustomEvent type for the config changed event."
        },
        "YAHOO.util.Config.BOOLEAN_TYPE": {
          "final": "",
          "guessedname": "BOOLEAN_TYPE",
          "private": "",
          "static": "",
          "guessedtype": "property",
          "description": "Constant representing the boolean type string"
        },
        "owner": {
          "guessedname": "owner",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object reference to the owner of this Config Object"
        }
      }
    },
    "YAHOO.widget.Paginator.ui.YourComponent": {
      "shortname": "YourComponent",
      "methods": {
        "onClick": {
          "guessedname": "onClick",
          "guessedtype": "function",
          "description": "Listener for a DOM event from a managed element.  Pass new value to\nPaginator.setStartIndex(..), .setPage(..) etc to fire off changeRequest\nevents.  DO NOT modify the managed element's state here.  That should\nhappen in response to the Paginator's recordOffsetChange event (et al)",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": "  The click event"
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "private": "",
          "guessedtype": "function",
          "description": "Remove the generated DOM structure"
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Generate the nodes and return the appropriate node given the current\npagination state.",
          "params": [
            {
              "name": "id_base",
              "type": "string",
              "description": "  used to create unique ids for generated nodes"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "initUI": {
          "private": "",
          "guessedname": "_initUI",
          "guessedtype": "function",
          "description": "Initialize the DOM nodes managed by this component",
          "params": [
            {
              "name": "id_base",
              "type": "string",
              "description": "  used to create unique ids for generated nodes"
            }
          ]
        },
        "initListeners": {
          "guessedname": "initListeners",
          "guessedtype": "function",
          "description": "Subscribe to the Paginator's events that will affect this component's ui"
        },
        "rebuild": {
          "guessedname": "rebuild",
          "guessedtype": "function",
          "description": "Make more substantial changes in a separate method if necessary",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  the calling change event"
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "static": "",
          "guessedtype": "function",
          "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.",
          "params": [
            {
              "name": "p",
              "type": "Paginator",
              "description": "  Paginator instance to decorate"
            }
          ]
        },
        "bindUI": {
          "guessedname": "_bindUI",
          "private": "",
          "guessedtype": "function",
          "description": "Attach DOM event listeners to the nodes managed by this component"
        },
        "update": {
          "guessedname": "update",
          "guessedtype": "function",
          "description": "Make any necessary changes to the component nodes",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  The calling change event"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Paginator.ui.YourComponent",
      "guessedname": "YourComponent",
      "module": "paginator",
      "namespace": "YAHOO.widget.Paginator.ui",
      "events": {
        "myAttrChange": {
          "name": "myAttrChange",
          "description": "Fires when the value for the configuration attribute 'myAttr' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMyAttrChange": {
          "name": "beforeMyAttrChange",
          "description": "Fires before the value for the configuration attribute 'myAttr' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Describe the ui Component",
          "params": [
            {
              "name": "p",
              "type": "Pagintor",
              "description": "  Paginator instance to attach to"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Describe the ui Component",
      "configs": {
        "myAttr": {
          "default": "'foo'",
          "description": "Describe your attribute"
        }
      },
      "file": "UIComponentTemplate.js",
      "innerClasses": [
        "YAHOO.widget.Paginator"
      ],
      "for": "YAHOO.widget.Paginator",
      "properties": {
        "button": {
          "private": "",
          "guessedname": "button",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Describe the node that will be stored in this property"
        }
      }
    },
    "YAHOO.widget.EditorInfo": {
      "shortname": "EditorInfo",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the EditorInfo.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "saveAll": {
          "guessedname": "saveAll",
          "guessedtype": "function",
          "description": "Saves all Editor instances on the page. If a form reference is passed, only Editor's bound to this form will be saved.",
          "params": [
            {
              "name": "form",
              "type": "HTMLElement",
              "description": " The form to check if this Editor instance belongs to"
            }
          ]
        },
        "getEditorById": {
          "guessedname": "getEditorById",
          "guessedtype": "function",
          "description": "Returns a reference to the Editor object associated with the given textarea",
          "params": [
            {
              "name": "id",
              "type": "String/HTMLElement",
              "description": " The id or reference of the textarea to return the Editor instance of"
            }
          ],
          "return": {
            "type": "",
            "description": "Object <a href=\"YAHOO.widget.Editor.html\">YAHOO.widget.Editor</a>"
          }
        }
      },
      "name": "YAHOO.widget.EditorInfo",
      "guessedname": "EditorInfo",
      "module": "editor",
      "namespace": "YAHOO.widget",
      "static": "",
      "guessedtype": "property",
      "description": "Singleton object used to track the open window objects and panels across the various open editors",
      "file": "simple-editor.js",
      "properties": {
        "_instances": {
          "private": "",
          "guessedname": "_instances",
          "type": "Object",
          "guessedtype": "property",
          "description": "A reference to all editors on the page."
        },
        "panel": {
          "private": "",
          "guessedname": "panel",
          "type": "Object <a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>",
          "guessedtype": "property",
          "description": "A reference to the currently open panel in any editor on the page."
        },
        "window": {
          "private": "",
          "guessedname": "window",
          "type": "Object <a href=\"YAHOO.widget.EditorWindow.html\">YAHOO.widget.EditorWindow</a>",
          "guessedtype": "property",
          "description": "A reference to the currently open window object in any editor on the page."
        },
        "blankImage": {
          "private": "",
          "guessedname": "blankImage",
          "type": "String",
          "guessedtype": "property",
          "description": "A reference to the blankImage url"
        }
      }
    },
    "YAHOO.widget.AutoComplete": {
      "shortname": "AutoComplete",
      "methods": {
        "doBeforeExpandContainer": {
          "guessedname": "doBeforeExpandContainer",
          "guessedtype": "function",
          "description": "Overridable method called before container expands allows implementers to access data\nand DOM elements.",
          "params": [
            {
              "name": "elTextbox",
              "type": "HTMLElement",
              "description": "  The text input box."
            },
            {
              "name": "elContainer",
              "type": "HTMLElement",
              "description": "  The container element."
            },
            {
              "name": "sQuery",
              "type": "String",
              "description": "  The query string."
            },
            {
              "name": "aResults",
              "type": "Object[]",
              "description": "   An array of query results."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Return true to continue expanding container, false to cancel the expand."
          }
        },
        "_typeAhead": {
          "private": "",
          "guessedname": "_typeAhead",
          "guessedtype": "function",
          "description": "Updates in the text input box with the first query result as the user types,\nselecting the substring that the user has not typed.",
          "params": [
            {
              "name": "elListItem",
              "type": "HTMLElement",
              "description": "  The &lt;li&gt; element item whose data populates the input field."
            },
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Query string."
            }
          ]
        },
        "_updateValue": {
          "private": "",
          "guessedname": "_updateValue",
          "guessedtype": "function",
          "description": "Updates the text input box value with selected query result. If a delimiter\nhas been defined, then the value gets appended with the delimiter.",
          "params": [
            {
              "name": "elListItem",
              "type": "HTMLElement",
              "description": "  The &lt;li&gt; element item with which to update the value."
            }
          ]
        },
        "_clearInterval": {
          "private": "",
          "guessedname": "_clearInterval",
          "guessedtype": "function",
          "description": "Cancels text input detection by intervals.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "setHeader": {
          "guessedname": "setHeader",
          "guessedtype": "function",
          "description": "Sets HTML markup for the results container header. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-hd\".",
          "params": [
            {
              "name": "sHeader",
              "type": "String",
              "description": "  HTML markup for results container header."
            }
          ]
        },
        "getInputEl": {
          "guessedname": "getInputEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to input element.",
          "return": {
            "type": "HTMLELement",
            "description": "DOM reference to input element."
          }
        },
        "_onContainerMouseover": {
          "private": "",
          "guessedname": "_onContainerMouseover",
          "guessedtype": "function",
          "description": "Handles container mouseover events.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The mouseover event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "_initContainerHelperEls": {
          "guessedname": "_initContainerHelperEls",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the results container helpers if they are enabled and do\nnot exist"
        },
        "getListItemData": {
          "guessedname": "getListItemData",
          "guessedtype": "function",
          "description": "Public accessor to the result data associated with a given &lt;li&gt; result.",
          "params": [
            {
              "name": "elListItem",
              "type": "HTMLElement",
              "description": "  Reference to &lt;LI&gt; element."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Result data."
          }
        },
        "_enableIntervalDetection": {
          "guessedname": "_enableIntervalDetection",
          "private": "",
          "guessedtype": "function",
          "description": "Enables interval detection for IME support."
        },
        "handleResponse": {
          "guessedname": "handleResponse",
          "guessedtype": "function",
          "description": "Handles response for display. This is the callback function method passed to\nYAHOO.util.DataSourceBase#sendRequest so results from the DataSource are\nreturned to the AutoComplete instance.",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  (optional) Additional argument(s)"
            }
          ]
        },
        "formatResult": {
          "guessedname": "formatResult",
          "guessedtype": "function",
          "description": "Overridable method that returns HTML markup for one result to be populated\nas innerHTML of an &lt;LI&gt; element.",
          "params": [
            {
              "name": "oResultData",
              "type": "Object",
              "description": "  Result data object."
            },
            {
              "name": "sQuery",
              "type": "String",
              "description": "  The corresponding query string."
            },
            {
              "name": "sResultMatch",
              "type": "HTMLElement",
              "description": "  The current query string."
            }
          ],
          "return": {
            "type": "String",
            "description": "HTML markup of formatted result data."
          }
        },
        "_initListEl": {
          "guessedname": "_initListEl",
          "private": "",
          "guessedtype": "function",
          "description": "Clears out contents of container body and creates up to\nYAHOO.widget.AutoComplete#maxResultsDisplayed &lt;li&gt; elements in an\n&lt;ul&gt; element."
        },
        "getSubsetMatches": {
          "guessedname": "getSubsetMatches",
          "guessedtype": "function",
          "description": "Handles subset matching for when queryMatchSubset is enabled.",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Query string."
            }
          ],
          "return": {
            "type": "Object",
            "description": "oParsedResponse or null."
          }
        },
        "setFooter": {
          "guessedname": "setFooter",
          "guessedtype": "function",
          "description": "Sets HTML markup for the results container footer. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-ft\".",
          "params": [
            {
              "name": "sFooter",
              "type": "String",
              "description": "  HTML markup for results container footer."
            }
          ]
        },
        "_extractQuery": {
          "guessedname": "_extractQuery",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  String to parse"
            }
          ],
          "description": "Extracts rightmost query from delimited string.",
          "return": {
            "type": "Object",
            "description": "Object literal containing properties \"query\" and \"previous\"."
          }
        },
        "_toggleContainer": {
          "private": "",
          "guessedname": "_toggleContainer",
          "guessedtype": "function",
          "description": "Animates expansion or collapse of the container.",
          "params": [
            {
              "name": "bShow",
              "type": "Boolean",
              "description": "  True if container should be expanded, false if container should be collapsed"
            }
          ]
        },
        "_toggleContainerHelpers": {
          "private": "",
          "guessedname": "_toggleContainerHelpers",
          "guessedtype": "function",
          "description": "Syncs results container with its helpers.",
          "params": [
            {
              "name": "bShow",
              "type": "Boolean",
              "description": "  True if container is expanded, false if collapsed"
            }
          ]
        },
        "_initContainerEl": {
          "guessedname": "_initContainerEl",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the results container once at object creation"
        },
        "_onContainerScroll": {
          "private": "",
          "guessedname": "_onContainerScroll",
          "guessedtype": "function",
          "description": "Handles container scroll events.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The scroll event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "_onTextboxKeyPress": {
          "private": "",
          "guessedname": "_onTextboxKeyPress",
          "guessedtype": "function",
          "description": "Handles textbox keypress events.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The keypress event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Nulls out the entire AutoComplete instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container. After\ncalling this method, the instance reference should be expliclitly nulled by\nimplementer, as in myAutoComplete = null. Use with caution!"
        },
        "_doBeforeExpandContainer": {
          "guessedname": "_doBeforeExpandContainer",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "elTextbox",
              "type": "HTMLElement",
              "description": "  The text input box."
            },
            {
              "name": "elContainer",
              "type": "HTMLElement",
              "description": "  The container element."
            },
            {
              "name": "sQuery",
              "type": "String",
              "description": "  The query string."
            },
            {
              "name": "aResults",
              "type": "Object[]",
              "description": "   An array of query results."
            }
          ],
          "description": "Called before container expands, by default snaps container to the\nbottom-left corner of the input element, then calls public overrideable method.",
          "return": {
            "type": "Boolean",
            "description": "Return true to continue expanding container, false to cancel the expand."
          }
        },
        "getContainerEl": {
          "guessedname": "getContainerEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to container element.",
          "return": {
            "type": "HTMLELement",
            "description": "DOM reference to container element."
          }
        },
        "sendQuery": {
          "guessedname": "sendQuery",
          "guessedtype": "function",
          "description": "Makes query request to the DataSource.",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Query string."
            }
          ]
        },
        "_selectItem": {
          "private": "",
          "guessedname": "_selectItem",
          "guessedtype": "function",
          "description": "Selects a result item from the container",
          "params": [
            {
              "name": "elListItem",
              "type": "HTMLElement",
              "description": "  The selected &lt;li&gt; element item."
            }
          ]
        },
        "preparseRawResponse": {
          "guessedname": "preparseRawResponse",
          "guessedtype": "function",
          "description": "Executed by DataSource (within DataSource scope via doBeforeParseData()) to\nhandle responseStripAfter cleanup.",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Query string."
            }
          ],
          "return": {
            "type": "Object",
            "description": "oParsedResponse or null."
          }
        },
        "doBeforeLoadData": {
          "guessedname": "doBeforeLoadData",
          "guessedtype": "function",
          "description": "Overridable method called before container is loaded with result data.",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  (optional) Additional argument(s)"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Return true to continue loading data, false to cancel."
          }
        },
        "_toggleHighlight": {
          "private": "",
          "guessedname": "_toggleHighlight",
          "guessedtype": "function",
          "description": "Toggles the highlight on or off for an item in the container, and also cleans\nup highlighting of any previous item.",
          "params": [
            {
              "name": "elNewListItem",
              "type": "HTMLElement",
              "description": "  The &lt;li&gt; element item to receive highlight behavior."
            },
            {
              "name": "sType",
              "type": "String",
              "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."
            }
          ]
        },
        "AutoComplete._cloneObject": {
          "guessedname": "_cloneObject",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": "  Object."
            }
          ],
          "description": "Clones object literal or array of object literals."
        },
        "__initProps": {
          "guessedname": "_initProps",
          "private": "",
          "guessedtype": "function",
          "description": "Updates and validates latest public config properties."
        },
        "_clearSelection": {
          "guessedname": "_clearSelection",
          "private": "",
          "guessedtype": "function",
          "description": "When forceSelection is true and the user attempts\nleave the text input box without selecting an item from the query results,\nthe user selection is cleared."
        },
        "_onTextboxKeyDown": {
          "private": "",
          "guessedname": "_onTextboxKeyDown",
          "guessedtype": "function",
          "description": "Handles textbox keydown events of functional keys, mainly for UI behavior.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The keydown event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "_populateListItem": {
          "private": "",
          "guessedname": "_populateListItem",
          "guessedtype": "function",
          "description": "Populates the given &lt;li&gt; element with return value from formatResult().",
          "params": [
            {
              "name": "elListItem",
              "type": "HTMLElement",
              "description": "  The LI element."
            },
            {
              "name": "oResult",
              "type": "Object",
              "description": "  The result object."
            },
            {
              "name": "sCurQuery",
              "type": "String",
              "description": "  The query string."
            }
          ]
        },
        "_focus": {
          "guessedname": "_focus",
          "private": "",
          "guessedtype": "function",
          "description": "Focuses input field."
        },
        "getListItems": {
          "guessedname": "getListItems",
          "guessedtype": "function",
          "deprecated": "Use getListEl().childNodes."
        },
        "doBeforeSendQuery": {
          "guessedname": "doBeforeSendQuery",
          "guessedtype": "function",
          "deprecated": "Use generateRequest."
        },
        "getListEl": {
          "guessedname": "getListEl",
          "guessedtype": "function",
          "description": "Public accessor to the &lt;ul&gt; element that displays query results within the results container.",
          "return": {
            "type": "HTMLElement[]",
            "description": "Reference to &lt;ul&gt; element within the results container."
          }
        },
        "isFocused": {
          "guessedname": "isFocused",
          "guessedtype": "function",
          "description": "Returns true if widget instance is currently active.",
          "return": {
            "type": "Boolean",
            "description": "Returns true if widget instance is currently active."
          }
        },
        "setBody": {
          "guessedname": "setBody",
          "guessedtype": "function",
          "description": "Sets HTML markup for the results container body. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-bd\".",
          "params": [
            {
              "name": "sBody",
              "type": "String",
              "description": "  HTML markup for results container body."
            }
          ]
        },
        "_textMatchesOption": {
          "private": "",
          "guessedname": "_textMatchesOption",
          "guessedtype": "function",
          "description": "Whether or not user-typed value in the text input box matches any of the\nquery results.",
          "return": {
            "type": "HTMLElement",
            "description": "Matching list item element if user-input text matches\na result, null otherwise."
          }
        },
        "_onInterval": {
          "guessedname": "_onInterval",
          "private": "",
          "guessedtype": "function",
          "description": "Enables query triggers based on text input detection by intervals (rather\nthan by key events)."
        },
        "_togglePrehighlight": {
          "private": "",
          "guessedname": "_togglePrehighlight",
          "guessedtype": "function",
          "description": "Toggles the pre-highlight on or off for an item in the container, and also cleans\nup pre-highlighting of any previous item.",
          "params": [
            {
              "name": "elNewListItem",
              "type": "HTMLElement",
              "description": "  The &lt;li&gt; element item to receive highlight behavior."
            },
            {
              "name": "sType",
              "type": "String",
              "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."
            }
          ]
        },
        "_onTextboxKeyUp": {
          "private": "",
          "guessedname": "_onTextboxKeyUp",
          "guessedtype": "function",
          "description": "Handles textbox keyup events to trigger queries.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The keyup event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "_sendQuery": {
          "private": "",
          "guessedname": "_sendQuery",
          "guessedtype": "function",
          "description": "Makes query request to the DataSource.",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Query string."
            }
          ]
        },
        "snapContainer": {
          "guessedname": "snapContainer",
          "guessedtype": "function",
          "description": "Snaps container to bottom-left corner of input element"
        },
        "_populateList": {
          "private": "",
          "guessedname": "_populateList",
          "guessedtype": "function",
          "description": "Populates the array of &lt;li&gt; elements in the container with query\nresults.",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  (optional) Additional argument(s)"
            }
          ]
        },
        "getListItemMatch": {
          "guessedname": "getListItemMatch",
          "guessedtype": "function",
          "description": "Public accessor to the matching string associated with a given &lt;li&gt; result.",
          "params": [
            {
              "name": "elListItem",
              "type": "HTMLElement",
              "description": "  Reference to &lt;LI&gt; element."
            }
          ],
          "return": {
            "type": "String",
            "description": "Matching string."
          }
        },
        "enableIntervalDetection": {
          "guessedname": "enableIntervalDetection",
          "guessedtype": "property",
          "description": "Enables interval detection for a less performant but brute force mechanism to\ndetect input values at an interval set by queryInterval and send queries if\ninput value has changed. Needed to support right-click+paste or shift+insert\nedge cases. Please note that intervals are cleared at the end of each interaction,\nso enableIntervalDetection must be called for each new interaction. The\nrecommended approach is to call it in response to textboxFocusEvent."
        },
        "_onTextboxFocus": {
          "private": "",
          "guessedname": "_onTextboxFocus",
          "guessedtype": "function",
          "description": "Handles text input box receiving focus.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The focus event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "expandContainer": {
          "guessedname": "expandContainer",
          "guessedtype": "function",
          "description": "Expands container."
        },
        "_isIgnoreKey": {
          "guessedname": "_isIgnoreKey",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "nKeycode",
              "type": "Number",
              "description": "  Code of key pressed."
            }
          ],
          "description": "Whether or not key is functional or should be ignored. Note that the right\narrow key is NOT an ignored key since it triggers queries for certain intl\ncharsets.",
          "return": {
            "type": "Boolean",
            "description": "True if key should be ignored, false otherwise."
          }
        },
        "isContainerOpen": {
          "guessedname": "isContainerOpen",
          "guessedtype": "function",
          "description": "Returns true if container is in an expanded state, false otherwise.",
          "return": {
            "type": "Boolean",
            "description": "Returns true if container is in an expanded state, false otherwise."
          }
        },
        "_jumpSelection": {
          "guessedname": "_jumpSelection",
          "private": "",
          "guessedtype": "function",
          "description": "If an item is highlighted in the container, the right arrow key jumps to the\nend of the textbox and selects the highlighted item, otherwise the container\nis closed."
        },
        "_onTextboxBlur": {
          "private": "",
          "guessedname": "_onTextboxBlur",
          "guessedtype": "function",
          "description": "Handles text input box losing focus.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The focus event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "filterResults": {
          "guessedname": "filterResults",
          "guessedtype": "function",
          "description": "Executed by DataSource (within DataSource scope via doBeforeCallback()) to\nfilter results through a simple client-side matching algorithm.",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oFullResponse",
              "type": "Object",
              "description": "  Full response object."
            },
            {
              "name": "oParsedResponse",
              "type": "Object",
              "description": "  Parsed response object."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  Callback object."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Filtered response object."
          }
        },
        "_moveSelection": {
          "private": "",
          "guessedname": "_moveSelection",
          "guessedtype": "function",
          "description": "Triggered by up and down arrow keys, changes the current highlighted\n&lt;li&gt; element item. Scrolls container if necessary.",
          "params": [
            {
              "name": "nKeyCode",
              "type": "Number",
              "description": "  Code of key pressed."
            }
          ]
        },
        "_selectText": {
          "private": "",
          "guessedname": "_selectText",
          "guessedtype": "function",
          "description": "Selects text in the input field.",
          "params": [
            {
              "name": "elTextbox",
              "type": "HTMLElement",
              "description": "  Text input box element in which to select text."
            },
            {
              "name": "nStart",
              "type": "Number",
              "description": "  Starting index of text string to select."
            },
            {
              "name": "nEnd",
              "type": "Number",
              "description": "  Ending index of text selection."
            }
          ]
        },
        "_onContainerMouseout": {
          "private": "",
          "guessedname": "_onContainerMouseout",
          "guessedtype": "function",
          "description": "Handles container mouseout events.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The mouseout event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "getListItemIndex": {
          "guessedname": "getListItemIndex",
          "guessedtype": "function",
          "description": "Public accessor to the index of the associated with a given &lt;li&gt; result.",
          "params": [
            {
              "name": "elListItem",
              "type": "HTMLElement",
              "description": "  Reference to &lt;LI&gt; element."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Index."
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the AutoComplete instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the AutoComplete instance."
          }
        },
        "collapseContainer": {
          "guessedname": "collapseContainer",
          "guessedtype": "function",
          "description": "Collapses container."
        },
        "_onContainerResize": {
          "private": "",
          "guessedname": "_onContainerResize",
          "guessedtype": "function",
          "description": "Handles container resize events.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The resize event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "generateRequest": {
          "guessedname": "generateRequest",
          "guessedtype": "function",
          "description": "A function that converts an AutoComplete query into a request value which is then\npassed to the DataSource's sendRequest method in order to retrieve data for \nthe query. By default, returns a String with the syntax: \"query={query}\"\nImplementers can customize this method for custom request syntaxes.",
          "params": [
            {
              "name": "sQuery",
              "type": "String",
              "description": "  Query string"
            }
          ],
          "return": {
            "type": "MIXED",
            "description": "Request"
          }
        },
        "_onContainerClick": {
          "private": "",
          "guessedname": "_onContainerClick",
          "guessedtype": "function",
          "description": "Handles container click events.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The click event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "_onWindowUnload": {
          "private": "",
          "guessedname": "_onWindowUnload",
          "guessedtype": "function",
          "description": "Handles window unload event.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The unload event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "clearList": {
          "guessedname": "clearList",
          "guessedtype": "function",
          "description": "Clears entire list of suggestions."
        }
      },
      "name": "YAHOO.widget.AutoComplete",
      "guessedname": "AutoComplete",
      "module": "autocomplete",
      "namespace": "YAHOO.widget",
      "events": {
        "unmatchedItemSelectEvent": {
          "guessedname": "unmatchedItemSelectEvent",
          "guessedtype": "property",
          "description": "Fired when a user selection does not match any of the displayed result items.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "sSelection",
              "type": "String",
              "description": "  The selected string."
            }
          ]
        },
        "dataRequestEvent": {
          "guessedname": "dataRequestEvent",
          "guessedtype": "property",
          "description": "Fired when the AutoComplete instance makes a request to the DataSource.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "sQuery",
              "type": "String",
              "description": "  The query string."
            },
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  The request."
            }
          ]
        },
        "selectionEnforceEvent": {
          "guessedname": "selectionEnforceEvent",
          "guessedtype": "property",
          "description": "Fired if forceSelection is enabled and the user's input has been cleared\nbecause it did not match one of the returned query results.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "sClearedValue",
              "type": "String",
              "description": "  The cleared value (including delimiters if applicable)."
            }
          ]
        },
        "itemMouseOverEvent": {
          "guessedname": "itemMouseOverEvent",
          "guessedtype": "property",
          "description": "Fired when result item has been moused over.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "elItem",
              "type": "HTMLElement",
              "description": "  The &lt;li&gt element item moused to."
            }
          ]
        },
        "itemSelectEvent": {
          "guessedname": "itemSelectEvent",
          "guessedtype": "property",
          "description": "Fired when an item is selected via mouse click, ENTER key, or TAB key.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "elItem",
              "type": "HTMLElement",
              "description": "  The selected &lt;li&gt; element item."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  The data returned for the item, either as an object,\nor mapped from the schema into an array."
            }
          ]
        },
        "textboxFocusEvent": {
          "guessedname": "textboxFocusEvent",
          "guessedtype": "property",
          "description": "Fired when the input field receives focus.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "dataReturnEvent": {
          "guessedname": "dataReturnEvent",
          "guessedtype": "property",
          "description": "Fired when the AutoComplete instance receives query results from the data\nsource.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "sQuery",
              "type": "String",
              "description": "  The query string."
            },
            {
              "name": "aResults",
              "type": "Object[]",
              "description": "  Results array."
            }
          ]
        },
        "textboxChangeEvent": {
          "guessedname": "textboxChangeEvent",
          "guessedtype": "property",
          "description": "Fired when the input field value has changed when it loses focus.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "textboxBlurEvent": {
          "guessedname": "textboxBlurEvent",
          "guessedtype": "property",
          "description": "Fired when the input field loses focus.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "containerCollapseEvent": {
          "guessedname": "containerCollapseEvent",
          "guessedtype": "property",
          "description": "Fired when the results container is collapsed.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "textboxKeyEvent": {
          "guessedname": "textboxKeyEvent",
          "guessedtype": "property",
          "description": "Fired when the input field receives key input.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "nKeycode",
              "type": "Number",
              "description": "  The keycode number."
            }
          ]
        },
        "containerPopulateEvent": {
          "guessedname": "containerPopulateEvent",
          "guessedtype": "property",
          "description": "Fired when the results container is populated.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "itemArrowFromEvent": {
          "guessedname": "itemArrowFromEvent",
          "guessedtype": "property",
          "description": "Fired when result item has been arrowed away from.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "elItem",
              "type": "HTMLElement",
              "description": "  The &lt;li&gt; element item arrowed from."
            }
          ]
        },
        "dataErrorEvent": {
          "guessedname": "dataErrorEvent",
          "guessedtype": "property",
          "description": "Fired when the AutoComplete instance does not receive query results from the\nDataSource due to an error.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "sQuery",
              "type": "String",
              "description": "  The query string."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  The response object, if available."
            }
          ]
        },
        "_sLastTextboxValue": {
          "private": "",
          "guessedname": "_sLastTextboxValue",
          "type": "String",
          "guessedtype": "property",
          "description": "Internal tracker to last known textbox value, used to determine whether or not\nto trigger a query via interval for certain IME users."
        },
        "itemArrowToEvent": {
          "guessedname": "itemArrowToEvent",
          "guessedtype": "property",
          "description": "Fired when result item has been arrowed to.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "elItem",
              "type": "HTMLElement",
              "description": "  The &lt;li&gt; element item arrowed to."
            }
          ]
        },
        "containerExpandEvent": {
          "guessedname": "containerExpandEvent",
          "guessedtype": "property",
          "description": "Fired when the results container is expanded.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            }
          ]
        },
        "itemMouseOutEvent": {
          "guessedname": "itemMouseOutEvent",
          "guessedtype": "property",
          "description": "Fired when result item has been moused out.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "elItem",
              "type": "HTMLElement",
              "description": "  The &lt;li&gt; element item moused from."
            }
          ]
        },
        "typeAheadEvent": {
          "guessedname": "typeAheadEvent",
          "guessedtype": "property",
          "description": "Fired when the input field has been prefilled by the type-ahead\nfeature.",
          "params": [
            {
              "name": "oSelf",
              "type": "YAHOO.widget.AutoComplete",
              "description": "  The AutoComplete instance."
            },
            {
              "name": "sQuery",
              "type": "String",
              "description": "  The query string."
            },
            {
              "name": "sPrefill",
              "type": "String",
              "description": "  The prefill string."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up/down arrow keys and/or mouse to pick a selection</li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation</li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc</li>\n</ul>",
          "params": [
            {
              "name": "elInput",
              "type": "HTMLElement",
              "description": "  DOM element reference of an input field."
            },
            {
              "name": "elInput",
              "type": "String",
              "description": "  String ID of an input field."
            },
            {
              "name": "elContainer",
              "type": "HTMLElement",
              "description": "  DOM element reference of an existing DIV."
            },
            {
              "name": "elContainer",
              "type": "String",
              "description": "  String ID of an existing DIV."
            },
            {
              "name": "oDataSource",
              "type": "YAHOO.widget.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (optional) Object literal of configuration params."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up/down arrow keys and/or mouse to pick a selection</li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation</li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc</li>\n</ul>",
      "file": "AutoComplete.js",
      "properties": {
        "_elCurListItem": {
          "private": "",
          "guessedname": "_elCurListItem",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Pointer to the currently highlighted &lt;li&gt; element in the container."
        },
        "_bFocused": {
          "private": "",
          "guessedname": "_bFocused",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the widget instance is currently active. If query results come back\nbut the user has already moved on, do not proceed with auto complete behavior."
        },
        "useIFrame": {
          "guessedname": "useIFrame",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not to use an iFrame to layer over Windows form elements in\nIE. Set to true only when the results container will be on top of a\n&lt;select&gt; field in IE and thus exposed to the IE z-index bug (i.e.,\n5.5 < IE < 7)."
        },
        "useShadow": {
          "guessedname": "useShadow",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the results container should have a shadow."
        },
        "_iFrameSrc": {
          "private": "",
          "guessedname": "_iFrameSrc",
          "type": "String",
          "guessedtype": "property",
          "description": "Src to iFrame used when useIFrame = true. Supports implementations over SSL\nas well."
        },
        "_elHeader": {
          "private": "",
          "guessedname": "_elHeader",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to header element within content element."
        },
        "_bContainerOpen": {
          "private": "",
          "guessedname": "_bContainerOpen",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the results container is currently open."
        },
        "_bOverContainer": {
          "private": "",
          "guessedname": "_bOverContainer",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the mouse is currently over the results\ncontainer. This is necessary in order to prevent clicks on container items\nfrom being text input field blur events."
        },
        "forceSelection": {
          "guessedname": "forceSelection",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not to force the user's selection to match one of the query\nresults. Enabling this feature essentially transforms the input field into a\n&lt;select&gt; field. This feature is not recommended with delimiter character(s)\ndefined."
        },
        "_elTextbox": {
          "private": "",
          "guessedname": "_elTextbox",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Text input field DOM element."
        },
        "_sPastSelections": {
          "guessedname": "_sPastSelections",
          "private": "",
          "default": "\"\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Selections from previous queries (for saving delimited queries)."
        },
        "_sInitInputValue": {
          "private": "",
          "guessedname": "_sInitInputValue",
          "type": "String",
          "guessedtype": "property",
          "description": "Stores initial input value used to determine if textboxChangeEvent should be fired."
        },
        "queryMatchSubset": {
          "guessedname": "queryMatchSubset",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Enables query subset matching. When the DataSource's cache is enabled and queryMatchSubset is\ntrue, substrings of queries will return matching cached results. For\ninstance, if the first query is for \"abc\" susequent queries that start with\n\"abc\", like \"abcd\", will be queried against the cache, and not the live data\nsource. Recommended only for DataSources that return comprehensive results\nfor queries with very few characters."
        },
        "_nDisplayedItems": {
          "private": "",
          "guessedname": "_nDisplayedItems",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number of &lt;li&gt; elements currently displayed in results container."
        },
        "_oAnim": {
          "private": "",
          "guessedname": "_oAnim",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Animation instance for container expand/collapse."
        },
        "_elIFrame": {
          "private": "",
          "guessedname": "_elIFrame",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to iframe element within container element."
        },
        "animSpeed": {
          "guessedname": "animSpeed",
          "default": "0.3",
          "type": "Number",
          "guessedtype": "property",
          "description": "Speed of container expand/collapse animation, in seconds.."
        },
        "animVert": {
          "guessedname": "animVert",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not to animate the expansion/collapse of the results container in the\nvertical direction."
        },
        "minQueryLength": {
          "guessedname": "minQueryLength",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number of characters that must be entered before querying for results. A negative value\neffectively turns off the widget. A value of 0 allows queries of null or empty string\nvalues."
        },
        "queryMatchCase": {
          "guessedname": "queryMatchCase",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "When applyLocalFilter is true, the local filtering algorthim can have case sensitivity\nenabled."
        },
        "animHoriz": {
          "guessedname": "animHoriz",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not to animate the expansion/collapse of the results container in the\nhorizontal direction."
        },
        "_nIndex": {
          "guessedname": "_nIndex",
          "private": "",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class variable to index multiple AutoComplete instances."
        },
        "autoHighlight": {
          "guessedname": "autoHighlight",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the first item in results container should be automatically highlighted\non expand."
        },
        "_queryInterval": {
          "private": "",
          "guessedname": "_queryInterval",
          "type": "Object",
          "guessedtype": "property",
          "description": "For users typing via certain IMEs, queries must be triggered by intervals,\nsince key events yet supported across all browsers for all IMEs."
        },
        "_elFooter": {
          "private": "",
          "guessedname": "_elFooter",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to footer element within content element."
        },
        "_elContainer": {
          "private": "",
          "guessedname": "_elContainer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Container DOM element."
        },
        "maxResultsDisplayed": {
          "guessedname": "maxResultsDisplayed",
          "default": "10",
          "type": "Number",
          "guessedtype": "property",
          "description": "Maximum number of results to display in results container."
        },
        "queryInterval": {
          "guessedname": "queryInterval",
          "default": "500",
          "type": "Number",
          "guessedtype": "property",
          "description": "When IME usage is detected or interval detection is explicitly enabled,\nAutoComplete will detect the input value at the given interval and send a\nquery if the value has changed."
        },
        "highlightClassName": {
          "guessedname": "highlightClassName",
          "default": "\"yui-ac-highlight\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name of a highlighted item within results container."
        },
        "_sCurQuery": {
          "private": "",
          "guessedname": "_sCurQuery",
          "type": "String",
          "guessedtype": "property",
          "description": "Current query string"
        },
        "_nDelayID": {
          "private": "",
          "guessedname": "_nDelayID",
          "type": "Number",
          "guessedtype": "property",
          "description": "Delay timeout ID."
        },
        "queryDelay": {
          "guessedname": "queryDelay",
          "default": "0.2",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number of seconds to delay before submitting a query request.  If a query\nrequest is received before a previous one has completed its delay, the\nprevious request is cancelled and the new request is set to the delay. If \ntypeAhead is also enabled, this value must always be less than the typeAheadDelay\nin order to avoid certain race conditions."
        },
        "dataSource": {
          "guessedname": "dataSource",
          "type": "YAHOO.widget.DataSource",
          "guessedtype": "property",
          "description": "The DataSource object that encapsulates the data used for auto completion.\nThis object should be an inherited object from YAHOO.widget.DataSource."
        },
        "delimChar": {
          "guessedname": "delimChar",
          "type": "String | String[]",
          "guessedtype": "property",
          "description": "Query delimiter. A single character separator for multiple delimited\nselections. Multiple delimiter characteres may be defined as an array of\nstrings. A null value or empty string indicates that query results cannot\nbe delimited. This feature is not recommended if you need forceSelection to\nbe true."
        },
        "_elBody": {
          "private": "",
          "guessedname": "_elBody",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to body element within content element."
        },
        "_bItemSelected": {
          "private": "",
          "guessedname": "_bItemSelected",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not an item has been selected since the container was populated\nwith results. Reset to false by _populateList, and set to true when item is\nselected."
        },
        "_elList": {
          "private": "",
          "guessedname": "_elList",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Internal reference to &lt;ul&gt; elements that contains query results within the\nresults container."
        },
        "suppressInputUpdate": {
          "guessedname": "suppressInputUpdate",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the input field should be updated with selections."
        },
        "_nTypeAheadDelayID": {
          "private": "",
          "guessedname": "_nTypeAheadDelayID",
          "type": "Number",
          "guessedtype": "property",
          "description": "TypeAhead delay timeout ID."
        },
        "_elContent": {
          "private": "",
          "guessedname": "_elContent",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to content element within container element."
        },
        "applyLocalFilter": {
          "guessedname": "applyLocalFilter",
          "default": "true for local arrays and json, otherwise false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "By default, results from local DataSources will pass through the filterResults\nmethod to apply a client-side matching algorithm."
        },
        "_elShadow": {
          "private": "",
          "guessedname": "_elShadow",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to shadow element within container element."
        },
        "typeAheadDelay": {
          "guessedname": "typeAheadDelay",
          "default": "0.5",
          "type": "Number",
          "guessedtype": "property",
          "description": "If typeAhead is true, number of seconds to delay before updating input with\ntypeAhead value. In order to prevent certain race conditions, this value must\nalways be greater than the queryDelay."
        },
        "prehighlightClassName": {
          "guessedname": "prehighlightClassName",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name of a pre-highlighted item within results container."
        },
        "allowBrowserAutocomplete": {
          "guessedname": "allowBrowserAutocomplete",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not to allow browsers to cache user-typed input in the input\nfield. Disabling this feature will prevent the widget from setting the\nautocomplete=\"off\" on the input field. When autocomplete=\"off\"\nand users click the back button after form submission, user-typed input can\nbe prefilled by the browser from its cache. This caching of user input may\nnot be desired for sensitive data, such as credit card numbers, in which\ncase, implementers should consider setting allowBrowserAutocomplete to false."
        },
        "typeAhead": {
          "guessedname": "typeAhead",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If autohighlight is enabled, whether or not the input field should be automatically updated\nwith the first query result as the user types, auto-selecting the substring portion\nof the first result that the user has not yet typed."
        },
        "_nKeyCode": {
          "private": "",
          "guessedname": "_nKeyCode",
          "type": "Number",
          "guessedtype": "property",
          "description": "Key code of the last key pressed in textbox."
        },
        "_sName": {
          "private": "",
          "guessedname": "_sName",
          "type": "String",
          "guessedtype": "property",
          "description": "Name of AutoComplete instance."
        },
        "queryQuestionMark": {
          "guessedname": "queryQuestionMark",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "For XHR DataSources, AutoComplete will automatically insert a \"?\" between the server URI and \nthe \"query\" param/value pair. To prevent this behavior, implementers should\nset this value to false. To more fully customize the query syntax, implementers\nshould override the generateRequest() method."
        },
        "autoSnapContainer": {
          "guessedname": "autoSnapContainer",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If true, before each time the container expands, the container element will be\npositioned to snap to the bottom-left corner of the input element. If\nautoSnapContainer is set to false, this positioning will not be done."
        },
        "_elCurPrehighlightItem": {
          "private": "",
          "guessedname": "_elCurPrehighlightItem",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Pointer to the currently pre-highlighted &lt;li&gt; element in the container."
        },
        "queryMatchContains": {
          "guessedname": "queryMatchContains",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "When applyLocalFilter is true, results can  be locally filtered to return\nmatching strings that \"contain\" the query string rather than simply \"start with\"\nthe query string."
        },
        "resultTypeList": {
          "guessedname": "resultTypeList",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "For backward compatibility to pre-2.6.0 formatResults() signatures, setting\nresultsTypeList to true will take each object literal result returned by\nDataSource and flatten into an array."
        },
        "alwaysShowContainer": {
          "guessedname": "alwaysShowContainer",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Enabling this feature prevents the toggling of the container to a collapsed state.\nSetting to true does not automatically trigger the opening of the container.\nImplementers are advised to pre-load the container with an explicit \"sendQuery()\" call."
        }
      }
    },
    "YAHOO.widget.FlashAdapter": {
      "shortname": "FlashAdapter",
      "methods": {
        "_getAltText": {
          "guessedname": "_getAltText",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for altText attribute."
        },
        "_setAltText": {
          "guessedname": "_setAltText",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for altText attribute."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the FlashAdapter instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the FlashAdapter instance."
          }
        },
        "YAHOO.widget.FlashAdapter.createProxyFunction": {
          "private": "",
          "guessedname": "createProxyFunction",
          "static": "",
          "guessedtype": "function",
          "description": "Creates a globally accessible function that wraps a function reference.\nReturns the proxy function's name as a string for use by the SWF through\nExternalInterface."
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Nulls out the entire FlashAdapter instance and related objects and removes attached\nevent listeners and clears out DOM elements inside the container. After calling\nthis method, the instance reference should be expliclitly nulled by implementer,\nas in myChart = null. Use with caution!"
        },
        "_eventHandler": {
          "guessedname": "_eventHandler",
          "private": "",
          "guessedtype": "function",
          "description": "Handles or re-dispatches events received from the SWF."
        },
        "YAHOO.widget.FlashAdapter.eventHandler": {
          "private": "",
          "guessedname": "eventHandler",
          "static": "",
          "guessedtype": "function",
          "description": "Receives event messages from SWF and passes them to the correct instance\nof FlashAdapter."
        },
        "_getSWFURL": {
          "guessedname": "_getSWFURL",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for swfURL attribute."
        },
        "_initAttributes": {
          "guessedname": "_initAttributes",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the attributes."
        },
        "YAHOO.widget.FlashAdapter.removeProxyFunction": {
          "private": "",
          "guessedname": "removeProxyFunction",
          "static": "",
          "guessedtype": "function",
          "description": "Removes a function created with createProxyFunction()"
        },
        "_loadHandler": {
          "guessedname": "_loadHandler",
          "private": "",
          "guessedtype": "function",
          "description": "Called when the SWF has been initialized."
        },
        "_embedSWF": {
          "guessedname": "_embedSWF",
          "private": "",
          "guessedtype": "function",
          "description": "Embeds the SWF in the page and associates it with this instance."
        }
      },
      "name": "YAHOO.widget.FlashAdapter",
      "guessedname": "FlashAdapter",
      "module": "uploader",
      "namespace": "YAHOO.widget",
      "events": {
        "beforeVersionChange": {
          "name": "beforeVersionChange",
          "description": "Fires before the value for the configuration attribute 'version' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAltTextChange": {
          "name": "beforeAltTextChange",
          "description": "Fires before the value for the configuration attribute 'altText' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeWmodeChange": {
          "name": "beforeWmodeChange",
          "description": "Fires before the value for the configuration attribute 'wmode' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeExpressInstallChange": {
          "name": "beforeExpressInstallChange",
          "description": "Fires before the value for the configuration attribute 'expressInstall' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "expressInstallChange": {
          "name": "expressInstallChange",
          "description": "Fires when the value for the configuration attribute 'expressInstall' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSwfURLChange": {
          "name": "beforeSwfURLChange",
          "description": "Fires before the value for the configuration attribute 'swfURL' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "backgroundColorChange": {
          "name": "backgroundColorChange",
          "description": "Fires when the value for the configuration attribute 'backgroundColor' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeBackgroundColorChange": {
          "name": "beforeBackgroundColorChange",
          "description": "Fires before the value for the configuration attribute 'backgroundColor' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "altTextChange": {
          "name": "altTextChange",
          "description": "Fires when the value for the configuration attribute 'altText' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "swfURLChange": {
          "name": "swfURLChange",
          "description": "Fires when the value for the configuration attribute 'swfURL' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "wmodeChange": {
          "name": "wmodeChange",
          "description": "Fires when the value for the configuration attribute 'wmode' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "versionChange": {
          "name": "versionChange",
          "description": "Fires when the value for the configuration attribute 'version' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "contentReady": {
          "description": "Fires when the SWF is initialized and communication is possible."
        }
      },
      "guessedtype": "function",
      "description": "Wraps Flash embedding functionality and allows communication with SWF through\nattributes.",
      "file": "FlashAdapter.js",
      "configs": {
        "swfURL": {
          "type": "String",
          "description": "Absolute or relative URL to the SWF displayed by the FlashAdapter. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."
        },
        "altText": {
          "type": "String",
          "description": "The alternative text to provide for screen readers and other assistive technology."
        },
        "expressInstall": {
          "type": "String",
          "description": "URL pointing to a SWF file that handles Flash Player's express\ninstall feature. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."
        },
        "wmode": {
          "type": "String",
          "description": "Sets the window mode of the Flash Player control. May be\n\"window\", \"opaque\", or \"transparent\". Only available in the constructor\nbecause it may not be set after Flash Player has been embedded in the page."
        },
        "version": {
          "type": "String",
          "description": "Minimum required version for the SWF file. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."
        },
        "backgroundColor": {
          "type": "String",
          "description": "The background color of the SWF. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."
        }
      },
      "uses": [
        "YAHOO.util.AttributeProvider"
      ],
      "properties": {
        "_swf": {
          "guessedname": "_swf",
          "private": "",
          "guessedtype": "property",
          "description": "A reference to the embedded SWF file."
        },
        "_initialized": {
          "private": "",
          "guessedname": "_initialized",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates whether the SWF has been initialized and is ready\nto communicate with JavaScript"
        },
        "_swfURL": {
          "private": "",
          "guessedname": "_swfURL",
          "type": "String",
          "guessedtype": "property",
          "description": "The URL of the SWF file."
        },
        "_id": {
          "private": "",
          "guessedname": "_id",
          "type": "String",
          "guessedtype": "property",
          "description": "The id of this instance."
        },
        "_attributes": {
          "private": "",
          "guessedname": "_attributes",
          "type": "Object",
          "guessedtype": "property",
          "description": "The initializing attributes are stored here until the SWF is ready."
        },
        "_containerID": {
          "private": "",
          "guessedname": "_containerID",
          "type": "String",
          "guessedtype": "property",
          "description": "The ID of the containing DIV."
        },
        "proxyFunctionCount": {
          "private": "",
          "guessedname": "proxyFunctionCount",
          "static": "",
          "guessedtype": "property",
          "description": "The number of proxy functions that have been created."
        }
      }
    },
    "YAHOO.widget.Panel": {
      "shortname": "Panel",
      "superclass": "YAHOO.widget.Overlay",
      "methods": {
        "_autoFillOnHeightChange": {
          "guessedname": "_autoFillOnHeightChange",
          "guessedtype": "function",
          "protected": "",
          "description": "The default custom event handler executed when the Panel's height is changed, \nif the autofillheight property has been set.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The event type"
            },
            {
              "name": "args",
              "type": "Array",
              "description": " The array of arguments passed to event subscribers"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The header, body or footer element which is to be resized to fill\nout the containers height"
            }
          ]
        },
        "_addFocusHandlers": {
          "guessedname": "_addFocusHandlers",
          "guessedtype": "function",
          "protected": "",
          "description": "\"showMask\" event handler that adds a \"focus\" event handler to all\nfocusable elements in the document to enforce a Panel instance's \nmodality from being compromised.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": "  Custom event type"
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": "  Custom event arguments"
            }
          ]
        },
        "showMask": {
          "guessedname": "showMask",
          "guessedtype": "function",
          "description": "Shows the modality mask."
        },
        "_createHiddenFocusElement": {
          "guessedname": "_createHiddenFocusElement",
          "private": "",
          "guessedtype": "function",
          "description": "Creates a hidden focusable element, used to focus on,\nto enforce modality for browsers in which focus cannot\nbe applied to the container box."
        },
        "configDraggable": {
          "guessedname": "configDraggable",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"draggable\" property \nis changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "configStrings": {
          "guessedname": "configStrings",
          "guessedtype": "function",
          "description": "The default handler for the \"strings\" property"
        },
        "configClose": {
          "guessedname": "configClose",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"close\" property is changed.\nThe method controls the appending or hiding of the close icon at the \ntop right of the Panel.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "setTabLoop": {
          "guessedname": "setTabLoop",
          "guessedtype": "function",
          "description": "Sets up a tab, shift-tab loop between the first and last elements\nprovided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener\ninstance properties, which are reset everytime this method is invoked.",
          "params": [
            {
              "name": "firstElement",
              "type": "HTMLElement",
              "description": ""
            },
            {
              "name": "lastElement",
              "type": "HTMLElement",
              "description": ""
            }
          ]
        },
        "_renderFooter": {
          "guessedname": "_renderFooter",
          "guessedtype": "function",
          "protected": "",
          "description": "Renders the currently set footer into it's proper position under the \nmodule element. If the module element is not provided, \"this.innerElement\" \nis used.",
          "params": [
            {
              "name": "moduleElement",
              "type": "HTMLElement",
              "description": " Optional. A reference to the module element"
            }
          ]
        },
        "forceUnderlayRedraw": {
          "guessedname": "forceUnderlayRedraw",
          "guessedtype": "function",
          "description": "Forces the underlay element to be repainted through the application/removal \nof a yui-force-redraw class to the underlay element."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a String representation of the object.",
          "return": {
            "type": "String",
            "description": "The string representation of the Panel."
          }
        },
        "_renderBody": {
          "guessedname": "_renderBody",
          "guessedtype": "function",
          "protected": "",
          "description": "Renders the currently set body into it's proper position under the \nmodule element. If the module element is not provided, \"this.innerElement\" \nis used.",
          "params": [
            {
              "name": "moduleElement",
              "type": "HTMLElement",
              "description": " Optional. A reference to the module element."
            }
          ]
        },
        "sizeUnderlay": {
          "guessedname": "sizeUnderlay",
          "guessedtype": "function",
          "description": "Adjusts the size of the shadow based on the size of the element."
        },
        "configzIndex": {
          "guessedname": "configzIndex",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"zIndex\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the Panel element from the DOM and sets all child elements\nto null."
        },
        "configKeyListeners": {
          "guessedname": "configKeyListeners",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"keylisteners\" property \nis changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration\nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "configModal": {
          "guessedname": "configModal",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"modal\" property is \nchanged. This handler subscribes or unsubscribes to the show and hide\nevents to handle the display or hide of the modality mask.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "_renderHeader": {
          "guessedname": "_renderHeader",
          "guessedtype": "function",
          "protected": "",
          "description": "Renders the currently set header into it's proper position under the \nmodule element. If the module element is not provided, \"this.innerElement\" \nis used.",
          "params": [
            {
              "name": "moduleElement",
              "type": "HTMLElement",
              "description": " Optional. A reference to the module element"
            }
          ]
        },
        "sizeMask": {
          "guessedname": "sizeMask",
          "guessedtype": "function",
          "description": "Sets the size of the modality mask to cover the entire scrollable \narea of the document"
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Renders the Panel by inserting the elements that are not already in \nthe main Panel into their correct places. Optionally appends the \nPanel to the specified node prior to the render's execution. NOTE: \nFor Panels without existing markup, the appendToNode argument is \nREQUIRED. If this argument is ommitted and the current element is \nnot present in the document, the function will return false, \nindicating that the render was a failure.",
          "params": [
            {
              "name": "appendToNode",
              "type": "String",
              "description": " The element id to which the Module \nshould be appended to prior to rendering <em>OR</em>"
            },
            {
              "name": "appendToNode",
              "type": "HTMLElement",
              "description": " The element to which the Module \nshould be appended to prior to rendering"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "Success or failure of the render"
          }
        },
        "focusLast": {
          "guessedname": "focusLast",
          "guessedtype": "function",
          "description": "Sets focus to the last element in the Panel."
        },
        "configUnderlay": {
          "guessedname": "configUnderlay",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"underlay\" property \nis changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "hideMask": {
          "guessedname": "hideMask",
          "guessedtype": "function",
          "description": "Hides the modality mask."
        },
        "_doClose": {
          "guessedname": "_doClose",
          "guessedtype": "function",
          "protected": "",
          "description": "Event handler for the close icon",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": ""
            }
          ]
        },
        "buildMask": {
          "guessedname": "buildMask",
          "guessedtype": "function",
          "description": "Builds the mask that is laid over the document when the Panel is \nconfigured to be modal."
        },
        "configWidth": {
          "guessedname": "configWidth",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"width\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "_onElementFocus": {
          "private": "",
          "guessedname": "_onElementFocus",
          "guessedtype": "function",
          "description": "\"focus\" event handler for a focuable element. Used to automatically\nblur the element when it receives focus to ensure that a Panel\ninstance's modality is not compromised.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " The DOM event object"
            }
          ]
        },
        "focusFirst": {
          "guessedname": "focusFirst",
          "guessedtype": "function",
          "description": "Sets focus to the first element in the Panel."
        },
        "setFirstLastFocusable": {
          "guessedname": "setFirstLastFocusable",
          "guessedtype": "function",
          "description": "Sets the firstElement and lastElement instance properties\nto the first and last focusable elements in the Panel."
        },
        "removeMask": {
          "guessedname": "removeMask",
          "guessedtype": "function",
          "description": "Removes the modality mask."
        },
        "buildWrapper": {
          "guessedname": "buildWrapper",
          "guessedtype": "function",
          "description": "Builds the wrapping container around the Panel that is used for \npositioning the shadow and matte underlays. The container element is \nassigned to a  local instance variable called container, and the \nelement is reinserted inside of it."
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Overlay initialization method, which is executed for Overlay and \nall of its subclasses. This method is automatically called by the \nconstructor, and  sets up all DOM references for pre-existing markup, \nand creates required markup if it is not already present.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Overlay <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Overlay"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal \ncontaining the configuration that should be set for this Overlay. \nSee configuration documentation for more details."
            }
          ]
        },
        "registerDragDrop": {
          "guessedname": "registerDragDrop",
          "guessedtype": "function",
          "description": "Registers the Panel's header for drag & drop capability."
        },
        "configHeight": {
          "guessedname": "configHeight",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"height\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "initEvents": {
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initializes the custom events for Module which are fired \nautomatically at appropriate times by the Module class."
        },
        "stackMask": {
          "guessedname": "stackMask",
          "guessedtype": "function",
          "description": "Sets the zindex of the mask, if it exists, based on the zindex of \nthe Panel element. The zindex of the mask is set to be one less \nthan the Panel element's zindex.\n<p>NOTE: This method will not bump up the zindex of the Panel\nto ensure that the mask has a non-negative zindex. If you require the\nmask zindex to be 0 or higher, the zindex of the Panel \nshould be set to a value higher than 0, before this method is called.\n</p>"
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the class's configurable properties which can be changed \nusing the Panel's Config object (cfg)."
        },
        "getFocusableElements": {
          "guessedname": "getFocusableElements",
          "guessedtype": "function",
          "description": "Returns an array of the currently focusable items which reside within\nPanel. The set of focusable elements the method looks for are defined\nin the Panel.FOCUSABLE static property",
          "params": [
            {
              "name": "root",
              "type": "HTMLElement",
              "description": " element to start from."
            }
          ]
        },
        "_removeFocusHandlers": {
          "guessedname": "_removeFocusHandlers",
          "guessedtype": "function",
          "protected": "",
          "description": "\"hideMask\" event handler that removes all \"focus\" event handlers added \nby the \"addFocusEventHandlers\" method.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": "  Event type"
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": "  Event Arguments"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Panel",
      "extends": "YAHOO.widget.Overlay",
      "guessedname": "Panel",
      "module": "container",
      "namespace": "YAHOO.widget",
      "events": {
        "hideMaskEvent": {
          "guessedname": "hideMaskEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after the modality mask is hidden"
        },
        "dragEvent": {
          "guessedname": "dragEvent",
          "guessedtype": "property",
          "description": "CustomEvent when the Panel is dragged"
        },
        "showMaskEvent": {
          "guessedname": "showMaskEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after the modality mask is shown"
        }
      },
      "constructors": [
        {
          "description": "Panel is an implementation of Overlay that behaves like an OS window, \nwith a draggable header and an optional close icon at the top right.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Panel <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Panel"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal containing \nthe configuration that should be set for this Panel. See configuration \ndocumentation for more details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Panel is an implementation of Overlay that behaves like an OS window, \nwith a draggable header and an optional close icon at the top right.",
      "file": "Panel.js",
      "configs": {
        "close": {
          "default": "true",
          "type": "Boolean",
          "description": "True if the Panel should display a \"close\" button"
        },
        "dragOnly": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean specifying if the draggable Panel should be drag only, not interacting with drop \ntargets on the page.\n<p>\nWhen set to true, draggable Panels will not check to see if they are over drop targets,\nor fire the DragDrop events required to support drop target interaction (onDragEnter, \nonDragOver, onDragOut, onDragDrop etc.).\nIf the Panel is not designed to be dropped on any target elements on the page, then this \nflag can be set to true to improve performance.\n</p>\n<p>\nWhen set to false, all drop target related events will be fired.\n</p>\n<p>\nThe property is set to false by default to maintain backwards compatibility but should be \nset to true if drop target interaction is not required for the Panel, to improve performance.</p>"
        },
        "modal": {
          "default": "false",
          "type": "Boolean",
          "description": "True if the Panel should be displayed in a modal fashion, \nautomatically creating a transparent mask over the document that\nwill not be removed until the Panel is dismissed."
        },
        "draggable": {
          "default": "true",
          "type": "Boolean",
          "description": "Boolean specifying if the Panel should be draggable.  The default \nvalue is \"true\" if the Drag and Drop utility is included, \notherwise it is \"false.\" <strong>PLEASE NOTE:</strong> There is a \nknown issue in IE 6 (Strict Mode and Quirks Mode) and IE 7 \n(Quirks Mode) where Panels that either don't have a value set for \ntheir \"width\" configuration property, or their \"width\" \nconfiguration property is set to \"auto\" will only be draggable by\nplacing the mouse on the text of the Panel's header element.\nTo fix this bug, draggable Panels missing a value for their \n\"width\" configuration property, or whose \"width\" configuration \nproperty is set to \"auto\" will have it set to the value of \ntheir root HTML element's offsetWidth before they are made \nvisible.  The calculated width is then removed when the Panel is   \nhidden. <em>This fix is only applied to draggable Panels in IE 6 \n(Strict Mode and Quirks Mode) and IE 7 (Quirks Mode)</em>. For \nmore information on this issue see:\nYUILibrary bugs #1726972 and #1589210."
        },
        "keylisteners": {
          "default": "null",
          "type": "YAHOO.util.KeyListener[]",
          "description": "A KeyListener (or array of KeyListeners) that will be enabled \nwhen the Panel is shown, and disabled when the Panel is hidden."
        },
        "underlay": {
          "default": "shadow",
          "type": "String",
          "description": "Sets the type of underlay to display for the Panel. Valid values \nare \"shadow,\" \"matte,\" and \"none\".  <strong>PLEASE NOTE:</strong> \nThe creation of the underlay element is deferred until the Panel \nis initially made visible.  For Gecko-based browsers on Mac\nOS X the underlay elment is always created as it is used as a \nshim to prevent Aqua scrollbars below a Panel instance from poking \nthrough it (See YUILibrary bug #1723530)."
        },
        "strings": {
          "default": "An object literal with the properties shown below:\n<dl>\n<dt>close</dt><dd><em>String</em> : The string to use for the close icon. Defaults to \"Close\".</dd>\n</dl>",
          "type": "Object",
          "description": "UI Strings used by the Panel"
        }
      },
      "properties": {
        "dd": {
          "guessedname": "dd",
          "type": "YAHOO.util.DD",
          "guessedtype": "property",
          "description": "The YAHOO.util.DD instance, used to implement the draggable header for the panel if draggable is enabled"
        },
        "EVENT_TYPES": {
          "final": "",
          "guessedname": "EVENT_TYPES",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the name of the Panel's events"
        },
        "YAHOO.widget.Panel.CSS_PANEL": {
          "final": "",
          "guessedname": "CSS_PANEL",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the default CSS class used for a Panel"
        },
        "YAHOO.widget.Panel.FOCUSABLE": {
          "guessedname": "FOCUSABLE",
          "static": "",
          "type": "Array",
          "guessedtype": "property",
          "description": "Constant representing the default set of focusable elements \non the pagewhich Modal Panels will prevent access to, when\nthe modal mask is displayed"
        },
        "DEFAULT_CONFIG": {
          "final": "",
          "guessedname": "DEFAULT_CONFIG",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the Panel's configuration properties"
        },
        "YAHOO.widget.Panel.CSS_PANEL_CONTAINER": {
          "final": "",
          "guessedname": "CSS_PANEL_CONTAINER",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the default CSS class used for a Panel's \nwrapping container"
        }
      }
    },
    "YAHOO.util.CustomEvent": {
      "shortname": "CustomEvent",
      "methods": {
        "fire": {
          "guessedname": "fire",
          "guessedtype": "function",
          "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event</li>\n<li>All of the arguments fire() was executed with as an array</li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod</li>\n</ul>",
          "params": [
            {
              "name": "arguments",
              "type": "Object*",
              "description": " an arbitrary set of parameters to pass to \nthe handler."
            }
          ],
          "return": {
            "type": "boolean",
            "description": "false if one of the subscribers returned false, \ntrue otherwise"
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function"
        },
        "_delete": {
          "guessedname": "_delete",
          "private": "",
          "guessedtype": "function"
        },
        "unsubscribeAll": {
          "guessedname": "unsubscribeAll",
          "guessedtype": "function",
          "description": "Removes all listeners",
          "return": {
            "type": "int",
            "description": "The number of listeners unsubscribed"
          }
        },
        "unsubscribe": {
          "guessedname": "unsubscribe",
          "guessedtype": "function",
          "description": "Unsubscribes subscribers.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "  The subscribed function to remove, if not supplied\nall will be removed"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "  The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "True if the subscriber was found and detached."
          }
        },
        "subscribe": {
          "guessedname": "subscribe",
          "guessedtype": "function",
          "description": "Subscribes the caller to this event",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "        The function to execute"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "       An object to be passed along when the event fires.\noverrideContext <boolean|Object> If true, the obj passed in becomes the execution \ncontext of the listener. If an object, that object becomes the execution context."
            }
          ]
        }
      },
      "name": "YAHOO.util.CustomEvent",
      "guessedname": "CustomEvent",
      "module": "event",
      "namespace": "YAHOO.util",
      "events": {
        "subscribeEvent": {
          "guessedname": "subscribeEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Custom events provide a custom event that fires whenever there is\na new subscriber to the event.  This provides an opportunity to\nhandle the case where there is a non-repeating event that has\nalready fired has a new subscriber.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "  The function to execute"
            },
            {
              "name": "obj",
              "type": "",
              "description": " <Object> An object to be passed along when the event fires. \nDefaults to the custom event."
            },
            {
              "name": "override",
              "type": "",
              "description": " <boolean|Object> If true, the obj passed in becomes the \nexecution context of the listener. If an object, that object becomes \nthe execution context. Defaults to the custom event."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The type of event, which is passed to the callback\nwhen the event fires"
            },
            {
              "name": "context",
              "type": "Object",
              "description": " The context the event will fire from.  \"this\" will\nrefer to this object in the callback.  Default value: \nthe window object.  The listener can override this."
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": " pass true to prevent the event from writing to\nthe debugsystem"
            },
            {
              "name": "signature",
              "type": "int",
              "description": " the signature that the custom event subscriber\nwill receive. YAHOO.util.CustomEvent.LIST or \nYAHOO.util.CustomEvent.FLAT.  The default is\nYAHOO.util.CustomEvent.LIST."
            },
            {
              "name": "fireOnce",
              "type": "boolean",
              "description": "  If configured to fire once, the custom event \nwill only notify subscribers a single time regardless of how many times \nthe event is fired.  In addition, new subscribers will be notified \nimmediately if the event has already been fired."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component.",
      "file": "CustomEvent.js",
      "properties": {
        "scope": {
          "guessedname": "scope",
          "type": "object",
          "guessedtype": "property",
          "description": "The context the event will fire from by default. Defaults to the window obj."
        },
        "firedWith": {
          "guessedname": "firedWith",
          "type": "Array",
          "guessedtype": "property",
          "description": "For fireOnce events the arguments the event was fired with are stored\nso that new subscribers get the proper payload."
        },
        "silent": {
          "guessedname": "silent",
          "type": "boolean",
          "guessedtype": "property",
          "description": "By default all custom events are logged in the debug build. Set silent to true \nto disable debug output for this event."
        },
        "YAHOO.util.CustomEvent.LIST": {
          "guessedname": "LIST",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Subscriber listener sigature constant.  The LIST type returns three\nparameters: the event type, the array of args passed to fire, and\nthe optional custom object"
        },
        "fireOnce": {
          "guessedname": "fireOnce",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "If configured to fire once, the custom event will only notify subscribers\na single time regardless of how many times the event is fired.  In addition,\nnew subscribers will be notified immediately if the event has already been\nfired."
        },
        "signature": {
          "guessedname": "signature",
          "type": "int",
          "guessedtype": "property",
          "description": "Custom events support two styles of arguments provided to the event\nsubscribers.  \n<ul>\n<li>YAHOO.util.CustomEvent.LIST: \n<ul>\n<li>param1: event name</li>\n<li>param2: array of arguments sent to fire</li>\n<li>param3: <optional> a custom object supplied by the subscriber</li>\n</ul>\n</li>\n<li>YAHOO.util.CustomEvent.FLAT\n<ul>\n<li>param1: the first argument passed to fire.  If you need to\npass multiple parameters, use and array or object literal</li>\n<li>param2: <optional> a custom object supplied by the subscriber</li>\n</ul>\n</li>\n</ul>"
        },
        "subscribers": {
          "guessedname": "subscribers",
          "type": "Subscriber[]",
          "guessedtype": "property",
          "description": "The subscribers to this event"
        },
        "fired": {
          "guessedname": "fired",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Indicates whether or not this event has ever been fired."
        },
        "type": {
          "guessedname": "type",
          "type": "string",
          "guessedtype": "property",
          "description": "The type of event, returned to subscribers when the event fires"
        },
        "lastError": {
          "guessedname": "lastError",
          "type": "Error",
          "guessedtype": "property",
          "description": "In order to make it possible to execute the rest of the subscriber\nstack when one thows an exception, the subscribers exceptions are\ncaught.  The most recent exception is stored in this property"
        },
        "YAHOO.util.CustomEvent.FLAT": {
          "guessedname": "FLAT",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Subscriber listener sigature constant.  The FLAT type returns two\nparameters: the first argument passed to fire and the optional \ncustom object"
        }
      }
    },
    "YAHOO.util.Scroll": {
      "shortname": "Scroll",
      "superclass": "YAHOO.util.ColorAnim",
      "name": "YAHOO.util.Scroll",
      "extends": "YAHOO.util.ColorAnim",
      "guessedname": "Scroll",
      "module": "animation",
      "namespace": "YAHOO.util",
      "requires": "YAHOO.util.Anim",
      "constructors": [
        {
          "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>",
          "params": [
            {
              "name": "el",
              "type": "String or HTMLElement",
              "description": " Reference to the element that will be animated"
            },
            {
              "name": "attributes",
              "type": "Object",
              "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."
            },
            {
              "name": "duration",
              "type": "Number",
              "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>",
      "file": "Scroll.js"
    },
    "YAHOO.util.Assert": {
      "shortname": "Assert",
      "methods": {
        "isObject": {
          "guessedname": "isObject",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is an object.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isNumber": {
          "guessedname": "isNumber",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is a number.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "_formatMessage": {
          "guessedname": "_formatMessage",
          "static": "",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "customMessage",
              "type": "String",
              "description": " The message passed in by the developer."
            },
            {
              "name": "defaultMessage",
              "type": "String",
              "description": " The message created by the error by default."
            }
          ],
          "description": "Formats a message so that it can contain the original assertion message\nin addition to the custom message.",
          "return": {
            "type": "String",
            "description": "The final error message, containing either or both."
          }
        },
        "isBoolean": {
          "guessedname": "isBoolean",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is a Boolean.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isFunction": {
          "guessedname": "isFunction",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is a function.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isTrue": {
          "guessedname": "isTrue",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is true. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "areNotEqual": {
          "guessedname": "areNotEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not equal to another. This uses the double equals sign\nso type cohersion may occur.",
          "params": [
            {
              "name": "unexpected",
              "type": "Object",
              "description": " The unexpected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isFalse": {
          "guessedname": "isFalse",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is false. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isInstanceOf": {
          "guessedname": "isInstanceOf",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is an instance of a particular object. This may return\nincorrect results when comparing objects from one frame to constructors in\nanother frame. For best results, don't use in a cross-frame manner.",
          "params": [
            {
              "name": "expected",
              "type": "Function",
              "description": " The function that the object should be an instance of."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The object to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "areEqual": {
          "guessedname": "areEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is equal to another. This uses the double equals sign\nso type cohersion may occur.",
          "params": [
            {
              "name": "expected",
              "type": "Object",
              "description": " The expected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "areSame": {
          "guessedname": "areSame",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is the same as another. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "expected",
              "type": "Object",
              "description": " The expected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isTypeOf": {
          "guessedname": "isTypeOf",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is of a particular type.",
          "params": [
            {
              "name": "expectedType",
              "type": "String",
              "description": " The expected type of the variable."
            },
            {
              "name": "actualValue",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isNull": {
          "guessedname": "isNull",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is null. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "areNotSame": {
          "guessedname": "areNotSame",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not the same as another. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "unexpected",
              "type": "Object",
              "description": " The unexpected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isArray": {
          "guessedname": "isArray",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is an array.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isUndefined": {
          "guessedname": "isUndefined",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is undefined. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isNotUndefined": {
          "guessedname": "isNotUndefined",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not undefined. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isString": {
          "guessedname": "isString",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is a string.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isNotNaN": {
          "guessedname": "isNotNaN",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not the special NaN value.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isNotNull": {
          "guessedname": "isNotNull",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not null. This uses the triple equals sign\nso no type cohersion may occur.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isNaN": {
          "guessedname": "isNaN",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not a number.",
          "params": [
            {
              "name": "actual",
              "type": "Object",
              "description": " The value to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "fail": {
          "guessedname": "fail",
          "static": "",
          "guessedtype": "function",
          "description": "Forces an assertion error to occur.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display with the failure."
            }
          ]
        }
      },
      "name": "YAHOO.util.Assert",
      "guessedname": "Assert",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "static": "",
      "guessedtype": "property",
      "description": "The Assert object provides functions to test JavaScript values against\nknown and expected results. Whenever a comparison (assertion) fails,\nan error is thrown.",
      "file": "Assert.js"
    },
    "YAHOO.widget.BaseCellEditor": {
      "shortname": "BaseCellEditor",
      "methods": {
        "unblock": {
          "guessedname": "unblock",
          "guessedtype": "function",
          "description": "Fires unblockEvent"
        },
        "_initConfigs": {
          "guessedname": "_initConfigs",
          "private": "",
          "guessedtype": "function",
          "description": "Initialize configs."
        },
        "getTdEl": {
          "guessedname": "getTdEl",
          "guessedtype": "function",
          "description": "Returns reference to associated TD element.",
          "return": {
            "type": "HTMLElement",
            "description": "TD element."
          }
        },
        "cancel": {
          "guessedname": "cancel",
          "guessedtype": "function",
          "description": "Cancels CellEditor input and hides UI."
        },
        "renderBtns": {
          "guessedname": "renderBtns",
          "guessedtype": "function",
          "description": "Renders Save/Cancel buttons."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "CellEditor instance name, for logging.",
          "return": {
            "type": "String",
            "description": "Unique name of the CellEditor instance."
          }
        },
        "getColumn": {
          "guessedname": "getColumn",
          "guessedtype": "function",
          "description": "Returns reference to associated Column instance.",
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "Column instance."
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Nulls out the entire CellEditor instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container, removes\ncontainer from the DOM."
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Sets focus in CellEditor."
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Renders DOM elements and attaches event listeners."
        },
        "getDataTable": {
          "guessedname": "getDataTable",
          "guessedtype": "function",
          "description": "Returns reference to associated DataTable instance.",
          "return": {
            "type": "YAHOO.widget.DataTable",
            "description": "DataTable instance."
          }
        },
        "block": {
          "guessedname": "block",
          "guessedtype": "function",
          "description": "Fires blockEvent"
        },
        "move": {
          "guessedname": "move",
          "guessedtype": "function",
          "description": "Moves container into position for display."
        },
        "getContainerEl": {
          "guessedname": "getContainerEl",
          "guessedtype": "function",
          "description": "Returns container element.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to container element."
          }
        },
        "handleDisabledBtns": {
          "guessedname": "handleDisabledBtns",
          "guessedtype": "function",
          "description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them."
        },
        "save": {
          "guessedname": "save",
          "guessedtype": "function",
          "description": "Saves value of CellEditor and hides UI."
        },
        "getInputValue": {
          "guessedname": "getInputValue",
          "guessedtype": "function",
          "description": "Retrieves input value from CellEditor."
        },
        "attach": {
          "guessedname": "attach",
          "guessedtype": "function",
          "description": "Attach CellEditor for a new interaction.",
          "params": [
            {
              "name": "oDataTable",
              "type": "YAHOO.widget.DataTable",
              "description": "  Associated DataTable instance."
            },
            {
              "name": "elCell",
              "type": "HTMLElement",
              "description": "  Cell to edit."
            }
          ]
        },
        "show": {
          "guessedname": "show",
          "guessedtype": "function",
          "description": "Displays CellEditor UI in the correct position."
        },
        "resetForm": {
          "guessedname": "resetForm",
          "guessedtype": "function",
          "description": "Resets CellEditor UI to initial state."
        },
        "renderForm": {
          "guessedname": "renderForm",
          "guessedtype": "function",
          "description": "Renders form elements."
        },
        "getRecord": {
          "guessedname": "getRecord",
          "guessedtype": "function",
          "description": "Returns reference to associated Record instance.",
          "return": {
            "type": "YAHOO.widget.Record",
            "description": "Record instance."
          }
        },
        "doAfterRender": {
          "guessedname": "doAfterRender",
          "guessedtype": "function",
          "description": "Access to add additional event listeners."
        },
        "getId": {
          "guessedname": "getId",
          "guessedtype": "function",
          "description": "CellEditor unique ID.",
          "return": {
            "type": "String",
            "description": "Unique ID of the CellEditor instance."
          }
        },
        "_initEvents": {
          "guessedname": "_initEvents",
          "private": "",
          "guessedtype": "function",
          "description": "Initialize Custom Events."
        }
      },
      "name": "YAHOO.widget.BaseCellEditor",
      "guessedname": "BaseCellEditor",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "events": {
        "cancelEvent": {
          "description": "Fired when a CellEditor input is canceled.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            }
          ]
        },
        "revertEvent": {
          "description": "Fired when a CellEditor input is reverted due to asyncSubmitter failure.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            },
            {
              "name": "oArgs.newData",
              "type": "Object",
              "description": "  New data value from form input field."
            },
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Old data value."
            }
          ]
        },
        "invalidDataEvent": {
          "description": "Fired when a CellEditor input is reverted due to invalid data.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            },
            {
              "name": "oArgs.newData",
              "type": "Object",
              "description": "  New data value from form input field."
            },
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Old data value."
            }
          ]
        },
        "keydownEvent": {
          "description": "Fired when a CellEditor has a keydown.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            },
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            }
          ]
        },
        "showEvent": {
          "description": "Fired when a CellEditor is shown.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            }
          ]
        },
        "saveEvent": {
          "description": "Fired when a CellEditor input is saved.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            },
            {
              "name": "oArgs.newData",
              "type": "Object",
              "description": "  New data value from form input field."
            },
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Old data value."
            }
          ]
        },
        "blurEvent": {
          "description": "Fired when a CellEditor has a blur event.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The BaseCellEditor class provides base functionality common to all inline cell\neditors for a DataTable widget.",
          "params": [
            {
              "name": "sType",
              "type": "String",
              "description": "  Type indicator, to map to YAHOO.widget.DataTable.Editors."
            },
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal of configs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The BaseCellEditor class provides base functionality common to all inline cell\neditors for a DataTable widget.",
      "file": "CellEditor.js",
      "properties": {
        "validator": {
          "guessedname": "validator",
          "default": "null",
          "type": "HTMLFunction",
          "guessedtype": "property",
          "description": "Validator function for input data, called from the DataTable instance scope,\nreceives the arguments (inputValue, currentValue, editorInstance) and returns\neither the validated (or type-converted) value or undefined."
        },
        "_oDataTable": {
          "private": "",
          "guessedname": "_oDataTable",
          "type": "YAHOO.widget.DataTable",
          "guessedtype": "property",
          "description": "DataTable instance."
        },
        "CellEditor.CLASS_CELLEDITOR": {
          "guessedname": "CLASS_CELLEDITOR",
          "default": "\"yui-ceditor\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to CellEditor container."
        },
        "disableBtns": {
          "guessedname": "disableBtns",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if Save/Cancel buttons should not be displayed in the CellEditor."
        },
        "_sId": {
          "private": "",
          "guessedname": "_sId",
          "type": "String",
          "guessedtype": "property",
          "description": "Unique id assigned to instance \"yui-ceditorN\", useful prefix for generating unique\nDOM ID strings and log messages."
        },
        "_oRecord": {
          "guessedname": "_oRecord",
          "private": "",
          "default": "null",
          "type": "YAHOO.widget.Record",
          "guessedtype": "property",
          "description": "Record instance."
        },
        "_sType": {
          "private": "",
          "guessedname": "_sType",
          "type": "String",
          "guessedtype": "property",
          "description": "Editor type."
        },
        "CellEditor._nCount": {
          "guessedname": "_nCount",
          "private": "",
          "default": "0",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Global instance counter."
        },
        "_elTd": {
          "guessedname": "_elTd",
          "private": "",
          "default": "null",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "TD element."
        },
        "asyncSubmitter": {
          "guessedname": "asyncSubmitter",
          "type": "HTMLFunction",
          "guessedtype": "property",
          "description": "Implementer defined function that can submit the input value to a server. This\nfunction must accept the arguments fnCallback and oNewValue. When the submission\nis complete, the function must also call fnCallback(bSuccess, oNewValue) to \nfinish the save routine in the CellEditor. This function can also be used to \nperform extra validation or input value manipulation."
        },
        "_oColumn": {
          "guessedname": "_oColumn",
          "private": "",
          "default": "null",
          "type": "YAHOO.widget.Column",
          "guessedtype": "property",
          "description": "Column instance."
        },
        "_elSaveBtn": {
          "guessedname": "_elSaveBtn",
          "private": "",
          "default": "null",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to Save button, if available."
        },
        "_elContainer": {
          "private": "",
          "guessedname": "_elContainer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Container for inline editor."
        },
        "value": {
          "guessedname": "value",
          "type": "MIXED",
          "guessedtype": "property",
          "description": "Current value."
        },
        "isActive": {
          "guessedname": "isActive",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if currently active."
        },
        "resetInvalidData": {
          "guessedname": "resetInvalidData",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If validation is enabled, resets input field of invalid data."
        },
        "_elCancelBtn": {
          "guessedname": "_elCancelBtn",
          "private": "",
          "default": "null",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to Cancel button, if available."
        },
        "LABEL_SAVE": {
          "guessedname": "LABEL_SAVE",
          "default": "\"Save\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Text to display on Save button."
        },
        "LABEL_CANCEL": {
          "guessedname": "LABEL_CANCEL",
          "default": "\"Cancel\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Text to display on Cancel button."
        },
        "defaultValue": {
          "guessedname": "defaultValue",
          "default": "null",
          "type": "MIXED",
          "guessedtype": "property",
          "description": "Default value in case Record data is undefined. NB: Null values will not trigger\nthe default value."
        }
      },
      "uses": [
        "YAHOO.util.EventProvider"
      ]
    },
    "YAHOO.widget.TabView": {
      "shortname": "TabView",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "addTab": {
          "guessedname": "addTab",
          "guessedtype": "function",
          "description": "Adds a Tab to the TabView instance.  \nIf no index is specified, the tab is added to the end of the tab list.",
          "params": [
            {
              "name": "tab",
              "type": "YAHOO.widget.Tab",
              "description": " A Tab instance to add."
            },
            {
              "name": "index",
              "type": "Integer",
              "description": " The position to add the tab."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "DOMEventHandler": {
          "guessedname": "DOMEventHandler",
          "guessedtype": "function",
          "description": "Routes childNode events.",
          "params": [
            {
              "name": "e",
              "type": "event",
              "description": " The Dom event that is being handled."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "getTab": {
          "guessedname": "getTab",
          "guessedtype": "function",
          "description": "Returns the Tab instance at the specified index.",
          "params": [
            {
              "name": "index",
              "type": "Integer",
              "description": " The position of the Tab."
            }
          ],
          "return": {
            "type": "",
            "description": "YAHOO.widget.Tab"
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Provides a readable name for the TabView instance.",
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "_initTabs": {
          "private": "",
          "guessedname": "_initTabs",
          "guessedtype": "function",
          "description": "Creates Tab instances from a collection of HTMLElements.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "contentTransition": {
          "guessedname": "contentTransition",
          "guessedtype": "function",
          "description": "The transiton to use when switching between tabs."
        },
        "deselectTab": {
          "guessedname": "deselectTab",
          "guessedtype": "function",
          "description": "Removes selected state from the given tab if it is the activeTab",
          "params": [
            {
              "name": "index",
              "type": "Int",
              "description": " The tab index to deselect"
            }
          ]
        },
        "selectTab": {
          "guessedname": "selectTab",
          "guessedtype": "function",
          "description": "Makes the tab at the given index the active tab",
          "params": [
            {
              "name": "index",
              "type": "Int",
              "description": " The tab index to be made active"
            }
          ]
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "setAttributeConfigs TabView specific properties.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " Hash of initial attributes"
            }
          ]
        },
        "removeTab": {
          "guessedname": "removeTab",
          "guessedtype": "function",
          "description": "Removes the specified Tab from the TabView.",
          "params": [
            {
              "name": "item",
              "type": "YAHOO.widget.Tab",
              "description": " The Tab instance to be removed."
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "getTabIndex": {
          "guessedname": "getTabIndex",
          "guessedtype": "function",
          "description": "Returns the index of given tab.",
          "params": [
            {
              "name": "tab",
              "type": "YAHOO.widget.Tab",
              "description": " The tab whose index will be returned."
            }
          ],
          "return": {
            "type": "",
            "description": "int"
          }
        }
      },
      "name": "YAHOO.widget.TabView",
      "extends": "YAHOO.util.Element",
      "guessedname": "TabView",
      "module": "tabview",
      "namespace": "YAHOO.widget",
      "events": {
        "activeTabChange": {
          "name": "activeTabChange",
          "description": "Fires when the value for the configuration attribute 'activeTab' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeActiveIndexChange": {
          "name": "beforeActiveIndexChange",
          "description": "Fires before the value for the configuration attribute 'activeIndex' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeActiveTabChange": {
          "name": "beforeActiveTabChange",
          "description": "Fires before the value for the configuration attribute 'activeTab' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "orientationChange": {
          "name": "orientationChange",
          "description": "Fires when the value for the configuration attribute 'orientation' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeOrientationChange": {
          "name": "beforeOrientationChange",
          "description": "Fires before the value for the configuration attribute 'orientation' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tabsChange": {
          "name": "tabsChange",
          "description": "Fires when the value for the configuration attribute 'tabs' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTabsChange": {
          "name": "beforeTabsChange",
          "description": "Fires before the value for the configuration attribute 'tabs' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "activeIndexChange": {
          "name": "activeIndexChange",
          "description": "Fires when the value for the configuration attribute 'activeIndex' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "A widget to control tabbed views.",
          "params": [
            {
              "name": "el(optional)",
              "type": "HTMLElement | String | Object",
              "description": " The html \nelement that represents the TabView, or the attribute object to use. \nAn element will be created if none provided."
            },
            {
              "name": "attr",
              "type": "Object",
              "description": " (optional) A key map of the tabView's \ninitial attributes.  Ignored if first arg is attributes object."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A widget to control tabbed views.",
      "file": "TabView.js",
      "configs": {
        "activeIndex": {
          "type": "Int",
          "description": "The index of the tab currently active."
        },
        "activeTab": {
          "type": "YAHOO.widget.Tab",
          "description": "The tab currently active."
        },
        "orientation": {
          "default": "\"top\"",
          "type": "String",
          "description": "How the Tabs should be oriented relative to the TabView."
        },
        "tabs": {
          "type": "Array",
          "description": "The Tabs belonging to the TabView instance."
        }
      },
      "properties": {
        "CONTENT_PARENT_CLASSNAME": {
          "guessedname": "CONTENT_PARENT_CLASSNAME",
          "default": "\"nav-content\"",
          "guessedtype": "property",
          "description": "The className of the HTMLElement containing the TabView's label elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the content container are treated as content elements when\nbuilding from existing markup."
        },
        "_tabParent": {
          "private": "",
          "guessedname": "_tabParent",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The container of the tabView's label elements."
        },
        "TAB_PARENT_CLASSNAME": {
          "guessedname": "TAB_PARENT_CLASSNAME",
          "default": "\"nav\"",
          "guessedtype": "property",
          "description": "The className of the HTMLElement containing the TabView's tab elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the tab container are treated as Tabs when building\nfrom existing markup."
        },
        "CLASSNAME": {
          "guessedname": "CLASSNAME",
          "default": "\"navset\"",
          "guessedtype": "property",
          "description": "The className to add when building from scratch."
        },
        "_contentParent": {
          "private": "",
          "guessedname": "_contentParent",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The container of the tabView's content elements."
        }
      }
    },
    "YAHOO.util.Dom.Color": {
      "shortname": "Color",
      "methods": {
        "toHex": {
          "guessedname": "toHex",
          "returns": "{String} The converted string",
          "guessedtype": "function",
          "description": "Converts an rgb or color string to a hex string: #123456",
          "params": [
            {
              "name": "val",
              "type": "String",
              "description": " The string to convert to hex notation."
            }
          ]
        },
        "toRGB": {
          "guessedname": "toRGB",
          "returns": "{String} The converted string",
          "guessedtype": "function",
          "description": "Converts a hex or color string to an rgb string: rgb(0,0,0)",
          "params": [
            {
              "name": "val",
              "type": "String",
              "description": " The string to convert to RGB notation."
            }
          ]
        }
      },
      "name": "YAHOO.util.Dom.Color",
      "guessedname": "TO_STRING",
      "module": "dom",
      "namespace": "YAHOO.util.Dom",
      "guessedtype": "property",
      "description": "Add style management functionality to DOM.",
      "file": "Color.js",
      "properties": {
        "re_RGB": {
          "private": "",
          "guessedname": "re_RGB",
          "type": "Regex",
          "guessedtype": "property",
          "description": "Regex to parse rgb(0,0,0) formatted strings"
        },
        "KEYWORDS": {
          "guessedname": "KEYWORDS",
          "type": "Object",
          "guessedtype": "property",
          "description": "Color keywords used when converting to Hex"
        },
        "re_hex": {
          "private": "",
          "guessedname": "re_hex",
          "type": "Regex",
          "guessedtype": "property",
          "description": "Regex to parse #123456 formatted strings"
        },
        "re_hex3": {
          "private": "",
          "guessedname": "re_hex3",
          "type": "Regex",
          "guessedtype": "property",
          "description": "Regex to parse #123 formatted strings"
        }
      }
    },
    "YAHOO.util.StorageEngineHTML5": {
      "shortname": "StorageEngineHTML5",
      "name": "YAHOO.util.StorageEngineHTML5",
      "guessedname": "StorageEngineHTML5",
      "module": "Storage",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "The StorageEngineHTML5 class implements the HTML5 storage engine.",
          "params": [
            {
              "name": "location",
              "type": "String",
              "description": "  Required. The storage location."
            },
            {
              "name": "conf",
              "type": "Object",
              "description": "  Required. A configuration object."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The StorageEngineHTML5 class implements the HTML5 storage engine.",
      "file": "StorageEngineHTML5.js",
      "extend": "YAHOO.util.Storage"
    },
    "YAHOO.util.Sort": {
      "shortname": "Sort",
      "methods": {
        "compare": {
          "guessedname": "compare",
          "guessedtype": "function",
          "description": "Comparator function for simple case-insensitive string sorting.",
          "params": [
            {
              "name": "a",
              "type": "Object",
              "description": "  First sort argument."
            },
            {
              "name": "b",
              "type": "Object",
              "description": "  Second sort argument."
            },
            {
              "name": "desc",
              "type": "Boolean",
              "description": "  True if sort direction is descending, false if\nsort direction is ascending."
            }
          ]
        }
      },
      "name": "YAHOO.util.Sort",
      "guessedname": "Sort",
      "module": "datatable",
      "namespace": "YAHOO.util",
      "static": "",
      "guessedtype": "property",
      "description": "Sort static utility to support Column sorting.",
      "file": "ColumnSet.js"
    },
    "YAHOO.widget.Uploader": {
      "shortname": "Uploader",
      "methods": {
        "setFileFilters": {
          "guessedname": "setFileFilters",
          "guessedtype": "function",
          "description": "Sets the file filters for the \"Browse\" dialog.",
          "params": [
            {
              "name": "newFilterArray",
              "type": "extensions: extensionString, description: descriptionString, [optional]macType: macTypeString",
              "description": " An array of sets of key-value pairs of the form\n\nThe extensions string is a semicolon-delimited list of elements of the form \"*.xxx\", \ne.g. \"*.jpg;*.gif;*.png\"."
            }
          ]
        },
        "clearFileList": {
          "guessedname": "clearFileList",
          "guessedtype": "function",
          "description": "Clears the list of files queued for upload."
        },
        "cancel": {
          "guessedname": "cancel",
          "guessedtype": "function",
          "description": "Cancels the upload of a specified file. If no file id is specified, all ongoing uploads are cancelled.",
          "params": [
            {
              "name": "fileID",
              "type": "String",
              "description": "  The ID of the file whose upload should be cancelled."
            }
          ]
        },
        "upload": {
          "guessedname": "upload",
          "guessedtype": "function",
          "description": "Starts the upload of the file specified by fileID to the location specified by uploadScriptPath.",
          "params": [
            {
              "name": "fileID",
              "type": "String",
              "description": "  The id of the file to start uploading."
            },
            {
              "name": "uploadScriptPath",
              "type": "String",
              "description": "  The URL of the upload location."
            },
            {
              "name": "method",
              "type": "String",
              "description": "  Either \"GET\" or \"POST\", specifying how the variables accompanying the file upload POST request should be submitted. \"GET\" by default."
            },
            {
              "name": "vars",
              "type": "Object",
              "description": "  The object containing variables to be sent in the same request as the file upload."
            },
            {
              "name": "fieldName",
              "type": "String",
              "description": "  The name of the variable in the POST request containing the file data. \"Filedata\" by default.\n</code>"
            }
          ]
        },
        "uploadThese": {
          "guessedname": "uploadThese",
          "guessedtype": "function",
          "description": "Starts the upload of the files specified by fileIDs, or adds them to a currently running queue. The upload queue is automatically managed.",
          "params": [
            {
              "name": "fileIDs",
              "type": "Array",
              "description": "  The ids of the files to start uploading."
            },
            {
              "name": "uploadScriptPath",
              "type": "String",
              "description": "  The URL of the upload location."
            },
            {
              "name": "method",
              "type": "String",
              "description": "  Either \"GET\" or \"POST\", specifying how the variables accompanying the file upload POST request should be submitted. \"GET\" by default."
            },
            {
              "name": "vars",
              "type": "Object",
              "description": "  The object containing variables to be sent in the same request as the file upload."
            },
            {
              "name": "fieldName",
              "type": "String",
              "description": "  The name of the variable in the POST request containing the file data. \"Filedata\" by default.\n</code>"
            }
          ]
        },
        "setAllowMultipleFiles": {
          "guessedname": "setAllowMultipleFiles",
          "guessedtype": "function",
          "description": "Sets the flag allowing users to select multiple files for the upload.",
          "params": [
            {
              "name": "allowMultipleFiles",
              "type": "Boolean",
              "description": "  If true, multiple files can be selected. False by default."
            }
          ]
        },
        "setAllowLogging": {
          "guessedname": "setAllowLogging",
          "guessedtype": "function",
          "description": "Turns the logging functionality on.\nUses Flash internal trace logging, as well as YUI Logger, if available.",
          "params": [
            {
              "name": "allowLogging",
              "type": "Boolean",
              "description": "  If true, logs are output; otherwise, no logs are produced."
            }
          ]
        },
        "uploadAll": {
          "guessedname": "uploadAll",
          "guessedtype": "function",
          "description": "Starts uploading all files in the queue. If this function is called, the upload queue is automatically managed.",
          "params": [
            {
              "name": "uploadScriptPath",
              "type": "String",
              "description": "  The URL of the upload location."
            },
            {
              "name": "method",
              "type": "String",
              "description": "  Either \"GET\" or \"POST\", specifying how the variables accompanying the file upload POST request should be submitted. \"GET\" by default."
            },
            {
              "name": "vars",
              "type": "Object",
              "description": "  The object containing variables to be sent in the same request as the file upload."
            },
            {
              "name": "fieldName",
              "type": "String",
              "description": "  The name of the variable in the POST request containing the file data. \"Filedata\" by default.\n</code>"
            }
          ]
        },
        "enable": {
          "guessedname": "enable",
          "guessedtype": "function",
          "description": "Enables the mouse events on the Uploader.\nIf the uploader is being rendered as a button,\nthen the button's skin is set to \"up\"\n(first section of the button skin sprite)."
        },
        "setSimUploadLimit": {
          "guessedname": "setSimUploadLimit",
          "guessedtype": "function",
          "description": "Sets the number of simultaneous uploads when using uploadAll()\nThe minimum value is 1, and maximum value is 5. The default value is 2.",
          "params": [
            {
              "name": "simUploadLimit",
              "type": "int",
              "description": "  Number of simultaneous uploads, between 1 and 5."
            }
          ]
        },
        "disable": {
          "guessedname": "disable",
          "guessedtype": "function",
          "description": "Disables the mouse events on the Uploader.\nIf the uploader is being rendered as a button,\nthen the button's skin is set to \"disabled\"\n(fourth section of the button skin sprite)."
        },
        "removeFile": {
          "guessedname": "removeFile",
          "guessedtype": "function",
          "description": "Removes the specified file from the upload queue.",
          "params": [
            {
              "name": "fileID",
              "type": "String",
              "description": "  The id of the file to remove from the upload queue."
            }
          ]
        }
      },
      "name": "YAHOO.widget.Uploader",
      "guessedname": "Uploader",
      "module": "uploader",
      "namespace": "YAHOO.widget",
      "events": {
        "mouseDown": {
          "description": "Fires when the mouse is pressed over the Uploader.\nOnly fires when the Uploader UI is enabled and\nthe render type is 'transparent'.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        },
        "uploadStart": {
          "description": "Fires when an upload of a specific file has started.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.id",
              "type": "String",
              "description": "  The id of the file that's started to upload"
            }
          ]
        },
        "fileSelect": {
          "description": "Fires when the user has finished selecting files in the \"Open File\" dialog.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.fileList",
              "type": "Object",
              "description": "  A dictionary of objects with file information"
            },
            {
              "name": "event.fileList[].size",
              "type": "Number",
              "description": "  File size in bytes for a specific file in fileList"
            },
            {
              "name": "event.fileList[].cDate",
              "type": "Date",
              "description": "  Creation date for a specific file in fileList"
            },
            {
              "name": "event.fileList[].mDate",
              "type": "Date",
              "description": "  Modification date for a specific file in fileList"
            },
            {
              "name": "event.fileList[].name",
              "type": "String",
              "description": "  File name for a specific file in fileList"
            },
            {
              "name": "event.fileList[].id",
              "type": "String",
              "description": "  Unique file id of a specific file in fileList"
            }
          ]
        },
        "mouseUp": {
          "description": "Fires when the mouse is released over the Uploader.\nOnly fires when the Uploader UI is enabled and\nthe render type is 'transparent'.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        },
        "uploadComplete": {
          "description": "Fires when an upload for a specific file is complete.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.id",
              "type": "String",
              "description": "  The id of the file for which the upload has been completed."
            }
          ]
        },
        "uploadProgress": {
          "description": "Fires when new information about the upload progress for a specific file is available.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.id",
              "type": "String",
              "description": "  The id of the file with which the upload progress data is associated"
            },
            {
              "name": "bytesLoaded",
              "type": "Number",
              "description": "  The number of bytes of the file uploaded so far"
            },
            {
              "name": "bytesTotal",
              "type": "Number",
              "description": "  The total size of the file"
            }
          ]
        },
        "rollOver": {
          "description": "Fires when the mouse rolls over the Uploader.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        },
        "uploadCompleteData": {
          "description": "Fires when the server sends data in response to a completed upload.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.id",
              "type": "String",
              "description": "  The id of the file for which the upload has been completed."
            },
            {
              "name": "event.data",
              "type": "String",
              "description": "  The raw data returned by the server in response to the upload."
            }
          ]
        },
        "uploadCancel": {
          "description": "Fires when an upload for a specific file is cancelled.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.id",
              "type": "String",
              "description": "  The id of the file with which the upload has been cancelled."
            }
          ]
        },
        "click": {
          "description": "Fires when the uploader is clicked.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        },
        "rollOut": {
          "description": "Fires when the mouse rolls out of the Uploader.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        },
        "uploadError": {
          "description": "Fires when an upload error occurs.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.id",
              "type": "String",
              "description": "  The id of the file that was being uploaded when the error has occurred."
            },
            {
              "name": "event.status",
              "type": "String",
              "description": "  The status message associated with the error."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Uploader class for the YUI Uploader component.",
          "params": [
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "buttonSkin",
              "type": "String",
              "description": "  [optional]. If defined, the uploader is \nrendered as a button. This parameter must provide the URL of a button\nskin sprite image. Acceptable types are: jpg, gif, png and swf. The \nsprite is divided evenly into four sections along its height (e.g., if\nthe sprite is 200 px tall, it's divided into four sections 50px each).\nEach section is used as a skin for a specific state of the button: top\nsection is \"up\", second section is \"over\", third section is \"down\", and\nfourth section is \"disabled\". \nIf the parameter is not supplied, the uploader is rendered transparent,\nand it's the developer's responsibility to create a visible UI below it."
            },
            {
              "name": "forceTransparent",
              "type": "Boolean",
              "description": "  This parameter, if true, forces the Flash\nUI to be rendered with wmode set to \"transparent\". This behavior is useful \nin conjunction with non-rectangular button skins with PNG transparency. \nThe parameter is false by default, and ignored if no buttonSkin is defined."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Uploader class for the YUI Uploader component.",
      "file": "Uploader.js",
      "uses": [
        "YAHOO.widget.FlashAdapter"
      ],
      "properties": {
        "Chart.SWFURL": {
          "final": "",
          "guessedname": "SWFURL",
          "private": "",
          "default": "\"assets/uploader.swf\"",
          "static": "",
          "guessedtype": "property",
          "description": "Location of the Uploader SWF"
        }
      }
    },
    "YAHOO.util.Chain": {
      "shortname": "Chain",
      "methods": {
        "run": {
          "guessedname": "run",
          "guessedtype": "function",
          "description": "Begin executing the chain, or resume execution from the last paused position.",
          "return": {
            "type": "Chain",
            "description": "the Chain instance"
          }
        },
        "add": {
          "guessedname": "add",
          "guessedtype": "function",
          "description": "Add a callback to the end of the queue",
          "params": [
            {
              "name": "c",
              "type": "Function|Object",
              "description": "  the callback function ref or object literal"
            }
          ],
          "return": {
            "type": "Chain",
            "description": "the Chain instance"
          }
        },
        "pause": {
          "guessedname": "pause",
          "guessedtype": "function",
          "description": "Pause the execution of the Chain after the current execution of the\ncurrent callback completes.  If called interstitially, clears the\ntimeout for the pending callback. Paused Chains can be restarted with\nchain.run()",
          "return": {
            "type": "Chain",
            "description": "the Chain instance"
          }
        },
        "stop": {
          "guessedname": "stop",
          "guessedtype": "function",
          "description": "Stop and clear the Chain's queue after the current execution of the\ncurrent callback completes.",
          "return": {
            "type": "Chain",
            "description": "the Chain instance"
          }
        }
      },
      "name": "YAHOO.util.Chain",
      "guessedname": "Chain",
      "module": "datatable",
      "namespace": "YAHOO.util",
      "events": {
        "end": {
          "description": "Event fired when the callback queue is emptied via execution (not via\na call to chain.stop()."
        }
      },
      "constructors": [
        {
          "description": "Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:\n<ul>\n<li><code>method</code> - {Function} REQUIRED the callback function.</li>\n<li><code>scope</code> - {Object} the scope from which to execute the callback.  Default is the global window scope.</li>\n<li><code>argument</code> - {Array} parameters to be passed to method as individual arguments.</li>\n<li><code>timeout</code> - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.</li>\n<li><code>until</code> - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.</li>\n<li><code>iterations</code> - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with <code>until</code>.</li>\n</ul>",
          "params": [
            {
              "name": "callback*",
              "type": "Function|Object",
              "description": "  Any number of callbacks to initialize the queue"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:\n<ul>\n<li><code>method</code> - {Function} REQUIRED the callback function.</li>\n<li><code>scope</code> - {Object} the scope from which to execute the callback.  Default is the global window scope.</li>\n<li><code>argument</code> - {Array} parameters to be passed to method as individual arguments.</li>\n<li><code>timeout</code> - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.</li>\n<li><code>until</code> - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.</li>\n<li><code>iterations</code> - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with <code>until</code>.</li>\n</ul>",
      "file": "Chain.js",
      "properties": {
        "id": {
          "private": "",
          "guessedname": "id",
          "type": "{number}",
          "guessedtype": "property",
          "description": "Timeout id used to pause or stop execution and indicate the execution state of the Chain.  0 indicates paused or stopped, -1 indicates blocking execution, and any positive number indicates non-blocking execution."
        },
        "q": {
          "private": "",
          "guessedname": "q",
          "type": "{Array}",
          "guessedtype": "property",
          "description": "The callback queue"
        }
      }
    },
    "YAHOO.util.ImageLoader.pngBgImgObj": {
      "shortname": "pngBgImgObj",
      "superclass": "YAHOO.util.ImageLoader.imgObj",
      "methods": {
        "_applyUrl": {
          "private": "",
          "guessedname": "_applyUrl",
          "guessedtype": "function",
          "description": "Inserts the image URL into the DOM so that the image is displayed.\nIf the browser is determined to be IE6 (or older), sets the AlphaImageLoader src; otherwise sets style.backgroundImage",
          "params": [
            {
              "name": "el",
              "type": "Object",
              "description": "\tHTML DOM element"
            }
          ]
        }
      },
      "name": "YAHOO.util.ImageLoader.pngBgImgObj",
      "extends": "YAHOO.util.ImageLoader.imgObj",
      "guessedname": "pngBgImgObj",
      "module": "imageloader",
      "namespace": "YAHOO.util.ImageLoader",
      "constructors": [
        {
          "description": "PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by \"background-image\" in the element's style",
          "params": [
            {
              "name": "domId",
              "type": "String",
              "description": "\tHTML DOM id of the image element"
            },
            {
              "name": "url",
              "type": "String",
              "description": "\tURL for the image"
            },
            {
              "name": "ailProps",
              "type": "Object",
              "description": " The AlphaImageLoader properties to be set for the image\nValid properties are 'sizingMethod' and 'enabled'"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by \"background-image\" in the element's style",
      "file": "ImageLoader.js",
      "properties": {
        "props": {
          "guessedname": "props",
          "type": "Object",
          "guessedtype": "property",
          "description": "AlphaImageLoader properties to be set for the image.\nValid properties are \"sizingMethod\" and \"enabled\"."
        }
      }
    },
    "EventProvider": {
      "name": "EventProvider",
      "shortname": "EventProvider",
      "methods": {
        "hasEvent": {
          "guessedname": "hasEvent",
          "guessedtype": "function",
          "description": "Returns true if the custom event of the provided type has been created\nwith createEvent.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type, or name of the event"
            }
          ]
        },
        "fireEvent": {
          "guessedname": "fireEvent",
          "guessedtype": "function",
          "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the scope specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The first argument fire() was executed with</li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod</li>\n</ul>",
          "params": [
            {
              "name": "p_type",
              "type": "string",
              "description": "      the type, or name of the event"
            },
            {
              "name": "arguments",
              "type": "Object*",
              "description": "  an arbitrary set of parameters to pass to \nthe handler."
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the return value from CustomEvent.fire"
          }
        },
        "unsubscribeAll": {
          "guessedname": "unsubscribeAll",
          "guessedtype": "function",
          "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.",
          "params": [
            {
              "name": "p_type",
              "type": "string",
              "description": "    The type, or name of the event"
            }
          ]
        },
        "unsubscribe": {
          "guessedname": "unsubscribe",
          "guessedtype": "function",
          "description": "Unsubscribes one or more listeners the from the specified event",
          "params": [
            {
              "name": "p_type",
              "type": "string",
              "description": "    The type, or name of the event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."
            },
            {
              "name": "p_fn",
              "type": "Function",
              "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."
            },
            {
              "name": "p_obj",
              "type": "Object",
              "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if the subscriber was found and detached."
          }
        },
        "subscribe": {
          "guessedname": "subscribe",
          "guessedtype": "function",
          "description": "Subscribe to a CustomEvent by event type",
          "params": [
            {
              "name": "p_type",
              "type": "string",
              "description": "        the type, or name of the event"
            },
            {
              "name": "p_fn",
              "type": "function",
              "description": "        the function to exectute when the event fires"
            },
            {
              "name": "p_obj",
              "type": "Object",
              "description": "         An object to be passed along when the event \nfires"
            },
            {
              "name": "overrideContext",
              "type": "boolean",
              "description": "   If true, the obj passed in becomes the \nexecution scope of the listener"
            }
          ]
        },
        "createEvent": {
          "guessedname": "createEvent",
          "guessedtype": "function",
          "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.",
          "params": [
            {
              "name": "p_type",
              "type": "string",
              "description": "  the type, or name of the event"
            },
            {
              "name": "p_config",
              "type": "object",
              "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\nscope: defines the default execution scope.  If not defined\nthe default scope will be this instance.\n</li>\n<li>\nsilent: if true, the custom event will not generate log messages.\nThis is false by default.\n</li>\n<li>\nfireOnce: if true, the custom event will only notify subscribers\nonce regardless of the number of times the event is fired.  In\naddition, new subscribers will be executed immediately if the\nevent has already fired.\nThis is false by default.\n</li>\n<li>\nonSubscribeCallback: specifies a callback to execute when the\nevent has a new subscriber.  This will fire immediately for\neach queued subscriber if any exist prior to the creation of\nthe event.\n</li>\n</ul>"
            }
          ],
          "return": {
            "type": "CustomEvent",
            "description": "the custom event"
          }
        }
      },
      "guessedname": "EventProvider",
      "module": "event",
      "namespace": "",
      "guessedtype": "function",
      "file": "EventProvider.js",
      "description": "EventProvider is designed to be used with YAHOO.augment to wrap \nCustomEvents in an interface that allows events to be subscribed to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all.",
      "properties": {
        "__yui_events": {
          "private": "",
          "guessedname": "__yui_events",
          "type": "Object[]",
          "guessedtype": "property",
          "description": "Private storage of custom events"
        },
        "__yui_subscribers": {
          "private": "",
          "guessedname": "__yui_subscribers",
          "type": "Object[]",
          "guessedtype": "property",
          "description": "Private storage of custom event subscribers"
        }
      }
    },
    "YAHOO.widget.CartesianSeries": {
      "shortname": "CartesianSeries",
      "name": "YAHOO.widget.CartesianSeries",
      "guessedname": "CartesianSeries",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "Functionality common to most series appearing in cartesian charts.\nGenerally, a <code>CartesianSeries</code> object shouldn't be\ninstantiated directly. Instead, a subclass with a concrete implementation\nshould be used."
        }
      ],
      "guessedtype": "function",
      "description": "Functionality common to most series appearing in cartesian charts.\nGenerally, a <code>CartesianSeries</code> object shouldn't be\ninstantiated directly. Instead, a subclass with a concrete implementation\nshould be used.",
      "file": "Series.js",
      "properties": {
        "yField": {
          "guessedname": "yField",
          "type": "String",
          "guessedtype": "property",
          "description": "The field used to access the y-axis value from the items from the data source."
        },
        "xField": {
          "guessedname": "xField",
          "type": "String",
          "guessedtype": "property",
          "description": "The field used to access the x-axis value from the items from the data source."
        },
        "axis": {
          "guessedname": "axis",
          "type": "String",
          "guessedtype": "property",
          "description": "Indicates which axis the series will bind to"
        },
        "showInLegend": {
          "guessedname": "showInLegend",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "When a Legend is present, indicates whether the series will show in the legend."
        }
      },
      "uses": [
        "YAHOO.widget.Series"
      ]
    },
    "YAHOO.widget.DateCellEditor": {
      "shortname": "DateCellEditor",
      "superclass": "YAHOO.widget.BaseCellEditor",
      "methods": {
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Sets focus in DateCellEditor."
        },
        "getInputValue": {
          "guessedname": "getInputValue",
          "guessedtype": "function",
          "description": "Retrieves input value from DateCellEditor."
        },
        "handleDisabledBtns": {
          "guessedname": "handleDisabledBtns",
          "guessedtype": "function",
          "description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them."
        },
        "resetForm": {
          "guessedname": "resetForm",
          "guessedtype": "function",
          "description": "Resets DateCellEditor UI to initial state."
        },
        "renderForm": {
          "guessedname": "renderForm",
          "guessedtype": "function",
          "description": "Render a Calendar."
        }
      },
      "name": "YAHOO.widget.DateCellEditor",
      "extends": "YAHOO.widget.BaseCellEditor",
      "guessedname": "DateCellEditor",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The DataCellEditor class provides functionality for inline editing\nDataTable cell data with a YUI Calendar.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal of configs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The DataCellEditor class provides functionality for inline editing\nDataTable cell data with a YUI Calendar.",
      "file": "CellEditor.js",
      "properties": {
        "calendarOptions": {
          "guessedname": "calendarOptions",
          "type": "Object",
          "guessedtype": "property",
          "description": "Configs for the calendar instance, to be passed to Calendar constructor."
        },
        "defaultValue": {
          "guessedname": "defaultValue",
          "default": "new Date()",
          "type": "Date",
          "guessedtype": "property",
          "description": "Default value."
        },
        "calendar": {
          "guessedname": "calendar",
          "type": "YAHOO.widget.Calendar",
          "guessedtype": "property",
          "description": "Reference to Calendar instance."
        }
      }
    },
    "YAHOO.widget.ImageCropper": {
      "shortname": "ImageCropper",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "getWrapEl": {
          "guessedname": "getWrapEl",
          "guessedtype": "function",
          "description": "Get the HTML reference for the wrap element.",
          "return": {
            "type": "HTMLElement",
            "description": "The wrap element"
          }
        },
        "_handleDragEvent": {
          "guessedname": "_handleDragEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the DragDrop DragEvent event"
        },
        "getEl": {
          "guessedname": "getEl",
          "guessedtype": "function",
          "description": "Get the HTML reference for the image element.",
          "return": {
            "type": "HTMLElement",
            "description": "The image element"
          }
        },
        "getCropperById": {
          "guessedname": "getCropperById",
          "static": "",
          "guessedtype": "function",
          "description": "Get's an ImageCropper object by the HTML id of the image associated with the ImageCropper object.",
          "return": {
            "type": "Object",
            "description": "The ImageCropper Object"
          }
        },
        "_moveEl": {
          "guessedname": "_moveEl",
          "private": "",
          "guessedtype": "function",
          "description": "Moves the resize element based on the arrow keys"
        },
        "_setBackgroundImage": {
          "private": "",
          "guessedname": "_setBackgroundImage",
          "guessedtype": "function",
          "description": "Sets the background image of the resize element",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " url The url of the image"
            }
          ]
        },
        "getMaskEl": {
          "guessedname": "getMaskEl",
          "guessedtype": "function",
          "description": "Get the HTML reference for the mask element.",
          "return": {
            "type": "HTMLElement",
            "description": "The mask element"
          }
        },
        "_handleKeyPress": {
          "guessedname": "_handleKeyPress",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the keypress event"
        },
        "getResizeObject": {
          "guessedname": "getResizeObject",
          "guessedtype": "function",
          "description": "Get the Resize Utility object.",
          "return": {
            "type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>",
            "description": "The Resize instance"
          }
        },
        "_handleResizeMaskEl": {
          "guessedname": "_handleResizeMaskEl",
          "private": "",
          "guessedtype": "function",
          "description": "Resizes the inner mask element"
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the ImageCropper Object.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Destroys the ImageCropper object and all of it's elements & listeners."
        },
        "_createResize": {
          "guessedname": "_createResize",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the resize element and the instance of the Resize Utility"
        },
        "_handleBeforeResizeEvent": {
          "guessedname": "_handleBeforeResizeEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the Resize Utilitys beforeResize event"
        },
        "_handleStartResizeEvent": {
          "guessedname": "_handleStartResizeEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the Resize Utilitys startResize event"
        },
        "_createWrap": {
          "guessedname": "_createWrap",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the wrapper element used to wrap the image"
        },
        "_setBackgroundPosition": {
          "private": "",
          "guessedname": "_setBackgroundPosition",
          "guessedtype": "function",
          "description": "Sets the background image position to the top and left position",
          "params": [
            {
              "name": "Number",
              "type": "",
              "description": " l The left position"
            },
            {
              "name": "Number",
              "type": "",
              "description": " t The top position"
            }
          ]
        },
        "getCropCoords": {
          "guessedname": "getCropCoords",
          "guessedtype": "function",
          "description": "Returns the coordinates needed to crop the image",
          "return": {
            "type": "Object",
            "description": "The top, left, height, width and image url of the image being cropped"
          }
        },
        "_handleB4DragEvent": {
          "guessedname": "_handleB4DragEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the DragDrop b4DragEvent event"
        },
        "_createMask": {
          "guessedname": "_createMask",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the mask element used to mask the image"
        },
        "init": {
          "guessedname": "init",
          "private": "",
          "guessedtype": "function",
          "description": "The ImageCropper class's initialization method"
        },
        "getResizeMaskEl": {
          "guessedname": "getResizeMaskEl",
          "guessedtype": "function",
          "description": "Get the HTML reference for the resizable object's mask element.",
          "return": {
            "type": "HTMLElement",
            "description": "The resize objects mask element."
          }
        },
        "reset": {
          "guessedname": "reset",
          "guessedtype": "function",
          "description": "Resets the crop element back to it's original position",
          "return": {
            "type": "<a href=\"YAHOO.widget.ImageCropper.html\">YAHOO.widget.ImageCropper</a>",
            "description": "The ImageCropper instance"
          }
        },
        "_syncBackgroundPosition": {
          "guessedname": "_syncBackgroundPosition",
          "private": "",
          "guessedtype": "function",
          "description": "Syncs the packground position of the resize element with the resize elements top and left style position"
        },
        "_handleEndResizeEvent": {
          "guessedname": "_handleEndResizeEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the Resize Utilitys endResize event"
        },
        "_handleMouseOver": {
          "guessedname": "_handleMouseOver",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the mouseover event"
        },
        "_handleMouseOut": {
          "guessedname": "_handleMouseOut",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the mouseout event"
        },
        "_handleResizeEvent": {
          "private": "",
          "guessedname": "_handleResizeEvent",
          "guessedtype": "function",
          "description": "Handles the Resize Utilitys Resize event",
          "params": [
            {
              "name": "Event",
              "type": "",
              "description": " ev The Resize Utilitys resize event."
            }
          ]
        },
        "initAttributes": {
          "private": "",
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Initializes all of the configuration attributes used to create a croppable element.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the widget."
            }
          ]
        },
        "_setConstraints": {
          "guessedname": "_setConstraints",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "Boolean",
              "type": "",
              "description": " inside Used when called from inside a resize event, false by default (dragging)"
            }
          ],
          "description": "Set the DragDrop constraints to keep the element inside the crop area.",
          "return": {
            "type": "Object",
            "description": "Object containing Top, Right, Bottom and Left constraints"
          }
        },
        "getResizeEl": {
          "guessedname": "getResizeEl",
          "guessedtype": "function",
          "description": "Get the HTML reference for the resize element.",
          "return": {
            "type": "HTMLElement",
            "description": "The resize element"
          }
        }
      },
      "name": "YAHOO.widget.ImageCropper",
      "extends": "YAHOO.util.Element",
      "guessedname": "Crop",
      "module": "imagecropper",
      "namespace": "YAHOO.widget",
      "events": {
        "minHeightChange": {
          "name": "minHeightChange",
          "description": "Fires when the value for the configuration attribute 'minHeight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeInitWidthChange": {
          "name": "beforeInitWidthChange",
          "description": "Fires before the value for the configuration attribute 'initWidth' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "initHeightChange": {
          "name": "initHeightChange",
          "description": "Fires when the value for the configuration attribute 'initHeight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeShiftKeyTickChange": {
          "name": "beforeShiftKeyTickChange",
          "description": "Fires before the value for the configuration attribute 'shiftKeyTick' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "initialXYChange": {
          "name": "initialXYChange",
          "description": "Fires when the value for the configuration attribute 'initialXY' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "statusChange": {
          "name": "statusChange",
          "description": "Fires when the value for the configuration attribute 'status' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "useKeysChange": {
          "name": "useKeysChange",
          "description": "Fires when the value for the configuration attribute 'useKeys' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "keyTickChange": {
          "name": "keyTickChange",
          "description": "Fires when the value for the configuration attribute 'keyTick' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeInitialXYChange": {
          "name": "beforeInitialXYChange",
          "description": "Fires before the value for the configuration attribute 'initialXY' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeStatusChange": {
          "name": "beforeStatusChange",
          "description": "Fires before the value for the configuration attribute 'status' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMinWidthChange": {
          "name": "beforeMinWidthChange",
          "description": "Fires before the value for the configuration attribute 'minWidth' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeUseKeysChange": {
          "name": "beforeUseKeysChange",
          "description": "Fires before the value for the configuration attribute 'useKeys' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeKeyTickChange": {
          "name": "beforeKeyTickChange",
          "description": "Fires before the value for the configuration attribute 'keyTick' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "minWidthChange": {
          "name": "minWidthChange",
          "description": "Fires when the value for the configuration attribute 'minWidth' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "dragEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the DragDrop dragEvent"
        },
        "resizeEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires on every element resize."
        },
        "ratioChange": {
          "name": "ratioChange",
          "description": "Fires when the value for the configuration attribute 'ratio' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeInitHeightChange": {
          "name": "beforeInitHeightChange",
          "description": "Fires before the value for the configuration attribute 'initHeight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "startResizeEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when when a resize action is started."
        },
        "initWidthChange": {
          "name": "initWidthChange",
          "description": "Fires when the value for the configuration attribute 'initWidth' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "moveEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires on every element move. Inside these methods: _handleKeyPress, _handleDragEvent, _handleResizeEvent"
        },
        "shiftKeyTickChange": {
          "name": "shiftKeyTickChange",
          "description": "Fires when the value for the configuration attribute 'shiftKeyTick' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRatioChange": {
          "name": "beforeRatioChange",
          "description": "Fires before the value for the configuration attribute 'ratio' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMinHeightChange": {
          "name": "beforeMinHeightChange",
          "description": "Fires before the value for the configuration attribute 'minHeight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "<p>Creates a Image Cropper control.</p>",
          "params": [
            {
              "name": "el",
              "type": "String/HTMLElement",
              "description": " The image element to make croppable."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": " Object liternal containing configuration parameters."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "<p>Creates a Image Cropper control.</p>",
      "file": "crop.js",
      "configs": {
        "ratio": {
          "type": "Boolean",
          "description": "Set the ratio config option of the Resize Utlility, default false"
        },
        "initHeight": {
          "type": "Number",
          "description": "Set the initlal height of the crop area, defaults to 1/4 of the image height"
        },
        "minHeight": {
          "type": "Number",
          "description": "MinHeight of the crop area, default 50"
        },
        "initWidth": {
          "type": "Number",
          "description": "Set the initlal width of the crop area, defaults to 1/4 of the image width"
        },
        "initialXY": {
          "type": "Array",
          "description": "Array of the XY position that we need to set the crop element to when we build it. Defaults to [10, 10]"
        },
        "shiftKeyTick": {
          "type": "Number",
          "description": "The pixel tick for shift + the arrow keys, defaults to 10"
        },
        "useKeys": {
          "type": "Boolean",
          "description": "Should we use the Arrow keys to position the crop element, defaults to true"
        },
        "minWidth": {
          "type": "Number",
          "description": "MinWidth of the crop area, default 50."
        },
        "status": {
          "type": "Boolean",
          "description": "Show the Resize Utility status, defaults to true"
        },
        "keyTick": {
          "type": "Number",
          "description": "The pixel tick for the arrow keys, defaults to 1"
        }
      },
      "properties": {
        "_instances": {
          "guessedname": "_instances",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Internal hash table for all ImageCropper instances"
        },
        "_mask": {
          "private": "",
          "guessedname": "_mask",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The HTML Element created to \"mask\" the image being cropped"
        },
        "CSS_MAIN": {
          "private": "",
          "guessedname": "CSS_MAIN",
          "type": "String",
          "guessedtype": "property",
          "description": "The CSS class used to wrap the element"
        },
        "_image": {
          "private": "",
          "guessedname": "_image",
          "type": "String",
          "guessedtype": "property",
          "description": "The url of the image we are cropping"
        },
        "_resizeMaskEl": {
          "private": "",
          "guessedname": "_resizeMaskEl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The HTML Element used to create the Resize mask"
        },
        "_resizeEl": {
          "private": "",
          "guessedname": "_resizeEl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The HTML Element used to create the Resize Oject"
        },
        "_active": {
          "private": "",
          "guessedname": "_active",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to determine if the crop region is active"
        },
        "CSS_RESIZE_MASK": {
          "private": "",
          "guessedname": "CSS_RESIZE_MASK",
          "type": "String",
          "guessedtype": "property",
          "description": "The CSS class for the mask inside the resize element"
        },
        "_wrap": {
          "private": "",
          "guessedname": "_wrap",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The HTML Element created to wrap the image"
        },
        "_resize": {
          "private": "",
          "guessedname": "_resize",
          "type": "Object",
          "guessedtype": "property",
          "description": "A reference to the Resize Utility used in this Cropper Instance"
        },
        "CSS_MASK": {
          "private": "",
          "guessedname": "CSS_MASK",
          "type": "String",
          "guessedtype": "property",
          "description": "The CSS class for the mask element"
        }
      }
    },
    "YAHOO.util.Point": {
      "shortname": "Point",
      "superclass": "YAHOO.util.Region",
      "name": "YAHOO.util.Point",
      "extends": "YAHOO.util.Region",
      "guessedname": "Point",
      "module": "dom",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "A point is a region that is special in that it represents a single point on \nthe grid.",
          "params": [
            {
              "name": "x",
              "type": "Int",
              "description": " The X position of the point"
            },
            {
              "name": "y",
              "type": "Int",
              "description": " The Y position of the point"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A point is a region that is special in that it represents a single point on \nthe grid.",
      "file": "Region.js"
    },
    "YAHOO.widget.HTMLNode": {
      "shortname": "HTMLNode",
      "superclass": "YAHOO.widget.Node",
      "methods": {
        "getNodeDefinition": {
          "guessedname": "getNodeDefinition",
          "guessedtype": "function",
          "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nIt will return false if any node loads dynamically, regardless of whether it is loaded or not.",
          "return": {
            "type": "Object | false",
            "description": "definition of the tree or false if any node is defined as dynamic"
          }
        }
      },
      "name": "YAHOO.widget.HTMLNode",
      "extends": "YAHOO.widget.Node",
      "guessedname": "HTMLNode",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "This implementation takes either a string or object for the\noData argument.  If is it a string, it will use it for the display\nof this node (and it can contain any html code).  If the parameter\nis an object,it looks for a parameter called \"html\" that will be\nused for this node's display.",
          "params": [
            {
              "name": "oData",
              "type": "object",
              "description": "  a string or object containing the data that will\nbe used to render this node.  \nProviding a string is the same as providing an object with a single property named html.\nAll values in the oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private or functions.\nAll other attributes are made available in noderef.data, which\ncan be used to store custom attributes.  TreeView.getNode(s)ByProperty\ncan be used to retrieve a node by one of the attributes."
            },
            {
              "name": "oParent",
              "type": "YAHOO.widget.Node",
              "description": "  this node's parent node"
            },
            {
              "name": "expanded",
              "type": "boolean",
              "description": "  the initial expanded/collapsed state (deprecated; use oData.expanded)"
            },
            {
              "name": "hasIcon",
              "type": "boolean",
              "description": "  specifies whether or not leaf nodes should\nbe rendered with or without a horizontal line line and/or toggle icon. If the icon\nis not displayed, the content fills the space it would have occupied.\nThis option operates independently of the leaf node presentation logic\nfor dynamic nodes.\n(deprecated; use oData.hasIcon)"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "This implementation takes either a string or object for the\noData argument.  If is it a string, it will use it for the display\nof this node (and it can contain any html code).  If the parameter\nis an object,it looks for a parameter called \"html\" that will be\nused for this node's display.",
      "file": "HTMLNode.js",
      "properties": {
        "html": {
          "guessedname": "html",
          "type": "string",
          "guessedtype": "property",
          "description": "The HTML content to use for this node's display"
        },
        "contentStyle": {
          "guessedname": "contentStyle",
          "type": "string",
          "guessedtype": "property",
          "description": "The CSS class for the html content container.  Defaults to ygtvhtml, but \ncan be overridden to provide a custom presentation for a specific node."
        },
        "initContent": {
          "guessedname": "initContent",
          "param": "oData {object} An html string or object containing an html property",
          "guessedtype": "function",
          "description": "Sets up the node label"
        },
        "setHtml": {
          "guessedname": "setHtml",
          "param": "o {object} An html string or object containing an html property",
          "guessedtype": "function",
          "description": "Synchronizes the node.html, and the node's content"
        },
        "_type": {
          "guessedname": "_type",
          "private": "",
          "default": "\"HTMLNode\"",
          "type": "string",
          "guessedtype": "property",
          "description": "The node type"
        }
      }
    },
    "YAHOO.widget.NumericAxis": {
      "shortname": "NumericAxis",
      "superclass": "YAHOO.widget.Axis",
      "name": "YAHOO.widget.NumericAxis",
      "extends": "YAHOO.widget.Axis",
      "guessedname": "NumericAxis",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "A type of axis whose units are measured in numeric values."
        }
      ],
      "guessedtype": "function",
      "description": "A type of axis whose units are measured in numeric values.",
      "file": "NumericAxis.js",
      "properties": {
        "position": {
          "guessedname": "position",
          "type": "String",
          "guessedtype": "property",
          "description": "Indicates the position of the axis relative to the chart"
        },
        "majorUnit": {
          "guessedname": "majorUnit",
          "type": "Number",
          "guessedtype": "property",
          "description": "The spacing between major intervals on this axis."
        },
        "snapToUnits": {
          "guessedname": "snapToUnits",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If true, the labels, ticks, gridlines, and other objects will snap to\nthe nearest major or minor unit. If false, their position will be based\non the minimum value."
        },
        "scale": {
          "guessedname": "scale",
          "type": "String",
          "guessedtype": "property",
          "description": "The scaling algorithm to use on this axis. May be \"linear\" or \"logarithmic\"."
        },
        "alwaysShowZero": {
          "guessedname": "alwaysShowZero",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If true, and the bounds are calculated automatically, either the minimum or\nmaximum will be set to zero."
        },
        "maximum": {
          "guessedname": "maximum",
          "type": "Number",
          "guessedtype": "property",
          "description": "The maximum value drawn by the axis. If not set explicitly, the axis maximum\nwill be calculated automatically."
        },
        "calculateByLabelSize": {
          "guessedname": "calculateByLabelSize",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates whether to factor in the size of the labels when calculating a major unit."
        },
        "minorUnit": {
          "guessedname": "minorUnit",
          "type": "Number",
          "guessedtype": "property",
          "description": "The spacing between minor intervals on this axis."
        },
        "adjustMinimumByMajorUnit": {
          "guessedname": "adjustMinimumByMajorUnit",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates whether to extend the minimum beyond data's minimum to the nearest\nmajorUnit."
        },
        "minimum": {
          "guessedname": "minimum",
          "type": "Number",
          "guessedtype": "property",
          "description": "The minimum value drawn by the axis. If not set explicitly, the axis minimum\nwill be calculated automatically."
        },
        "stackingEnabled": {
          "guessedname": "stackingEnabled",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Series that are stackable will only stack when this value is set to true."
        },
        "roundMajorUnit": {
          "guessedname": "roundMajorUnit",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates whether to round the major unit."
        },
        "adjustMaximumByMajorUnit": {
          "guessedname": "adjustMaximumByMajorUnit",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates whether to extend maximum beyond data's maximum to the nearest \nmajorUnit."
        }
      }
    },
    "YAHOO.widget.Paginator.ui.CurrentPageReport": {
      "shortname": "CurrentPageReport",
      "methods": {
        "sprintf": {
          "guessedname": "sprintf",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "template",
              "type": "string",
              "description": "  The content string containing place holders"
            },
            {
              "name": "values",
              "type": "object",
              "description": "  The key:value pairs used to replace the place holders"
            }
          ],
          "description": "Replace place holders in a string with the named values found in an\nobject literal.",
          "return": {
            "type": "string",
            "description": ""
          }
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Generate the span containing info formatted per the pageReportTemplate\nattribute.",
          "params": [
            {
              "name": "id_base",
              "type": "string",
              "description": "  used to create unique ids for generated nodes"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the link/span node and clears event listeners\nremoval."
        },
        "init": {
          "guessedname": "init",
          "static": "",
          "guessedtype": "function",
          "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.",
          "params": [
            {
              "name": "p",
              "type": "Paginator",
              "description": "  Paginator instance to decorate"
            }
          ]
        },
        "update": {
          "guessedname": "update",
          "guessedtype": "function",
          "description": "Regenerate the content of the span if appropriate. Calls\nCurrentPageReport.sprintf with the value of the pageReportTemplate\nattribute and the value map returned from pageReportValueGenerator\nfunction.",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  The calling change event"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Paginator.ui.CurrentPageReport",
      "guessedname": "CurrentPageReport",
      "module": "paginator",
      "namespace": "YAHOO.widget.Paginator.ui",
      "events": {
        "pageReportTemplateChange": {
          "name": "pageReportTemplateChange",
          "description": "Fires when the value for the configuration attribute 'pageReportTemplate' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePageReportTemplateChange": {
          "name": "beforePageReportTemplateChange",
          "description": "Fires before the value for the configuration attribute 'pageReportTemplate' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePageReportValueGenaratorChange": {
          "name": "beforePageReportValueGenaratorChange",
          "description": "Fires before the value for the configuration attribute 'pageReportValueGenarator' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pageReportClassChange": {
          "name": "pageReportClassChange",
          "description": "Fires when the value for the configuration attribute 'pageReportClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pageReportValueGenaratorChange": {
          "name": "pageReportValueGenaratorChange",
          "description": "Fires when the value for the configuration attribute 'pageReportValueGenarator' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePageReportClassChange": {
          "name": "beforePageReportClassChange",
          "description": "Fires before the value for the configuration attribute 'pageReportClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "ui Component to generate the textual report of current pagination status.\nE.g. \"Now viewing page 1 of 13\".",
          "params": [
            {
              "name": "p",
              "type": "Pagintor",
              "description": "  Paginator instance to attach to"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ui Component to generate the textual report of current pagination status.\nE.g. \"Now viewing page 1 of 13\".",
      "configs": {
        "pageReportValueGenarator": {
          "description": "Function to generate the value map used to populate the\npageReportTemplate.  The function is passed the Paginator instance as a\nparameter.  The default function returns a map with the following keys:\n<ul>\n<li>currentPage</li>\n<li>totalPages</li>\n<li>startIndex</li>\n<li>endIndex</li>\n<li>startRecord</li>\n<li>endRecord</li>\n<li>totalRecords</li>\n</ul>"
        },
        "pageReportTemplate": {
          "default": "'({currentPage} of {totalPages})'",
          "description": "Used as innerHTML for the span.  Place holders in the form of {name}\nwill be replaced with the so named value from the key:value map\ngenerated by the function held in the pageReportValueGenerator attribute.",
          "see": "pageReportValueGenerator attribute"
        },
        "pageReportClass": {
          "default": "'yui-pg-current'",
          "description": "CSS class assigned to the span containing the info."
        }
      },
      "file": "CurrentPageReport.js",
      "innerClasses": [
        "YAHOO.widget.Paginator"
      ],
      "for": "YAHOO.widget.Paginator",
      "properties": {
        "span": {
          "private": "",
          "guessedname": "span",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Span node containing the formatted info"
        }
      }
    },
    "YAHOO.widget.TimeAxis": {
      "shortname": "TimeAxis",
      "name": "YAHOO.widget.TimeAxis",
      "guessedname": "TimeAxis",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "A type of axis whose units are measured in time-based values."
        }
      ],
      "guessedtype": "function",
      "description": "A type of axis whose units are measured in time-based values.",
      "file": "TimeAxis.js",
      "properties": {
        "majorUnit": {
          "guessedname": "majorUnit",
          "type": "Number",
          "guessedtype": "property",
          "description": "The spacing between major intervals on this axis."
        },
        "snapToUnits": {
          "guessedname": "snapToUnits",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If true, the labels, ticks, gridlines, and other objects will snap to\nthe nearest major or minor unit. If false, their position will be based\non the minimum value."
        },
        "majorTimeUnit": {
          "guessedname": "majorTimeUnit",
          "type": "String",
          "guessedtype": "property",
          "description": "The time unit used by the majorUnit."
        },
        "maximum": {
          "guessedname": "maximum",
          "type": "Number",
          "guessedtype": "property",
          "description": "The maximum value drawn by the axis. If not set explicitly, the axis maximum\nwill be calculated automatically."
        },
        "calculateByLabelSize": {
          "guessedname": "calculateByLabelSize",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates whether to factor in the size of the labels when calculating a major unit."
        },
        "minimum": {
          "guessedname": "minimum",
          "type": "Date",
          "guessedtype": "property",
          "description": "The minimum value drawn by the axis. If not set explicitly, the axis minimum\nwill be calculated automatically."
        },
        "stackingEnabled": {
          "guessedname": "stackingEnabled",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Series that are stackable will only stack when this value is set to true."
        }
      }
    },
    "YAHOO.util.ImageLoader.srcImgObj": {
      "shortname": "srcImgObj",
      "superclass": "YAHOO.util.ImageLoader.imgObj",
      "methods": {
        "_applyUrl": {
          "private": "",
          "guessedname": "_applyUrl",
          "guessedtype": "function",
          "description": "Inserts the image URL into the DOM so that the image is displayed.\nSets src",
          "params": [
            {
              "name": "el",
              "type": "Object",
              "description": "\tHTML DOM element"
            }
          ]
        }
      },
      "name": "YAHOO.util.ImageLoader.srcImgObj",
      "extends": "YAHOO.util.ImageLoader.imgObj",
      "guessedname": "srcImgObj",
      "module": "imageloader",
      "namespace": "YAHOO.util.ImageLoader",
      "constructors": [
        {
          "description": "Source image object. A source image is one whose URL is specified by a src attribute in the DOM element",
          "params": [
            {
              "name": "domId",
              "type": "String",
              "description": "\tHTML DOM id of the image element"
            },
            {
              "name": "url",
              "type": "String",
              "description": "\tURL for the image"
            },
            {
              "name": "width",
              "type": "Int",
              "description": "\tpixel width of the image - defaults to image's natural size"
            },
            {
              "name": "height",
              "type": "Int",
              "description": "\tpixel height of the image - defaults to image's natural size"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Source image object. A source image is one whose URL is specified by a src attribute in the DOM element",
      "file": "ImageLoader.js"
    },
    "YAHOO.widget.CalendarGroup": {
      "shortname": "CalendarGroup",
      "methods": {
        "subtractMonths": {
          "guessedname": "subtractMonths",
          "guessedtype": "function",
          "description": "Subtracts the designated number of months from the current calendar month, and sets the current\ncalendar page date to the new month.",
          "params": [
            {
              "name": "count",
              "type": "Number",
              "description": " The number of months to subtract from the current calendar"
            }
          ]
        },
        "addMonths": {
          "guessedname": "addMonths",
          "guessedtype": "function",
          "description": "Adds the designated number of months to the current calendar month, and sets the current\ncalendar page date to the new month.",
          "params": [
            {
              "name": "count",
              "type": "Number",
              "description": " The number of months to add to the current calendar"
            }
          ]
        },
        "configSelected": {
          "guessedname": "configSelected",
          "guessedtype": "function",
          "description": "The default Config handler for the CalendarGroup \"selected\" property",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, this will usually equal the owner."
            }
          ]
        },
        "configPageDate": {
          "guessedname": "configPageDate",
          "guessedtype": "function",
          "description": "The default Config handler for the \"pagedate\" property",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, this will usually equal the owner."
            }
          ]
        },
        "previousYear": {
          "guessedname": "previousYear",
          "guessedtype": "function",
          "description": "Navigates to the previous year in the currently selected month in the calendar widget."
        },
        "sub": {
          "private": "",
          "guessedname": "sub",
          "guessedtype": "function",
          "description": "Proxy subscriber to subscribe to the CalendarGroup's child Calendars' CustomEvents",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": " The function to subscribe to this CustomEvent"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The CustomEvent's scope object"
            },
            {
              "name": "bOverride",
              "type": "Boolean",
              "description": " Whether or not to apply scope correction"
            }
          ]
        },
        "deselect": {
          "guessedname": "deselect",
          "guessedtype": "function",
          "description": "Deselects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once deselection has completed, render must be \ncalled for the changes to be reflected visually.",
          "params": [
            {
              "name": "date",
              "type": "String/Date/Date[]",
              "description": " The date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."
            }
          ],
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."
          }
        },
        "deselectCell": {
          "guessedname": "deselectCell",
          "guessedtype": "function",
          "description": "Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.\ndeselectCell will deselect the cell at the specified index on each displayed Calendar page.",
          "params": [
            {
              "name": "cellIndex",
              "type": "Number",
              "description": " The index of the cell to deselect."
            }
          ],
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."
          }
        },
        "addYears": {
          "guessedname": "addYears",
          "guessedtype": "function",
          "description": "Adds the designated number of years to the current calendar, and sets the current\ncalendar page date to the new month.",
          "params": [
            {
              "name": "count",
              "type": "Number",
              "description": " The number of years to add to the current calendar"
            }
          ]
        },
        "selectCell": {
          "guessedname": "selectCell",
          "guessedtype": "function",
          "description": "Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.\nThe value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected. \n<ul>\n<li>If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.</li>\n<li>If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.</li>\n</ul>",
          "params": [
            {
              "name": "cellIndex",
              "type": "Number",
              "description": " The index of the cell to be selected."
            }
          ],
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."
          }
        },
        "addWeekdayRenderer": {
          "guessedname": "addWeekdayRenderer",
          "guessedtype": "function",
          "description": "Adds a weekday to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the weekday passed to this method.",
          "params": [
            {
              "name": "weekday",
              "type": "Number",
              "description": "  The weekday (1-7) to associate with this renderer. 1=Sunday, 2=Monday etc."
            },
            {
              "name": "fnRender",
              "type": "Function",
              "description": " The function executed to render cells that match the render rules for this renderer."
            }
          ]
        },
        "clear": {
          "guessedname": "clear",
          "guessedtype": "function",
          "description": "Clears the selected dates in the current calendar widget and sets the calendar\nto the current month and year."
        },
        "callChildFunction": {
          "guessedname": "callChildFunction",
          "guessedtype": "function",
          "description": "Calls a function within all child Calendars within this CalendarGroup.",
          "params": [
            {
              "name": "fnName",
              "type": "String",
              "description": "  The name of the function"
            },
            {
              "name": "args",
              "type": "Array",
              "description": "  The arguments to pass to the function"
            }
          ]
        },
        "configPages": {
          "guessedname": "configPages",
          "guessedtype": "function",
          "description": "The default Config handler for the \"pages\" property",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, this will usually equal the owner."
            }
          ]
        },
        "removeRenderers": {
          "guessedname": "removeRenderers",
          "guessedtype": "function",
          "description": "Removes all custom renderers added to the CalendarGroup through the addRenderer, addMonthRenderer and \naddWeekRenderer methods. CalendarGroup's render method needs to be called to after removing renderers \nto see the changes applied."
        },
        "_setMonthOnDate": {
          "private": "",
          "guessedname": "_setMonthOnDate",
          "guessedtype": "function",
          "description": "Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11.\nThe Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The Date object on which to set the month index"
            },
            {
              "name": "iMonth",
              "type": "Number",
              "description": " The month index to set"
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the object.",
          "return": {
            "type": "String",
            "description": "A string representation of the CalendarGroup object."
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Destroys the CalendarGroup instance. The method will remove references\nto HTML elements, remove any event listeners added by the CalendarGroup.\nIt will also destroy the Config and CalendarNavigator instances created by the \nCalendarGroup and the individual Calendar instances created for each page."
        },
        "addMonthRenderer": {
          "guessedname": "addMonthRenderer",
          "guessedtype": "function",
          "description": "Adds a month to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the month passed to this method.",
          "params": [
            {
              "name": "month",
              "type": "Number",
              "description": "  The month (1-12) to associate with this renderer"
            },
            {
              "name": "fnRender",
              "type": "Function",
              "description": " The function executed to render cells that match the render rules for this renderer."
            }
          ]
        },
        "nextMonth": {
          "guessedname": "nextMonth",
          "guessedtype": "function",
          "description": "Navigates to the next month page in the calendar widget."
        },
        "subtractYears": {
          "guessedname": "subtractYears",
          "guessedtype": "function",
          "description": "Subtcats the designated number of years from the current calendar, and sets the current\ncalendar page date to the new month.",
          "params": [
            {
              "name": "count",
              "type": "Number",
              "description": " The number of years to subtract from the current calendar"
            }
          ]
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Calls the render function of all child calendars within the group."
        },
        "renderHeader": {
          "guessedname": "renderHeader",
          "guessedtype": "function",
          "description": "Renders the header for the CalendarGroup."
        },
        "nextYear": {
          "guessedname": "nextYear",
          "guessedtype": "function",
          "description": "Navigates to the next year in the currently selected month in the calendar widget."
        },
        "constructChild": {
          "guessedname": "constructChild",
          "guessedtype": "function",
          "description": "Constructs a child calendar. This method can be overridden if a subclassed version of the default\ncalendar is to be used.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "   The id of the table element that will represent the calendar widget"
            },
            {
              "name": "containerId",
              "type": "String",
              "description": " The id of the container div element that will wrap the calendar table"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "  The configuration object containing the Calendar's arguments"
            }
          ],
          "return": {
            "type": "YAHOO.widget.Calendar",
            "description": "The YAHOO.widget.Calendar instance that is constructed"
          }
        },
        "getCalendarPage": {
          "guessedname": "getCalendarPage",
          "guessedtype": "function",
          "description": "Returns the Calendar page instance which has a pagedate (month/year) matching the given date. \nReturns null if no match is found.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript Date object for which a Calendar page is to be found."
            }
          ],
          "return": {
            "type": "Calendar",
            "description": "The Calendar page instance representing the month to which the date \nbelongs."
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Initializes the calendar group. All subclasses must call this method in order for the\ngroup to be initialized properly.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional."
            },
            {
              "name": "container",
              "type": "String | HTMLElement",
              "description": " The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document."
            },
            {
              "name": "config",
              "type": "Object",
              "description": " optional The configuration object containing the initial configuration values for the CalendarGroup."
            }
          ]
        },
        "setChildFunction": {
          "guessedname": "setChildFunction",
          "guessedtype": "function",
          "description": "Adds a function to all child Calendars within this CalendarGroup.",
          "params": [
            {
              "name": "fnName",
              "type": "String",
              "description": "  The name of the function"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "   The function to apply to each Calendar page object"
            }
          ]
        },
        "previousMonth": {
          "guessedname": "previousMonth",
          "guessedtype": "function",
          "description": "Navigates to the previous month page in the calendar widget."
        },
        "deselectAll": {
          "guessedname": "deselectAll",
          "guessedtype": "function",
          "description": "Deselects all dates on the current calendar.",
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected.\nAssuming that this function executes properly, the return value should be an empty array.\nHowever, the empty array is returned for the sake of being able to check the selection status\nof the calendar."
          }
        },
        "reset": {
          "guessedname": "reset",
          "guessedtype": "function",
          "description": "Resets the calendar widget to the originally selected month and year, and \nsets the calendar to the initial selection(s)."
        },
        "addRenderer": {
          "guessedname": "addRenderer",
          "guessedtype": "function",
          "description": "Adds a renderer to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the conditions specified in the date string for this renderer.",
          "params": [
            {
              "name": "sDates",
              "type": "String",
              "description": "  A date string to associate with the specified renderer. Valid formats\ninclude date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)"
            },
            {
              "name": "fnRender",
              "type": "Function",
              "description": " The function executed to render cells that match the render rules for this renderer."
            }
          ]
        },
        "renderFooter": {
          "guessedname": "renderFooter",
          "guessedtype": "function",
          "description": "Renders a footer for the 2-up calendar container. By default, this method is\nunimplemented."
        },
        "select": {
          "guessedname": "select",
          "guessedtype": "function",
          "description": "Selects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once selection has completed, render must be \ncalled for the changes to be reflected visually.",
          "params": [
            {
              "name": "date",
              "type": "String/Date/Date[]",
              "description": "    The date string of dates to select in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."
            }
          ],
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."
          }
        },
        "setYear": {
          "guessedname": "setYear",
          "guessedtype": "function",
          "description": "Sets the calendar group's year explicitly. This year will be set into the first\npage of the multi-page calendar, and all other months will be iterated appropriately.",
          "params": [
            {
              "name": "year",
              "type": "Number",
              "description": "  The numeric 4-digit year"
            }
          ]
        },
        "getSelectedDates": {
          "guessedname": "getSelectedDates",
          "type": "Date[]",
          "guessedtype": "function",
          "description": "Gets the list of currently selected dates from the calendar.",
          "return": {
            "type": "",
            "description": "An array of currently selected JavaScript Date objects."
          }
        },
        "unsub": {
          "private": "",
          "guessedname": "unsub",
          "guessedtype": "function",
          "description": "Proxy unsubscriber to unsubscribe from the CalendarGroup's child Calendars' CustomEvents",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": " The function to subscribe to this CustomEvent"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The CustomEvent's scope object"
            }
          ]
        },
        "_fixWidth": {
          "guessedname": "_fixWidth",
          "private": "",
          "guessedtype": "function",
          "description": "Fixes the width of the CalendarGroup container element, to account for miswrapped floats"
        },
        "initEvents": {
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initializes CalendarGroup's built-in CustomEvents"
        },
        "delegateConfig": {
          "guessedname": "delegateConfig",
          "guessedtype": "function",
          "description": "Delegates a configuration property to the CustomEvents associated with the CalendarGroup's children",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, this will usually equal the owner."
            }
          ]
        },
        "setMonth": {
          "guessedname": "setMonth",
          "guessedtype": "function",
          "description": "Sets the calendar group's month explicitly. This month will be set into the first\npage of the multi-page calendar, and all other months will be iterated appropriately.",
          "params": [
            {
              "name": "month",
              "type": "Number",
              "description": "  The numeric month, from 0 (January) to 11 (December)"
            }
          ]
        }
      },
      "name": "YAHOO.widget.CalendarGroup",
      "module": "calendar",
      "namespace": "YAHOO.widget",
      "events": {
        "beforeDestroyEvent": {
          "guessedname": "beforeDestroyEvent",
          "guessedtype": "property",
          "description": "Fired just before the CalendarGroup is to be destroyed"
        },
        "resetEvent": {
          "guessedname": "resetEvent",
          "guessedtype": "property",
          "description": "Fired when the Calendar is reset"
        },
        "beforeSelectEvent": {
          "guessedname": "beforeSelectEvent",
          "guessedtype": "property",
          "description": "Fired before a date selection is made"
        },
        "showNavEvent": {
          "guessedname": "showNavEvent",
          "guessedtype": "property",
          "description": "Fired after the CalendarNavigator is shown"
        },
        "hideEvent": {
          "guessedname": "hideEvent",
          "guessedtype": "property",
          "description": "Fired after the CalendarGroup is hidden"
        },
        "beforeRenderNavEvent": {
          "guessedname": "beforeRenderNavEvent",
          "guessedtype": "property",
          "description": "Fired just before the CalendarNavigator is to be rendered"
        },
        "destroyEvent": {
          "guessedname": "destroyEvent",
          "guessedtype": "property",
          "description": "Fired after the CalendarGroup is destroyed. This event should be used\nfor notification only. When this event is fired, important CalendarGroup instance\nproperties, dom references and event listeners have already been \nremoved/dereferenced, and hence the CalendarGroup instance is not in a usable \nstate."
        },
        "renderNavEvent": {
          "guessedname": "renderNavEvent",
          "guessedtype": "property",
          "description": "Fired after the CalendarNavigator is rendered"
        },
        "beforeHideNavEvent": {
          "guessedname": "beforeHideNavEvent",
          "guessedtype": "property",
          "description": "Fired just before the CalendarNavigator is to be hidden"
        },
        "beforeHideEvent": {
          "guessedname": "beforeHideEvent",
          "guessedtype": "property",
          "description": "Fired just before the CalendarGroup is to be hidden"
        },
        "clearEvent": {
          "guessedname": "clearEvent",
          "guessedtype": "property",
          "description": "Fired when the Calendar is cleared"
        },
        "renderEvent": {
          "guessedname": "renderEvent",
          "guessedtype": "property",
          "description": "Fired when the Calendar is rendered"
        },
        "showEvent": {
          "guessedname": "showEvent",
          "guessedtype": "property",
          "description": "Fired after the CalendarGroup is shown"
        },
        "changePageEvent": {
          "guessedname": "changePageEvent",
          "guessedtype": "property",
          "description": "Fired when the Calendar page is changed"
        },
        "hideNavEvent": {
          "guessedname": "hideNavEvent",
          "guessedtype": "property",
          "description": "Fired after the CalendarNavigator is hidden"
        },
        "deselectEvent": {
          "guessedname": "deselectEvent",
          "guessedtype": "property",
          "description": "Fired when a date or set of dates has been deselected",
          "params": [
            {
              "name": "Array",
              "type": "Array",
              "description": " of Date field arrays in the format [YYYY, MM, DD]."
            }
          ]
        },
        "beforeRenderEvent": {
          "guessedname": "beforeRenderEvent",
          "guessedtype": "property",
          "description": "Fired before the Calendar is rendered"
        },
        "beforeShowNavEvent": {
          "guessedname": "beforeShowNavEvent",
          "guessedtype": "property",
          "description": "Fired just before the CalendarNavigator is to be shown"
        },
        "selectEvent": {
          "guessedname": "selectEvent",
          "guessedtype": "property",
          "description": "Fired when a date selection is made",
          "params": [
            {
              "name": "Array",
              "type": "Array",
              "description": " of Date field arrays in the format [YYYY, MM, DD]."
            }
          ]
        },
        "beforeShowEvent": {
          "guessedname": "beforeShowEvent",
          "guessedtype": "property",
          "description": "Fired just before the CalendarGroup is to be shown"
        },
        "beforeDeselectEvent": {
          "guessedname": "beforeDeselectEvent",
          "guessedtype": "property",
          "description": "Fired before a date or set of dates is deselected"
        }
      },
      "constructors": [
        {
          "description": "YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates\nthe ability to have multi-page calendar views that share a single dataset and are\ndependent on each other.\nThe calendar group instance will refer to each of its elements using a 0-based index.\nFor example, to construct the placeholder for a calendar group widget with id \"cal1\" and\ncontainerId of \"cal1Container\", the markup would be as follows:\n<xmp>\n<div id=\"cal1Container_0\"></div>\n<div id=\"cal1Container_1\"></div>\n</xmp>\nThe tables for the calendars (\"cal1_0\" and \"cal1_1\") will be inserted into those containers.\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>\nThe CalendarGroup can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.CalendarGroup(\"calContainer\", configOptions);\n</xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);\n</xmp>\n</p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the CalendarGroup's ID will be set to \"calContainer_t\".\n</p>",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional."
            },
            {
              "name": "container",
              "type": "String | HTMLElement",
              "description": " The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document."
            },
            {
              "name": "config",
              "type": "Object",
              "description": " optional The configuration object containing the initial configuration values for the CalendarGroup."
            }
          ]
        }
      ],
      "description": "YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates\nthe ability to have multi-page calendar views that share a single dataset and are\ndependent on each other.\nThe calendar group instance will refer to each of its elements using a 0-based index.\nFor example, to construct the placeholder for a calendar group widget with id \"cal1\" and\ncontainerId of \"cal1Container\", the markup would be as follows:\n<xmp>\n<div id=\"cal1Container_0\"></div>\n<div id=\"cal1Container_1\"></div>\n</xmp>\nThe tables for the calendars (\"cal1_0\" and \"cal1_1\") will be inserted into those containers.\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>\nThe CalendarGroup can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.CalendarGroup(\"calContainer\", configOptions);\n</xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);\n</xmp>\n</p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the CalendarGroup's ID will be set to \"calContainer_t\".\n</p>",
      "file": "CalendarGroup.js",
      "configs": {
        "START_WEEKDAY": {
          "guessedname": "value",
          "default": "0",
          "type": "number",
          "guessedtype": "property",
          "description": "The weekday the week begins on. Default is 0 (Sunday)."
        },
        "maxdate": {
          "guessedname": "value",
          "default": "null",
          "type": "String | Date",
          "guessedtype": "property",
          "description": "The maximum selectable date in the current Calendar (mm/dd/yyyy)"
        },
        "MDY_DAY_POSITION": {
          "guessedname": "value",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the day in a month/day/year date string"
        },
        "WEEKDAYS_SHORT": {
          "guessedname": "value",
          "default": "[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The short weekday labels for the current locale."
        },
        "today": {
          "guessedname": "value",
          "default": "Today's date",
          "type": "Date",
          "guessedtype": "property",
          "description": "The date to use to represent \"Today\"."
        },
        "title": {
          "guessedname": "value",
          "default": "\"\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The title to display above the CalendarGroup's month header"
        },
        "SHOW_WEEK_HEADER": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should show week row headers. False by default."
        },
        "DATE_RANGE_DELIMITER": {
          "guessedname": "value",
          "default": "\"-\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The value used to delimit date ranges in a date string passed to various Calendar functions."
        },
        "WEEKDAYS_MEDIUM": {
          "guessedname": "value",
          "default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The medium weekday labels for the current locale."
        },
        "close": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not a close button should be displayed for this CalendarGroup"
        },
        "MY_YEAR_POSITION": {
          "guessedname": "value",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the year in a month/year date string"
        },
        "NAV": {
          "guessedname": "value",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "description": "Configuration for the Month Year Navigation UI. By default it is disabled"
        },
        "year_offset": {
          "guessedname": "value",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "The positive or negative year offset from the Gregorian calendar year (assuming a January 1st rollover) to \nbe used when displaying or parsing dates.  NOTE: All JS Date objects returned by methods, or expected as input by\nmethods will always represent the Gregorian year, in order to maintain date/month/week values."
        },
        "HIDE_BLANK_WEEKS": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should suppress weeks that are not a part of the current month. False by default."
        },
        "MY_MONTH_POSITION": {
          "guessedname": "value",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the month in a month/year date string"
        },
        "iframe": {
          "guessedname": "value",
          "default": "true for IE6 and below, false for all other browsers",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.\nThis property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be \nenabled if required."
        },
        "LOCALE_MONTHS": {
          "guessedname": "value",
          "default": "\"long\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\"."
        },
        "DATE_DELIMITER": {
          "guessedname": "value",
          "default": "\",\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The value used to delimit individual dates in a date string passed to various Calendar functions."
        },
        "mindate": {
          "guessedname": "value",
          "default": "null",
          "type": "String | Date",
          "guessedtype": "property",
          "description": "The minimum selectable date in the current Calendar (mm/dd/yyyy)"
        },
        "MULTI_SELECT": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should allow multiple selections. False by default."
        },
        "MY_LABEL_MONTH_SUFFIX": {
          "guessedname": "value",
          "default": "\" \"",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix used after the month when rendering the Calendar header"
        },
        "MDY_MONTH_POSITION": {
          "guessedname": "value",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the month in a month/day/year date string"
        },
        "selected": {
          "guessedname": "value",
          "default": "[]",
          "type": "String",
          "guessedtype": "property",
          "description": "The date or range of dates representing the current Calendar selection"
        },
        "strings": {
          "default": "An object with the properties shown below:\n<dl>\n<dt>previousMonth</dt><dd><em>String</em> : The string to use for the \"Previous Month\" navigation UI. Defaults to \"Previous Month\".</dd>\n<dt>nextMonth</dt><dd><em>String</em> : The string to use for the \"Next Month\" navigation UI. Defaults to \"Next Month\".</dd>\n<dt>close</dt><dd><em>String</em> : The string to use for the close button label. Defaults to \"Close\".</dd>\n</dl>",
          "type": "{Object}",
          "description": "The map of UI strings which the CalendarGroup UI uses."
        },
        "SHOW_WEEK_FOOTER": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should show week row footers. False by default."
        },
        "pages": {
          "guessedname": "value",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "The number of pages to include in the CalendarGroup. This value can only be set once, in the CalendarGroup's constructor arguments."
        },
        "SHOW_WEEKDAYS": {
          "guessedname": "value",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should show weekday labels. True by default."
        },
        "MY_LABEL_YEAR_POSITION": {
          "guessedname": "value",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the year in the month year label string used as the Calendar header"
        },
        "NAV_ARROW_LEFT": {
          "guessedname": "value",
          "default": "null",
          "type": "String",
          "guessedtype": "property",
          "deprecated": "You can customize the image by overriding the default CSS class for the left arrow - \"calnavleft\"",
          "description": "The image that should be used for the left navigation arrow."
        },
        "MDY_YEAR_POSITION": {
          "guessedname": "value",
          "default": "3",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the year in a month/day/year date string"
        },
        "LOCALE_WEEKDAYS": {
          "guessedname": "value",
          "default": "\"short\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\"."
        },
        "MONTHS_SHORT": {
          "guessedname": "value",
          "default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The short month labels for the current locale."
        },
        "WEEKDAYS_1CHAR": {
          "guessedname": "value",
          "default": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The 1-character weekday labels for the current locale."
        },
        "MY_LABEL_MONTH_POSITION": {
          "guessedname": "value",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the month in the month year label string used as the Calendar header"
        },
        "MONTHS_LONG": {
          "guessedname": "value",
          "default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The long month labels for the current locale."
        },
        "DATE_FIELD_DELIMITER": {
          "guessedname": "value",
          "default": "\"/\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The value used to delimit date fields in a date string passed to various Calendar functions."
        },
        "MD_MONTH_POSITION": {
          "guessedname": "value",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the month in a month/day date string"
        },
        "MD_DAY_POSITION": {
          "guessedname": "value",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the day in a month/year date string"
        },
        "pagedate": {
          "guessedname": "value",
          "default": "Today's date",
          "type": "String | Date",
          "guessedtype": "property",
          "description": "The month/year representing the current visible Calendar date (mm/yyyy)"
        },
        "WEEKDAYS_LONG": {
          "guessedname": "value",
          "default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The long weekday labels for the current locale."
        },
        "NAV_ARROW_RIGHT": {
          "guessedname": "value",
          "default": "null",
          "type": "String",
          "guessedtype": "property",
          "deprecated": "You can customize the image by overriding the default CSS class for the right arrow - \"calnavright\"",
          "description": "The image that should be used for the right navigation arrow."
        },
        "MY_LABEL_YEAR_SUFFIX": {
          "guessedname": "value",
          "default": "\"\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix used after the year when rendering the Calendar header"
        }
      },
      "properties": {
        "Options": {
          "guessedname": "Options",
          "type": "Object",
          "guessedtype": "property",
          "description": "The local object which contains the CalendarGroup's options"
        },
        "YAHOO.widget.CalendarGroup._DEFAULT_CONFIG": {
          "guessedname": "DEFAULT_CONFIG",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "deprecated": "Made public. See the public DEFAULT_CONFIG property for details",
          "description": "The set of default Config property keys and values for the CalendarGroup"
        },
        "cfg": {
          "guessedname": "cfg",
          "type": "YAHOO.util.Config",
          "guessedtype": "property",
          "description": "The Config object used to hold the configuration variables for the CalendarGroup"
        },
        "Locale": {
          "guessedname": "Locale",
          "type": "Object",
          "guessedtype": "property",
          "description": "The local object which contains the CalendarGroup's locale settings"
        },
        "id": {
          "guessedname": "id",
          "type": "String",
          "guessedtype": "property",
          "description": "The unique id associated with the CalendarGroup"
        },
        "YAHOO.widget.CalendarGroup.CSS_2UPTITLE": {
          "final": "",
          "guessedname": "CSS_2UPTITLE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "CSS class representing the title for the 2-up calendar"
        },
        "YAHOO.widget.CalendarGroup.CSS_2UPCLOSE": {
          "final": "",
          "guessedname": "CSS_2UPCLOSE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "deprecated": "Along with Calendar.IMG_ROOT and NAV_ARROW_LEFT, NAV_ARROW_RIGHT configuration properties.\nCalendar's <a href=\"YAHOO.widget.Calendar.html#Style.CSS_CLOSE\">Style.CSS_CLOSE</a> property now represents the CSS class used to render the close icon",
          "description": "CSS class representing the close icon for the 2-up calendar"
        },
        "pages": {
          "guessedname": "pages",
          "type": "YAHOO.widget.Calendar[]",
          "guessedtype": "property",
          "description": "The collection of Calendar pages contained within the CalendarGroup"
        },
        "containerId": {
          "guessedname": "containerId",
          "type": "String",
          "guessedtype": "property",
          "description": "The unique id associated with the CalendarGroup container"
        },
        "YAHOO.widget.CalendarGroup.DEFAULT_CONFIG": {
          "static": "",
          "type": "Object An object with key/value pairs, the key being the \nuppercase configuration property name and the value being an objec \nliteral with a key string property, and a value property, specifying the \ndefault value of the property",
          "description": "The set of default Config property keys and values for the CalendarGroup.\n<p>\nNOTE: This property is made public in order to allow users to change \nthe default values of configuration properties. Users should not \nmodify the key string, unless they are overriding the Calendar implementation\n</p>"
        },
        "YAHOO.widget.CalendarGroup.CSS_CONTAINER": {
          "final": "",
          "guessedname": "CSS_CONTAINER",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "CSS class representing the container for the calendar"
        },
        "YAHOO.widget.CalendarGroup.CSS_MULTI_UP": {
          "final": "",
          "guessedname": "CSS_MULTI_UP",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "CSS class representing the container for the calendar"
        }
      }
    },
    "YAHOO.widget.Dialog": {
      "shortname": "Dialog",
      "superclass": "YAHOO.widget.Panel",
      "methods": {
        "getData": {
          "guessedname": "getData",
          "guessedtype": "function",
          "description": "Returns a JSON-compatible data structure representing the data \ncurrently contained in the form.",
          "return": {
            "type": "Object",
            "description": "A JSON object reprsenting the data of the \ncurrent form."
          }
        },
        "focusLastButton": {
          "guessedname": "focusLastButton",
          "guessedtype": "function",
          "description": "Sets the focus to the last button created via the \"buttons\" \nconfiguration property."
        },
        "focusFirstButton": {
          "guessedname": "focusFirstButton",
          "guessedtype": "function",
          "description": "Sets the focus to the first button created via the \"buttons\"\nconfiguration property."
        },
        "_submitHandler": {
          "guessedname": "_submitHandler",
          "guessedtype": "function",
          "protected": "",
          "description": "Internal handler for the form submit event",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The DOM Event object"
            }
          ]
        },
        "submit": {
          "guessedname": "submit",
          "guessedtype": "function",
          "description": "Executes a submit of the Dialog if validation \nis successful. By default the Dialog is hidden\nafter submission, but you can set the \"hideaftersubmit\"\nconfiguration property to false, to prevent the Dialog\nfrom being hidden."
        },
        "cancel": {
          "guessedname": "cancel",
          "guessedtype": "function",
          "description": "Executes the cancel of the Dialog followed by a hide."
        },
        "configClose": {
          "guessedname": "configClose",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"close\" property is \nchanged. The method controls the appending or hiding of the close\nicon at the top right of the Dialog.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For \nconfiguration handlers, args[0] will equal the newly applied value \nfor the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "setTabLoop": {
          "guessedname": "setTabLoop",
          "guessedtype": "function",
          "description": "Sets up a tab, shift-tab loop between the first and last elements\nprovided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener\ninstance properties, which are reset everytime this method is invoked.",
          "params": [
            {
              "name": "firstElement",
              "type": "HTMLElement",
              "description": ""
            },
            {
              "name": "lastElement",
              "type": "HTMLElement",
              "description": ""
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the object.",
          "return": {
            "type": "String",
            "description": "The string representation of the Dialog"
          }
        },
        "configPostMethod": {
          "guessedname": "configPostMethod",
          "guessedtype": "function",
          "description": "The default event handler for the \"postmethod\" configuration property",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For \nconfiguration handlers, args[0] will equal the newly applied value \nfor the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "validate": {
          "guessedname": "validate",
          "guessedtype": "function",
          "description": "Built-in function hook for writing a validation function that will \nbe checked for a \"true\" value prior to a submit. This function, as \nimplemented by default, always returns true, so it should be \noverridden if validation is necessary."
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the Panel element from the DOM and sets all child elements \nto null."
        },
        "getButtons": {
          "guessedname": "getButtons",
          "guessedtype": "function",
          "description": "Returns an array containing each of the Dialog's \nbuttons, by default an array of HTML <code>&#60;BUTTON&#62;</code> \nelements.  If the Dialog's buttons were created using the \nYAHOO.widget.Button class (via the inclusion of the optional Button \ndependancy on the page), an array of YAHOO.widget.Button instances \nis returned.",
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "focusLast": {
          "guessedname": "focusLast",
          "guessedtype": "function",
          "description": "Sets focus to the last element in the Dialog's form or the last \nbutton defined via the \"buttons\" configuration property."
        },
        "_doClose": {
          "guessedname": "_doClose",
          "guessedtype": "function",
          "protected": "",
          "description": "Event handler for the close icon",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": ""
            }
          ]
        },
        "blurButtons": {
          "guessedname": "blurButtons",
          "guessedtype": "function",
          "description": "Blurs all the buttons defined via the \"buttons\" \nconfiguration property."
        },
        "focusFirst": {
          "guessedname": "focusFirst",
          "guessedtype": "function",
          "description": "<p>\nSets focus to the first focusable element in the Dialog's form if found, \nelse, the default button if found, else the first button defined via the \n\"buttons\" configuration property.\n</p>\n<p>\nThis method is invoked when the Dialog is made visible.\n</p>"
        },
        "setFirstLastFocusable": {
          "guessedname": "setFirstLastFocusable",
          "guessedtype": "function",
          "description": "Configures instance properties, pointing to the \nfirst and last focusable elements in the Dialog's form."
        },
        "focusDefaultButton": {
          "guessedname": "focusDefaultButton",
          "guessedtype": "function",
          "description": "Sets the focus to the button that is designated as the default via \nthe \"buttons\" configuration property. By default, this method is \ncalled when the Dialog is made visible."
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Dialog initialization method, which is executed for Dialog and \nall of its subclasses. This method is automatically called by the \nconstructor, and  sets up all DOM references for pre-existing markup, \nand creates required markup if it is not already present.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Dialog <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Dialog"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal \ncontaining the configuration that should be set for this Dialog. \nSee configuration documentation for more details."
            }
          ]
        },
        "doSubmit": {
          "guessedname": "doSubmit",
          "guessedtype": "function",
          "description": "Submits the Dialog's form depending on the value of the \n\"postmethod\" configuration property.  <strong>Please note:\n</strong> As of version 2.3 this method will automatically handle \nasyncronous file uploads should the Dialog instance's form contain \n<code>&#60;input type=\"file\"&#62;</code> elements.  If a Dialog \ninstance will be handling asyncronous file uploads, its \n<code>callback</code> property will need to be setup with a \n<code>upload</code> handler rather than the standard \n<code>success</code> and, or <code>failure</code> handlers.  For more \ninformation, see the <a href=\"http://developer.yahoo.com/yui/\nconnection/#file\">Connection Manager documenation on file uploads</a>."
        },
        "_getButton": {
          "guessedname": "_getButton",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "button",
              "type": "HTMLElement",
              "description": ""
            }
          ],
          "description": "Helper method to normalize button references. It either returns the \nYUI Button instance for the given element if found,\nor the passes back the HTMLElement reference if a corresponding YUI Button\nreference is not found or YAHOO.widget.Button does not exist on the page.",
          "return": {
            "type": "YAHOO.widget.Button|HTMLElement",
            "description": ""
          }
        },
        "_getFormAttributes": {
          "guessedname": "_getFormAttributes",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "oForm",
              "type": "HTMLFormElement",
              "description": " The HTML Form element from which to retrieve the attributes"
            }
          ],
          "description": "Retrieves important attributes (currently method and action) from\nthe form element, accounting for any elements which may have the same name \nas the attributes. Defaults to \"POST\" and \"\" for method and action respectively\nif the attribute cannot be retrieved.",
          "return": {
            "type": "Object",
            "description": "Object literal, with method and action String properties."
          }
        },
        "registerForm": {
          "guessedname": "registerForm",
          "guessedtype": "function",
          "description": "Prepares the Dialog's internal FORM object, creating one if one is\nnot currently present."
        },
        "initEvents": {
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initializes the custom events for Dialog which are fired \nautomatically at appropriate times by the Dialog class."
        },
        "configButtons": {
          "guessedname": "configButtons",
          "guessedtype": "function",
          "description": "The default event handler for the \"buttons\" configuration property",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the class's configurable properties which can be changed \nusing the Dialog's Config object (cfg)."
        }
      },
      "name": "YAHOO.widget.Dialog",
      "extends": "YAHOO.widget.Panel",
      "guessedname": "Dialog",
      "module": "container",
      "namespace": "YAHOO.widget",
      "events": {
        "formSubmitEvent": {
          "guessedname": "formSubmitEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after form-based submission, before the generic submit event is fired"
        },
        "cancelEvent": {
          "guessedname": "cancelEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after cancel"
        },
        "submitEvent": {
          "guessedname": "submitEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after submission"
        },
        "beforeSubmitEvent": {
          "guessedname": "beforeSubmitEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired prior to submission"
        },
        "asyncSubmitEvent": {
          "guessedname": "asyncSubmitEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after asynchronous submission, before the generic submit event is fired",
          "params": [
            {
              "name": "conn",
              "type": "Object",
              "description": " The connection object, returned by YAHOO.util.Connect.asyncRequest"
            }
          ]
        },
        "manualSubmitEvent": {
          "guessedname": "manualSubmitEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired for manual submission, before the generic submit event is fired"
        }
      },
      "constructors": [
        {
          "description": "<p>\nDialog is an implementation of Panel that can be used to submit form \ndata.\n</p>\n<p>\nBuilt-in functionality for buttons with event handlers is included. \nIf the optional YUI Button dependancy is included on the page, the buttons\ncreated will be instances of YAHOO.widget.Button, otherwise regular HTML buttons\nwill be created.\n</p>\n<p>\nForms can be processed in 3 ways -- via an asynchronous Connection utility call, \na simple form POST or GET, or manually. The YUI Connection utility should be\nincluded if you're using the default \"async\" postmethod, but is not required if\nyou're using any of the other postmethod values.\n</p>",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Dialog <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Dialog"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal containing \nthe configuration that should be set for this Dialog. See configuration \ndocumentation for more details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "<p>\nDialog is an implementation of Panel that can be used to submit form \ndata.\n</p>\n<p>\nBuilt-in functionality for buttons with event handlers is included. \nIf the optional YUI Button dependancy is included on the page, the buttons\ncreated will be instances of YAHOO.widget.Button, otherwise regular HTML buttons\nwill be created.\n</p>\n<p>\nForms can be processed in 3 ways -- via an asynchronous Connection utility call, \na simple form POST or GET, or manually. The YUI Connection utility should be\nincluded if you're using the default \"async\" postmethod, but is not required if\nyou're using any of the other postmethod values.\n</p>",
      "file": "Dialog.js",
      "configs": {
        "hideaftersubmit": {
          "default": "true",
          "type": "Boolean",
          "description": "This property is used to configure whether or not the \ndialog should be automatically hidden after submit."
        },
        "postdata": {
          "default": "null",
          "type": "String",
          "description": "Any additional post data which needs to be sent when using the \n<a href=\"#config_postmethod\">async</a> postmethod for dialog POST submissions.\nThe format for the post data string is defined by Connection Manager's \n<a href=\"YAHOO.util.Connect.html#method_asyncRequest\">asyncRequest</a> \nmethod."
        },
        "buttons": {
          "default": "\"none\"",
          "type": "{Array|String}",
          "description": "Array of object literals, each containing a set of properties \ndefining a button to be appended into the Dialog's footer.\n<p>Each button object in the buttons array can have three properties:</p>\n<dl>\n<dt>text:</dt>\n<dd>\nThe text that will display on the face of the button. The text can \ninclude HTML, as long as it is compliant with HTML Button specifications.\n</dd>\n<dt>handler:</dt>\n<dd>Can be either:\n<ol>\n<li>A reference to a function that should fire when the \nbutton is clicked.  (In this case scope of this function is \nalways its Dialog instance.)</li>\n<li>An object literal representing the code to be \nexecuted when the button is clicked.\n<p>Format:</p>\n<p>\n<code>{\n<br>\n<strong>fn:</strong> Function, &#47;&#47;\nThe handler to call when  the event fires.\n<br>\n<strong>obj:</strong> Object, &#47;&#47; \nAn  object to pass back to the handler.\n<br>\n<strong>scope:</strong> Object &#47;&#47; \nThe object to use for the scope of the handler.\n<br>\n}</code>\n</p>\n</li>\n</ol>\n</dd>\n<dt>isDefault:</dt>\n<dd>\nAn optional boolean value that specifies that a button \nshould be highlighted and focused by default.\n</dd>\n</dl>\n<em>NOTE:</em>If the YUI Button Widget is included on the page, \nthe buttons created will be instances of YAHOO.widget.Button. \nOtherwise, HTML Buttons (<code>&#60;BUTTON&#62;</code>) will be \ncreated."
        },
        "postmethod": {
          "default": "async",
          "type": "String",
          "description": "The method to use for posting the Dialog's form. Possible values \nare \"async\", \"form\", and \"manual\"."
        }
      },
      "properties": {
        "EVENT_TYPES": {
          "final": "",
          "guessedname": "EVENT_TYPES",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the name of the Dialog's events"
        },
        "callback.upload": {
          "type": "Function",
          "description": "<p>\nThe function to execute upon success of the \nConnection submission, when the form contains\na file input element.\n</p>\n<p>\n<em>NOTE:</em> Connection manager will not\ninvoke the success or failure handlers for the file\nupload use case. This will be the only callback\nhandler invoked.\n</p>\n<p>\nFor more information, see the <a href=\"http://developer.yahoo.com/yui/connection/#file\">\nConnection Manager documenation on file uploads</a>.\n</p>"
        },
        "callback.failure": {
          "guessedname": "failure",
          "type": "Function",
          "guessedtype": "property",
          "description": "The function to execute upon failure of the \nConnection submission"
        },
        "YAHOO.widget.Dialog.CSS_DIALOG": {
          "final": "",
          "guessedname": "CSS_DIALOG",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the default CSS class used for a Dialog"
        },
        "DEFAULT_CONFIG": {
          "final": "",
          "guessedname": "DEFAULT_CONFIG",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the Dialog's configuration properties"
        },
        "callback": {
          "guessedname": "callback",
          "type": "Object",
          "guessedtype": "property",
          "description": "The internally maintained callback object for use with the \nConnection utility. The format of the callback object is \nsimilar to Connection Manager's callback object and is \nsimply passed through to Connection Manager when the async \nrequest is made."
        },
        "form": {
          "guessedname": "form",
          "default": "null",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-40002357\">HTMLFormElement</a>",
          "guessedtype": "property",
          "description": "Object reference to the Dialog's \n<code>&#60;form&#62;</code> element."
        },
        "callback.success": {
          "guessedname": "success",
          "type": "Function",
          "guessedtype": "property",
          "description": "The function to execute upon success of the \nConnection submission (when the form does not\ncontain a file input element)."
        },
        "callback.argument": {
          "guessedname": "argument",
          "type": "Object",
          "guessedtype": "property",
          "description": "The arbitraty argument or arguments to pass to the Connection \ncallback functions"
        }
      }
    },
    "LogReader": {
      "shortname": "LogReader",
      "methods": {
        "hideSource": {
          "guessedname": "hideSource",
          "guessedtype": "function",
          "description": "Hides log messages associated with given source.",
          "params": [
            {
              "name": "Source",
              "type": "String",
              "description": " name."
            }
          ]
        },
        "_initSources": {
          "guessedname": "_initSources",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes source filters."
        },
        "_onSourceCreate": {
          "private": "",
          "guessedname": "_onSourceCreate",
          "guessedtype": "function",
          "description": "Handles Logger's sourceCreateEvent.",
          "params": [
            {
              "name": "sType",
              "type": "String",
              "description": "  The event."
            },
            {
              "name": "aArgs",
              "type": "Object[]",
              "description": "  Data passed from event firer."
            },
            {
              "name": "oSelf",
              "type": "Object",
              "description": "  The LogReader instance."
            }
          ]
        },
        "hideCategory": {
          "guessedname": "hideCategory",
          "guessedtype": "function",
          "description": "Hides log messages associated with given category.",
          "params": [
            {
              "name": "Category",
              "type": "String",
              "description": " name."
            }
          ]
        },
        "html2Text": {
          "private": "",
          "guessedname": "html2Text",
          "guessedtype": "function",
          "description": "Converts input chars \"<\", \">\", and \"&\" to HTML entities.",
          "params": [
            {
              "name": "sHtml",
              "type": "String",
              "description": "  String to convert."
            }
          ]
        },
        "hide": {
          "guessedname": "hide",
          "guessedtype": "function",
          "description": "Hides UI of LogReader. Logging functionality is not disrupted."
        },
        "pause": {
          "guessedname": "pause",
          "guessedtype": "function",
          "description": "Pauses output of log messages. While paused, log messages are not lost, but\nget saved to a buffer and then output upon resume of LogReader."
        },
        "setTitle": {
          "guessedname": "setTitle",
          "guessedtype": "function",
          "description": "Updates title to given string.",
          "params": [
            {
              "name": "sTitle",
              "type": "String",
              "description": "  New title."
            }
          ]
        },
        "getCheckbox": {
          "guessedname": "getCheckbox",
          "guessedtype": "function",
          "description": "Returns related checkbox element for given filter (i.e., category or source).",
          "params": [
            {
              "name": "Category",
              "type": "String",
              "description": " or source name."
            }
          ],
          "return": {
            "type": "Array",
            "description": "Array of all filter checkboxes."
          }
        },
        "clearConsole": {
          "guessedname": "clearConsole",
          "guessedtype": "function",
          "description": "Does not delete any log messages, but clears all printed log messages from\nthe console. Log messages will be printed out again if user re-filters. The\nstatic method YAHOO.widget.Logger.reset() should be called in order to\nactually delete log messages."
        },
        "_initContainerEl": {
          "guessedname": "_initContainerEl",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the primary container element."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the LogReader instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the LogReader instance."
          }
        },
        "_onClickClearBtn": {
          "private": "",
          "guessedname": "_onClickClearBtn",
          "guessedtype": "function",
          "description": "Handles click events on the clear button.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The click event."
            },
            {
              "name": "oSelf",
              "type": "Object",
              "description": "  The LogReader instance."
            }
          ]
        },
        "getSources": {
          "guessedname": "getSources",
          "guessedtype": "function",
          "description": "Returns array of enabled sources.",
          "return": {
            "type": "Array",
            "description": "Array of enabled sources."
          }
        },
        "expand": {
          "guessedname": "expand",
          "guessedtype": "function",
          "description": "Expands UI of LogReader. Logging functionality is not disrupted."
        },
        "_onNewLog": {
          "private": "",
          "guessedname": "_onNewLog",
          "guessedtype": "function",
          "description": "Handles Logger's newLogEvent.",
          "params": [
            {
              "name": "sType",
              "type": "String",
              "description": "  The event."
            },
            {
              "name": "aArgs",
              "type": "Object[]",
              "description": "  Data passed from event firer."
            },
            {
              "name": "oSelf",
              "type": "Object",
              "description": "  The LogReader instance."
            }
          ]
        },
        "_onCategoryCreate": {
          "private": "",
          "guessedname": "_onCategoryCreate",
          "guessedtype": "function",
          "description": "Handles Logger's categoryCreateEvent.",
          "params": [
            {
              "name": "sType",
              "type": "String",
              "description": "  The event."
            },
            {
              "name": "aArgs",
              "type": "Object[]",
              "description": "  Data passed from event firer."
            },
            {
              "name": "oSelf",
              "type": "Object",
              "description": "  The LogReader instance."
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the UI from the DOM entirely and detaches all event listeners.\nImplementers should note that Logger will still accumulate messages."
        },
        "_initCategories": {
          "guessedname": "_initCategories",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes category filters."
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Adds the UI to the DOM, attaches event listeners, and bootstraps initial\nUI state."
        },
        "_onClickCollapseBtn": {
          "private": "",
          "guessedname": "_onClickCollapseBtn",
          "guessedtype": "function",
          "description": "Handles click events on the collapse button.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The click event."
            },
            {
              "name": "oSelf",
              "type": "Object",
              "description": "  The LogReader instance"
            }
          ]
        },
        "showCategory": {
          "guessedname": "showCategory",
          "guessedtype": "function",
          "description": "Shows log messages associated with given category.",
          "params": [
            {
              "name": "Category",
              "type": "String",
              "description": " name."
            }
          ]
        },
        "_initHeaderEl": {
          "guessedname": "_initHeaderEl",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the header element."
        },
        "getLastTime": {
          "guessedname": "getLastTime",
          "guessedtype": "function",
          "description": "Gets timestamp of the last log.",
          "return": {
            "type": "Date",
            "description": "Timestamp of the last log."
          }
        },
        "_initConsoleEl": {
          "guessedname": "_initConsoleEl",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the console element."
        },
        "_filterLogs": {
          "guessedname": "_filterLogs",
          "private": "",
          "guessedtype": "function",
          "description": "Reprints all log messages in the stack through filters."
        },
        "_initFooterEl": {
          "guessedname": "_initFooterEl",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the footer element."
        },
        "resume": {
          "guessedname": "resume",
          "guessedtype": "function",
          "description": "Resumes output of log messages, including outputting any log messages that\nhave been saved to buffer while paused."
        },
        "collapse": {
          "guessedname": "collapse",
          "guessedtype": "function",
          "description": "Collapses UI of LogReader. Logging functionality is not disrupted."
        },
        "showSource": {
          "guessedname": "showSource",
          "guessedtype": "function",
          "description": "Shows log messages associated with given source.",
          "params": [
            {
              "name": "Source",
              "type": "String",
              "description": " name."
            }
          ]
        },
        "_onReset": {
          "private": "",
          "guessedname": "_onReset",
          "guessedtype": "function",
          "description": "Handles Logger's resetEvent.",
          "params": [
            {
              "name": "sType",
              "type": "String",
              "description": "  The event."
            },
            {
              "name": "aArgs",
              "type": "Object[]",
              "description": "  Data passed from event firer."
            },
            {
              "name": "oSelf",
              "type": "Object",
              "description": "  The LogReader instance."
            }
          ]
        },
        "_onCheckSource": {
          "private": "",
          "guessedname": "_onCheckSource",
          "guessedtype": "function",
          "description": "Handles check events on the category filter checkboxes.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The click event."
            },
            {
              "name": "oSelf",
              "type": "Object",
              "description": "  The LogReader instance."
            }
          ]
        },
        "_printBuffer": {
          "guessedname": "_printBuffer",
          "private": "",
          "guessedtype": "function",
          "description": "Sends buffer of log messages to output and clears buffer."
        },
        "_printToConsole": {
          "private": "",
          "guessedname": "_printToConsole",
          "guessedtype": "function",
          "description": "Cycles through an array of log messages, and outputs each one to the console\nif its category has not been filtered out.",
          "params": [
            {
              "name": "aEntries",
              "type": "Object[]",
              "description": "  Array of LogMsg objects to output to console."
            }
          ]
        },
        "_createSourceCheckbox": {
          "private": "",
          "guessedname": "_createSourceCheckbox",
          "guessedtype": "function",
          "description": "Creates a checkbox in the LogReader footer element to filter by source.",
          "params": [
            {
              "name": "sSource",
              "type": "String",
              "description": "  Source name."
            }
          ]
        },
        "getCategories": {
          "guessedname": "getCategories",
          "guessedtype": "function",
          "description": "Returns array of enabled categories.",
          "return": {
            "type": "String[]",
            "description": "Array of enabled categories."
          }
        },
        "show": {
          "guessedname": "show",
          "guessedtype": "function",
          "description": "Shows UI of LogReader. Logging functionality is not disrupted."
        },
        "_onClickPauseBtn": {
          "private": "",
          "guessedname": "_onClickPauseBtn",
          "guessedtype": "function",
          "description": "Handles click events on the pause button.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The click event."
            },
            {
              "name": "oSelf",
              "type": "Object",
              "description": "  The LogReader instance."
            }
          ]
        },
        "_initDragDrop": {
          "guessedname": "_initDragDrop",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes Drag and Drop on the header element."
        },
        "_createCategoryCheckbox": {
          "private": "",
          "guessedname": "_createCategoryCheckbox",
          "guessedtype": "function",
          "description": "Creates the UI for a category filter in the LogReader footer element.",
          "params": [
            {
              "name": "sCategory",
              "type": "String",
              "description": "  Category name."
            }
          ]
        },
        "_onCheckCategory": {
          "private": "",
          "guessedname": "_onCheckCategory",
          "guessedtype": "function",
          "description": "Handles check events on the category filter checkboxes.",
          "params": [
            {
              "name": "v",
              "type": "HTMLEvent",
              "description": "  The click event."
            },
            {
              "name": "oSelf",
              "type": "Object",
              "description": "  The LogReader instance."
            }
          ]
        },
        "_init": {
          "guessedname": "_init",
          "guessedtype": "function",
          "protected": "",
          "description": "Initializes the instance's message buffer, start time, etc",
          "params": [
            {
              "name": "container",
              "type": "String|HTMLElement",
              "description": "  (optional) the render target"
            },
            {
              "name": "config",
              "type": "Object",
              "description": "  (optional) instance configuration"
            }
          ]
        }
      },
      "name": "LogReader",
      "module": "logger",
      "namespace": "",
      "constructors": [
        {
          "description": "The LogReader class provides UI to read messages logged to YAHOO.widget.Logger.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement",
              "description": "  (optional) DOM element reference of an existing DIV."
            },
            {
              "name": "elContainer",
              "type": "String",
              "description": "  (optional) String ID of an existing DIV."
            },
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (optional) Object literal of configuration params."
            }
          ]
        }
      ],
      "description": "The LogReader class provides UI to read messages logged to YAHOO.widget.Logger.",
      "file": "LogReader.js",
      "properties": {
        "left": {
          "guessedname": "left",
          "type": "String",
          "guessedtype": "property",
          "description": "Public member to access CSS left position of the LogReader container."
        },
        "autoRender": {
          "default": "true",
          "type": "{Boolean}",
          "description": "Render the LogReader immediately upon instantiation.  If set to false,\nyou must call myLogReader.render() to generate the UI."
        },
        "_lastTime": {
          "private": "",
          "guessedname": "_lastTime",
          "type": "Date",
          "guessedtype": "property",
          "description": "Date of last output log message."
        },
        "_buffer": {
          "private": "",
          "guessedname": "_buffer",
          "type": "Object[]",
          "guessedtype": "property",
          "description": "Buffer of log message objects for batch output."
        },
        "entryFormat": {
          "guessedname": "entryFormat",
          "default": "null",
          "type": "String",
          "guessedtype": "property",
          "description": "Custom output format for log messages.  Defaults to null, which falls\nback to verboseOutput param deciding between LogReader.VERBOSE_TEMPLATE\nand LogReader.BASIC_TEMPLATE.  Use bracketed place holders to mark where\nmessage info should go.  Available place holder names include:\n<ul>\n<li>category</li>\n<li>label</li>\n<li>sourceAndDetail</li>\n<li>message</li>\n<li>localTime</li>\n<li>elapsedTime</li>\n<li>totalTime</li>\n</ul>"
        },
        "_categoryFilters": {
          "private": "",
          "guessedname": "_categoryFilters",
          "type": "String[]",
          "guessedtype": "property",
          "description": "Array of filters for log message categories."
        },
        "verboseOutput": {
          "guessedname": "verboseOutput",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not output is verbose (more readable). Setting to true will make\noutput more compact (less readable)."
        },
        "_filterCheckboxes": {
          "private": "",
          "guessedname": "_filterCheckboxes",
          "type": "Object",
          "guessedtype": "property",
          "description": "Hash of filters and their related checkbox elements."
        },
        "_btnCollapse": {
          "private": "",
          "guessedname": "_btnCollapse",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "LogReader collapse button element."
        },
        "_timeout": {
          "private": "",
          "guessedname": "_timeout",
          "type": "Number",
          "guessedtype": "property",
          "description": "Batched output timeout ID."
        },
        "_elFt": {
          "private": "",
          "guessedname": "_elFt",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "LogReader footer element."
        },
        "bottom": {
          "guessedname": "bottom",
          "type": "String",
          "guessedtype": "property",
          "description": "Public member to access CSS bottom position of the LogReader container."
        },
        "outputBuffer": {
          "guessedname": "outputBuffer",
          "default": "100",
          "type": "Number",
          "guessedtype": "property",
          "description": "Output timeout buffer in milliseconds."
        },
        "_sourceFilters": {
          "private": "",
          "guessedname": "_sourceFilters",
          "type": "String[]",
          "guessedtype": "property",
          "description": "Array of filters for log message sources."
        },
        "VERBOSE_TEMPLATE": {
          "guessedname": "VERBOSE_TEMPLATE",
          "default": "\"&lt;p>&lt;span class='{category}'>{label}&lt;/span>{totalTime}ms (+{elapsedTime}) {localTime}:&lt;/p>&lt;p>{sourceAndDetail}&lt;/p>&lt;p>{message}&lt;/p>\"",
          "static": "",
          "guessedtype": "property",
          "description": "Template used for innerHTML of verbose entry output."
        },
        "_elCategoryFilters": {
          "private": "",
          "guessedname": "_elCategoryFilters",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Container element for LogReader category filter checkboxes."
        },
        "BASIC_TEMPLATE": {
          "guessedname": "BASIC_TEMPLATE",
          "default": "\"&lt;p>&lt;span class='{category}'>{label}&lt;/span>{totalTime}ms (+{elapsedTime}) {localTime}: {sourceAndDetail}: {message}&lt;/p>\"",
          "static": "",
          "guessedtype": "property",
          "description": "Template used for innerHTML of compact entry output."
        },
        "isPaused": {
          "guessedname": "isPaused",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True when LogReader is in a paused state, false otherwise."
        },
        "draggable": {
          "guessedname": "draggable",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Enables draggable LogReader if DragDrop Utility is present."
        },
        "_elSourceFilters": {
          "private": "",
          "guessedname": "_elSourceFilters",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Container element for LogReader source filter checkboxes."
        },
        "isCollapsed": {
          "guessedname": "isCollapsed",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True when LogReader is in a collapsed state, false otherwise."
        },
        "_title": {
          "private": "",
          "guessedname": "_title",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "LogReader title header element."
        },
        "_elContainer": {
          "private": "",
          "guessedname": "_elContainer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "LogReader container element."
        },
        "_btnPause": {
          "private": "",
          "guessedname": "_btnPause",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "LogReader pause button element."
        },
        "thresholdMax": {
          "guessedname": "thresholdMax",
          "default": "500",
          "type": "Number",
          "guessedtype": "property",
          "description": "Maximum number of messages a LogReader console will display."
        },
        "_consoleMsgCount": {
          "guessedname": "_consoleMsgCount",
          "private": "",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number of log messages output to console."
        },
        "_elHd": {
          "private": "",
          "guessedname": "_elHd",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "LogReader header element."
        },
        "logReaderEnabled": {
          "guessedname": "logReaderEnabled",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not LogReader is enabled to output log messages."
        },
        "_memberName": {
          "guessedname": "_index",
          "private": "",
          "default": "0",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class member to index multiple LogReader instances."
        },
        "_elCollapse": {
          "private": "",
          "guessedname": "_elCollapse",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "LogReader collapse element."
        },
        "fontSize": {
          "guessedname": "fontSize",
          "type": "String",
          "guessedtype": "property",
          "description": "Public member to access CSS font size of the LogReader container."
        },
        "_elBtns": {
          "private": "",
          "guessedname": "_elBtns",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "LogReader buttons container element."
        },
        "height": {
          "guessedname": "height",
          "type": "String",
          "guessedtype": "property",
          "description": "Public member to access CSS height of the LogReader container."
        },
        "right": {
          "guessedname": "right",
          "type": "String",
          "guessedtype": "property",
          "description": "Public member to access CSS right position of the LogReader container."
        },
        "_btnClear": {
          "private": "",
          "guessedname": "_btnClear",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Clear button element."
        },
        "ENTRY_TEMPLATE": {
          "guessedname": "ENTRY_TEMPLATE",
          "default": "<code>pre</code> element with class yui-log-entry",
          "static": "",
          "type": "{HTMLElement}",
          "guessedtype": "function",
          "description": "Node template for the log entries"
        },
        "thresholdMin": {
          "guessedname": "thresholdMin",
          "default": "100",
          "type": "Number",
          "guessedtype": "property",
          "description": "When a LogReader console reaches its thresholdMax, it will clear out messages\nand print out the latest thresholdMin number of messages."
        },
        "_sName": {
          "private": "",
          "guessedname": "_sName",
          "type": "String",
          "guessedtype": "property",
          "description": "Name of LogReader instance."
        },
        "newestOnTop": {
          "guessedname": "newestOnTop",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not newest message is printed on top."
        },
        "_elConsole": {
          "private": "",
          "guessedname": "_elConsole",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "LogReader console element."
        },
        "_elDefaultContainer": {
          "private": "",
          "type": "HTMLElement",
          "description": "A class member shared by all LogReaders if a container needs to be\ncreated during instantiation. Will be null if a container element never needs to\nbe created on the fly, such as when the implementer passes in their own element."
        },
        "footerEnabled": {
          "guessedname": "footerEnabled",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the footer UI is enabled for the LogReader."
        },
        "width": {
          "guessedname": "width",
          "type": "String",
          "guessedtype": "property",
          "description": "Public member to access CSS width of the LogReader container."
        },
        "top": {
          "guessedname": "top",
          "type": "String",
          "guessedtype": "property",
          "description": "Public member to access CSS top position of the LogReader container."
        }
      }
    },
    "YAHOO.util.Event": {
      "shortname": "Event",
      "methods": {
        "preventDefault": {
          "guessedname": "preventDefault",
          "static": "",
          "guessedtype": "function",
          "description": "Prevents the default behavior of the event",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            }
          ]
        },
        "_addListener": {
          "guessedname": "_addListener",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."
            },
            {
              "name": "sType",
              "type": "String",
              "description": "     The type of event to append"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "        The method the event invokes"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "    An arbitrary object that will be \npassed as a parameter to the handler"
            },
            {
              "name": "overrideContext",
              "type": "Boolean|object",
              "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."
            },
            {
              "name": "capture",
              "type": "boolen",
              "description": " capture or bubble phase"
            }
          ],
          "description": "Appends an event handler",
          "return": {
            "type": "Boolean",
            "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."
          }
        },
        "getEl": {
          "guessedname": "getEl",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "deprecated": "Elements are not cached any longer",
          "description": "We cache elements bound by id because when the unload event \nfires, we can no longer use document.getElementById"
        },
        "removeDelegate": {
          "guessedname": "removeDelegate",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "container",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and/or elements to remove\nthe listener from."
            },
            {
              "name": "type",
              "type": "String",
              "description": " The type of event to remove."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The method the event invokes.  If fn is\nundefined, then all event listeners for the type of event are \nremoved."
            }
          ],
          "description": "Removes a delegated event listener.",
          "return": {
            "type": "boolean",
            "description": "Returns true if the unbind was successful, false \notherwise."
          }
        },
        "_getScrollLeft": {
          "private": "",
          "guessedname": "_getScrollLeft",
          "static": "",
          "guessedtype": "function",
          "description": "Returns scrollLeft"
        },
        "clearCache": {
          "guessedname": "clearCache",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "deprecated": "Elements are not cached any longer",
          "description": "Clears the element cache"
        },
        "stopPropagation": {
          "guessedname": "stopPropagation",
          "static": "",
          "guessedtype": "function",
          "description": "Stops event propagation",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            }
          ]
        },
        "addBlurListener": {
          "guessedname": "addBlurListener",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "        The method the event invokes"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "    An arbitrary object that will be \npassed as a parameter to the handler"
            },
            {
              "name": "overrideContext",
              "type": "Boolean|object",
              "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."
            }
          ],
          "deprecated": "use YAHOO.util.Event.on and specify \"focusout\" as the event type.",
          "description": "Attaches a focusout event listener to the specified element for \nthe purpose of listening for the blur event on the element's \ndescendants.",
          "return": {
            "type": "Boolean",
            "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."
          }
        },
        "getListeners": {
          "guessedname": "getListeners",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement|string",
              "description": "  the element or element id to inspect"
            },
            {
              "name": "sType",
              "type": "string",
              "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"
            }
          ],
          "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.",
          "return": {
            "type": "Object",
            "description": "the listener. Contains the following fields:\n&nbsp;&nbsp;type:   (string)   the type of event\n&nbsp;&nbsp;fn:     (function) the callback supplied to addListener\n&nbsp;&nbsp;obj:    (object)   the custom object supplied to addListener\n&nbsp;&nbsp;adjust: (boolean|object)  whether or not to adjust the default context\n&nbsp;&nbsp;scope: (boolean)  the derived context based on the adjust parameter\n&nbsp;&nbsp;index:  (int)      its position in the Event util listener cache"
          }
        },
        "removeBlurListener": {
          "guessedname": "removeBlurListener",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and/or elements to remove\nthe listener from."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."
            }
          ],
          "deprecated": "use YAHOO.util.Event.removeListener and specify \"focusout\" as the event type.",
          "description": "Removes a focusout event listener to the specified element for \nthe purpose of listening for the blur event on the element's \ndescendants.",
          "return": {
            "type": "boolean",
            "description": "true if the unbind was successful, false \notherwise."
          }
        },
        "addFocusListener": {
          "guessedname": "addFocusListener",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "        The method the event invokes"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "    An arbitrary object that will be \npassed as a parameter to the handler"
            },
            {
              "name": "overrideContext",
              "type": "Boolean|object",
              "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."
            }
          ],
          "deprecated": "use YAHOO.util.Event.on and specify \"focusin\" as the event type.",
          "description": "Attaches a focusin event listener to the specified element for \nthe purpose of listening for the focus event on the element's \ndescendants.",
          "return": {
            "type": "Boolean",
            "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."
          }
        },
        "stopEvent": {
          "guessedname": "stopEvent",
          "static": "",
          "guessedtype": "function",
          "description": "Convenience method for stopPropagation + preventDefault",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            }
          ]
        },
        "getTime": {
          "guessedname": "getTime",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            }
          ],
          "description": "Returns the time of the event.  If the time is not included, the\nevent is modified using the current time.",
          "return": {
            "type": "Date",
            "description": "the time of the event"
          }
        },
        "_simpleRemove": {
          "guessedname": "_simpleRemove",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "      the element to bind the handler to"
            },
            {
              "name": "sType",
              "type": "string",
              "description": "   the type of event handler"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "      the callback to invoke"
            },
            {
              "name": "capture",
              "type": "boolen",
              "description": " capture or bubble phase"
            }
          ],
          "description": "Basic remove listener"
        },
        "getRelatedTarget": {
          "guessedname": "getRelatedTarget",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            }
          ],
          "description": "Returns the event's related target",
          "return": {
            "type": "HTMLElement",
            "description": "the event's relatedTarget"
          }
        },
        "_ready": {
          "private": "",
          "guessedname": "_ready",
          "static": "",
          "guessedtype": "function",
          "description": "Fires the DOMReady event listeners the first time the document is\nusable."
        },
        "getEvent": {
          "guessedname": "getEvent",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the event parameter from the handler"
            },
            {
              "name": "boundEl",
              "type": "HTMLElement",
              "description": " the element the listener is attached to"
            }
          ],
          "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.",
          "return": {
            "type": "Event",
            "description": "the event"
          }
        },
        "onDOMReady": {
          "static": "",
          "description": "Executes the supplied callback when the DOM is first usable.  This\nwill execute immediately if called after the DOMReady event has\nfired.   @todo the DOMContentReady event does not fire when the\nscript is dynamically injected into the page.  This means the\nDOMReady custom event will never fire in FireFox or Opera when the\nlibrary is injected.  It _will_ fire in Safari, and the IE \nimplementation would allow for us to fire it if the defered script\nis not available.  We want this to behave the same in all browsers.\nIs there a way to identify when the script has been injected \ninstead of included inline?  Is there a way to know whether the \nwindow onload event has fired without having had a listener attached \nto it when it did so?\n<p>The callback is a CustomEvent, so the signature is:</p>\n<p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;</p>\n<p>For DOMReady events, there are no fire argments, so the\nsignature is:</p>\n<p>\"DOMReady\", [], obj</p>",
          "params": [
            {
              "name": "fn",
              "type": "function",
              "description": " what to execute when the element is found."
            },
            {
              "name": "obj",
              "type": "object",
              "description": " an optional object to be passed back as\na parameter to fn."
            },
            {
              "name": "overrideContext",
              "type": "boolean|object",
              "description": " If set to true, fn will execute\nin the context of obj, if set to an object it\nwill execute in the context of that object"
            }
          ]
        },
        "removeListener": {
          "guessedname": "removeListener",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and/or elements to remove\nthe listener from."
            },
            {
              "name": "sType",
              "type": "String",
              "description": " the type of event to remove."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."
            }
          ],
          "description": "Removes an event listener",
          "return": {
            "type": "boolean",
            "description": "true if the unbind was successful, false \notherwise."
          }
        },
        "_createMouseDelegate": {
          "guessedname": "_createMouseDelegate",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "        The method (event listener) to call"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "    An arbitrary object that will be \npassed as a parameter to the listener"
            },
            {
              "name": "overrideContext",
              "type": "Boolean|object",
              "description": "  If true, the value of the \nobj parameter becomes the execution context\nof the listener. If an object, this object\nbecomes the execution context."
            }
          ],
          "description": "Creates a delegate function used to call mouseover and mouseleave \nevent listeners specified via the \n<code>YAHOO.util.Event.addListener</code> \nor <code>YAHOO.util.Event.on</code> method.",
          "return": {
            "type": "Function",
            "description": "Function that will call the event listener \nspecified by either the <code>YAHOO.util.Event.addListener</code> \nor <code>YAHOO.util.Event.on</code> method."
          }
        },
        "_createDelegate": {
          "guessedname": "_createDelegate",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "        The method (event listener) to call."
            },
            {
              "name": "filter",
              "type": "Function|string",
              "description": " Function or CSS selector used to \ndetermine for what element(s) the event listener should be called."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "\tAn arbitrary object that will be \npassed as a parameter to the listener."
            },
            {
              "name": "overrideContext",
              "type": "Boolean|object",
              "description": "  If true, the value of the \nobj parameter becomes the execution context\nof the listener. If an object, this object\nbecomes the execution context."
            }
          ],
          "description": "Creates a delegate function used to call event listeners specified \nvia the <code>YAHOO.util.Event.delegate</code> method.",
          "return": {
            "type": "Function",
            "description": "Function that will call the event listener \nspecified by the <code>YAHOO.util.Event.delegate</code> method."
          }
        },
        "regCE": {
          "guessedname": "regCE",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "deprecated": "still here for backwards compatibility",
          "description": "Used by old versions of CustomEvent, restored for backwards\ncompatibility"
        },
        "onFocus": {
          "guessedname": "onFocus",
          "static": "",
          "guessedtype": "property",
          "see": "addFocusListener",
          "deprecated": "use YAHOO.util.Event.on and specify \"focusin\" as the event type.",
          "description": "YAHOO.util.Event.onFocus is an alias for addFocusListener"
        },
        "getXY": {
          "guessedname": "getXY",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            }
          ],
          "description": "Returns the pageX and pageY properties as an indexed array.",
          "return": {
            "type": "[x, y]",
            "description": "the pageX and pageY properties of the event"
          }
        },
        "_load": {
          "private": "",
          "guessedname": "_load",
          "static": "",
          "guessedtype": "function",
          "description": "hook up any deferred listeners"
        },
        "getCharCode": {
          "guessedname": "getCharCode",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            }
          ],
          "description": "Returns the charcode for an event",
          "return": {
            "type": "int",
            "description": "the event's charCode"
          }
        },
        "generateId": {
          "guessedname": "generateId",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "",
              "description": " the element to create the id for"
            }
          ],
          "description": "Generates an unique ID for the element if it does not already \nhave one.",
          "return": {
            "type": "string",
            "description": "the resulting id of the element"
          }
        },
        "_getScroll": {
          "private": "",
          "guessedname": "_getScroll",
          "static": "",
          "guessedtype": "function",
          "description": "Returns the scrollTop and scrollLeft.  Used to calculate the \npageX and pageY in Internet Explorer"
        },
        "onBlur": {
          "guessedname": "onBlur",
          "static": "",
          "guessedtype": "property",
          "see": "addBlurListener",
          "deprecated": "use YAHOO.util.Event.on and specify \"focusout\" as the event type.",
          "description": "YAHOO.util.Event.onBlur is an alias for addBlurListener"
        },
        "delegate": {
          "guessedname": "delegate",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "container",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."
            },
            {
              "name": "type",
              "type": "String",
              "description": "     The type of event listener to append"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "        The method the event invokes"
            },
            {
              "name": "filter",
              "type": "Function|string",
              "description": " Function or CSS selector used to \ndetermine for what element(s) the event listener should be called. \nWhen a function is specified, the function should return an \nHTML element.  Using a CSS Selector requires the inclusion of the \nCSS Selector Utility."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "    An arbitrary object that will be \npassed as a parameter to the listener"
            },
            {
              "name": "overrideContext",
              "type": "Boolean|object",
              "description": "  If true, the value of the obj parameter becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."
            }
          ],
          "description": "Appends a delegated event listener.  Delegated event listeners \nreceive three arguments by default: the DOM event, the element  \nspecified by the filtering function or CSS selector, and the \ncontainer element (the element to which the event listener is \nbound).  (Note: Using the delegate method requires the event-delegate \nmodule.  Using CSS selectors as the filtering criteria for delegated \nevent listeners requires inclusion of the Selector Utility.)",
          "return": {
            "type": "Boolean",
            "description": "Returns true if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."
          }
        },
        "_getCacheIndex": {
          "private": "",
          "guessedname": "_getCacheIndex",
          "static": "",
          "guessedtype": "function",
          "description": "Locating the saved event handler data by function ref"
        },
        "resolveTextNode": {
          "guessedname": "resolveTextNode",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " node to resolve"
            }
          ],
          "description": "In some cases, some browsers will return a text node inside\nthe actual element that was targeted.  This normalizes the\nreturn value for getTarget and getRelatedTarget.",
          "return": {
            "type": "HTMLElement",
            "description": "the normized node"
          }
        },
        "_simpleAdd": {
          "guessedname": "_simpleAdd",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "      the element to bind the handler to"
            },
            {
              "name": "sType",
              "type": "string",
              "description": "   the type of event handler"
            },
            {
              "name": "fn",
              "type": "function",
              "description": "      the callback to invoke"
            },
            {
              "name": "capture",
              "type": "boolen",
              "description": " capture or bubble phase"
            }
          ],
          "description": "Adds a DOM event directly without the caching, cleanup, context adj, etc"
        },
        "removeFocusListener": {
          "guessedname": "removeFocusListener",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and/or elements to remove\nthe listener from."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."
            }
          ],
          "deprecated": "use YAHOO.util.Event.removeListener and specify \"focusin\" as the event type.",
          "description": "Removes a focusin event listener to the specified element for \nthe purpose of listening for the focus event on the element's \ndescendants.",
          "return": {
            "type": "boolean",
            "description": "true if the unbind was successful, false \notherwise."
          }
        },
        "getPageX": {
          "guessedname": "getPageX",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            }
          ],
          "description": "Returns the event's pageX",
          "return": {
            "type": "int",
            "description": "the event's pageX"
          }
        },
        "purgeElement": {
          "guessedname": "purgeElement",
          "static": "",
          "guessedtype": "function",
          "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " the element to purge"
            },
            {
              "name": "recurse",
              "type": "boolean",
              "description": " recursively purge this element's children\nas well.  Use with caution."
            },
            {
              "name": "sType",
              "type": "string",
              "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"
            }
          ]
        },
        "_getType": {
          "private": "",
          "guessedname": "_getType",
          "guessedtype": "function",
          "description": "Checks to see if the type requested is a special type \n(as defined by the _specialTypes hash), and (if so) returns \nthe special type name.",
          "params": [
            {
              "name": "sType",
              "type": "String",
              "description": "     The type to look up"
            }
          ]
        },
        "getPageY": {
          "guessedname": "getPageY",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            }
          ],
          "description": "Returns the event's pageY",
          "return": {
            "type": "int",
            "description": "the event's pageY"
          }
        },
        "on": {
          "guessedname": "on",
          "static": "",
          "guessedtype": "property",
          "description": "YAHOO.util.Event.on is an alias for addListener",
          "see": "addListener"
        },
        "startInterval": {
          "guessedname": "startInterval",
          "private": "",
          "static": "",
          "guessedtype": "function"
        },
        "onContentReady": {
          "guessedname": "onContentReady",
          "static": "",
          "guessedtype": "function",
          "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": " the id of the element to look for."
            },
            {
              "name": "fn",
              "type": "function",
              "description": " what to execute when the element is ready."
            },
            {
              "name": "obj",
              "type": "object",
              "description": " an optional object to be passed back as\na parameter to fn."
            },
            {
              "name": "overrideContext",
              "type": "boolean|object",
              "description": " If set to true, fn will execute\nin the context of obj.  If an object, fn will\nexectute in the context of that object"
            }
          ]
        },
        "_tryPreloadAttach": {
          "private": "",
          "guessedname": "_tryPreloadAttach",
          "static": "",
          "guessedtype": "function",
          "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable"
        },
        "getTarget": {
          "guessedname": "getTarget",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " the event"
            },
            {
              "name": "resolveTextNode",
              "type": "boolean",
              "description": " when set to true the target's\nparent will be returned if the target is a \ntext node.  @deprecated, the text node is\nnow resolved automatically"
            }
          ],
          "description": "Returns the event's target element.  Safari sometimes provides\na text node, and this is automatically resolved to the text\nnode's parent so that it behaves like other browsers.",
          "return": {
            "type": "HTMLElement",
            "description": "the event's target"
          }
        },
        "onAvailable": {
          "guessedname": "onAvailable",
          "static": "",
          "guessedtype": "function",
          "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>",
          "params": [
            {
              "name": "id",
              "type": "string||string[]",
              "description": " the id of the element, or an array\nof ids to look for."
            },
            {
              "name": "fn",
              "type": "function",
              "description": " what to execute when the element is found."
            },
            {
              "name": "obj",
              "type": "object",
              "description": " an optional object to be passed back as\na parameter to fn."
            },
            {
              "name": "overrideContext",
              "type": "boolean|object",
              "description": " If set to true, fn will execute\nin the context of obj, if set to an object it\nwill execute in the context of that object"
            },
            {
              "name": "checkContent",
              "type": "boolean",
              "description": "  check child node readiness (onContentReady)"
            }
          ]
        },
        "_getScrollTop": {
          "private": "",
          "guessedname": "_getScrollTop",
          "static": "",
          "guessedtype": "function",
          "description": "Returns scrollTop"
        },
        "_unload": {
          "private": "",
          "guessedname": "_unload",
          "static": "",
          "guessedtype": "function",
          "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event."
        },
        "addListener": {
          "guessedname": "addListener",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "String|HTMLElement|Array|NodeList",
              "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."
            },
            {
              "name": "sType",
              "type": "String",
              "description": "     The type of event to append"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "        The method the event invokes"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "    An arbitrary object that will be \npassed as a parameter to the handler"
            },
            {
              "name": "overrideContext",
              "type": "Boolean|object",
              "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."
            }
          ],
          "description": "Appends an event handler",
          "return": {
            "type": "Boolean",
            "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."
          }
        },
        "_isValidCollection": {
          "guessedname": "_isValidCollection",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " the object to test"
            }
          ],
          "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.",
          "return": {
            "type": "boolean",
            "description": "true if the object is array-like and populated"
          }
        }
      },
      "name": "YAHOO.util.Event",
      "guessedname": "Event",
      "module": "event",
      "namespace": "YAHOO.util",
      "static": "",
      "events": {
        "DOMReadyEvent": {
          "guessedname": "DOMReadyEvent",
          "guessedtype": "property",
          "description": "Custom event the fires when the dom is initially usable"
        }
      },
      "guessedtype": "function",
      "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event.",
      "file": "Event.js",
      "properties": {
        "unloadListeners": {
          "guessedname": "unloadListeners",
          "private": "",
          "static": "",
          "type": "array",
          "guessedtype": "property",
          "description": "User-defined unload function that will be fired before all events\nare detached"
        },
        "POLL_RETRYS": {
          "final": "",
          "guessedname": "POLL_RETRYS",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 500@amp;40 ms, so it will poll\nfor 20 seconds or until all outstanding handlers are bound\n(whichever comes first)."
        },
        "OBJ": {
          "final": "",
          "guessedname": "UNLOAD_OBJ",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Object passed in by the user that will be returned as a \nparameter to the callback, int constant.  Specific to\nunload listeners"
        },
        "OVERRIDE": {
          "final": "",
          "guessedname": "OVERRIDE",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The original context parameter passed into addListener"
        },
        "isSafari": {
          "guessedname": "isSafari",
          "private": "",
          "static": "",
          "guessedtype": "property",
          "deprecated": "use YAHOO.env.ua.webkit",
          "description": "Safari detection"
        },
        "webkit": {
          "guessedname": "webkit",
          "private": "",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "deprecated": "use YAHOO.env.ua.webkit",
          "description": "webkit version"
        },
        "DOMReady": {
          "guessedname": "DOMReady",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "True when the document is initially usable"
        },
        "onAvailStack": {
          "private": "",
          "guessedname": "onAvailStack",
          "static": "",
          "guessedtype": "property",
          "description": "onAvailable listeners"
        },
        "_interval": {
          "private": "",
          "guessedname": "_interval",
          "static": "",
          "guessedtype": "property",
          "description": "poll handle"
        },
        "TYPE": {
          "final": "",
          "guessedname": "TYPE",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Type of event, int constant"
        },
        "retryCount": {
          "private": "",
          "guessedname": "retryCount",
          "static": "",
          "guessedtype": "property",
          "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load."
        },
        "EL": {
          "final": "",
          "guessedname": "EL",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Element to bind, int constant"
        },
        "isIE": {
          "guessedname": "isIE",
          "private": "",
          "static": "",
          "guessedtype": "property",
          "deprecated": "use YAHOO.env.ua.ie",
          "description": "IE detection"
        },
        "ADJ_SCOPE": {
          "final": "",
          "guessedname": "ADJ_SCOPE",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Adjusted context, either the element we are registering the event\non or the custom object passed in by the listener, int constant"
        },
        "counter": {
          "private": "",
          "guessedname": "counter",
          "static": "",
          "guessedtype": "property",
          "description": "Counter for auto id generation"
        },
        "_dri": {
          "private": "",
          "guessedname": "_dri",
          "static": "",
          "guessedtype": "property",
          "description": "document readystate poll handle"
        },
        "elCache\nDOM element cache": {
          "private": "",
          "guessedname": "elCache",
          "static": "",
          "guessedtype": "property",
          "deprecated": "Elements are not cached due to issues that arise when\nelements are removed and re-added"
        },
        "FN": {
          "final": "",
          "guessedname": "FN",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Function to execute, int constant"
        },
        "CAPTURE": {
          "final": "",
          "guessedname": "CAPTURE",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The original capture parameter passed into addListener"
        },
        "lastError": {
          "guessedname": "lastError",
          "static": "",
          "type": "Error",
          "guessedtype": "property",
          "description": "addListener/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set"
        },
        "POLL_INTERVAL": {
          "final": "",
          "guessedname": "POLL_INTERVAL",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The poll interval in milliseconds"
        },
        "webkitKeymap": {
          "final": "",
          "guessedname": "webkitKeymap",
          "private": "",
          "static": "",
          "type": "{int: int}",
          "guessedtype": "property",
          "description": "Normalized keycodes for webkit/safari"
        },
        "loadComplete": {
          "guessedname": "loadComplete",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "True after the onload event has fired"
        },
        "_specialTypes": {
          "private": "",
          "guessedname": "_specialTypes",
          "static": "",
          "guessedtype": "property",
          "description": "Map of special event types"
        },
        "listeners": {
          "guessedname": "listeners",
          "private": "",
          "static": "",
          "type": "array",
          "guessedtype": "property",
          "description": "Cache of wrapped listeners"
        },
        "WFN": {
          "final": "",
          "guessedname": "WFN",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Function wrapped for context correction and cleanup, int constant"
        },
        "throwErrors": {
          "guessedname": "throwErrors",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Errors thrown by subscribers of custom events are caught\nand the error message is written to the debug console.  If\nthis property is set to true, it will also re-throw the\nerror."
        }
      }
    },
    "YAHOO.util.Connect": {
      "shortname": "Connect",
      "methods": {
        "resetDefaultHeaders": {
          "public": "",
          "guessedname": "resetDefaultHeaders",
          "static": "",
          "guessedtype": "function",
          "description": "Resets the default HTTP headers object",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "createExceptionObject": {
          "guessedname": "createExceptionObject",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "tId",
              "type": "int",
              "description": " The Transaction Id"
            },
            {
              "name": "callbackArg",
              "type": "callbackArg",
              "description": " The user-defined argument or arguments to be passed to the callback"
            },
            {
              "name": "isAbort",
              "type": "boolean",
              "description": " Determines if the exception case is caused by a transaction abort"
            }
          ],
          "description": "If a transaction cannot be completed due to dropped or closed connections,\nthere may be not be enough information to build a full response object.\nThe failure callback will be fired and this specific condition can be identified\nby a status property value of 0.\nIf an abort was successful, the status property will report a value of -1.",
          "return": {
            "type": "object",
            "description": ""
          }
        },
        "handleTransactionResponse": {
          "guessedname": "handleTransactionResponse",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " The connection object"
            },
            {
              "name": "callback",
              "type": "object",
              "description": " The user-defined callback object"
            },
            {
              "name": "isAbort",
              "type": "boolean",
              "description": " Determines if the transaction was terminated via abort()."
            }
          ],
          "description": "This method attempts to interpret the server response and\ndetermine whether the transaction was successful, or if an error or\nexception was encountered.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "handleReadyState": {
          "guessedname": "handleReadyState",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " The connection object"
            },
            {
              "name": "callback",
              "type": "callback",
              "description": " The user-defined callback object"
            }
          ],
          "description": "This method serves as a timer that polls the XHR object's readyState\nproperty during a transaction, instead of binding a callback to the\nonreadystatechange event.  Upon readyState 4, handleTransactionResponse\nwill process the response, and the timer will be cleared.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "setDefaultPostHeader": {
          "public": "",
          "guessedname": "setDefaultPostHeader",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "b",
              "type": "boolean",
              "description": " Set and use default header - true or false ."
            }
          ],
          "description": "Member to override the default POST header.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "setHeader": {
          "guessedname": "setHeader",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " The connection object for the transaction."
            }
          ],
          "description": "Accessor that sets the HTTP headers for each transaction.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "isCallInProgress": {
          "public": "",
          "guessedname": "isCallInProgress",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " The connection object returned by asyncRequest"
            }
          ],
          "description": "Determines if the transaction is still being processed.",
          "return": {
            "type": "boolean",
            "description": ""
          }
        },
        "setProgId": {
          "public": "",
          "guessedname": "setProgId",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": " The ActiveX id to be added to initialize the XHR object."
            }
          ],
          "description": "Member to add an ActiveX id to the existing xml_progid array.\nIn the event(unlikely) a new ActiveX id is introduced, it can be added\nwithout internal code modifications.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "initHeader": {
          "public": "",
          "guessedname": "initHeader",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "label",
              "type": "string",
              "description": " The HTTP header label"
            },
            {
              "name": "value",
              "type": "string",
              "description": " The HTTP header value"
            },
            {
              "name": "isDefault",
              "type": "string",
              "description": " Determines if the specific header is a default header\nautomatically sent with each transaction."
            }
          ],
          "description": "Method that initializes the custom HTTP headers for the each transaction.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "setDefaultXhrHeader": {
          "public": "",
          "guessedname": "setDefaultXhrHeader",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "b",
              "type": "boolean",
              "description": " Set and use default header - true or false ."
            }
          ],
          "description": "Member to override the default transaction header..",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "releaseObject": {
          "guessedname": "releaseObject",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " The connection object"
            }
          ],
          "description": "Dereference the XHR instance and the connection object after the transaction is completed.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "initCustomEvents": {
          "guessedname": "initCustomEvents",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " The connection object"
            },
            {
              "name": "callback",
              "type": "callback",
              "description": " The user-defined callback object"
            }
          ],
          "description": "This method creates and subscribes custom events,\nspecific to each transaction",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "createResponseObject": {
          "guessedname": "createResponseObject",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " The connection object"
            },
            {
              "name": "callbackArg",
              "type": "callbackArg",
              "description": " The user-defined argument or arguments to be passed to the callback"
            }
          ],
          "description": "This method evaluates the server response, creates and returns the results via\nits properties.  Success and failure cases will differ in the response\nobject's property values.",
          "return": {
            "type": "object",
            "description": ""
          }
        },
        "setPollingInterval": {
          "public": "",
          "guessedname": "setPollingInterval",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "i",
              "type": "int",
              "description": " The polling interval in milliseconds."
            }
          ],
          "description": "Member to modify the default polling interval.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "createXhrObject": {
          "guessedname": "createXhrObject",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "transactionId",
              "type": "int",
              "description": " Property containing the transaction id for this transaction."
            }
          ],
          "description": "Instantiates a XMLHttpRequest object and returns an object with two properties:\nthe XMLHttpRequest instance and the transaction id.",
          "return": {
            "type": "",
            "description": "object"
          }
        },
        "abort": {
          "public": "",
          "guessedname": "abort",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": " The connection object returned by asyncRequest."
            },
            {
              "name": "callback",
              "type": "object",
              "description": "  User-defined callback object."
            },
            {
              "name": "isTimeout",
              "type": "string",
              "description": " boolean to indicate if abort resulted from a callback timeout."
            }
          ],
          "description": "Method to terminate a transaction, if it has not reached readyState 4.",
          "return": {
            "type": "boolean",
            "description": ""
          }
        },
        "asyncRequest": {
          "public": "",
          "guessedname": "asyncRequest",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "method",
              "type": "string",
              "description": " HTTP transaction method"
            },
            {
              "name": "uri",
              "type": "string",
              "description": " Fully qualified path of resource"
            },
            {
              "name": "callback",
              "type": "callback",
              "description": " User-defined callback function or object"
            },
            {
              "name": "postData",
              "type": "string",
              "description": " POST body"
            }
          ],
          "description": "Method for initiating an asynchronous request via the XHR object.",
          "return": {
            "type": "object",
            "description": "Returns the connection object"
          }
        },
        "getConnectionObject": {
          "guessedname": "getConnectionObject",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "This method is called by asyncRequest to create a\nvalid connection object for the transaction.  It also passes a\ntransaction id and increments the transaction id counter.",
          "return": {
            "type": "object",
            "description": ""
          }
        }
      },
      "name": "YAHOO.util.Connect",
      "guessedname": "Connect",
      "module": "connection",
      "namespace": "YAHOO.util",
      "guessedtype": "property",
      "description": "The Connection Manager singleton provides methods for creating and managing\nasynchronous transactions.",
      "file": "connection_core.js",
      "properties": {
        "_has_http_headers": {
          "guessedname": "_has_http_headers",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Determines if HTTP headers are set."
        },
        "_poll": {
          "guessedname": "_poll",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Collection of polling references to the polling mechanism in handleReadyState."
        },
        "completeEvent": {
          "guessedname": "completeEvent",
          "private": "",
          "static": "",
          "type": "CustomEvent",
          "guessedtype": "property",
          "description": "Custom event that fires when a transaction response has completed."
        },
        "_msxml_progid": {
          "guessedname": "_msxml_progid",
          "private": "",
          "static": "",
          "type": "array",
          "guessedtype": "property",
          "description": "Array of MSFT ActiveX ids for XMLHttpRequest."
        },
        "_timeOut": {
          "guessedname": "_timeOut",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Queue of timeout values for each transaction callback with a defined timeout value."
        },
        "_default_form_header": {
          "guessedname": "_default_form_header",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "The default header used for transactions involving the\nuse of HTML forms."
        },
        "_customEvents": {
          "guessedname": "_customEvents",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "A reference table that maps callback custom events members to its specific\nevent name."
        },
        "successEvent": {
          "guessedname": "successEvent",
          "private": "",
          "static": "",
          "type": "CustomEvent",
          "guessedtype": "property",
          "description": "Custom event that fires when handleTransactionResponse() determines a\nresponse in the HTTP 2xx range."
        },
        "failureEvent": {
          "guessedname": "failureEvent",
          "private": "",
          "static": "",
          "type": "CustomEvent",
          "guessedtype": "property",
          "description": "Custom event that fires when handleTransactionResponse() determines a\nresponse in the HTTP 4xx/5xx range."
        },
        "_polling_interval": {
          "guessedname": "_polling_interval",
          "private": "",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The polling frequency, in milliseconds, for HandleReadyState.\nwhen attempting to determine a transaction's XHR readyState.\nThe default is 50 milliseconds."
        },
        "startEvent": {
          "guessedname": "startEvent",
          "private": "",
          "static": "",
          "type": "CustomEvent",
          "guessedtype": "property",
          "description": "Custom event that fires at the start of a transaction"
        },
        "_use_default_post_header": {
          "guessedname": "_use_default_post_header",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Determines if a default header of\nContent-Type of 'application/x-www-form-urlencoded'\nwill be added to any client HTTP headers sent for POST\ntransactions."
        },
        "_http_header": {
          "guessedname": "_http_headers",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Object literal of HTTP header(s)"
        },
        "_default_post_header": {
          "guessedname": "_default_post_header",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "The default header used for POST transactions."
        },
        "_has_default_header": {
          "guessedname": "_has_default_headers",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Determines if custom, default headers\nare set for each transaction."
        },
        "_transaction_id": {
          "guessedname": "_transaction_id",
          "private": "",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "A transaction counter that increments the transaction id for each transaction."
        },
        "_use_default_xhr_header": {
          "guessedname": "_use_default_xhr_header",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Determines if a default header of\n'X-Requested-With: XMLHttpRequest'\nwill be added to each transaction."
        },
        "_default_xhr_header": {
          "guessedname": "_default_xhr_header",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "The default header value for the label\n\"X-Requested-With\".  This is sent with each\ntransaction, by default, to identify the\nrequest as being made by YUI Connection Manager."
        },
        "abortEvent": {
          "guessedname": "abortEvent",
          "private": "",
          "static": "",
          "type": "CustomEvent",
          "guessedtype": "property",
          "description": "Custom event that fires when a transaction is successfully aborted."
        }
      }
    },
    "YAHOO.util.Region": {
      "shortname": "Region",
      "methods": {
        "intersect": {
          "guessedname": "intersect",
          "guessedtype": "function",
          "description": "Returns the region where the passed in region overlaps with this one",
          "params": [
            {
              "name": "region",
              "type": "Region",
              "description": " The region that intersects"
            }
          ],
          "return": {
            "type": "Region",
            "description": "The overlap region, or null if there is no overlap"
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "toString",
          "return": {
            "type": "",
            "description": "string the region properties"
          }
        },
        "union": {
          "guessedname": "union",
          "guessedtype": "function",
          "description": "Returns the region representing the smallest region that can contain both\nthe passed in region and this region.",
          "params": [
            {
              "name": "region",
              "type": "Region",
              "description": " The region that to create the union with"
            }
          ],
          "return": {
            "type": "Region",
            "description": "The union region"
          }
        },
        "getArea": {
          "guessedname": "getArea",
          "guessedtype": "function",
          "description": "Returns the area of the region",
          "return": {
            "type": "Int",
            "description": "the region's area"
          }
        },
        "contains": {
          "guessedname": "contains",
          "guessedtype": "function",
          "description": "Returns true if this region contains the region passed in",
          "params": [
            {
              "name": "region",
              "type": "Region",
              "description": " The region to evaluate"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True if the region is contained with this region, \nelse false"
          }
        },
        "getRegion": {
          "guessedname": "getRegion",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element"
            }
          ],
          "description": "Returns a region that is occupied by the DOM element",
          "return": {
            "type": "Region",
            "description": "The region that the element occupies"
          }
        }
      },
      "name": "YAHOO.util.Region",
      "guessedname": "Region",
      "module": "dom",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it.",
          "params": [
            {
              "name": "t",
              "type": "Int",
              "description": " the top extent"
            },
            {
              "name": "r",
              "type": "Int",
              "description": " the right extent"
            },
            {
              "name": "b",
              "type": "Int",
              "description": " the bottom extent"
            },
            {
              "name": "l",
              "type": "Int",
              "description": " the left extent"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it.",
      "file": "Region.js",
      "properties": {
        "left": {
          "guessedname": "left",
          "type": "Int",
          "guessedtype": "property",
          "description": "The region's left extent"
        },
        "x": {
          "guessedname": "x",
          "type": "Int",
          "guessedtype": "property",
          "description": "The region's left extent"
        },
        "bottom": {
          "guessedname": "bottom",
          "type": "Int",
          "guessedtype": "property",
          "description": "The region's bottom extent"
        },
        "y": {
          "guessedname": "y",
          "type": "Int",
          "guessedtype": "property",
          "description": "The region's top extent"
        },
        "0": {
          "type": "Int",
          "description": "The region's left extent as index, for symmetry with set/getXY"
        },
        "1": {
          "type": "Int",
          "description": "The region's top extent as index, for symmetry with set/getXY"
        },
        "height": {
          "guessedname": "height",
          "type": "Int",
          "guessedtype": "property",
          "description": "The region's total height"
        },
        "right": {
          "guessedname": "right",
          "type": "int",
          "guessedtype": "property",
          "description": "The region's right extent"
        },
        "width": {
          "guessedname": "width",
          "type": "Int",
          "guessedtype": "property",
          "description": "The region's total width"
        },
        "top": {
          "guessedname": "top",
          "type": "Int",
          "guessedtype": "property",
          "description": "The region's top extent"
        }
      }
    },
    "YAHOO.widget.CalendarNavigator": {
      "shortname": "CalendarNavigator",
      "methods": {
        "purgeKeyListeners": {
          "guessedname": "purgeKeyListeners",
          "guessedtype": "function",
          "description": "Removes/purges DOM listeners for keyboard support"
        },
        "purgeListeners": {
          "guessedname": "purgeListeners",
          "guessedtype": "function",
          "description": "Removes/purges DOM event listeners from the rendered elements"
        },
        "showMask": {
          "guessedname": "showMask",
          "guessedtype": "function",
          "description": "Displays the navigator's mask element"
        },
        "setYearError": {
          "guessedname": "setYearError",
          "guessedtype": "function",
          "description": "Displays the validation error UI for the year control"
        },
        "_handleEnterKey": {
          "guessedname": "_handleEnterKey",
          "guessedtype": "function",
          "protected": "",
          "description": "Default Keyboard event handler to capture Enter \non the Navigator's year control (yearEl)",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " The DOM event being handled"
            }
          ]
        },
        "applyListeners": {
          "guessedname": "applyListeners",
          "guessedtype": "function",
          "description": "Attaches DOM event listeners to the rendered elements\n<p>\nThe method will call applyKeyListeners, to setup keyboard specific \nlisteners\n</p>"
        },
        "setInitialFocus": {
          "guessedname": "setInitialFocus",
          "guessedtype": "function",
          "description": "Sets the initial focus, based on the configured value"
        },
        "clearErrors": {
          "guessedname": "clearErrors",
          "guessedtype": "function",
          "description": "Clears all validation and error messages in the UI"
        },
        "submit": {
          "guessedname": "submit",
          "guessedtype": "function",
          "description": "Updates the Calendar/CalendarGroup's pagedate with the currently set month and year if valid.\n<p>\nIf the currently set month/year is invalid, a validation error will be displayed and the \nCalendar/CalendarGroup's pagedate will not be updated.\n</p>"
        },
        "hide": {
          "guessedname": "hide",
          "guessedtype": "function",
          "description": "Hides the navigator and mask\nThe show method will fire the Calendar/CalendarGroup's beforeHideNav event and hideNav events"
        },
        "cancel": {
          "guessedname": "cancel",
          "guessedtype": "function",
          "description": "Hides the navigator and mask, without updating the Calendar/CalendarGroup's state"
        },
        "getMonth": {
          "guessedname": "getMonth",
          "guessedtype": "function",
          "description": "Returns the current month set on the navigator\nNote: This may not be the month set in the UI, if \nthe UI contains an invalid value.",
          "return": {
            "type": "Number",
            "description": "The Navigator's current month index"
          }
        },
        "_updateMonthUI": {
          "guessedname": "_updateMonthUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the Navigator's month UI, based on the month value set on the Navigator object"
        },
        "applyKeyListeners": {
          "guessedname": "applyKeyListeners",
          "guessedtype": "function",
          "description": "Attaches DOM listeners for keyboard support. \nTab/Shift-Tab looping, Enter Key Submit on Year element,\nUp/Down/PgUp/PgDown year increment on Year element\n<p>\nNOTE: MacOSX Safari 2.x doesn't let you tab to buttons and \nMacOSX Gecko does not let you tab to buttons or select controls,\nso for these browsers, Tab/Shift-Tab looping is limited to the \nelements which can be reached using the tab key.\n</p>"
        },
        "_setFirstLastElements": {
          "guessedname": "_setFirstLastElements",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets up references to the first and last focusable element in the Navigator's UI\nin terms of tab order (Naviagator's firstEl and lastEl properties). The references\nare used to control modality by looping around from the first to the last control\nand visa versa for tab/shift-tab navigation.\n<p>\nSee <a href=\"#applyKeyListeners\">applyKeyListeners</a>\n</p>"
        },
        "validate": {
          "guessedname": "validate",
          "guessedtype": "function",
          "description": "Validates the current state of the UI controls",
          "return": {
            "type": "Boolean",
            "description": "true, if the current UI state contains valid values, false if not"
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Destroys the Navigator object and any HTML references"
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Renders the HTML for the navigator, adding it to the \ndocument and attaches event listeners if it has not \nalready been rendered."
        },
        "hideMask": {
          "guessedname": "hideMask",
          "guessedtype": "function",
          "description": "Hides the navigator's mask element"
        },
        "_handleDirectionKeys": {
          "guessedname": "_handleDirectionKeys",
          "guessedtype": "function",
          "protected": "",
          "description": "Default Keyboard event handler to capture up/down/pgup/pgdown\non the Navigator's year control (yearEl).",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " The DOM event being handled"
            }
          ]
        },
        "_handleTabKey": {
          "guessedname": "_handleTabKey",
          "guessedtype": "function",
          "protected": "",
          "description": "Default Keyboard event handler to capture Tab \non the last control (lastCtrl) in the Navigator.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " The DOM event being handled"
            }
          ]
        },
        "setError": {
          "guessedname": "setError",
          "guessedtype": "function",
          "description": "Displays an error message in the Navigator's error panel",
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": " The error message to display"
            }
          ]
        },
        "_updateYearUI": {
          "guessedname": "_updateYearUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the Navigator's year UI, based on the year value set on the Navigator object"
        },
        "__getCfg": {
          "guessedname": "__getCfg",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "Case",
              "type": "String",
              "description": " sensitive property name."
            },
            {
              "name": "true,",
              "type": "Boolean",
              "description": " if the property is a string property, false if not."
            }
          ],
          "description": "Retrieve Navigator configuration values from \nthe parent Calendar/CalendarGroup's config value.\n<p>\nIf it has not been set in the user provided configuration, the method will \nreturn the default value of the configuration property, as set in DEFAULT_CONFIG\n</p>",
          "return": {
            "type": "",
            "description": "The value of the configuration property"
          }
        },
        "clearError": {
          "guessedname": "clearError",
          "guessedtype": "function",
          "description": "Clears the navigator's error message and hides the error panel"
        },
        "_getYearFromUI": {
          "guessedname": "_getYearFromUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Returns the year value, from the Navitator's year UI element",
          "return": {
            "type": "Number",
            "description": "The year value set in the UI, if valid. null is returned if \nthe UI does not contain a valid year value."
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Init lifecycle method called as part of construction",
          "params": [
            {
              "name": "cal",
              "type": "Calendar",
              "description": " The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached"
            }
          ]
        },
        "_handleShiftTabKey": {
          "guessedname": "_handleShiftTabKey",
          "guessedtype": "function",
          "protected": "",
          "description": "Default Keyboard event handler to capture Shift-Tab \non the first control (firstCtrl) in the Navigator.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " The DOM event being handled"
            }
          ]
        },
        "show": {
          "guessedname": "show",
          "guessedtype": "function",
          "description": "Displays the navigator and mask, updating the input controls to reflect the \ncurrently set month and year. The show method will invoke the render method\nif the navigator has not been renderered already, allowing for lazy rendering\nof the control.\nThe show method will fire the Calendar/CalendarGroup's beforeShowNav and showNav events"
        },
        "createMask": {
          "guessedname": "createMask",
          "guessedtype": "function",
          "description": "Creates the Mask HTMLElement and appends it to the Calendar/CalendarGroups\ncontainer."
        },
        "_show": {
          "guessedname": "_show",
          "guessedtype": "function",
          "protected": "",
          "description": "Protected implementation to handle how UI elements are \nhidden/shown."
        },
        "getYear": {
          "guessedname": "getYear",
          "guessedtype": "function",
          "description": "Returns the current year set on the navigator\nNote: This may not be the year set in the UI, if \nthe UI contains an invalid value.",
          "return": {
            "type": "Number",
            "description": "The Navigator's current year value"
          }
        },
        "erase": {
          "guessedname": "erase",
          "guessedtype": "function",
          "description": "Removes all renderered HTML elements for the Navigator from\nthe DOM, purges event listeners and clears (nulls) any property\nreferences to HTML references"
        },
        "setYear": {
          "guessedname": "setYear",
          "guessedtype": "function",
          "description": "Sets the current year on the Navigator, and updates the UI. If the \nprovided year is invalid, it will not be set.",
          "params": [
            {
              "name": "nYear",
              "type": "Number",
              "description": " The full year value to set the Navigator to."
            }
          ]
        },
        "renderNavContents": {
          "guessedname": "renderNavContents",
          "param": "{Array} html The HTML buffer to append the HTML to.",
          "guessedtype": "function",
          "params": [
            {
              "name": "html",
              "type": "Array",
              "description": " The HTML buffer to append the HTML to."
            }
          ],
          "description": "Renders the contents of the navigator",
          "return": {
            "type": "Array",
            "description": "A reference to the buffer passed in."
          }
        },
        "createNav": {
          "guessedname": "createNav",
          "guessedtype": "function",
          "description": "Creates the navigator's containing HTMLElement, it's contents, and appends \nthe containg element to the Calendar/CalendarGroup's container."
        },
        "_getMonthFromUI": {
          "guessedname": "_getMonthFromUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Returns the month value (index), from the month UI element",
          "return": {
            "type": "Number",
            "description": "The month index, or 0 if a UI element for the month\nis not found"
          }
        },
        "renderYear": {
          "guessedname": "renderYear",
          "guessedtype": "function",
          "description": "Renders the year label and control for the navigator",
          "params": [
            {
              "name": "html",
              "type": "Array",
              "description": " The HTML buffer to append the HTML to."
            }
          ],
          "return": {
            "type": "Array",
            "description": "A reference to the buffer passed in."
          }
        },
        "setMonth": {
          "guessedname": "setMonth",
          "guessedtype": "function",
          "description": "Sets the current month on the Navigator, and updates the UI",
          "params": [
            {
              "name": "nMonth",
              "type": "Number",
              "description": " The month index, from 0 (Jan) through 11 (Dec)."
            }
          ]
        },
        "clearYearError": {
          "guessedname": "clearYearError",
          "guessedtype": "function",
          "description": "Removes the validation error UI for the year control"
        },
        "renderButton": {
          "guessedname": "renderButtons",
          "guessedtype": "function",
          "description": "Renders the submit/cancel buttons for the navigator",
          "return": {
            "type": "String",
            "description": "The HTML created for the Button UI"
          }
        },
        "_syncMask": {
          "guessedname": "_syncMask",
          "guessedtype": "function",
          "protected": "",
          "description": "Used to set the width/height of the mask in pixels to match the Calendar Container.\nCurrently only used for IE6 or IE in quirks mode. The other A-Grade browser are handled using CSS (width/height 100%).\n<p>\nThe method is also registered as an HTMLElement resize listener on the Calendars container element.\n</p>"
        },
        "_update": {
          "guessedname": "_update",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the Calendar rendered state, based on the state of the CalendarNavigator",
          "params": [
            {
              "name": "cal",
              "type": "",
              "description": " The Calendar instance to update"
            }
          ]
        }
      },
      "name": "YAHOO.widget.CalendarNavigator",
      "guessedname": "CalendarNavigator",
      "module": "calendar",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The CalendarNavigator is used along with a Calendar/CalendarGroup to \nprovide a Month/Year popup navigation control, allowing the user to navigate \nto a specific month/year in the Calendar/CalendarGroup without having to \nscroll through months sequentially",
          "params": [
            {
              "name": "cal",
              "type": "Calendar|CalendarGroup",
              "description": " The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The CalendarNavigator is used along with a Calendar/CalendarGroup to \nprovide a Month/Year popup navigation control, allowing the user to navigate \nto a specific month/year in the Calendar/CalendarGroup without having to \nscroll through months sequentially",
      "file": "CalendarNavigator.js",
      "properties": {
        "firstCtrl": {
          "guessedname": "firstCtrl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the first focusable control in the navigator (by default monthEl)"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.INVALID": {
          "guessedname": "INVALID",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to controls with invalid data (e.g. a year input field with invalid an year)"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.DEFAULT": {
          "guessedname": "DEFAULT",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to default controls"
        },
        "YAHOO.widget.CalendarNavigator.MONTH_SUFFIX": {
          "final": "",
          "guessedname": "MONTH_SUFFIX",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix added to the Navigator's ID, to generate\na unique ID for the month control."
        },
        "lastCtrl": {
          "guessedname": "lastCtrl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the last focusable control in the navigator (by default cancelEl)"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.YEAR_CTRL": {
          "guessedname": "YEAR_CTRL",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to the year input control"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.BUTTON": {
          "guessedname": "BUTTON",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to buttons wrapping element"
        },
        "YAHOO.widget.CalendarNavigator.YR_MINOR_INC": {
          "guessedname": "YR_MINOR_INC",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "The amount by which to increment the current year value,\nwhen the arrow up/down key is pressed on the year control"
        },
        "submitEl": {
          "guessedname": "submitEl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the HTMLElement used to update the Calendar/Calendar group\nwith the month/year values"
        },
        "cancelEl": {
          "guessedname": "cancelEl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the HTMLElement used to hide the navigator without updating the \nCalendar/Calendar group"
        },
        "cal": {
          "guessedname": "cal",
          "type": "{Calendar|CalendarGroup}",
          "guessedtype": "property",
          "description": "The Calendar/CalendarGroup instance to which the navigator belongs"
        },
        "__rendered": {
          "private": "",
          "guessedname": "__rendered",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Private internal state property which indicates whether or not the \nNavigator has been rendered."
        },
        "_month": {
          "guessedname": "_month",
          "type": "Number",
          "guessedtype": "property",
          "protected": "",
          "description": "Internal state property for the current month index displayed in the navigator"
        },
        "YAHOO.widget.CalendarNavigator.YR_MAX_DIGITS": {
          "guessedname": "YR_MAX_DIGITS",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "The number of digits to which the year input control is to be limited."
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.YEAR": {
          "guessedname": "YEAR",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to the year label/control bounding box"
        },
        "DEFAULT_CONFIG": {
          "guessedname": "DEFAULT_CONFIG",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object literal containing the default configuration values for the CalendarNavigator\nThe configuration object is expected to follow the format below, with the properties being\ncase sensitive.\n<dl>\n<dt>strings</dt>\n<dd><em>Object</em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI\n<dl>\n<dt>month</dt><dd><em>String</em> : The string to use for the month label. Defaults to \"Month\".</dd>\n<dt>year</dt><dd><em>String</em> : The string to use for the year label. Defaults to \"Year\".</dd>\n<dt>submit</dt><dd><em>String</em> : The string to use for the submit button label. Defaults to \"Okay\".</dd>\n<dt>cancel</dt><dd><em>String</em> : The string to use for the cancel button label. Defaults to \"Cancel\".</dd>\n<dt>invalidYear</dt><dd><em>String</em> : The string to use for invalid year values. Defaults to \"Year needs to be a number\".</dd>\n</dl>\n</dd>\n<dt>monthFormat</dt><dd><em>String</em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG</dd>\n<dt>initialFocus</dt><dd><em>String</em> : Either \"year\" or \"month\" specifying which input control should get initial focus. Defaults to \"year\"</dd>\n</dl>"
        },
        "yearEl": {
          "guessedname": "yearEl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the HTMLElement used to input the year"
        },
        "YAHOO.widget.CalendarNavigator.YEAR_SUFFIX": {
          "final": "",
          "guessedname": "YEAR_SUFFIX",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix added to the Navigator's ID, to generate\na unique ID for the year control."
        },
        "errorEl": {
          "guessedname": "errorEl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the HTMLElement used to display validation errors"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.MONTH_CTRL": {
          "guessedname": "MONTH_CTRL",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to the month input control"
        },
        "_doc": {
          "guessedname": "_doc",
          "type": "HTMLDocument",
          "guessedtype": "property",
          "protected": "",
          "description": "The document containing the Calendar/Calendar group instance"
        },
        "YAHOO.widget.CalendarNavigator.YR_MAJOR_INC": {
          "guessedname": "YR_MAJOR_INC",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "The amount by which to increment the current year value,\nwhen the page up/down key is pressed on the year control"
        },
        "__isIEQuirks": {
          "guessedname": "ie",
          "private": "",
          "guessedtype": "property",
          "description": "Private flag, to identify IE Quirks"
        },
        "id": {
          "guessedname": "id",
          "type": "String",
          "guessedtype": "property",
          "description": "The unique ID for this CalendarNavigator instance"
        },
        "YAHOO.widget.CalendarNavigator.SUBMIT_SUFFIX": {
          "final": "",
          "guessedname": "SUBMIT_SUFFIX",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix added to the Navigator's ID, to generate\na unique ID for the \"Submit\" button."
        },
        "__isMac": {
          "guessedname": "__isMac",
          "private": "",
          "guessedtype": "property",
          "description": "Private flag, to identify MacOS"
        },
        "YAHOO.widget.CalendarNavigator.CANCEL_SUFFIX": {
          "final": "",
          "guessedname": "CANCEL_SUFFIX",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix added to the Navigator's ID, to generate\na unique ID for the \"Cancel\" button."
        },
        "YAHOO.widget.CalendarNavigator.ERROR_SUFFIX": {
          "final": "",
          "guessedname": "ERROR_SUFFIX",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix added to the Navigator's ID, to generate\na unique ID for the error bounding box."
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.MASK": {
          "guessedname": "MASK",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to the Navigator mask's bounding box"
        },
        "YAHOO.widget.CalendarNavigator.YR_PATTERN": {
          "guessedname": "YR_PATTERN",
          "static": "",
          "type": "RegExp",
          "guessedtype": "property",
          "description": "Regular expression used to validate the year input"
        },
        "_year": {
          "guessedname": "_year",
          "type": "Number",
          "guessedtype": "property",
          "protected": "",
          "description": "Internal state property for the current year displayed in the navigator"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.ERROR": {
          "guessedname": "ERROR",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to the validation error area's bounding box"
        },
        "YAHOO.widget.CalendarNavigator.ID_SUFFIX": {
          "final": "",
          "guessedname": "ID_SUFFIX",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix added to the Calendar/CalendarGroup's ID, to generate\na unique ID for the Navigator and it's bounding box."
        },
        "monthEl": {
          "guessedname": "monthEl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the HTMLElement used to input the month"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.MONTH": {
          "guessedname": "MONTH",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to the month label/control bounding box"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.NAV_VISIBLE": {
          "guessedname": "NAV_VISIBLE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to the Calendar/CalendarGroup's bounding box to indicate\nthe Navigator is currently visible"
        },
        "_DEFAULT_CFG": {
          "guessedname": "_DEFAULT_CFG",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "deprecated": "Made public. See the public DEFAULT_CONFIG property",
          "description": "Object literal containing the default configuration values for the CalendarNavigator"
        },
        "maskEl": {
          "guessedname": "maskEl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the HTMLElement used to render the navigator's mask"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.BUTTONS": {
          "guessedname": "BUTTONS",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to the submit/cancel button's bounding box"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES.NAV": {
          "guessedname": "NAV",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class applied to the Calendar Navigator's bounding box"
        },
        "YAHOO.widget.CalendarNavigator.CLASSES": {
          "guessedname": "CLASSES",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "YAHOO.widget.CalendarNavigator.CLASSES contains constants\nfor the class values applied to the CalendarNaviatgator's \nDOM elements"
        },
        "navEl": {
          "guessedname": "navEl",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the HTMLElement used to render the navigator's bounding box"
        },
        "YAHOO.widget.CalendarNavigator.TRIM": {
          "guessedname": "TRIM",
          "static": "",
          "type": "RegExp",
          "guessedtype": "property",
          "description": "Regular expression used to trim strings"
        },
        "YAHOO.widget.CalendarNavigator.UPDATE_DELAY": {
          "guessedname": "UPDATE_DELAY",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Artificial delay (in ms) between the time the Navigator is hidden\nand the Calendar/CalendarGroup state is updated. Allows the user\nthe see the Calendar/CalendarGroup page changing. If set to 0\nthe Calendar/CalendarGroup page will be updated instantly"
        }
      }
    },
    "YAHOO.widget.ColumnChart": {
      "shortname": "ColumnChart",
      "name": "YAHOO.widget.ColumnChart",
      "guessedname": "ColumnChart",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "ColumnChart class for the YUI Charts widget.",
          "params": [
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "dataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "attributes",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ColumnChart class for the YUI Charts widget.",
      "file": "ChartTypes.js",
      "uses": [
        "YAHOO.widget.CartesianChart"
      ]
    },
    "YAHOO.util.StorageManager": {
      "shortname": "StorageManager",
      "methods": {
        "get": {
          "guessedname": "get",
          "static": "",
          "guessedtype": "function",
          "description": "Fetches the desired engine type or first available engine type.",
          "params": [
            {
              "name": "engineType",
              "type": "String",
              "description": "  Optional. The engine type, see engines."
            },
            {
              "name": "location",
              "type": "String",
              "description": "  Optional. The storage location - LOCATION_SESSION & LOCATION_LOCAL; default is LOCAL."
            },
            {
              "name": "conf",
              "type": "Object} Optional. Additional configuration for the getting the storage engine.\n{\nengine: {Object} configuration parameters for the desired engine\norder: {Array} an array of storage engine names; the desired order to try engines}\n",
              "description": ""
            }
          ]
        },
        "_getClass": {
          "guessedname": "_getClass",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "klass",
              "type": "Function",
              "description": "  Required. The storage constructor to test."
            }
          ],
          "description": "Fetches a storage constructor if it is available, otherwise returns NULL.",
          "return": {
            "type": "Function",
            "description": "An available storage constructor or NULL."
          }
        },
        "register": {
          "guessedname": "register",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "engineConstructor",
              "type": "Function",
              "description": "  Required. The engine constructor function, see engines."
            }
          ],
          "description": "Registers a engineType Class with the StorageManager singleton; first in is the first out.",
          "return": {
            "type": "Boolean",
            "description": "When successfully registered."
          }
        },
        "_getValidLocation": {
          "private": "",
          "guessedname": "_getValidLocation",
          "guessedtype": "function",
          "description": "Ensures that the location is valid before returning it or a default value.",
          "params": [
            {
              "name": "location",
              "type": "String",
              "description": "  Required. The location to evaluate."
            }
          ]
        },
        "_getStorageEngine": {
          "private": "",
          "guessedname": "_getStorageEngine",
          "guessedtype": "function",
          "description": "Fetches the storage engine from the cache, or creates and caches it.",
          "params": [
            {
              "name": "location",
              "type": "String",
              "description": "  Required. The location to store."
            },
            {
              "name": "klass",
              "type": "Function",
              "description": "  Required. A pointer to the engineType Class."
            },
            {
              "name": "conf",
              "type": "Object",
              "description": "  Optional. Additional configuration for the data source engine."
            }
          ]
        }
      },
      "name": "YAHOO.util.StorageManager",
      "module": "Storage",
      "namespace": "YAHOO.util",
      "static": "",
      "description": "The StorageManager class is a singleton that registers DataStorage objects and returns instances of those objects.",
      "file": "StorageManager.js",
      "properties": {
        "LOCATION_LOCAL": {
          "guessedname": "LOCATION_LOCAL",
          "static": "",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The storage location - local; data cleared on demand."
        },
        "LOCATION_SESSION": {
          "guessedname": "LOCATION_SESSION",
          "static": "",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The storage location - session; data cleared at the end of a user's session."
        }
      }
    },
    "YAHOO.widget.ToolbarButtonAdvanced": {
      "shortname": "ToolbarButtonAdvanced",
      "methods": {
        "checkValue": {
          "guessedname": "checkValue",
          "guessedtype": "function",
          "description": "Select an option by value",
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": " The value of the option that we want to mark as selected"
            }
          ]
        }
      },
      "name": "YAHOO.widget.ToolbarButtonAdvanced",
      "module": "editor",
      "namespace": "YAHOO.widget",
      "requires": "yahoo, dom, element, event, container_core, menu, button\nProvides a toolbar button based on the button and menu widgets.",
      "constructors": [
        {
          "description": "<p>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p>",
          "params": [
            {
              "name": "el",
              "type": "String/HTMLElement",
              "description": " The element to turn into a button."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": " Object liternal containing configuration parameters."
            }
          ]
        }
      ],
      "description": "<p>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p>",
      "file": "toolbar-button.js",
      "properties": {
        "buttonType": {
          "guessedname": "buttonType",
          "private": "",
          "guessedtype": "property",
          "description": "Tells if the Button is a Rich Button or a Simple Button"
        }
      }
    },
    "YAHOO.util.DateAssert": {
      "shortname": "DateAssert",
      "methods": {
        "timesAreEqual": {
          "guessedname": "timesAreEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a date's hour, minutes, and seconds are equal to another date's.",
          "params": [
            {
              "name": "expected",
              "type": "Date",
              "description": " The expected date."
            },
            {
              "name": "actual",
              "type": "Date",
              "description": " The actual date to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "datesAreEqual": {
          "guessedname": "datesAreEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a date's month, day, and year are equal to another date's.",
          "params": [
            {
              "name": "expected",
              "type": "Date",
              "description": " The expected date."
            },
            {
              "name": "actual",
              "type": "Date",
              "description": " The actual date to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        }
      },
      "name": "YAHOO.util.DateAssert",
      "guessedname": "DateAssert",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "static": "",
      "guessedtype": "property",
      "description": "The DateAssert object provides functions to test JavaScript Date objects\nfor a variety of cases.",
      "file": "DateAssert.js"
    },
    "YAHOO.util.SWFDetect": {
      "shortname": "SWFDetect",
      "name": "YAHOO.util.SWFDetect",
      "module": "swfdetect",
      "namespace": "YAHOO.util",
      "static": "",
      "description": "Flafh detection utility.",
      "file": "swfdetect.js"
    },
    "YAHOO.widget.DataTable": {
      "shortname": "DataTable",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "addRows": {
          "guessedname": "addRows",
          "guessedtype": "function",
          "description": "Convenience method to add multiple rows.",
          "params": [
            {
              "name": "aData",
              "type": "Object[]",
              "description": "  Array of object literal data for the rows."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) RecordSet position index at which to add data."
            }
          ]
        },
        "selectRow": {
          "guessedname": "selectRow",
          "guessedtype": "function",
          "description": "Sets given row to the selected state.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String | YAHOO.widget.Record | Number",
              "description": "  HTML element\nreference or ID string, Record instance, or RecordSet position index."
            }
          ]
        },
        "onEventSelectColumn": {
          "guessedname": "onEventSelectColumn",
          "guessedtype": "function",
          "description": "Overridable custom event handler to select Column.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "hideTableMessage": {
          "guessedname": "hideTableMessage",
          "guessedtype": "function",
          "description": "Hides secondary TBODY."
        },
        "getSelectedColumns": {
          "guessedname": "getSelectedColumns",
          "guessedtype": "function",
          "description": "Returns an array selected Column instances.",
          "return": {
            "type": "YAHOO.widget.Column[]",
            "description": "Array of Column instances."
          }
        },
        "getRow": {
          "guessedname": "getRow",
          "guessedtype": "function",
          "deprecated": "Use getTrEl()."
        },
        "showCellEditor": {
          "guessedname": "showCellEditor",
          "guessedtype": "function",
          "description": "Activates and shows CellEditor instance for the given cell while deactivating and\ncanceling previous CellEditor. It is baked into DataTable that only one CellEditor\ncan be active at any given time.",
          "params": [
            {
              "name": "elCell",
              "type": "HTMLElement | String",
              "description": "  Cell to edit."
            }
          ]
        },
        "_initCellEditing": {
          "guessedname": "_initCellEditing",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes CellEditor integration."
        },
        "getNextTdEl": {
          "guessedname": "getNextTdEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the next TD element from the given cell, or null.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | String | Object} DOM element reference or string ID, or\nobject literal of syntax {record:oRecord, column:oColumn",
              "description": "  from which to get next TD element."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to next TD element, or null."
          }
        },
        "highlightColumn": {
          "guessedname": "highlightColumn",
          "guessedtype": "function",
          "description": "Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column.\nNOTE: You cannot highlight/unhighlight nested Columns. You can only\nhighlight/unhighlight non-nested Columns, and bottom-level key Columns.",
          "params": [
            {
              "name": "column",
              "type": "HTMLElement | String | Number",
              "description": "  DOM reference or ID string to a\nTH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index."
            }
          ]
        },
        "focusTheadEl": {
          "guessedname": "focusTheadEl",
          "guessedtype": "function",
          "description": "Brings focus to the THEAD element."
        },
        "DataTable.formatText": {
          "guessedname": "formatText",
          "static": "",
          "guessedtype": "function",
          "description": "Formats text strings.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  (Optional) Data value for the cell."
            }
          ]
        },
        "showTableMessage": {
          "guessedname": "showTableMessage",
          "guessedtype": "function",
          "description": "Displays message within secondary TBODY.",
          "params": [
            {
              "name": "sHTML",
              "type": "String",
              "description": "  (optional) Value for innerHTMlang."
            },
            {
              "name": "sClassName",
              "type": "String",
              "description": "  (optional) Classname."
            }
          ]
        },
        "getNextTrEl": {
          "guessedname": "getNextTrEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the next TR element from the given TR element, or null.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String | Number | YAHOO.widget.Record",
              "description": "  Element\nreference, ID string, page row index, or Record from which to get next TR element."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to next TR element."
          }
        },
        "onEventSortColumn": {
          "guessedname": "onEventSortColumn",
          "guessedtype": "function",
          "description": "Overridable custom event handler to sort Column.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "unselectAllCells": {
          "guessedname": "unselectAllCells",
          "guessedtype": "function",
          "description": "Clears out all cell selections."
        },
        "_onTableMousedown": {
          "private": "",
          "guessedname": "_onTableMousedown",
          "guessedtype": "function",
          "description": "Handles mousedown events on the DataTable instance.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The mousedown event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "_destroyResizeableColumns": {
          "guessedname": "_destroyResizeableColumns",
          "private": "",
          "guessedtype": "function",
          "description": "Disables resizeability on key Column TH elements."
        },
        "unhighlightColumn": {
          "guessedname": "unhighlightColumn",
          "guessedtype": "function",
          "description": "Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column.\nNOTE: You cannot highlight/unhighlight nested Columns. You can only\nhighlight/unhighlight non-nested Columns, and bottom-level key Columns.",
          "params": [
            {
              "name": "column",
              "type": "HTMLElement | String | Number",
              "description": "  DOM reference or ID string to a\nTH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index."
            }
          ]
        },
        "DataTable.formatRadio": {
          "guessedname": "formatRadio",
          "static": "",
          "guessedtype": "function",
          "description": "Formats INPUT TYPE=RADIO elements.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  (Optional) Data value for the cell."
            }
          ]
        },
        "DataTable._initColumnDragTargetEl": {
          "guessedname": "_initColumnDragTargetEl",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Creates HTML markup for shared Column drag target.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to Column drag target."
          }
        },
        "_clearTrTemplateEl": {
          "guessedname": "_clearTrTemplateEl",
          "private": "",
          "guessedtype": "function",
          "description": "Clears TR element template in response to any Column state change."
        },
        "getTbodyEl": {
          "guessedname": "getTbodyEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the DataTable's primary TBODY element.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TBODY element."
          }
        },
        "onEventSaveCellEditor": {
          "guessedname": "onEventSaveCellEditor",
          "guessedtype": "function",
          "description": "Overridable custom event handler to save active CellEditor input."
        },
        "_onDocumentClick": {
          "private": "",
          "guessedname": "_onDocumentClick",
          "guessedtype": "function",
          "description": "Handles click events on the DOCUMENT.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The click event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "insertColumn": {
          "guessedname": "insertColumn",
          "guessedtype": "function",
          "description": "Inserts given Column at the index if given, otherwise at the end. NOTE: You\ncan only add non-nested Columns and top-level parent Columns. You cannot add\na nested Column to an existing parent.",
          "params": [
            {
              "name": "oColumn",
              "type": "Object | YAHOO.widget.Column",
              "description": "  Object literal Column\ndefinition or a Column instance."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) New tree index."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "oColumn  Inserted Column instance."
          }
        },
        "selectColumn": {
          "guessedname": "selectColumn",
          "guessedtype": "function",
          "description": "Selects given Column. NOTE: You cannot select/unselect nested Columns. You can only\nselect/unselect non-nested Columns, and bottom-level key Columns.",
          "params": [
            {
              "name": "column",
              "type": "HTMLElement | String | Number",
              "description": "  DOM reference or ID string to a\nTH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index."
            }
          ]
        },
        "_initRecordSet": {
          "guessedname": "_initRecordSet",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes RecordSet."
        },
        "onEditorBlurEvent": {
          "guessedname": "onEditorBlurEvent",
          "guessedtype": "function",
          "description": "Public handler of the editorBlurEvent. By default, saves on blur if\ndisableBtns is true, otherwise cancels on blur.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "getLastTdEl": {
          "guessedname": "getLastTdEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the last TD element in the DataTable page (by default),\nthe first TD element of the optionally given row, or null.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to last TD element."
          }
        },
        "_destroyTheadEl": {
          "guessedname": "_destroyTheadEl",
          "private": "",
          "guessedtype": "function",
          "description": "Destroy's the DataTable THEAD element, if available."
        },
        "DataTable._initColumnResizerProxyEl": {
          "guessedname": "_initColumnResizerProxyEl",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Creates HTML markup for shared Column resizer proxy.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to Column resizer proxy."
          }
        },
        "hideColumn": {
          "guessedname": "hideColumn",
          "guessedtype": "function",
          "description": "Hides given Column. NOTE: You cannot hide/show nested Columns. You can only\nhide/show non-nested Columns, and top-level parent Columns (which will\nhide/show all children Columns).",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            }
          ]
        },
        "select": {
          "guessedname": "select",
          "guessedtype": "function",
          "deprecated": "Use selectRow."
        },
        "saveCellEditor": {
          "guessedname": "saveCellEditor",
          "guessedtype": "function",
          "description": "Saves active CellEditor input to Record and upates DOM UI."
        },
        "_repaintGecko": {
          "private": "",
          "guessedname": "_repaintGecko",
          "guessedtype": "property",
          "el": "{HTMLElement} (Optional) Element to repaint, otherwise entire document body.",
          "description": "Forces Gecko repaint."
        },
        "onEventHighlightRow": {
          "guessedname": "onEventHighlightRow",
          "guessedtype": "function",
          "description": "Overridable custom event handler to highlight row. Accounts for spurious\ncaused-by-child events.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "getLastTrEl": {
          "guessedname": "getLastTrEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the last TR element in the DataTable page, or null.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to last TR element."
          }
        },
        "formatCell": {
          "guessedname": "formatCell",
          "guessedtype": "function",
          "description": "Outputs markup into the given TD based on given Record.",
          "params": [
            {
              "name": "elLiner",
              "type": "HTMLElement",
              "description": "  The liner DIV element within the TD."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  (Optional) Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  (Optional) Column instance."
            }
          ]
        },
        "_unsetFirstRow": {
          "guessedname": "_unsetFirstRow",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the class YAHOO.widget.DataTable.CLASS_FIRST from the first TR element\nof the DataTable page and updates internal tracker."
        },
        "DataTable._destroyColumnDragTargetEl": {
          "private": "",
          "guessedname": "_destroyColumnDragTargetEl",
          "static": "",
          "guessedtype": "function",
          "description": "Destroys shared Column drag target."
        },
        "addRow": {
          "guessedname": "addRow",
          "guessedtype": "function",
          "description": "Adds one new Record of data into the RecordSet at the index if given,\notherwise at the end. If the new Record is in page view, the\ncorresponding DOM elements are also updated.",
          "params": [
            {
              "name": "oData",
              "type": "Object",
              "description": "  Object literal of data for the row."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) RecordSet position index at which to add data."
            }
          ]
        },
        "_unselectAllTdEls": {
          "guessedname": "_unselectAllTdEls",
          "private": "",
          "guessedtype": "function",
          "description": "Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED\nfrom all TD elements in the internal tracker."
        },
        "_getSelectionTrigger": {
          "guessedname": "_getSelectionTrigger",
          "private": "",
          "guessedtype": "function",
          "description": "Returns object literal of values that represent the selection trigger. Used\nto determine selection behavior resulting from a key event."
        },
        "onEventHighlightColumn": {
          "guessedname": "onEventHighlightColumn",
          "guessedtype": "function",
          "description": "Overridable custom event handler to highlight Column. Accounts for spurious\ncaused-by-child events.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "_handleCellBlockSelectionByMouse": {
          "private": "",
          "guessedname": "_handleCellBlockSelectionByMouse",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"cellblock\".",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "clearTextSelection": {
          "guessedname": "clearTextSelection",
          "guessedtype": "function",
          "description": "Clears browser text selection. Useful to call on rowSelectEvent or\ncellSelectEvent to prevent clicks or dblclicks from selecting text in the\nbrowser."
        },
        "_destroyDraggableColumns": {
          "guessedname": "_destroyDraggableColumns",
          "private": "",
          "guessedtype": "function",
          "description": "Disables DD from top-level Column TH elements."
        },
        "DataTable.formatDate": {
          "guessedname": "formatDate",
          "static": "",
          "guessedtype": "function",
          "description": "Formats JavaScript Dates.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  Data value for the cell, or null."
            }
          ]
        },
        "_initContainerEl": {
          "private": "",
          "guessedname": "_initContainerEl",
          "guessedtype": "function",
          "description": "Initializes the DataTable outer container element, including a mask.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement | String",
              "description": "  HTML DIV element by reference or ID."
            }
          ]
        },
        "onDataReturnInsertRows": {
          "guessedname": "onDataReturnInsertRows",
          "guessedtype": "function",
          "description": "Callback function receives data from DataSource and inserts new records\nstarting at the index specified in oPayload.insertIndex. The value for\noPayload.insertIndex can be populated when sending the request to the DataSource,\nor by accessing oPayload.insertIndex with the doBeforeLoadData() method at runtime.\nIf applicable, creates or updates corresponding TR elements.",
          "params": [
            {
              "name": "sRequest",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  Argument payload, looks in oPayload.insertIndex."
            }
          ]
        },
        "onDataReturnUpdateRows": {
          "guessedname": "onDataReturnUpdateRows",
          "guessedtype": "function",
          "description": "Callback function receives data from DataSource and incrementally updates Records\nstarting at the index specified in oPayload.updateIndex. The value for\noPayload.updateIndex can be populated when sending the request to the DataSource,\nor by accessing oPayload.updateIndex with the doBeforeLoadData() method at runtime.\nIf applicable, creates or updates corresponding TR elements.",
          "params": [
            {
              "name": "sRequest",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  Argument payload, looks in oPayload.updateIndex."
            }
          ]
        },
        "getContainerEl": {
          "guessedname": "getContainerEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the DataTable's container element.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to DIV element."
          }
        },
        "cancelCellEditor": {
          "guessedname": "cancelCellEditor",
          "guessedtype": "function",
          "description": "Cancels active CellEditor."
        },
        "_onTbodyKeydown": {
          "private": "",
          "guessedname": "_onTbodyKeydown",
          "guessedtype": "function",
          "description": "Handles keydown events on the TBODY element. Handles selection behavior,\nprovides hooks for ENTER to edit functionality.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The key event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "_repaintWebkit": {
          "private": "",
          "guessedname": "_repaintWebkit",
          "guessedtype": "property",
          "el": "{HTMLElement} (Optional) Element to repaint, otherwise entire document body.",
          "description": "Forces Webkit repaint."
        },
        "validateColumnWidths": {
          "guessedname": "validateColumnWidths",
          "guessedtype": "function",
          "description": "For one or all Columns, when Column is not hidden, width is not set, and minWidth\nand/or maxAutoWidth is set, validates auto-width against minWidth and maxAutoWidth.",
          "params": [
            {
              "name": "oArg.column",
              "type": "YAHOO.widget.Column",
              "description": "  (optional) One Column to validate. If null, all Columns' widths are validated."
            }
          ]
        },
        "_handleSingleCellSelectionByMouse": {
          "private": "",
          "guessedname": "_handleSingleCellSelectionByMouse",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"singlecell\".",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "getSelectedTdEls": {
          "guessedname": "getSelectedTdEls",
          "guessedtype": "function",
          "description": "Returns array of selected TD elements on the page.",
          "return": {
            "type": "HTMLElement[]",
            "description": "Array of selected TD elements."
          }
        },
        "_onEditorKeydownEvent": {
          "private": "",
          "guessedname": "_onEditorKeydownEvent",
          "guessedtype": "function",
          "description": "Passes through keydownEvent of the active CellEditor.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "unselectCell": {
          "guessedname": "unselectCell",
          "guessedtype": "function",
          "description": "Sets given cell to the unselected state.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | String",
              "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."
            }
          ]
        },
        "_onEditorBlurEvent": {
          "private": "",
          "guessedname": "_onEditorBlurEvent",
          "guessedtype": "function",
          "description": "Passes through blurEvent of the active CellEditor.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "DataTable._destroyColumnResizerProxyEl": {
          "guessedname": "_destroyColumnResizerProxyEl",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Destroys shared Column resizer proxy.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to Column resizer proxy."
          }
        },
        "_onTableMouseup": {
          "private": "",
          "guessedname": "_onTableMouseup",
          "guessedtype": "function",
          "description": "Handles mouseup events on the DataTable instance.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The mouseup event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "getId": {
          "guessedname": "getId",
          "guessedtype": "function",
          "description": "Returns unique id assigned to instance, which is a useful prefix for\ngenerating unique DOM ID strings.",
          "return": {
            "type": "String",
            "description": "Unique ID of the DataSource instance."
          }
        },
        "highlightRow": {
          "guessedname": "highlightRow",
          "guessedtype": "function",
          "description": "Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given row.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String",
              "description": "  DOM element reference or ID string."
            }
          ]
        },
        "getColumnSet": {
          "guessedname": "getColumnSet",
          "guessedtype": "function",
          "description": "Returns the DataTable instance's ColumnSet instance.",
          "return": {
            "type": "YAHOO.widget.ColumnSet",
            "description": "ColumnSet instance."
          }
        },
        "_destroyPaginator": {
          "guessedname": "_destroyPaginator",
          "private": "",
          "guessedtype": "function",
          "description": "Calls Paginator's destroy() method"
        },
        "onEventEditCell": {
          "guessedname": "onEventEditCell",
          "guessedtype": "function",
          "deprecated": "Use onEventShowCellEditor."
        },
        "onShow": {
          "guessedname": "onShow",
          "guessedtype": "function",
          "description": "Setting display:none on DataTable or any parent may impact width validations.\nAfter setting display back to \"\", implementers should call this method to \nmanually perform those validations."
        },
        "unselectRow": {
          "guessedname": "unselectRow",
          "guessedtype": "function",
          "description": "Sets given row to the unselected state.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String | YAHOO.widget.Record | Number",
              "description": "  HTML element\nreference or ID string, Record instance, or RecordSet position index."
            }
          ]
        },
        "getTdEl": {
          "guessedname": "getTdEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to a TD element.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | String | Object} TD element or child of a TD element, or\nobject literal of syntax {record:oRecord, column:oColumn",
              "description": " ."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TD element."
          }
        },
        "_formatTdEl": {
          "guessedname": "_formatTdEl",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Associated Column instance."
            },
            {
              "name": "elTd",
              "type": "HTMLElement",
              "description": "  An unformatted TD element."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  Column key index."
            },
            {
              "name": "isLast",
              "type": "Boolean",
              "description": "  True if Column is last key of the ColumnSet."
            }
          ],
          "description": "Formats a basic TD element.",
          "return": {
            "type": "HTMLElement",
            "description": "A formatted TD element."
          }
        },
        "initializeTable": {
          "guessedname": "initializeTable",
          "guessedtype": "function",
          "description": "Resets a RecordSet with the given data and populates the page view\nwith the new data. Any previous data, and selection and sort states are\ncleared. New data should be added as a separate step."
        },
        "DataTable.editCheckbox": {
          "guessedname": "editCheckbox",
          "guessedtype": "function",
          "deprecated": "Use YAHOO.widget.CheckboxCellEditor."
        },
        "getTrEl": {
          "guessedname": "getTrEl",
          "guessedtype": "function",
          "description": "Returns the corresponding TR reference for a given DOM element, ID string or\ndirectly page row index. If the given identifier is a child of a TR element,\nthen DOM tree is traversed until a parent TR element is returned, otherwise\nnull.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String | Number | YAHOO.widget.Record",
              "description": "  Which row to\nget: by element reference, ID string, page row index, or Record."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TR element, or null."
          }
        },
        "getSelectedRows": {
          "guessedname": "getSelectedRows",
          "guessedtype": "function",
          "description": "Returns selected rows as an array of Record IDs.",
          "return": {
            "type": "String[]",
            "description": "Array of selected rows by Record ID."
          }
        },
        "doBeforeSortColumn": {
          "guessedname": "doBeforeSortColumn",
          "guessedtype": "function",
          "description": "Overridable method gives implementers a hook to show loading message before\nsorting Column.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "sSortDir",
              "type": "String",
              "description": "  YAHOO.widget.DataTable.CLASS_ASC or\nYAHOO.widget.DataTable.CLASS_DESC."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Return true to continue sorting Column."
          }
        },
        "getThLinerEl": {
          "guessedname": "getThLinerEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to a TH liner element. Needed to normalize for resizeable \nColumns, which have an additional resizer liner DIV element between the TH\nelement and the liner DIV element.",
          "params": [
            {
              "name": "theadCell",
              "type": "YAHOO.widget.Column | HTMLElement | String",
              "description": "  Column instance,\nDOM element reference, or string ID."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TH liner element."
          }
        },
        "unhighlightCell": {
          "guessedname": "unhighlightCell",
          "guessedtype": "function",
          "description": "Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given cell.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | String",
              "description": "  DOM element reference or ID string."
            }
          ]
        },
        "updateRows": {
          "guessedname": "updateRows",
          "guessedtype": "function",
          "description": "Starting with the given row, updates associated Records with the given data.\nThe number of rows to update are determined by the array of data provided.\nUndefined data (i.e., not an object literal) causes a row to be skipped. If\nany of the rows are on current page, the corresponding DOM elements are also\nupdated.",
          "params": [
            {
              "name": "startrow",
              "type": "YAHOO.widget.Record | Number | HTMLElement | String",
              "description": " \nStarting row to update: By Record instance, by Record's RecordSet\nposition index, by HTMLElement reference to the TR element, or by ID string\nof the TR element."
            },
            {
              "name": "aData",
              "type": "Object[]",
              "description": "  Array of object literal of data for the rows."
            }
          ]
        },
        "focusTbodyEl": {
          "guessedname": "focusTbodyEl",
          "guessedtype": "function",
          "description": "Brings focus to the TBODY element."
        },
        "DataTable.formatDropdown": {
          "guessedname": "formatDropdown",
          "static": "",
          "guessedtype": "function",
          "description": "Formats SELECT elements.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  Data value for the cell, or null."
            }
          ]
        },
        "reorderColumn": {
          "guessedname": "reorderColumn",
          "guessedtype": "function",
          "description": "Removes given Column and inserts into given tree index. NOTE: You\ncan only reorder non-nested Columns and top-level parent Columns. You cannot\nreorder a nested Column to an existing parent.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  New tree index."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "oColumn  Reordered Column instance."
          }
        },
        "DataTable.formatNumber": {
          "guessedname": "formatNumber",
          "static": "",
          "guessedtype": "function",
          "description": "Formats numbers.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  Data value for the cell, or null."
            }
          ]
        },
        "getRecord": {
          "guessedname": "getRecord",
          "guessedtype": "function",
          "description": "For the given identifier, returns the associated Record instance.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | Number | String",
              "description": "  DOM reference to a TR element (or\nchild of a TR element), RecordSet position index, or Record ID."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record",
            "description": "Record instance."
          }
        },
        "DataTable.formatCheckbox": {
          "guessedname": "formatCheckbox",
          "static": "",
          "guessedtype": "function",
          "description": "Formats a CHECKBOX element.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object | Boolean} Data value for the cell. Can be a simple\nBoolean to indicate whether checkbox is checked or not. Can be object literal\n{checked:bBoolean, label:sLabel",
              "description": " . Other forms of oData require a custom\nformatter."
            }
          ]
        },
        "DataTable.editDropdown": {
          "guessedname": "editDropdown",
          "guessedtype": "function",
          "deprecated": "Use YAHOO.widget.DropdownCellEditor."
        },
        "onEditorBlockEvent": {
          "guessedname": "onEditorBlockEvent",
          "guessedtype": "function",
          "description": "Public handler of the editorBlockEvent. By default, disables DataTable UI.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "_initCaptionEl": {
          "private": "",
          "guessedname": "_initCaptionEl",
          "guessedtype": "function",
          "description": "Creates HTML markup CAPTION element.",
          "params": [
            {
              "name": "sCaption",
              "type": "String",
              "description": "  Text for caption."
            }
          ]
        },
        "_initColgroupEl": {
          "private": "",
          "guessedname": "_initColgroupEl",
          "guessedtype": "function",
          "description": "Initializes COLGROUP and COL elements for managing minWidth.",
          "params": [
            {
              "name": "elTable",
              "type": "HTMLElement",
              "description": "  TABLE element into which to create COLGROUP."
            }
          ]
        },
        "_handleCellRangeSelectionByKey": {
          "private": "",
          "guessedname": "_handleCellRangeSelectionByKey",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"cellrange\".",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  Event object."
            }
          ]
        },
        "resetCellEditor": {
          "guessedname": "resetCellEditor",
          "guessedtype": "function",
          "deprecated": "Use destroyCellEditor"
        },
        "_initTheadEl": {
          "private": "",
          "guessedname": "_initTheadEl",
          "guessedtype": "function",
          "description": "Initializes THEAD element.",
          "params": [
            {
              "name": "elTable",
              "type": "HTMLElement",
              "description": "  TABLE element into which to create COLGROUP."
            },
            {
              "name": "Initialized",
              "type": "HTMLElement",
              "description": " THEAD element."
            }
          ]
        },
        "onPaginatorChange": {
          "guessedname": "onPaginatorChange",
          "guessedtype": "property",
          "description": "Alias for onPaginatorChange for backward compatibility",
          "deprecated": "Use onPaginatorChangeRequest"
        },
        "getSelectedCells": {
          "guessedname": "getSelectedCells",
          "guessedtype": "function",
          "description": "Returns selected cells as an array of object literals:\n{recordId:sRecordId, columnKey:sColumnKey}.",
          "return": {
            "type": "Object[]",
            "description": "Array of selected cells by Record ID and Column ID."
          }
        },
        "_onEditorBlockEvent": {
          "private": "",
          "guessedname": "_onEditorBlockEvent",
          "guessedtype": "function",
          "description": "Passes through blockEvent of the active CellEditor.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "_clearMinWidth": {
          "private": "",
          "guessedname": "_clearMinWidth",
          "guessedtype": "function",
          "description": "Clears minWidth.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Which Column."
            }
          ]
        },
        "deleteRow": {
          "guessedname": "deleteRow",
          "guessedtype": "function",
          "description": "Deletes the given row's Record from the RecordSet. If the row is on current page,\nthe corresponding DOM elements are also deleted.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String | Number",
              "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."
            }
          ]
        },
        "_onTableFocus": {
          "private": "",
          "guessedname": "_onTableFocus",
          "guessedtype": "function",
          "description": "Handles focus events on the DataTable instance.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The focus event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "renderPaginator": {
          "guessedname": "renderPaginator",
          "guessedtype": "function",
          "description": "Renders the Paginator to the DataTable UI"
        },
        "_updateTrEl": {
          "guessedname": "_updateTrEl",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "elTr",
              "type": "HTMLElement",
              "description": "  The TR element to update."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  The associated Record instance."
            }
          ],
          "description": "Formats the contents of the given TR's TD elements with data from the given\nRecord. Only innerHTML should change, nothing structural.",
          "return": {
            "type": "HTMLElement",
            "description": "DOM reference to the new TR element."
          }
        },
        "_setRowStripes": {
          "private": "",
          "guessedname": "_setRowStripes",
          "guessedtype": "function",
          "description": "Assigns the classes DT.CLASS_EVEN and DT.CLASS_ODD to one, many, or all TR elements.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String | Number",
              "description": "  (optional) HTML TR element reference\nor string ID, or page row index of where to start striping."
            },
            {
              "name": "range",
              "type": "Number",
              "description": "  (optional) If given, how many rows to stripe, otherwise\nstripe all the rows until the end."
            }
          ]
        },
        "_initTableEl": {
          "private": "",
          "guessedname": "_initTableEl",
          "guessedtype": "function",
          "description": "Creates HTML markup for TABLE, COLGROUP, THEAD and TBODY elements in outer\ncontainer element.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement",
              "description": "  Container element into which to create TABLE."
            }
          ]
        },
        "onDataReturnReplaceRows": {
          "guessedname": "onDataReturnReplaceRows",
          "guessedtype": "function",
          "description": "Callback function receives reponse from DataSource, replaces all existing\nRecords in  RecordSet, updates TR elements with new data, and updates state\nUI for pagination and sorting from payload data, if necessary.",
          "params": [
            {
              "name": "oRequest",
              "type": "MIXED",
              "description": "  Original generated request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  (optional) Additional argument(s)"
            }
          ]
        },
        "_onTheadClick": {
          "private": "",
          "guessedname": "_onTheadClick",
          "guessedtype": "function",
          "description": "Handles click events on the THEAD element.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The click event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "onDataReturnSetRecords": {
          "guessedname": "onDataReturnSetRecords",
          "guessedtype": "property",
          "description": "Alias for onDataReturnSetRows for backward compatibility",
          "deprecated": "Use onDataReturnSetRows"
        },
        "DataTable._cloneObject": {
          "guessedname": "_cloneObject",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": "  Object."
            }
          ],
          "description": "Clones object literal or array of object literals."
        },
        "_setColumnWidth": {
          "private": "",
          "guessedname": "_setColumnWidth",
          "guessedtype": "function",
          "description": "Sets liner DIV elements of given Column to given width. When value should be\nauto-calculated to fit content overflow is set to visible, otherwise overflow\nis set to hidden. No validations against minimum width and no updating\nColumn.width value.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "sWidth",
              "type": "String",
              "description": "  New width value."
            },
            {
              "name": "sOverflow",
              "type": "String",
              "description": "  Should be \"hidden\" when Column width is explicitly\nbeing set to a value, but should be \"visible\" when Column is meant to auto-fit content."
            }
          ]
        },
        "_initMsgTbodyEl": {
          "private": "",
          "guessedname": "_initMsgTbodyEl",
          "guessedtype": "function",
          "description": "Initializes TBODY element for messaging.",
          "params": [
            {
              "name": "elTable",
              "type": "HTMLElement",
              "description": "  TABLE element into which to create TBODY"
            }
          ]
        },
        "getRecordIndex": {
          "guessedname": "getRecordIndex",
          "guessedtype": "function",
          "description": "Returns Record index for given TR element or page row index.",
          "params": [
            {
              "name": "row",
              "type": "YAHOO.widget.Record | HTMLElement | Number",
              "description": "  Record instance, TR\nelement reference or page row index."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Record's RecordSet index, or null."
          }
        },
        "getAboveTdEl": {
          "guessedname": "getAboveTdEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the above TD element from the given cell, or null.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | String | Object} DOM element reference or string ID, or\nobject literal of syntax {record:oRecord, column:oColumn",
              "description": "  from which to get next TD element."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to next TD element, or null."
          }
        },
        "_onTableKeypress": {
          "private": "",
          "guessedname": "_onTableKeypress",
          "guessedtype": "function",
          "description": "Handles keypress events on the TABLE. Mainly to support stopEvent on Mac.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The key event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "updateCell": {
          "guessedname": "updateCell",
          "guessedtype": "function",
          "description": "For the given row and column, updates the Record with the given data. If the\ncell is on current page, the corresponding DOM elements are also updated.",
          "params": [
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column | String | Number",
              "description": "  A Column key, or a ColumnSet key index."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  New data value for the cell."
            }
          ]
        },
        "getMsgTdEl": {
          "guessedname": "getMsgTdEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the TD element within the secondary TBODY that is\nused to display messages.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TD element."
          }
        },
        "_initColumnSet": {
          "private": "",
          "guessedname": "_initColumnSet",
          "guessedtype": "function",
          "description": "Initializes ColumnSet.",
          "params": [
            {
              "name": "aColumnDefs",
              "type": "Object[]",
              "description": "  Array of object literal Column definitions."
            }
          ]
        },
        "_handleSingleSelectionByKey": {
          "private": "",
          "guessedname": "_handleSingleSelectionByKey",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"single\".",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  Event object."
            }
          ]
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Renders the view with existing Records from the RecordSet while\nmaintaining sort, pagination, and selection states. For performance, reuses\nexisting DOM elements when possible while deleting extraneous elements."
        },
        "_getSelectionAnchor": {
          "private": "",
          "guessedname": "_getSelectionAnchor",
          "guessedtype": "function",
          "description": "Returns object literal of values that represent the selection anchor. Used\nto determine selection behavior resulting from a user event.",
          "params": [
            {
              "name": "oTrigger",
              "type": "Object",
              "description": "  (Optional) Object literal of selection trigger values\n(for key events)."
            }
          ]
        },
        "DataTable.formatButton": {
          "guessedname": "formatButton",
          "static": "",
          "guessedtype": "function",
          "description": "Formats a BUTTON element.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object | Boolean",
              "description": "  Data value for the cell. By default, the value\nis what gets written to the BUTTON."
            }
          ]
        },
        "_initDraggableColumns": {
          "guessedname": "_initDraggableColumns",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes top-level Column TH elements into DD instances."
        },
        "onPaginatorChangeRequest": {
          "guessedname": "onPaginatorChangeRequest",
          "guessedtype": "function",
          "description": "Responds to new Pagination states. By default, updates the UI to reflect the\nnew state. If \"dynamicData\" is true, current selections are purged before\na request is sent to the DataSource for data for the new state (using the\nrequest returned by \"generateRequest()\").",
          "params": [
            {
              "name": "oPaginatorState",
              "type": "Object",
              "description": "  An object literal describing the proposed pagination state."
            }
          ]
        },
        "DataTable.editTextarea": {
          "guessedname": "editTextarea",
          "guessedtype": "function",
          "deprecated": "Use YAHOO.widget.TextareaCellEditor"
        },
        "_onEditorRevertEvent": {
          "private": "",
          "guessedname": "_onEditorRevertEvent",
          "guessedtype": "function",
          "description": "Passes through revertEvent of the active CellEditor.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "onEventUnhighlightCell": {
          "guessedname": "onEventUnhighlightCell",
          "guessedtype": "function",
          "description": "Overridable custom event handler to unhighlight cell. Accounts for spurious\ncaused-by-child events.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "DataTable.editRadio": {
          "guessedname": "editRadio",
          "guessedtype": "function",
          "deprecated": "Use YAHOO.widget.RadioCellEditor."
        },
        "_onTableDblclick": {
          "private": "",
          "guessedname": "_onTableDblclick",
          "guessedtype": "function",
          "description": "Handles dblclick events on the DataTable instance.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The dblclick event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "onDataReturnSetRows": {
          "guessedname": "onDataReturnSetRows",
          "guessedtype": "function",
          "description": "Callback function receives reponse from DataSource and populates the\nRecordSet with the results.",
          "params": [
            {
              "name": "oRequest",
              "type": "MIXED",
              "description": "  Original generated request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  (optional) Additional argument(s)"
            }
          ]
        },
        "getColumnById": {
          "guessedname": "getColumnById",
          "guessedtype": "function",
          "description": "For the given Column ID, returns the associated Column instance. Note: For\ngetting Columns by key, please use the method getColumn().",
          "params": [
            {
              "name": "column",
              "type": "String",
              "description": "  Column ID string."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "Column instance."
          }
        },
        "refreshView": {
          "guessedname": "refreshView",
          "guessedtype": "function",
          "deprecated": "Use render."
        },
        "_destroyColumnHelpers": {
          "guessedname": "_destroyColumnHelpers",
          "private": "",
          "guessedtype": "function",
          "description": "Destroys elements associated with Column functionality: ColumnDD and ColumnResizers."
        },
        "_destroyTableEl": {
          "guessedname": "_destroyTableEl",
          "private": "",
          "guessedtype": "function",
          "description": "Destroy's the DataTable TABLE element, if available."
        },
        "_handleCellBlockSelectionByKey": {
          "private": "",
          "guessedname": "_handleCellBlockSelectionByKey",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"cellblock\".",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  Event object."
            }
          ]
        },
        "disable": {
          "guessedname": "disable",
          "guessedtype": "function",
          "description": "Disables DataTable UI."
        },
        "_deleteTrEl": {
          "guessedname": "_deleteTrEl",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | Number",
              "description": "  TR element reference or Datatable page row index."
            }
          ],
          "description": "Deletes TR element by DOM reference or by DataTable page row index.",
          "return": {
            "type": "Boolean",
            "description": "Returns true if successful, else returns false."
          }
        },
        "_setFirstRow": {
          "guessedname": "_setFirstRow",
          "private": "",
          "guessedtype": "function",
          "description": "Assigns the class YAHOO.widget.DataTable.CLASS_FIRST to the first TR element\nof the DataTable page and updates internal tracker."
        },
        "_focusEl": {
          "private": "",
          "guessedname": "_focusEl",
          "guessedtype": "function",
          "description": "Sets focus on the given element.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  Element."
            }
          ]
        },
        "onDataReturnAppendRows": {
          "guessedname": "onDataReturnAppendRows",
          "guessedtype": "function",
          "description": "Callback function receives data from DataSource and appends to an existing\nDataTable new Records and, if applicable, creates or updates\ncorresponding TR elements.",
          "params": [
            {
              "name": "sRequest",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  (optional) Additional argument(s)"
            }
          ]
        },
        "_repaintOpera": {
          "guessedname": "_repaintOpera",
          "private": "",
          "guessedtype": "property",
          "description": "Forces Opera repaint."
        },
        "_initResizeableColumns": {
          "guessedname": "_initResizeableColumns",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes resizeability on key Column TH elements."
        },
        "selectCell": {
          "guessedname": "selectCell",
          "guessedtype": "function",
          "description": "Sets given cell to the selected state.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | String",
              "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."
            }
          ]
        },
        "doBeforeLoadData": {
          "guessedname": "doBeforeLoadData",
          "guessedtype": "function",
          "description": "Overridable method gives implementers a hook to access data before\nit gets added to RecordSet and rendered to the TBODY.",
          "params": [
            {
              "name": "sRequest",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  additional arguments"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Return true to continue loading data into RecordSet and\nupdating DataTable with new Records, false to cancel."
          }
        },
        "handleDataReturnPayload": {
          "guessedname": "handleDataReturnPayload",
          "param": "oRequest {MIXED} Original generated request.",
          "guessedtype": "function",
          "params": [
            {
              "name": "oRequest",
              "type": "MIXED",
              "description": "  Original generated request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  State values."
            }
          ],
          "description": "Hook to update oPayload before consumption.",
          "return": {
            "type": "MIXED",
            "description": "oPayload  State values."
          }
        },
        "getFirstTdEl": {
          "guessedname": "getFirstTdEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the first TD element in the DataTable page (by default),\nthe first TD element of the optionally given row, or null.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement",
              "description": "  (optional) row from which to get first TD"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TD element."
          }
        },
        "getLastSelectedCell": {
          "guessedname": "getLastSelectedCell",
          "guessedtype": "function",
          "description": "Returns last selected cell as an object literal:\n{recordId:sRecordId, columnKey:sColumnKey}.",
          "return": {
            "type": "Object",
            "description": "Object literal representation of a cell."
          }
        },
        "_onTbodyClick": {
          "private": "",
          "guessedname": "_onTbodyClick",
          "guessedtype": "function",
          "description": "Handles click events on the primary TBODY element.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The click event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "DataTable.formatCurrency": {
          "guessedname": "formatCurrency",
          "static": "",
          "guessedtype": "function",
          "description": "Formats currency. Default unit is USD.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Number",
              "description": "  Data value for the cell."
            }
          ]
        },
        "getFirstTrEl": {
          "guessedname": "getFirstTrEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the first TR element in the DataTable page, or null.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TR element."
          }
        },
        "getMsgTbodyEl": {
          "guessedname": "getMsgTbodyEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the DataTable's secondary TBODY element that is\nused to display messages.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TBODY element."
          }
        },
        "getBody": {
          "guessedname": "getBody",
          "guessedtype": "function",
          "deprecated": "Use getTbodyEl()."
        },
        "_setSelections": {
          "guessedname": "_setSelections",
          "private": "",
          "guessedtype": "function",
          "description": "Assigns the class DT.CLASS_SELECTED to TR and TD elements."
        },
        "_initColumnSort": {
          "guessedname": "_initColumnSort",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes Column sorting."
        },
        "getPreviousTdEl": {
          "guessedname": "getPreviousTdEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the previous TD element from the given cell, or null.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | String | Object} DOM element reference or string ID, or\nobject literal of syntax {record:oRecord, column:oColumn",
              "description": "  from which to get previous TD element."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to previous TD element, or null."
          }
        },
        "getPreviousTrEl": {
          "guessedname": "getPreviousTrEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the previous TR element from the given TR element, or null.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String | Number | YAHOO.widget.Record",
              "description": "  Element\nreference, ID string, page row index, or Record from which to get previous TR element."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to previous TR element."
          }
        },
        "_restoreMinWidth": {
          "private": "",
          "guessedname": "_restoreMinWidth",
          "guessedtype": "function",
          "description": "Restores minWidth.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Which Column."
            }
          ]
        },
        "getTrIndex": {
          "guessedname": "getTrIndex",
          "guessedtype": "function",
          "description": "Returns the page row index of given row. Returns null if the row is not on the\ncurrent DataTable page.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String | YAHOO.widget.Record | Number",
              "description": "  DOM or ID\nstring reference to an element within the DataTable page, a Record instance,\nor a Record's RecordSet index."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Page row index, or null if row does not exist or is not on current page."
          }
        },
        "_onTableMouseover": {
          "private": "",
          "guessedname": "_onTableMouseover",
          "guessedtype": "function",
          "description": "Handles mouseover events on the DataTable instance.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The mouseover event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "DataTable.editDate": {
          "guessedname": "editDate",
          "guessedtype": "function",
          "deprecated": "Use YAHOO.widget.DateCellEditor."
        },
        "_removeColgroupColEl": {
          "private": "",
          "guessedname": "_removeColgroupColEl",
          "guessedtype": "function",
          "description": "Removes a COL element to COLGROUP at given index.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  Index of removed COL element."
            }
          ]
        },
        "doBeforeShowCellEditor": {
          "guessedname": "doBeforeShowCellEditor",
          "guessedtype": "function",
          "description": "Overridable abstract method to customize CellEditor before showing.",
          "params": [
            {
              "name": "oCellEditor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Return true to continue showing CellEditor."
          }
        },
        "setColumnWidth": {
          "guessedname": "setColumnWidth",
          "guessedtype": "function",
          "description": "Sets given Column to given pixel width. If new width is less than minimum\nwidth, sets to minimum width. Updates oColumn.width value.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "nWidth",
              "type": "Number",
              "description": "  New width in pixels. A null value auto-sizes Column,\nsubject to minWidth and maxAutoWidth validations."
            }
          ]
        },
        "_defaultPaginatorContainers": {
          "private": "",
          "guessedname": "_defaultPaginatorContainers",
          "guessedtype": "function",
          "description": "Returns the default containers used for Paginators.  If create param is\npassed, the containers will be created and added to the DataTable container.",
          "params": [
            {
              "name": "create",
              "type": "boolean",
              "description": "  Create the default containers if not found"
            }
          ]
        },
        "_onDropdownChange": {
          "private": "",
          "guessedname": "_onDropdownChange",
          "guessedtype": "function",
          "description": "Handles change events on SELECT elements within DataTable.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The change event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "onEventUnhighlightRow": {
          "guessedname": "onEventUnhighlightRow",
          "guessedtype": "function",
          "description": "Overridable custom event handler to unhighlight row. Accounts for spurious\ncaused-by-child events.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "_getColumnClassnames": {
          "guessedname": "_getColumnClassNames",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "aAddClasses",
              "type": "String[]",
              "description": "  An array of additional classnames to add to the\nreturn value."
            }
          ],
          "description": "Retruns classnames to represent current Column states.",
          "return": {
            "type": "String",
            "description": "A String of classnames to be assigned to TH or TD elements\nfor given Column."
          }
        },
        "_unsetLastRow": {
          "guessedname": "_unsetLastRow",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the class YAHOO.widget.DataTable.CLASS_LAST from the last TR element\nof the DataTable page and updates internal tracker."
        },
        "getLastSelectedRecord": {
          "guessedname": "getLastSelectedRecord",
          "guessedtype": "function",
          "description": "Returns last selected Record ID.",
          "return": {
            "type": "String",
            "description": "Record ID of last selected row."
          }
        },
        "removeColumn": {
          "guessedname": "removeColumn",
          "guessedtype": "function",
          "description": "Removes given Column. NOTE: You cannot remove nested Columns. You can only remove\nnon-nested Columns, and top-level parent Columns (which will remove all\nchildren Columns).",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "oColumn  Removed Column instance."
          }
        },
        "unhighlightRow": {
          "guessedname": "unhighlightRow",
          "guessedtype": "function",
          "description": "Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given row.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String",
              "description": "  DOM element reference or ID string."
            }
          ]
        },
        "_onEditorUnblockEvent": {
          "private": "",
          "guessedname": "_onEditorUnblockEvent",
          "guessedtype": "function",
          "description": "Passes through unblockEvent of the active CellEditor.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "getCellEditor": {
          "guessedname": "getCellEditor",
          "guessedtype": "function",
          "description": "Returns current CellEditor instance, or null.",
          "return": {
            "type": "YAHOO.widget.CellEditor",
            "description": "CellEditor instance."
          }
        },
        "DataTable.formatTextbox": {
          "guessedname": "formatTextbox",
          "static": "",
          "guessedtype": "function",
          "description": "Formats INPUT TYPE=TEXT elements.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  (Optional) Data value for the cell."
            }
          ]
        },
        "_setColumnWidthDynStyles": {
          "private": "",
          "guessedname": "_setColumnWidthDynStyles",
          "guessedtype": "function",
          "description": "Updates width of a Column's liner DIV elements by dynamically creating a\nSTYLE node and writing and updating CSS style rules to it. If this fails during\nruntime, the fallback method _setColumnWidthDynFunction() will be called.\nNotes: This technique is not performant in IE6. IE7 crashes if DataTable is\nnested within another TABLE element. For these cases, it is recommended to\nuse the method _setColumnWidthDynFunction by setting _bDynStylesFallback to TRUE.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "sWidth",
              "type": "String",
              "description": "  New width value."
            }
          ]
        },
        "onEventShowCellEditor": {
          "guessedname": "onEventShowCellEditor",
          "guessedtype": "function",
          "description": "Overridable custom event handler to edit cell.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "onEditorUnblockEvent": {
          "guessedname": "onEditorUnblockEvent",
          "guessedtype": "function",
          "description": "Public handler of the editorUnblockEvent. By default, undisables DataTable UI.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "_syncColWidths": {
          "guessedname": "_syncColWidths",
          "guessedtype": "function",
          "deprecated": "Use validateColumnWidths."
        },
        "undisable": {
          "guessedname": "undisable",
          "guessedtype": "function",
          "description": "Undisables DataTable UI."
        },
        "_initThEl": {
          "private": "",
          "guessedname": "_initThEl",
          "guessedtype": "function",
          "description": "Populates TH element as defined by Column.",
          "params": [
            {
              "name": "elTh",
              "type": "HTMLElement",
              "description": "  TH element reference."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column object."
            }
          ]
        },
        "getThEl": {
          "guessedname": "getThEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to a TH element.",
          "params": [
            {
              "name": "theadCell",
              "type": "YAHOO.widget.Column | HTMLElement | String",
              "description": "  Column instance,\nDOM element reference, or string ID."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TH element."
          }
        },
        "unselectAllRows": {
          "guessedname": "unselectAllRows",
          "guessedtype": "function",
          "description": "Clears out all row selections."
        },
        "_setLastRow": {
          "guessedname": "_setLastRow",
          "private": "",
          "guessedtype": "function",
          "description": "Assigns the class YAHOO.widget.DataTable.CLASS_LAST to the last TR element\nof the DataTable page and updates internal tracker."
        },
        "getTableEl": {
          "guessedname": "getTableEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the DataTable's TABLE element.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TABLE element."
          }
        },
        "getSelectedTrEls": {
          "guessedname": "getSelectedTrEls",
          "guessedtype": "function",
          "description": "Returns array of selected TR elements on the page.",
          "return": {
            "type": "HTMLElement[]",
            "description": "Array of selected TR elements."
          }
        },
        "_createTrEl": {
          "guessedname": "_addTrEl",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance"
            }
          ],
          "description": "Create a new TR element for a given Record and appends it with the correct\nnumber of Column-state-classed TD elements. Striping is the responsibility of\nthe calling function, which may decide to stripe the single row, a subset of\nrows, or all the rows.",
          "return": {
            "type": "HTMLElement",
            "description": "The new TR element.  This must be added to the DOM."
          }
        },
        "onDataReturnInitializeTable": {
          "guessedname": "onDataReturnInitializeTable",
          "guessedtype": "function",
          "description": "Callback function receives data from DataSource and populates an entire\nDataTable with Records and TR elements, clearing previous Records, if any.",
          "params": [
            {
              "name": "sRequest",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object."
            },
            {
              "name": "oPayload",
              "type": "MIXED",
              "description": "  (optional) Additional argument(s)"
            }
          ]
        },
        "_onEditorCancelEvent": {
          "private": "",
          "guessedname": "_onEditorCancelEvent",
          "guessedtype": "function",
          "description": "Passes through cancelEvent of the active CellEditor.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "_onEditorShowEvent": {
          "private": "",
          "guessedname": "_onEditorShowEvent",
          "guessedtype": "function",
          "description": "Passes through showEvent of the active CellEditor.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "_initColumnHelpers": {
          "guessedname": "_initColumnHelpers",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes elements associated with Column functionality: ColumnDD and ColumnResizers."
        },
        "sortColumn": {
          "guessedname": "sortColumn",
          "guessedtype": "function",
          "description": "Sorts given Column. If \"dynamicData\" is true, current selections are purged before\na request is sent to the DataSource for data for the new state (using the\nrequest returned by \"generateRequest()\").",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "sDir",
              "type": "String",
              "description": "  (Optional) YAHOO.widget.DataTable.CLASS_ASC or\nYAHOO.widget.DataTable.CLASS_DESC"
            }
          ]
        },
        "_initTbodyEl": {
          "private": "",
          "guessedname": "_initTbodyEl",
          "guessedtype": "function",
          "description": "Initializes TBODY element for data.",
          "params": [
            {
              "name": "elTable",
              "type": "HTMLElement",
              "description": "  TABLE element into which to create TBODY ."
            }
          ]
        },
        "DataTable.validateNumber": {
          "guessedname": "validateNumber",
          "static": "",
          "guessedtype": "function",
          "description": "Validates data value to type Number, doing type conversion as\nnecessary. A valid Number value is return, else null is returned\nif input value does not validate.",
          "params": [
            {
              "name": "oData",
              "type": "Object",
              "description": "  Data to validate."
            }
          ]
        },
        "deleteRows": {
          "guessedname": "deleteRows",
          "guessedtype": "function",
          "description": "Convenience method to delete multiple rows.",
          "params": [
            {
              "name": "row",
              "type": "HTMLElement | String | Number",
              "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."
            },
            {
              "name": "count",
              "type": "Number",
              "description": "  (optional) How many rows to delete. A negative value\nwill delete towards the beginning."
            }
          ]
        },
        "_onTheadKeydown": {
          "private": "",
          "guessedname": "_onTheadKeydown",
          "guessedtype": "function",
          "description": "Handles keydown events on the THEAD element.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The key event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "destroyCellEditor": {
          "guessedname": "destroyCellEditor",
          "guessedtype": "function",
          "description": "Destroys active CellEditor instance and UI."
        },
        "unselectColumn": {
          "guessedname": "unselectColumn",
          "guessedtype": "function",
          "description": "Unselects given Column. NOTE: You cannot select/unselect nested Columns. You can only\nselect/unselect non-nested Columns, and bottom-level key Columns.",
          "params": [
            {
              "name": "column",
              "type": "HTMLElement | String | Number",
              "description": "  DOM reference or ID string to a\nTH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index."
            }
          ]
        },
        "_updatePaginator": {
          "private": "",
          "guessedname": "_updatePaginator",
          "guessedtype": "function",
          "description": "Method executed during set() operation for the \"paginator\" attribute.\nAdds and/or severs event listeners between DataTable and Paginator",
          "params": [
            {
              "name": "newPag",
              "type": "Paginator",
              "description": "  Paginator instance (or null) for DataTable to use"
            }
          ]
        },
        "_onRenderChainEnd": {
          "guessedname": "_onRenderChainEnd",
          "private": "",
          "guessedtype": "function",
          "description": "Validates minWidths whenever the render chain ends."
        },
        "onEventSelectRow": {
          "guessedname": "onEventSelectRow",
          "guessedtype": "function",
          "description": "Overridable custom event handler to manage selection according to desktop paradigm.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "isSelected": {
          "guessedname": "isSelected",
          "guessedtype": "function",
          "description": "Returns true if given item is selected, false otherwise.",
          "params": [
            {
              "name": "o",
              "type": "String | HTMLElement | YAHOO.widget.Record | Number\n{record:YAHOO.widget.Record, column:YAHOO.widget.Column} ",
              "description": "  TR or TD element by\nreference or ID string, a Record instance, a RecordSet position index,\nor an object literal representation\nof a cell."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True if item is selected."
          }
        },
        "_onTheadFocus": {
          "private": "",
          "guessedname": "_onTheadFocus",
          "guessedtype": "function",
          "description": "Handles focus events on the THEAD element.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The focus event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "getDataSource": {
          "guessedname": "getDataSource",
          "guessedtype": "function",
          "description": "Returns the DataTable instance's DataSource instance.",
          "return": {
            "type": "YAHOO.util.DataSource",
            "description": "DataSource instance."
          }
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Brings focus to the TBODY element. Alias to focusTbodyEl."
        },
        "_initEvents": {
          "guessedname": "_initEvents",
          "private": "",
          "guessedtype": "function",
          "description": "Initialize internal event listeners"
        },
        "getState": {
          "guessedname": "getState",
          "guessedtype": "function",
          "description": "Returns on object literal representing the DataTable instance's current\nstate with the following properties:\n<dl>\n<dt>pagination</dt>\n<dd>Instance of YAHOO.widget.Paginator</dd>\n<dt>sortedBy</dt>\n<dd>\n<dl>\n<dt>sortedBy.key</dt>\n<dd>{String} Key of sorted Column</dd>\n<dt>sortedBy.dir</dt>\n<dd>{String} Initial sort direction, either YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC</dd>\n</dl>\n</dd>\n<dt>selectedRows</dt>\n<dd>Array of selected rows by Record ID.</dd>\n<dt>selectedCells</dt>\n<dd>Selected cells as an array of object literals:\n{recordId:sRecordId, columnKey:sColumnKey}</dd>\n</dl>",
          "return": {
            "type": "Object",
            "description": "DataTable instance state object literal values."
          }
        },
        "_handlePaginatorChange": {
          "private": "",
          "guessedname": "_handlePaginatorChange",
          "guessedtype": "function",
          "description": "Update the UI infrastructure in response to a \"paginator\" attribute change.",
          "params": [
            {
              "name": "e",
              "type": "Object",
              "description": "  Change event object containing keys 'type','newValue',\nand 'prevValue'"
            }
          ]
        },
        "onEventUnhighlightColumn": {
          "guessedname": "onEventUnhighlightColumn",
          "guessedtype": "function",
          "description": "Overridable custom event handler to unhighlight Column. Accounts for spurious\ncaused-by-child events.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "getColumnSortDir": {
          "guessedname": "getColumnSortDir",
          "guessedtype": "function",
          "description": "For the given Column instance, returns next direction to sort.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oSortedBy",
              "type": "Object",
              "description": "  (optional) Specify the state, or use current state."
            }
          ],
          "return": {
            "type": "String",
            "description": "YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTableCLASS_DESC."
          }
        },
        "highlightCell": {
          "guessedname": "highlightCell",
          "guessedtype": "function",
          "description": "Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given cell.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | String",
              "description": "  DOM element reference or ID string."
            }
          ]
        },
        "DataTable.editTextbox": {
          "guessedname": "editTextbox",
          "guessedtype": "function",
          "deprecated": "Use YAHOO.widget.TextboxCellEditor"
        },
        "_initDataSource": {
          "private": "",
          "guessedname": "_initDataSource",
          "guessedtype": "function",
          "description": "Initializes DataSource.",
          "params": [
            {
              "name": "oDataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            }
          ]
        },
        "_destroyColgroupEl": {
          "guessedname": "_destroyColgroupEl",
          "private": "",
          "guessedtype": "function",
          "description": "Destroy's the DataTable COLGROUP element, if available."
        },
        "getTheadEl": {
          "guessedname": "getTheadEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the DataTable's THEAD element.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to THEAD element."
          }
        },
        "onEventSelectCell": {
          "guessedname": "onEventSelectCell",
          "guessedtype": "function",
          "description": "Overridable custom event handler to select cell.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "initAttributes": {
          "private": "",
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Implementation of Element's abstract method. Sets up config values.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal definition of configuration values."
            }
          ]
        },
        "_initConfigs": {
          "private": "",
          "guessedname": "_initConfigs",
          "guessedtype": "function",
          "description": "Initializes object literal of config values.",
          "params": [
            {
              "name": "oConfig",
              "type": "Object",
              "description": "  Object literal of config values."
            }
          ]
        },
        "getCell": {
          "guessedname": "getCell",
          "guessedtype": "function",
          "deprecated": "Use getTdEl()."
        },
        "_initCellEditorEl": {
          "private": "",
          "guessedname": "_initCellEditorEl",
          "guessedtype": "function",
          "description": "Backward compatibility.",
          "deprecated": ""
        },
        "_onEditorSaveEvent": {
          "private": "",
          "guessedname": "_onEditorSaveEvent",
          "guessedtype": "function",
          "description": "Passes through saveEvent of the active CellEditor.",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "   Custom Event args."
            }
          ]
        },
        "_initDomElements": {
          "private": "",
          "guessedname": "_initDomElements",
          "guessedtype": "function",
          "description": "Initializes DOM elements.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement | String} HTML DIV element by reference or ID. \nreturn {Boolean",
              "description": "  False in case of error, otherwise true"
            }
          ]
        },
        "showColumn": {
          "guessedname": "showColumn",
          "guessedtype": "function",
          "description": "Shows given Column. NOTE: You cannot hide/show nested Columns. You can only\nhide/show non-nested Columns, and top-level parent Columns (which will\nhide/show all children Columns).",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            }
          ]
        },
        "_destroyTbodyEl": {
          "guessedname": "_destroyTbodyEl",
          "private": "",
          "guessedtype": "function",
          "description": "Destroy's the DataTable TBODY element, if available."
        },
        "_runRenderChain": {
          "guessedname": "_runRenderChain",
          "private": "",
          "guessedtype": "function",
          "description": "Internal wrapper calls run() on render Chain instance."
        },
        "_handleSingleSelectionByMouse": {
          "private": "",
          "guessedname": "_handleSingleSelectionByMouse",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"single\".",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "getColumn": {
          "guessedname": "getColumn",
          "guessedtype": "function",
          "description": "For the given identifier, returns the associated Column instance. Note: For\ngetting Columns by Column ID string, please use the method getColumnById().",
          "params": [
            {
              "name": "column",
              "type": "HTMLElement | String | Number",
              "description": "  TH/TD element (or child of a\nTH/TD element), a Column key, or a ColumnSet key index."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "Column instance."
          }
        },
        "onEventCancelCellEditor": {
          "guessedname": "onEventCancelCellEditor",
          "guessedtype": "function",
          "description": "Overridable custom event handler to cancel active CellEditor."
        },
        "_onTbodyFocus": {
          "private": "",
          "guessedname": "_onTbodyFocus",
          "guessedtype": "function",
          "description": "Handles focus events on the TBODY element.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The focus event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "getTdLinerEl": {
          "guessedname": "getTdLinerEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to a TD liner element.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | Object} TD element or child of a TD element, or\nobject literal of syntax {record:oRecord, column:oColumn",
              "description": " ."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TD liner element."
          }
        },
        "DataTable.formatDefault": {
          "guessedname": "formatDefault",
          "static": "",
          "guessedtype": "function",
          "description": "Default cell formatter",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  (Optional) Data value for the cell."
            }
          ]
        },
        "getBelowTdEl": {
          "guessedname": "getBelowTdEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the below TD element from the given cell, or null.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLElement | String | Object} DOM element reference or string ID, or\nobject literal of syntax {record:oRecord, column:oColumn",
              "description": "  from which to get previous TD element."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "Reference to previous TD element, or null."
          }
        },
        "DataTable.formatEmail": {
          "guessedname": "formatEmail",
          "static": "",
          "guessedtype": "function",
          "description": "Formats emails.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  Data value for the cell, or null."
            }
          ]
        },
        "_unselectAllTrEls": {
          "guessedname": "_unselectAllTrEls",
          "private": "",
          "guessedtype": "function",
          "description": "Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED\nfrom all TR elements on the page."
        },
        "DataTable.formatLink": {
          "guessedname": "formatLink",
          "static": "",
          "guessedtype": "function",
          "description": "Formats links.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  Data value for the cell, or null."
            }
          ]
        },
        "onEventHighlightCell": {
          "guessedname": "onEventHighlightCell",
          "guessedtype": "function",
          "description": "Overridable custom event handler to highlight cell. Accounts for spurious\ncaused-by-child events.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "_destroyMsgTbodyEl": {
          "guessedname": "_destroyMsgTbodyEl",
          "private": "",
          "guessedtype": "function",
          "description": "Destroy's the DataTable message TBODY element, if available."
        },
        "DataTable.formatTheadCell": {
          "guessedname": "formatTheadCell",
          "guessedtype": "function",
          "description": "Outputs markup into the given TH based on given Column.",
          "params": [
            {
              "name": "elCellLabel",
              "type": "HTMLElement",
              "description": "  The label SPAN element within the TH liner,\nnot the liner DIV element."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oSortedBy",
              "type": "Object",
              "description": "  Sort state object literal."
            }
          ],
          "deprecated": "Use formatTheadCell."
        },
        "_destroyContainerEl": {
          "private": "",
          "guessedname": "_destroyContainerEl",
          "guessedtype": "function",
          "description": "Destroy's the DataTable outer container element, if available.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement",
              "description": "  Reference to the container element."
            }
          ]
        },
        "_handleSingleCellSelectionByKey": {
          "private": "",
          "guessedname": "_handleSingleCellSelectionByKey",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"singlecell\".",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  Event object."
            }
          ]
        },
        "_setColumnWidthDynFunction": {
          "private": "",
          "guessedname": "_setColumnWidthDynFunction",
          "guessedtype": "function",
          "description": "Updates width of a Column's liner DIV elements by dynamically creating a\nfunction to update all element style properties in one pass. Note: This\ntechnique is not supported in sandboxed environments that prohibit EVALs.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "sWidth",
              "type": "String",
              "description": "  New width value."
            }
          ]
        },
        "_insertColgroupColEl": {
          "private": "",
          "guessedname": "_insertColgroupColEl",
          "guessedtype": "function",
          "description": "Adds a COL element to COLGROUP at given index.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  Index of new COL element."
            }
          ]
        },
        "_handleStandardSelectionByKey": {
          "private": "",
          "guessedname": "_handleStandardSelectionByKey",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a key event when selection mode\nis set to \"standard\".",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  Event object."
            }
          ]
        },
        "getRecordSet": {
          "guessedname": "getRecordSet",
          "guessedtype": "function",
          "description": "Returns the DataTable instance's RecordSet instance.",
          "return": {
            "type": "YAHOO.widget.RecordSet",
            "description": "RecordSet instance."
          }
        },
        "DataTable.formatTextarea": {
          "guessedname": "formatTextarea",
          "static": "",
          "guessedtype": "function",
          "description": "Formats TEXTAREA elements.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to format with markup."
            },
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  (Optional) Data value for the cell."
            }
          ]
        },
        "onEventFormatCell": {
          "guessedname": "onEventFormatCell",
          "guessedtype": "function",
          "description": "Overridable custom event handler to format cell.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "_onTableMouseout": {
          "private": "",
          "guessedname": "_onTableMouseout",
          "guessedtype": "function",
          "description": "Handles mouseout events on the DataTable instance.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The mouseout event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.wiget.DataTable",
              "description": "  DataTable instance."
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "DataSource instance name, for logging.",
          "return": {
            "type": "String",
            "description": "Unique name of the DataSource instance."
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Nulls out the entire DataTable instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container. After\ncalling this method, the instance reference should be expliclitly nulled by\nimplementer, as in myDataTable = null. Use with caution!"
        },
        "_handleStandardSelectionByMouse": {
          "private": "",
          "guessedname": "_handleStandardSelectionByMouse",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"standard\".",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "doBeforePaginatorChange": {
          "guessedname": "doBeforePaginatorChange",
          "guessedtype": "function",
          "description": "Overridable method gives implementers a hook to show loading message before\nchanging Paginator value.",
          "params": [
            {
              "name": "oPaginatorState",
              "type": "Object",
              "description": "  An object literal describing the proposed pagination state."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Return true to continue changing Paginator value."
          }
        },
        "updateRow": {
          "guessedname": "updateRow",
          "guessedtype": "function",
          "description": "For the given row, updates the associated Record with the given data. If the\nrow is on current page, the corresponding DOM elements are also updated.",
          "params": [
            {
              "name": "row",
              "type": "YAHOO.widget.Record | Number | HTMLElement | String",
              "description": " \nWhich row to update: By Record instance, by Record's RecordSet\nposition index, by HTMLElement reference to the TR element, or by ID string\nof the TR element."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  Object literal of data for the row."
            }
          ]
        },
        "_handleCellRangeSelectionByMouse": {
          "private": "",
          "guessedname": "_handleCellRangeSelectionByMouse",
          "guessedtype": "function",
          "description": "Determines selection behavior resulting from a mouse event when selection mode\nis set to \"cellrange\".",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  Event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  Target element."
            }
          ]
        },
        "_getTrTemplateEl": {
          "private": "",
          "guessedname": "_getTrTemplateEl",
          "guessedtype": "function",
          "description": "Returns a new TR element template with TD elements classed with current\nColumn states.",
          "return": {
            "type": "HTMLElement",
            "description": "A TR element to be cloned and added to the DOM."
          }
        },
        "_reorderColgroupColEl": {
          "private": "",
          "guessedname": "_reorderColgroupColEl",
          "guessedtype": "function",
          "description": "Reorders a COL element from old index(es) to new index.",
          "params": [
            {
              "name": "aKeyIndexes",
              "type": "Number[]",
              "description": "  Array of indexes of removed COL element."
            },
            {
              "name": "newIndex",
              "type": "Number",
              "description": "  New index."
            }
          ]
        }
      },
      "name": "YAHOO.widget.DataTable",
      "extends": "YAHOO.util.Element",
      "guessedname": "DataTable",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "events": {
        "editorBlockEvent": {
          "description": "Fired when a CellEditor is blocked.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            }
          ]
        },
        "theadRowMouseupEvent": {
          "description": "Fired when a THEAD row has a mouseup.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "columnSetWidthEvent": {
          "description": "Fired when a column width is set.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            },
            {
              "name": "oArgs.width",
              "type": "Number",
              "description": "  The width in pixels."
            }
          ]
        },
        "editorKeydownEvent": {
          "description": "Fired when a CellEditor has a keydown.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            },
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            }
          ]
        },
        "rowClickEvent": {
          "description": "Fired when a row has a click.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "cellUpdateEvent": {
          "description": "Fired when a cell is updated.",
          "params": [
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The updated Record."
            },
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The updated Column."
            },
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Original data value of the updated cell."
            }
          ]
        },
        "tableBlurEvent": {
          "description": "Fired when the DataTable has a blur event."
        },
        "MSG_SORTDESCChange": {
          "name": "MSG_SORTDESCChange",
          "description": "Fires when the value for the configuration attribute 'MSG_SORTDESC' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "theadRowMouseoutEvent": {
          "description": "Fired when a THEAD row has a mouseout.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "theadKeyEvent": {
          "description": "Fired when the DataTable THEAD element has a key event.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's TABLE element."
            }
          ]
        },
        "columnUnhighlightEvent": {
          "description": "Fired when a column is unhighlighted.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The unhighlighted Column."
            }
          ]
        },
        "editorUpdateEvent": {
          "deprecated": "Use CellEditor class."
        },
        "renderEvent": {
          "description": "Fired when the DataTable's DOM is rendered or modified."
        },
        "beforeRenderLoopSizeChange": {
          "name": "beforeRenderLoopSizeChange",
          "description": "Fires before the value for the configuration attribute 'renderLoopSize' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "columnUnsetWidthEvent": {
          "description": "Fired when a column width is unset.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            }
          ]
        },
        "captionChange": {
          "name": "captionChange",
          "description": "Fires when the value for the configuration attribute 'caption' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePaginatorChange": {
          "name": "beforePaginatorChange",
          "description": "Fires before the value for the configuration attribute 'paginator' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "cellMousedownEvent": {
          "description": "Fired when a cell has a mousedown.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TD element."
            }
          ]
        },
        "theadCellDblclickEvent": {
          "description": "Fired when a THEAD cell has a dblclick.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TH element."
            }
          ]
        },
        "columnRemoveEvent": {
          "description": "Fired when a column is removed.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            }
          ]
        },
        "unselectAllCellsEvent": {
          "description": "Fired when all cell selections are cleared."
        },
        "columnShowEvent": {
          "description": "Fired when a column is shown.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            }
          ]
        },
        "editorShowEvent": {
          "description": "Fired when a CellEditor is shown.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            }
          ]
        },
        "dynamicDataChange": {
          "name": "dynamicDataChange",
          "description": "Fires when the value for the configuration attribute 'dynamicData' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "unselectAllRowsEvent": {
          "description": "Fired when all row selections are cleared."
        },
        "beforeSummaryChange": {
          "name": "beforeSummaryChange",
          "description": "Fires before the value for the configuration attribute 'summary' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "headerLabelClickEvent": {
          "deprecated": "Use theadLabelClickEvent."
        },
        "beforeRenderEvent": {
          "description": "Fired before the DataTable's DOM is rendered or modified."
        },
        "beforeMSG_LOADINGChange": {
          "name": "beforeMSG_LOADINGChange",
          "description": "Fires before the value for the configuration attribute 'MSG_LOADING' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "theadCellClickEvent": {
          "description": "Fired when a THEAD cell has a click.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TH element."
            }
          ]
        },
        "currencySymbolChange": {
          "name": "currencySymbolChange",
          "description": "Fires when the value for the configuration attribute 'currencySymbol' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "rowUnhighlightEvent": {
          "description": "Fired when a row is unhighlighted.",
          "params": [
            {
              "name": "oArgs.el",
              "type": "HTMLElement",
              "description": "  The highlighted TR element."
            },
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The highlighted Record."
            }
          ]
        },
        "theadCellMousedownEvent": {
          "description": "Fired when a THEAD cell has a mousedown.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TH element."
            }
          ]
        },
        "checkboxClickEvent": {
          "description": "Fired when a CHECKBOX element is clicked.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The CHECKBOX element."
            }
          ]
        },
        "dropdownChangeEvent": {
          "description": "Fired when a SELECT element is changed.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The SELECT element."
            }
          ]
        },
        "rowMouseupEvent": {
          "description": "Fired when a row has a mouseup.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "summaryChange": {
          "name": "summaryChange",
          "description": "Fires when the value for the configuration attribute 'summary' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tbodyFocusEvent": {
          "description": "Fired when the DataTable TBODY element has a focus event."
        },
        "MSG_LOADINGChange": {
          "name": "MSG_LOADINGChange",
          "description": "Fires when the value for the configuration attribute 'MSG_LOADING' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "headerCellDblclickEvent": {
          "deprecated": "Use theadCellDblclickEvent."
        },
        "columnInsertEvent": {
          "description": "Fired when a column is inserted.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            },
            {
              "name": "oArgs.index",
              "type": "Number",
              "description": "  The index position."
            }
          ]
        },
        "editorCancelEvent": {
          "description": "Fired when a CellEditor input is canceled.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            }
          ]
        },
        "cellMouseoverEvent": {
          "description": "Fired when a cell has a mouseover.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TD element."
            }
          ]
        },
        "cellMouseupEvent": {
          "description": "Fired when a cell has a mouseup.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TD element."
            }
          ]
        },
        "columnUnselectEvent": {
          "description": "Fired when a column is unselected.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            }
          ]
        },
        "rowUnselectEvent": {
          "description": "Fired when a row is unselected.",
          "params": [
            {
              "name": "oArgs.el",
              "type": "HTMLElement",
              "description": "  The unselected TR element, if applicable."
            },
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The unselected Record."
            }
          ]
        },
        "beforeGenerateRequestChange": {
          "name": "beforeGenerateRequestChange",
          "description": "Fires before the value for the configuration attribute 'generateRequest' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCaptionChange": {
          "name": "beforeCaptionChange",
          "description": "Fires before the value for the configuration attribute 'caption' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "initialRequestChange": {
          "name": "initialRequestChange",
          "description": "Fires when the value for the configuration attribute 'initialRequest' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tableMsgShowEvent": {
          "description": "Fired when a message is shown in the DataTable's message element.",
          "params": [
            {
              "name": "oArgs.html",
              "type": "String",
              "description": "  The HTML displayed."
            },
            {
              "name": "oArgs.className",
              "type": "String",
              "description": "  The className assigned."
            }
          ]
        },
        "rowDblclickEvent": {
          "description": "Fired when a row has a dblclick.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "theadFocusEvent": {
          "description": "Fired when the DataTable THEAD element has a focus event."
        },
        "beforeFormatRowChange": {
          "name": "beforeFormatRowChange",
          "description": "Fires before the value for the configuration attribute 'formatRow' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDynamicDataChange": {
          "name": "beforeDynamicDataChange",
          "description": "Fires before the value for the configuration attribute 'dynamicData' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "rowMousedownEvent": {
          "description": "Fired when a row has a mousedown.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "editorUnblockEvent": {
          "description": "Fired when a CellEditor is unblocked.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            }
          ]
        },
        "theadCellMouseoverEvent": {
          "description": "Fired when a THEAD cell has a mouseover.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TH element."
            }
          ]
        },
        "theadLabelMouseoverEvent": {
          "description": "Fired when a THEAD label has a mouseover.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The SPAN element."
            }
          ]
        },
        "beforeSelectionModeChange": {
          "name": "beforeSelectionModeChange",
          "description": "Fires before the value for the configuration attribute 'selectionMode' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tableMouseoverEvent": {
          "description": "Fired when the DataTable has a mouseover.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's TABLE element."
            }
          ]
        },
        "theadLabelClickEvent": {
          "description": "Fired when a THEAD label has a click.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The SPAN element."
            }
          ]
        },
        "numberOptionsChange": {
          "name": "numberOptionsChange",
          "description": "Fires when the value for the configuration attribute 'numberOptions' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "rowAddEvent": {
          "description": "Fired when a row is added.",
          "params": [
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The added Record."
            }
          ]
        },
        "theadLabelMouseoutEvent": {
          "description": "Fired when a THEAD label has a mouseout.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The SPAN element."
            }
          ]
        },
        "rowMouseoutEvent": {
          "description": "Fired when a row has a mouseout.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "MSG_EMPTYChange": {
          "name": "MSG_EMPTYChange",
          "description": "Fires when the value for the configuration attribute 'MSG_EMPTY' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSortedByChange": {
          "name": "beforeSortedByChange",
          "description": "Fires before the value for the configuration attribute 'sortedBy' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "undisableEvent": {
          "description": "Fired when the DataTable is undisabled."
        },
        "disableEvent": {
          "description": "Fired when the DataTable is disabled."
        },
        "rowMouseoverEvent": {
          "description": "Fired when a row has a mouseover.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "formatRowChange": {
          "name": "formatRowChange",
          "description": "Fires when the value for the configuration attribute 'formatRow' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "theadLabelMousedownEvent": {
          "description": "Fired when a THEAD label has a mousedown.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The SPAN element."
            }
          ]
        },
        "buttonClickEvent": {
          "description": "Fired when a BUTTON element or INPUT element of type \"button\", \"image\",\n\"submit\", \"reset\" is clicked.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The BUTTON element."
            }
          ]
        },
        "linkClickEvent": {
          "description": "Fired when a link is clicked.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The A element."
            }
          ]
        },
        "rowDeleteEvent": {
          "description": "Fired when a row is deleted.",
          "params": [
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Object literal of the deleted data."
            },
            {
              "name": "oArgs.recordIndex",
              "type": "Number",
              "description": "  Index of the deleted Record."
            },
            {
              "name": "oArgs.trElIndex",
              "type": "Number",
              "description": "  Index of the deleted TR element, if on current page."
            }
          ]
        },
        "cellMouseoutEvent": {
          "description": "Fired when a cell has a mouseout.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TD element."
            }
          ]
        },
        "columnSelectEvent": {
          "description": "Fired when a column is selected.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            }
          ]
        },
        "sortedByChange": {
          "name": "sortedByChange",
          "description": "Fires when the value for the configuration attribute 'sortedBy' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "theadRowMouseoverEvent": {
          "description": "Fired when a THEAD row has a mouseover.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "editorRevertEvent": {
          "description": "Fired when a CellEditor input is reverted.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            },
            {
              "name": "oArgs.newData",
              "type": "Object",
              "description": "  New data value from form input field."
            },
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Old data value."
            }
          ]
        },
        "editorBlurEvent": {
          "description": "Fired when a CellEditor has a blur event.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            }
          ]
        },
        "headerLabelDbllickEvent": {
          "deprecated": "Use theadLabelDblclickEvent."
        },
        "initialLoadChange": {
          "name": "initialLoadChange",
          "description": "Fires when the value for the configuration attribute 'initialLoad' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "cellHighlightEvent": {
          "description": "Fired when a cell is highlighted.",
          "params": [
            {
              "name": "oArgs.el",
              "type": "HTMLElement",
              "description": "  The highlighted TD element."
            },
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The associated Record instance."
            },
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The associated Column instance."
            },
            {
              "name": "oArgs.key",
              "type": "String",
              "description": "  (deprecated) The key of the highlighted cell."
            }
          ]
        },
        "beforeCurrencySymbolChange": {
          "name": "beforeCurrencySymbolChange",
          "description": "Fires before the value for the configuration attribute 'currencySymbol' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tableMouseupEvent": {
          "description": "Fired when the DataTable has a mouseup.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's TABLE element."
            }
          ]
        },
        "headerLabelMouseoverEvent": {
          "deprecated": "Use theadLabelMouseoverEvent."
        },
        "generateRequestChange": {
          "name": "generateRequestChange",
          "description": "Fires when the value for the configuration attribute 'generateRequest' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "draggableColumnsChange": {
          "name": "draggableColumnsChange",
          "description": "Fires when the value for the configuration attribute 'draggableColumns' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "radioClickEvent": {
          "description": "Fired when a RADIO element is clicked.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The RADIO element."
            }
          ]
        },
        "cellUnselectEvent": {
          "description": "Fired when a cell is unselected.",
          "params": [
            {
              "name": "oArgs.el",
              "type": "HTMLElement",
              "description": "  The unselected TD element."
            },
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The associated Record."
            },
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The associated Column instance."
            },
            {
              "name": "oArgs.key",
              "type": "String",
              "description": "  (deprecated) The key of the unselected cell."
            }
          ]
        },
        "tableDblclickEvent": {
          "description": "Fired when the DataTable has a dblclick.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's TABLE element."
            }
          ]
        },
        "headerRowMouseoutEvent": {
          "deprecated": "Use theadRowMouseoutEvent."
        },
        "headerRowMouseoverEvent": {
          "deprecated": "Use theadRowMouseoverEvent."
        },
        "beforeNumberOptionsChange": {
          "name": "beforeNumberOptionsChange",
          "description": "Fires before the value for the configuration attribute 'numberOptions' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "rowSelectEvent": {
          "description": "Fired when a row is selected.",
          "params": [
            {
              "name": "oArgs.el",
              "type": "HTMLElement",
              "description": "  The selected TR element, if applicable."
            },
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The selected Record."
            }
          ]
        },
        "beforeInitialRequestChange": {
          "name": "beforeInitialRequestChange",
          "description": "Fires before the value for the configuration attribute 'initialRequest' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "headerLabelMousedownEvent": {
          "deprecated": "Use theadLabelMousedownEvent."
        },
        "rowHighlightEvent": {
          "description": "Fired when a row is highlighted.",
          "params": [
            {
              "name": "oArgs.el",
              "type": "HTMLElement",
              "description": "  The highlighted TR element."
            },
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The highlighted Record."
            }
          ]
        },
        "rowsAddEvent": {
          "description": "Fired when rows are added.",
          "params": [
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record[]",
              "description": "  The added Records."
            }
          ]
        },
        "beforeMSG_ERRORChange": {
          "name": "beforeMSG_ERRORChange",
          "description": "Fires before the value for the configuration attribute 'MSG_ERROR' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "paginatorChange": {
          "name": "paginatorChange",
          "description": "Fires when the value for the configuration attribute 'paginator' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "theadLabelDblclickEvent": {
          "description": "Fired when a THEAD label has a dblclick.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The SPAN element."
            }
          ]
        },
        "cellSelectEvent": {
          "description": "Fired when a cell is selected.",
          "params": [
            {
              "name": "oArgs.el",
              "type": "HTMLElement",
              "description": "  The selected TD element."
            },
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The associated Record instance."
            },
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The associated Column instance."
            },
            {
              "name": "oArgs.key",
              "type": "String",
              "description": "  (deprecated) The key of the selected cell."
            }
          ]
        },
        "rowsDeleteEvent": {
          "description": "Fired when rows are deleted.",
          "params": [
            {
              "name": "oArgs.oldData",
              "type": "Object[]",
              "description": "  Array of object literals of the deleted data."
            },
            {
              "name": "oArgs.recordIndex",
              "type": "Number",
              "description": "  Index of the first deleted Record."
            },
            {
              "name": "oArgs.count",
              "type": "Number",
              "description": "  Number of deleted Records."
            }
          ]
        },
        "dateOptionsChange": {
          "name": "dateOptionsChange",
          "description": "Fires when the value for the configuration attribute 'dateOptions' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tableMousedownEvent": {
          "description": "Fired when the DataTable has a mousedown.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's TABLE element."
            }
          ]
        },
        "tableClickEvent": {
          "description": "Fired when the DataTable has a click.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's TABLE element."
            }
          ]
        },
        "columnHideEvent": {
          "description": "Fired when a column is hidden.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            }
          ]
        },
        "beforeCurrencyOptionsChange": {
          "name": "beforeCurrencyOptionsChange",
          "description": "Fires before the value for the configuration attribute 'currencyOptions' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "theadLabelMouseupEvent": {
          "description": "Fired when a THEAD label has a mouseup.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The SPAN element."
            }
          ]
        },
        "tableMouseoutEvent": {
          "description": "Fired when the DataTable has a mouseout.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's TABLE element."
            }
          ]
        },
        "headerRowClickEvent": {
          "deprecated": "Use theadRowClickEvent."
        },
        "MSG_ERRORChange": {
          "name": "MSG_ERRORChange",
          "description": "Fires when the value for the configuration attribute 'MSG_ERROR' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "theadRowClickEvent": {
          "description": "Fired when a THEAD row has a click.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "initEvent": {
          "description": "Fired when the DataTable's rows are rendered from an initialized state."
        },
        "cellDblclickEvent": {
          "description": "Fired when a cell has a dblclick.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TD element."
            }
          ]
        },
        "columnReorderEvent": {
          "description": "Fired when a Column is moved to a new index.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            },
            {
              "name": "oArgs.oldIndex",
              "type": "Number",
              "description": "  The previous index position."
            }
          ]
        },
        "postRenderEvent": {
          "description": "Fired when the DataTable's post-render routine is complete, including\nColumn width validations."
        },
        "tableMsgHideEvent": {
          "description": "Fired when the DataTable's message element is hidden."
        },
        "theadRowMousedownEvent": {
          "description": "Fired when a THEAD row has a mousedown.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "tableKeyEvent": {
          "description": "Fired when the DataTable has a key event.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's TABLE element."
            }
          ]
        },
        "cellUnhighlightEvent": {
          "description": "Fired when a cell is unhighlighted.",
          "params": [
            {
              "name": "oArgs.el",
              "type": "HTMLElement",
              "description": "  The unhighlighted TD element."
            },
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The associated Record instance."
            },
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The associated Column instance."
            },
            {
              "name": "oArgs.key",
              "type": "String",
              "description": "  (deprecated) The key of the unhighlighted cell."
            }
          ]
        },
        "theadRowDblclickEvent": {
          "description": "Fired when a THEAD row has a dblclick.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TR element."
            }
          ]
        },
        "dataReturnEvent": {
          "description": "Fired when data is returned from DataSource but before it is consumed by\nDataTable.",
          "params": [
            {
              "name": "oArgs.request",
              "type": "String",
              "description": "  Original request."
            },
            {
              "name": "oArgs.response",
              "type": "Object",
              "description": "  Response object."
            }
          ]
        },
        "beforeInitialLoadChange": {
          "name": "beforeInitialLoadChange",
          "description": "Fires before the value for the configuration attribute 'initialLoad' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "MSG_SORTASCChange": {
          "name": "MSG_SORTASCChange",
          "description": "Fires when the value for the configuration attribute 'MSG_SORTASC' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "headerRowDblclickEvent": {
          "deprecated": "Use theadRowDblclickEvent."
        },
        "renderLoopSizeChange": {
          "name": "renderLoopSizeChange",
          "description": "Fires when the value for the configuration attribute 'renderLoopSize' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "theadCellMouseupEvent": {
          "description": "Fired when a THEAD cell has a mouseup.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TH element."
            }
          ]
        },
        "tableFocusEvent": {
          "description": "Fired when the DataTable has a focus event."
        },
        "headerCellMouseoverEvent": {
          "deprecated": "Use theadCellMouseoverEvent."
        },
        "theadCellMouseoutEvent": {
          "description": "Fired when a THEAD cell has a mouseout.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TH element."
            }
          ]
        },
        "headerLabelMouseoutEvent": {
          "deprecated": "Use theadLabelMouseoutEvent."
        },
        "headerRowMousedownEvent": {
          "deprecated": "Use theadRowMousedownEvent."
        },
        "selectionModeChange": {
          "name": "selectionModeChange",
          "description": "Fires when the value for the configuration attribute 'selectionMode' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tbodyKeyEvent": {
          "description": "Fired when the DataTable TBODY element has a key event.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's TABLE element."
            }
          ]
        },
        "columnResizeEvent": {
          "description": "Fired when a column is drag-resized.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TH element."
            },
            {
              "name": "oArgs.width",
              "type": "Number",
              "description": "  Width in pixels."
            }
          ]
        },
        "cellClickEvent": {
          "description": "Fired when a cell has a click.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The TD element."
            }
          ]
        },
        "beforeDraggableColumnsChange": {
          "name": "beforeDraggableColumnsChange",
          "description": "Fires before the value for the configuration attribute 'draggableColumns' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "editorSaveEvent": {
          "description": "Fired when a CellEditor input is saved.",
          "params": [
            {
              "name": "oArgs.editor",
              "type": "YAHOO.widget.CellEditor",
              "description": "  The CellEditor instance."
            },
            {
              "name": "oArgs.newData",
              "type": "Object",
              "description": "  New data value from form input field."
            },
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Old data value."
            }
          ]
        },
        "currencyOptionsChange": {
          "name": "currencyOptionsChange",
          "description": "Fires when the value for the configuration attribute 'currencyOptions' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDateOptionsChange": {
          "name": "beforeDateOptionsChange",
          "description": "Fires before the value for the configuration attribute 'dateOptions' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "columnSortEvent": {
          "description": "Fired when a column is sorted.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The Column instance."
            },
            {
              "name": "oArgs.dir",
              "type": "String",
              "description": "  Sort direction: YAHOO.widget.DataTable.CLASS_ASC\nor YAHOO.widget.DataTable.CLASS_DESC."
            }
          ]
        },
        "headerCellClickEvent": {
          "deprecated": "Use theadCellClickEvent."
        },
        "cellFormatEvent": {
          "description": "Fired when a cell is formatted.",
          "params": [
            {
              "name": "oArgs.el",
              "type": "HTMLElement",
              "description": "  The formatted TD element."
            },
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The associated Record instance."
            },
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The associated Column instance."
            },
            {
              "name": "oArgs.key",
              "type": "String",
              "description": "  (deprecated) The key of the formatted cell."
            }
          ]
        },
        "beforeMSG_EMPTYChange": {
          "name": "beforeMSG_EMPTYChange",
          "description": "Fires before the value for the configuration attribute 'MSG_EMPTY' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "rowUpdateEvent": {
          "description": "Fired when a row is updated.",
          "params": [
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The updated Record."
            },
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Object literal of the old data."
            }
          ]
        },
        "headerCellMousedownEvent": {
          "deprecated": "Use theadCellMousedownEvent."
        },
        "columnHighlightEvent": {
          "description": "Fired when a column is highlighted.",
          "params": [
            {
              "name": "oArgs.column",
              "type": "YAHOO.widget.Column",
              "description": "  The highlighted Column."
            }
          ]
        },
        "beforeMSG_SORTDESCChange": {
          "name": "beforeMSG_SORTDESCChange",
          "description": "Fires before the value for the configuration attribute 'MSG_SORTDESC' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "headerCellMouseoutEvent": {
          "deprecated": "Use theadCellMouseoutEvent."
        },
        "beforeMSG_SORTASCChange": {
          "name": "beforeMSG_SORTASCChange",
          "description": "Fires before the value for the configuration attribute 'MSG_SORTASC' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "DataTable class for the YUI DataTable widget.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement",
              "description": "  Container element for the TABLE."
            },
            {
              "name": "aColumnDefs",
              "type": "Object[]",
              "description": "  Array of object literal Column definitions."
            },
            {
              "name": "oDataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "oConfigs",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "DataTable class for the YUI DataTable widget.",
      "file": "DataTable.js",
      "configs": {
        "currencySymbol": {
          "deprecated": ""
        },
        "sortedBy": {
          "type": "Object | null",
          "description": "Object literal provides metadata for initial sort values if\ndata will arrive pre-sorted:\n<dl>\n<dt>sortedBy.key</dt>\n<dd>{String} Key of sorted Column</dd>\n<dt>sortedBy.dir</dt>\n<dd>{String} Initial sort direction, either YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC</dd>\n</dl>"
        },
        "initialRequest": {
          "default": "null",
          "type": "MIXED",
          "description": "Defines the initial request that gets sent to the DataSource\nduring initialization. Value is ignored if initialLoad is set to any value\nother than true."
        },
        "MSG_ERROR": {
          "default": "\"Data error.\"",
          "type": "String",
          "description": "Message to display while DataTable has data error."
        },
        "initialLoad": {
          "default": "true",
          "type": "Boolean | Object",
          "description": "Determines whether or not to load data at instantiation. By\ndefault, will trigger a sendRequest() to the DataSource and pass in the\nrequest defined by initialRequest. If set to false, data will not load\nat instantiation. Alternatively, implementers who wish to work with a \ncustom payload may pass in an object literal with the following values:\n<dl>\n<dt>request (MIXED)</dt>\n<dd>Request value.</dd>\n<dt>argument (MIXED)</dt>\n<dd>Custom data that will be passed through to the callback function.</dd>\n</dl>"
        },
        "MSG_SORTASC": {
          "default": "\"Click to sort ascending\"",
          "type": "String",
          "description": "Message to display in tooltip to sort Column in ascending order."
        },
        "MSG_SORTDESC": {
          "default": "\"Click to sort descending\"",
          "type": "String",
          "description": "Message to display in tooltip to sort Column in descending order."
        },
        "currencyOptions": {
          "default": "{prefix: $, decimalPlaces:2, decimalSeparator:\".\", thousandsSeparator:\",\"}",
          "type": "Object",
          "description": "Default config passed to YAHOO.util.Number.format() by the 'currency' Column formatter."
        },
        "dateOptions": {
          "default": "{format:\"%m/%d/%Y\", locale:\"en\"}",
          "type": "Object",
          "description": "Default config passed to YAHOO.util.Date.format() by the 'date' Column formatter."
        },
        "draggableColumns": {
          "default": "false",
          "type": "Boolean",
          "description": "True if Columns are draggable to reorder, false otherwise.\nThe Drag & Drop Utility is required to enable this feature. Only top-level\nand non-nested Columns are draggable. Write once."
        },
        "formatRow": {
          "default": "null",
          "type": "function",
          "description": "A function that accepts a TR element and its associated Record\nfor custom formatting. The function must return TRUE in order to automatically\ncontinue formatting of child TD elements, else TD elements will not be\nautomatically formatted."
        },
        "generateRequest": {
          "default": "HTMLFunction",
          "type": "function",
          "description": "A function that converts an object literal of desired DataTable\nstates into a request value which is then passed to the DataSource's\nsendRequest method in order to retrieve data for those states. This\nfunction is passed an object literal of state data and a reference to the\nDataTable instance:\n<dl>\n<dt>pagination<dt>\n<dd>        \n<dt>offsetRecord</dt>\n<dd>{Number} Index of the first Record of the desired page</dd>\n<dt>rowsPerPage</dt>\n<dd>{Number} Number of rows per page</dd>\n</dd>\n<dt>sortedBy</dt>\n<dd>                \n<dt>key</dt>\n<dd>{String} Key of sorted Column</dd>\n<dt>dir</dt>\n<dd>{String} Sort direction, either YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC</dd>\n</dd>\n<dt>self</dt>\n<dd>The DataTable instance</dd>\n</dl>\nand by default returns a String of syntax:\n\"sort={sortColumn}&dir={sortDir}&startIndex={pageStartIndex}&results={rowsPerPage}\""
        },
        "MSG_EMPTY": {
          "default": "\"No records found.\"",
          "type": "String",
          "description": "Message to display if DataTable has no data."
        },
        "selectionMode": {
          "default": "\"standard\"",
          "type": "String",
          "description": "Specifies row or cell selection mode. Accepts the following strings:\n<dl>\n<dt>\"standard\"</dt>\n<dd>Standard row selection with support for modifier keys to enable\nmultiple selections.</dd>\n<dt>\"single\"</dt>\n<dd>Row selection with modifier keys disabled to not allow\nmultiple selections.</dd>\n<dt>\"singlecell\"</dt>\n<dd>Cell selection with modifier keys disabled to not allow\nmultiple selections.</dd>\n<dt>\"cellblock\"</dt>\n<dd>Cell selection with support for modifier keys to enable multiple\nselections in a block-fashion, like a spreadsheet.</dd>\n<dt>\"cellrange\"</dt>\n<dd>Cell selection with support for modifier keys to enable multiple\nselections in a range-fashion, like a calendar.</dd>\n</dl>"
        },
        "caption": {
          "type": "String",
          "description": "Value for the CAPTION element. NB: Not supported in\nScrollingDataTable."
        },
        "dynamicData": {
          "default": "false",
          "type": "Boolean",
          "description": "If true, sorting and pagination are relegated to the DataSource\nfor handling, using the request returned by the \"generateRequest\" function.\nEach new DataSource response blows away all previous Records. False by default, so \nsorting and pagination will be handled directly on the client side, without\ncausing any new requests for data from the DataSource."
        },
        "renderLoopSize": {
          "default": "0",
          "type": "Number",
          "description": "A value greater than 0 enables DOM rendering of rows to be\nexecuted from a non-blocking timeout queue and sets how many rows to be\nrendered per timeout. Recommended for very large data sets."
        },
        "summary": {
          "default": "\"\"",
          "type": "String",
          "description": "Value for the SUMMARY attribute."
        },
        "paginator": {
          "default": "null",
          "type": "{Object|YAHOO.widget.Paginator}",
          "description": "An instance of YAHOO.widget.Paginator."
        },
        "MSG_LOADING": {
          "default": "\"Loading...\"",
          "type": "String",
          "description": "Message to display while DataTable is loading data."
        },
        "numberOptions": {
          "default": "{decimalPlaces:0, thousandsSeparator:\",\"}",
          "type": "Object",
          "description": "Default config passed to YAHOO.util.Number.format() by the 'number' Column formatter."
        }
      },
      "properties": {
        "DataTable.CLASS_SCROLLABLE": {
          "final": "",
          "guessedname": "CLASS_SCROLLABLE",
          "default": "\"yui-dt-scrollable\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to scrollable elements."
        },
        "DataTable.CLASS_RESIZERPROXY": {
          "final": "",
          "guessedname": "CLASS_RESIZERPROXY",
          "default": "\"yui-dt-resizerproxy\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to resizer proxy elements."
        },
        "DataTable.CLASS_LAST": {
          "final": "",
          "guessedname": "CLASS_LAST",
          "default": "\"yui-dt-last\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to last elements."
        },
        "DataTable.CLASS_DEFAULT": {
          "final": "",
          "guessedname": "CLASS_DEFAULT",
          "default": "\"yui-dt-default\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to default indicators."
        },
        "_elColgroup": {
          "private": "",
          "guessedname": "_elColgroup",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the COLGROUP element for the DataTable instance."
        },
        "DataTable.CLASS_BUTTON": {
          "final": "",
          "guessedname": "CLASS_BUTTON",
          "default": "\"yui-dt-button\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to BUTTON elements and/or container elements."
        },
        "_nIndex": {
          "private": "",
          "guessedname": "_nIndex",
          "type": "Number",
          "guessedtype": "property",
          "description": "Index assigned to instance."
        },
        "_elThead": {
          "private": "",
          "guessedname": "_elThead",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the THEAD element for the DataTable instance."
        },
        "DataTable.CLASS_COLTARGET": {
          "final": "",
          "guessedname": "CLASS_COLTARGET",
          "default": "\"yui-dt-coltarget\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to Column drag target."
        },
        "DataTable.CLASS_RADIO": {
          "final": "",
          "guessedname": "CLASS_RADIO",
          "default": "\"yui-dt-radio\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to INPUT TYPE=RADIO elements and/or container elements."
        },
        "DataTable.CLASS_DRAGGABLE": {
          "final": "",
          "guessedname": "CLASS_DRAGGABLE",
          "default": "\"yui-dt-draggable\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to draggable elements."
        },
        "DataTable.CLASS_EVEN": {
          "final": "",
          "guessedname": "CLASS_EVEN",
          "default": "\"yui-dt-even\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to even elements."
        },
        "_elMsgTd": {
          "private": "",
          "guessedname": "_elMsgTd",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the secondary TBODY element's single TD element used to display DataTable messages."
        },
        "DataTable.CLASS_SELECTED": {
          "final": "",
          "guessedname": "CLASS_SELECTED",
          "default": "\"yui-dt-selected\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to selected elements."
        },
        "DataTable._elColumnDragTarget": {
          "guessedname": "_elColumnDragTarget",
          "private": "",
          "static": "",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Element reference to shared Column drag target."
        },
        "DataTable.CLASS_DESC": {
          "final": "",
          "guessedname": "CLASS_DESC",
          "default": "\"yui-dt-desc\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to descending elements."
        },
        "DataTable.CLASS_LOADING": {
          "final": "",
          "guessedname": "CLASS_LOADING",
          "default": "\"yui-dt-loading\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to loading indicatorx."
        },
        "DataTable.CLASS_ASC": {
          "final": "",
          "guessedname": "CLASS_ASC",
          "default": "\"yui-dt-asc\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to ascending elements."
        },
        "DataTable.CLASS_DATA": {
          "final": "",
          "guessedname": "CLASS_DATA",
          "default": "\"yui-dt-data\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to data elements."
        },
        "DataTable.Formatter": {
          "guessedname": "Formatter",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Cell formatting functions."
        },
        "_nTrCount": {
          "private": "",
          "guessedname": "_nTrCount",
          "type": "Number",
          "guessedtype": "property",
          "description": "Counter for IDs assigned to TR elements."
        },
        "DataTable.CLASS_PAGE": {
          "final": "",
          "guessedname": "CLASS_PAGE",
          "default": "\"yui-dt-page\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to page number indicators."
        },
        "DataTable.CLASS_LABEL": {
          "final": "",
          "guessedname": "CLASS_LABEL",
          "default": "\"yui-dt-label\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to display label elements."
        },
        "_nTdCount": {
          "private": "",
          "guessedname": "_nTdCount",
          "type": "Number",
          "guessedtype": "property",
          "description": "Counter for IDs assigned to TD elements."
        },
        "_oRecordSet": {
          "private": "",
          "guessedname": "_oRecordSet",
          "type": "YAHOO.widget.RecordSet",
          "guessedtype": "property",
          "description": "RecordSet instance for the DataTable instance."
        },
        "_elContainer": {
          "private": "",
          "guessedname": "_elContainer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the container element for the DataTable instance into which\nall other elements get created."
        },
        "_sId": {
          "private": "",
          "guessedname": "_sId",
          "type": "String",
          "guessedtype": "property",
          "description": "Unique id assigned to instance \"yui-dtN\", useful prefix for generating unique\nDOM ID strings and log messages."
        },
        "_sLastTrId": {
          "private": "",
          "guessedname": "_sLastTrId",
          "type": "String",
          "guessedtype": "property",
          "description": "ID string of the last TR element of the current DataTable page."
        },
        "DataTable.CLASS_LINER": {
          "final": "",
          "guessedname": "CLASS_LINER",
          "default": "\"yui-dt-liner\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to liner DIV elements."
        },
        "_sFirstTrId": {
          "private": "",
          "guessedname": "_sFirstTrId",
          "type": "String",
          "guessedtype": "property",
          "description": "ID string of first TR element of the current DataTable page."
        },
        "DataTable.CLASS_FIRST": {
          "final": "",
          "guessedname": "CLASS_FIRST",
          "default": "\"yui-dt-first\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to first elements."
        },
        "_aSelections": {
          "private": "",
          "guessedname": "_aSelections",
          "type": "Object[]",
          "guessedtype": "property",
          "description": "Array to track row selections (by sRecordId) and/or cell selections\n(by {recordId:sRecordId, columnKey:sColumnKey})"
        },
        "_elTable": {
          "private": "",
          "guessedname": "_elTable",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the TABLE element for the DataTable instance."
        },
        "_oChainRender": {
          "private": "",
          "guessedname": "_oChainRender",
          "type": "YAHOO.util.Chain",
          "guessedtype": "property",
          "description": "Render chain."
        },
        "configs": {
          "guessedname": "configs",
          "default": "{}",
          "type": "Object",
          "guessedtype": "property",
          "description": "Returns object literal of initial configs."
        },
        "DataTable.CLASS_ERROR": {
          "final": "",
          "guessedname": "CLASS_ERROR",
          "default": "\"yui-dt-error\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to error indicators."
        },
        "_elTbody": {
          "private": "",
          "guessedname": "_elTbody",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the primary TBODY element for the DataTable instance."
        },
        "_oAnchorCell": {
          "private": "",
          "guessedname": "_oAnchorCell",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object literal representing cell selection anchor:\n{recordId:sRecordId, columnKey:sColumnKey}."
        },
        "DataTable.CLASS_DROPDOWN": {
          "final": "",
          "guessedname": "CLASS_DROPDOWN",
          "default": "\"yui-dt-dropdown\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to SELECT elements and/or container elements."
        },
        "DataTable.CLASS_DISABLED": {
          "final": "",
          "guessedname": "CLASS_DISABLED",
          "default": "\"yui-dt-disabled\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to disabled elements."
        },
        "DataTable._nCount": {
          "guessedname": "_nCount",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class variable for indexing multiple DataTable instances."
        },
        "DataTable.CLASS_CHECKBOX": {
          "final": "",
          "guessedname": "CLASS_CHECKBOX",
          "default": "\"yui-dt-checkbox\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to INPUT TYPE=CHECKBOX elements and/or container elements."
        },
        "_oAnchorRecord": {
          "private": "",
          "guessedname": "_oAnchorRecord",
          "type": "YAHOO.widget.Record",
          "guessedtype": "property",
          "description": "Record instance of the row selection anchor."
        },
        "DataTable.CLASS_ODD": {
          "final": "",
          "guessedname": "CLASS_ODD",
          "default": "\"yui-dt-odd\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to odd elements."
        },
        "_elCaption": {
          "private": "",
          "guessedname": "_elCaption",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the CAPTION element for the DataTable instance."
        },
        "DataTable.CLASS_EDITABLE": {
          "final": "",
          "guessedname": "CLASS_EDITABLE",
          "default": "\"yui-dt-editable\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to editable elements."
        },
        "_elMask": {
          "private": "",
          "guessedname": "_elMask",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the mask element for the DataTable instance which disables it."
        },
        "DataTable.CLASS_HIGHLIGHTED": {
          "final": "",
          "guessedname": "CLASS_HIGHLIGHTED",
          "default": "\"yui-dt-highlighted\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to highlighted elements."
        },
        "DataTable._elDynStyleNode": {
          "guessedname": "_elDynStyleNode",
          "private": "",
          "static": "",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the STYLE node that is dynamically created and updated\nin order to manage Column widths."
        },
        "DataTable._elColumnResizerProxy": {
          "guessedname": "_elColumnResizerProxy",
          "private": "",
          "static": "",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Element reference to shared Column resizer proxy."
        },
        "_elMsgTbody": {
          "private": "",
          "guessedname": "_elMsgTbody",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the secondary TBODY element used to display DataTable messages."
        },
        "DataTable._nCurrentCount": {
          "guessedname": "_nCurrentCount",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class variable tracking current number of DataTable instances,\nso that certain class values can be reset when all instances are destroyed."
        },
        "DataTable.CLASS_SORTABLE": {
          "final": "",
          "guessedname": "CLASS_SORTABLE",
          "default": "\"yui-dt-sortable\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to sortable elements."
        },
        "DataTable.CLASS_RESIZEABLE": {
          "final": "",
          "guessedname": "CLASS_RESIZEABLE",
          "default": "\"yui-dt-resizeable\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to resizeable elements."
        },
        "_oColumnSet": {
          "private": "",
          "guessedname": "_oColumnSet",
          "type": "YAHOO.widget.ColumnSet",
          "guessedtype": "property",
          "description": "ColumnSet instance for the DataTable instance."
        },
        "DataTable._oDynStyles": {
          "guessedname": "_oDynStyles",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object literal hash of Columns and their dynamically create style rules."
        },
        "_elTrTemplate": {
          "private": "",
          "guessedname": "_elTrTemplate",
          "type": "{HTMLElement}",
          "guessedtype": "property",
          "description": "Template row to create all new rows from."
        },
        "DataTable.CLASS_PREVIOUS": {
          "final": "",
          "guessedname": "CLASS_PREVIOUS",
          "default": "\"yui-dt-previous\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to previous indicators."
        },
        "DataTable.CLASS_MASK": {
          "final": "",
          "guessedname": "CLASS_MASK",
          "default": "\"yui-dt-mask\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to mask element when DataTable is disabled."
        },
        "DataTable.CLASS_EDITOR": {
          "final": "",
          "guessedname": "CLASS_EDITOR",
          "default": "\"yui-dt-editor\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to CellEditor container elements."
        },
        "DataTable.CLASS_RESIZERLINER": {
          "final": "",
          "guessedname": "CLASS_RESIZERLINER",
          "default": "\"yui-dt-resizerliner\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to resizer liner elements."
        },
        "DataTable.CLASS_DATATABLE": {
          "final": "",
          "guessedname": "CLASS_DATATABLE",
          "default": "\"yui-dt\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to outer DataTable container."
        },
        "_aDynFunctions": {
          "private": "",
          "guessedname": "_aDynFunctions",
          "type": "Array",
          "guessedtype": "property",
          "description": "Sparse array of custom functions to set column widths for browsers that don't\nsupport dynamic CSS rules.  Functions are added at the index representing\nthe number of rows they update."
        },
        "_bInit": {
          "guessedname": "_bInit",
          "private": "",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if instance is initialized, so as to fire the initEvent after render."
        },
        "_oCellEditor": {
          "private": "",
          "guessedname": "_oCellEditor",
          "type": "YAHOO.widget.CellEditor",
          "guessedtype": "property",
          "description": "The active CellEditor instance for the DataTable instance."
        },
        "DataTable._bDynStylesFallback": {
          "guessedname": "_bDynStylesFallback",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Set to true if _elDynStyleNode cannot be populated due to browser incompatibility."
        },
        "_elMsgTr": {
          "private": "",
          "guessedname": "_elMsgTr",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "DOM reference to the secondary TBODY element's single TR element used to display DataTable messages."
        },
        "DataTable.CLASS_NEXT": {
          "final": "",
          "guessedname": "CLASS_NEXT",
          "default": "\"yui-dt-next\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned next indicators."
        },
        "DataTable.CLASS_PAGINATOR": {
          "final": "",
          "guessedname": "CLASS_PAGINATOR",
          "default": "\"yui-dt-paginator\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to paginator container elements."
        },
        "DataTable.CLASS_RESIZER": {
          "final": "",
          "guessedname": "CLASS_RESIZER",
          "default": "\"yui-dt-resizer\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to resizer handle elements."
        },
        "DataTable.CLASS_EMPTY": {
          "final": "",
          "guessedname": "CLASS_EMPTY",
          "default": "\"yui-dt-empty\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to empty indicators."
        },
        "DataTable.CLASS_HIDDEN": {
          "final": "",
          "guessedname": "CLASS_HIDDEN",
          "default": "\"yui-dt-hidden\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to hidden elements."
        },
        "_oDataSource": {
          "private": "",
          "guessedname": "_oDataSource",
          "type": "YAHOO.util.DataSource",
          "guessedtype": "property",
          "description": "DataSource instance for the DataTable instance."
        },
        "DataTable.CLASS_MESSAGE": {
          "final": "",
          "guessedname": "CLASS_MESSAGE",
          "default": "\"yui-dt-message\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to messaging elements."
        }
      }
    },
    "YAHOO.util.ShouldError": {
      "shortname": "ShouldError",
      "superclass": "YAHOO.util.AssertionError",
      "name": "YAHOO.util.ShouldError",
      "extends": "YAHOO.util.AssertionError",
      "guessedname": "ShouldError",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "ShouldError is subclass of AssertionError that is thrown whenever\na test is expected to throw an error but doesn't.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ShouldError is subclass of AssertionError that is thrown whenever\na test is expected to throw an error but doesn't.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "type": "String",
          "description": "The name of the error that occurred."
        }
      }
    },
    "YAHOO.widget.PieChart": {
      "shortname": "PieChart",
      "methods": {
        "_getDataField": {
          "guessedname": "_getDataField",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for the dataField attribute."
        },
        "_setCategoryField": {
          "guessedname": "_setCategoryField",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the categoryField attribute."
        },
        "_initAttributes": {
          "guessedname": "_initAttributes",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the attributes."
        },
        "_setDataField": {
          "guessedname": "_setDataField",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the dataField attribute."
        },
        "_getCategoryField": {
          "guessedname": "_getCategoryField",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for the categoryField attribute."
        }
      },
      "name": "YAHOO.widget.PieChart",
      "guessedname": "PieChart",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "events": {
        "beforeCategoryFieldChange": {
          "name": "beforeCategoryFieldChange",
          "description": "Fires before the value for the configuration attribute 'categoryField' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "dataFieldChange": {
          "name": "dataFieldChange",
          "description": "Fires when the value for the configuration attribute 'dataField' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "categoryFieldChange": {
          "name": "categoryFieldChange",
          "description": "Fires when the value for the configuration attribute 'categoryField' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDataFieldChange": {
          "name": "beforeDataFieldChange",
          "description": "Fires before the value for the configuration attribute 'dataField' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "PieChart class for the YUI Charts widget.",
          "params": [
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "dataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "attributes",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "PieChart class for the YUI Charts widget.",
      "configs": {
        "dataField": {
          "type": "String",
          "description": "The field in each item that corresponds to the data value."
        },
        "categoryField": {
          "type": "String",
          "description": "The field in each item that corresponds to the category value."
        }
      },
      "file": "PieChart.js",
      "uses": [
        "YAHOO.widget.Chart"
      ]
    },
    "YAHOO.widget.DropdownCellEditor": {
      "shortname": "DropdownCellEditor",
      "superclass": "YAHOO.widget.BaseCellEditor",
      "methods": {
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Sets focus in DropdownCellEditor."
        },
        "getInputValue": {
          "guessedname": "getInputValue",
          "guessedtype": "function",
          "description": "Retrieves input value from DropdownCellEditor."
        },
        "handleDisabledBtns": {
          "guessedname": "handleDisabledBtns",
          "guessedtype": "function",
          "description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them."
        },
        "resetForm": {
          "guessedname": "resetForm",
          "guessedtype": "function",
          "description": "Resets DropdownCellEditor UI to initial state."
        },
        "renderForm": {
          "guessedname": "renderForm",
          "guessedtype": "function",
          "description": "Render a form with select element."
        }
      },
      "name": "YAHOO.widget.DropdownCellEditor",
      "extends": "YAHOO.widget.BaseCellEditor",
      "guessedname": "DropdownCellEditor",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The DropdownCellEditor class provides functionality for inline editing\nDataTable cell data a SELECT element.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal of configs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The DropdownCellEditor class provides functionality for inline editing\nDataTable cell data a SELECT element.",
      "file": "CellEditor.js",
      "properties": {
        "size": {
          "guessedname": "size",
          "type": "Number",
          "guessedtype": "property",
          "description": "Specifies number of visible options."
        },
        "dropdownOptions": {
          "guessedname": "dropdownOptions",
          "type": "String[] | Object[]",
          "guessedtype": "property",
          "description": "Array of dropdown values. Can either be a simple array (e.g.,\n[\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\"]) or a an array of objects (e.g., \n[{label:\"Alabama\", value:\"AL\"}, {label:\"Alaska\", value:\"AK\"},\n{label:\"Arizona\", value:\"AZ\"}, {label:\"Arkansas\", value:\"AR\"}])."
        },
        "multiple": {
          "guessedname": "multiple",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Enables multi-select."
        },
        "dropdown": {
          "guessedname": "dropdown",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to Dropdown element."
        }
      }
    },
    "YAHOO.env": {
      "shortname": "YAHOO.env",
      "methods": {
        "getVersion": {
          "guessedname": "getVersion",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " the name of the module (event, slider, etc)"
            }
          ],
          "description": "Returns the version data for the specified module:\n<dl>\n<dt>name:</dt>      <dd>The name of the module</dd>\n<dt>version:</dt>   <dd>The version in use</dd>\n<dt>build:</dt>     <dd>The build number in use</dd>\n<dt>versions:</dt>  <dd>All versions that were registered</dd>\n<dt>builds:</dt>    <dd>All builds that were registered.</dd>\n<dt>mainClass:</dt> <dd>An object that was was stamped with the\ncurrent version and build. If \nmainClass.VERSION != version or mainClass.BUILD != build,\nmultiple versions of pieces of the library have been\nloaded, potentially causing issues.</dd>\n</dl>",
          "return": {
            "type": "Object",
            "description": "The version info"
          }
        }
      },
      "name": "YAHOO.env",
      "guessedname": "env",
      "module": "yahoo",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "description": "YAHOO.env is used to keep track of what is known about the YUI library and\nthe browsing environment",
      "file": "Env.js",
      "properties": {
        "modules": {
          "guessedname": "modules",
          "type": "Object[]",
          "guessedtype": "property",
          "description": "Keeps the version info for all YUI modules that have reported themselves"
        },
        "listeners": {
          "guessedname": "listeners",
          "type": "Function[]",
          "guessedtype": "property",
          "description": "List of functions that should be executed every time a YUI module\nreports itself."
        }
      }
    },
    "YAHOO.util.ImageLoader.bgImgObj": {
      "shortname": "bgImgObj",
      "superclass": "YAHOO.util.ImageLoader.imgObj",
      "methods": {
        "_applyUrl": {
          "private": "",
          "guessedname": "_applyUrl",
          "guessedtype": "function",
          "description": "Inserts the image URL into the DOM so that the image is displayed.\nSets style.backgroundImage",
          "params": [
            {
              "name": "el",
              "type": "Object",
              "description": "\tHTML DOM element"
            }
          ]
        }
      },
      "name": "YAHOO.util.ImageLoader.bgImgObj",
      "extends": "YAHOO.util.ImageLoader.imgObj",
      "guessedname": "bgImgObj",
      "module": "imageloader",
      "namespace": "YAHOO.util.ImageLoader",
      "constructors": [
        {
          "description": "Background image object. A background image is one whose URL is specified by \"background-image\" in the element's style",
          "params": [
            {
              "name": "domId",
              "type": "String",
              "description": "\tHTML DOM id of the image element"
            },
            {
              "name": "url",
              "type": "String",
              "description": "\tURL for the image"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Background image object. A background image is one whose URL is specified by \"background-image\" in the element's style",
      "file": "ImageLoader.js"
    },
    "YAHOO.tool.TestManager": {
      "shortname": "TestManager",
      "methods": {
        "stop": {
          "guessedname": "stop",
          "static": "",
          "guessedtype": "function",
          "description": "Stops the execution of tests.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_handleTestRunnerComplete": {
          "guessedname": "_handleTestRunnerComplete",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": " Data about the event."
            }
          ],
          "description": "Handles TestRunner.COMPLETE_EVENT, storing the results and beginning\nthe loop again.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "start": {
          "guessedname": "start",
          "static": "",
          "guessedtype": "function",
          "description": "Begins the process of running the tests.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "setPages": {
          "guessedname": "setPages",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "pages",
              "type": "String[]",
              "description": " An array of URLs to load."
            }
          ],
          "description": "Sets the pages to be loaded.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_processResults": {
          "guessedname": "_processResults",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Processes the results of a test page run, outputting log messages\nfor failed tests.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_run": {
          "guessedname": "_run",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "description": "Loads the next test page into the iframe.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "load": {
          "guessedname": "load",
          "static": "",
          "guessedtype": "function",
          "description": "Signals that a test page has been loaded. This should be called from\nwithin the test page itself to notify the TestManager that it is ready.",
          "return": {
            "type": "Void",
            "description": ""
          }
        }
      },
      "name": "YAHOO.tool.TestManager",
      "guessedname": "TestManager",
      "module": "yuitest",
      "namespace": "YAHOO.tool",
      "static": "",
      "events": {
        "testpagebegin": {
          "static": "",
          "description": "Fires when loading a test page",
          "params": [
            {
              "name": "curPage",
              "type": "string",
              "description": "  the page being loaded"
            }
          ]
        },
        "testmanagercomplete": {
          "static": "",
          "description": "Fires when the test manager finishes running all test pages.  External\ntest runners should subscribe to this event in order to get the\naggregated test results.",
          "params": [
            {
              "name": "obj",
              "type": " pages_passed: int, pages_failed: int, tests_passed: int\ntests_failed: int, passed: string[], failed: string[],\npage_results: {} ",
              "description": ""
            }
          ]
        },
        "testmanagerbegin": {
          "static": "",
          "description": "Fires when the test manager starts running all test pages"
        },
        "testpagecomplete": {
          "static": "",
          "description": "Fires when a test page is complete",
          "params": [
            {
              "name": "obj",
              "type": "page: string, results: object",
              "description": "  the name of the\npage that was loaded, and the test suite results"
            }
          ]
        }
      },
      "guessedtype": "property",
      "description": "Runs pages containing test suite definitions.",
      "file": "TestManager.js",
      "properties": {
        "_frame": {
          "private": "",
          "static": "",
          "type": "Window",
          "description": "The frame used to load and run tests."
        },
        "_results": {
          "guessedname": "_results",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Aggregated results"
        },
        "TEST_PAGE_COMPLETE_EVENT": {
          "final": "",
          "static": "",
          "type": "string",
          "description": "Constant for the testpagecomplete custom event"
        },
        "TEST_PAGE_BEGIN_EVENT": {
          "final": "",
          "static": "",
          "type": "string",
          "description": "Constant for the testpagebegin custom event"
        },
        "_logger": {
          "guessedname": "_logger",
          "private": "",
          "static": "",
          "type": "YAHOO.tool.TestLogger",
          "guessedtype": "property",
          "description": "The logger used to output results from the various tests."
        },
        "TEST_MANAGER_BEGIN_EVENT": {
          "final": "",
          "static": "",
          "type": "string",
          "description": "Constant for the testmanagerbegin custom event"
        },
        "_curPage": {
          "private": "",
          "static": "",
          "type": "String",
          "description": "The URL of the page currently being executed."
        },
        "_timeoutId": {
          "private": "",
          "static": "",
          "type": "int",
          "description": "The timeout ID for the next iteration through the tests."
        },
        "_pages": {
          "private": "",
          "static": "",
          "type": "String[]",
          "description": "Array of pages to load."
        },
        "TEST_MANAGER_COMPLETE_EVENT": {
          "final": "",
          "static": "",
          "type": "string",
          "description": "Constant for the testmanagercomplete custom event"
        }
      }
    },
    "YAHOO.util.Selector": {
      "shortname": "Selector",
      "methods": {
        "filter": {
          "guessedname": "filter",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "nodes",
              "type": "array",
              "description": " A set of nodes/ids to filter."
            },
            {
              "name": "selector",
              "type": "string",
              "description": " The selector used to test each node."
            }
          ],
          "description": "Filters a set of nodes based on a given CSS selector.",
          "return": {
            "type": "array",
            "description": "An array of nodes from the supplied array that match the given selector."
          }
        },
        "_tokenize": {
          "guessedname": "_tokenize",
          "guessedtype": "function",
          "description": "Break selector into token units per simple selector.\nCombinator is attached to left-hand selector."
        },
        "test": {
          "guessedname": "test",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement | String",
              "description": " An id or node reference to the HTMLElement being tested."
            },
            {
              "name": "selector",
              "type": "string",
              "description": " The CSS Selector to test the node against."
            }
          ],
          "description": "Test if the supplied node matches the supplied selector.",
          "return": {
            "type": "boolean",
            "description": "Whether or not the node matches the selector."
          }
        },
        "query": {
          "guessedname": "query",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "selector",
              "type": "string",
              "description": " The CSS Selector to test the node against."
            },
            {
              "name": "root",
              "type": "HTMLElement | String",
              "description": " optional An id or HTMLElement to start the query from. Defaults to Selector.document."
            },
            {
              "name": "firstOnly",
              "type": "Boolean",
              "description": " optional Whether or not to return only the first match."
            }
          ],
          "description": "Retrieves a set of nodes based on a given CSS selector.",
          "return": {
            "type": "Array",
            "description": "An array of nodes that match the given selector."
          }
        }
      },
      "name": "YAHOO.util.Selector",
      "guessedname": "Selector",
      "module": "selector",
      "namespace": "YAHOO.util",
      "static": "",
      "guessedtype": "property",
      "description": "Provides helper methods for collecting and filtering DOM elements.",
      "file": "Selector.js",
      "properties": {
        "shorthand": {
          "guessedname": "shorthand",
          "type": "object",
          "guessedtype": "property",
          "description": "Mapping of shorthand tokens to corresponding attribute selector"
        },
        "pseudos": {
          "guessedname": "pseudos",
          "type": "object",
          "guessedtype": "property",
          "description": "List of pseudo-classes and corresponding boolean functions. \nThese functions are called with the current node, and any value that was parsed with the pseudo regex."
        },
        "document": {
          "guessedname": "document",
          "default": "window.document",
          "type": "object",
          "guessedtype": "property",
          "description": "Default document for use queries"
        },
        "operators": {
          "guessedname": "operators",
          "type": "object",
          "guessedtype": "property",
          "description": "List of operators and corresponding boolean functions. \nThese functions are passed the attribute and the current node's value of the attribute."
        },
        "attrAliases": {
          "guessedname": "attrAliases",
          "type": "object",
          "guessedtype": "property",
          "description": "Mapping of attributes to aliases, normally to work around HTMLAttributes\nthat conflict with JS reserved words."
        }
      }
    },
    "YAHOO.tool.TestCase": {
      "shortname": "TestCase",
      "methods": {
        "wait": {
          "guessedname": "wait",
          "guessedtype": "function",
          "description": "Causes the test case to wait a specified amount of time and then\ncontinue executing the given code.",
          "params": [
            {
              "name": "segment",
              "type": "Function",
              "description": " (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called."
            },
            {
              "name": "delay",
              "type": "int",
              "description": " (Optional) The number of milliseconds to wait before running\nthe function. If omitted, defaults to zero."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "resume": {
          "guessedname": "resume",
          "guessedtype": "function",
          "description": "Resumes a paused test and runs the given function.",
          "params": [
            {
              "name": "segment",
              "type": "Function",
              "description": " (Optional) The function to run.\nIf omitted, the test automatically passes."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "tearDown": {
          "guessedname": "tearDown",
          "guessedtype": "function",
          "description": "Function to run after each test is executed.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "setUp": {
          "guessedname": "setUp",
          "guessedtype": "function",
          "description": "Function to run before each test is executed.",
          "return": {
            "type": "Void",
            "description": ""
          }
        }
      },
      "name": "YAHOO.tool.TestCase",
      "guessedname": "TestCase",
      "module": "yuitest",
      "namespace": "YAHOO.tool",
      "constructors": [
        {
          "description": "Test case containing various tests to run.",
          "params": [
            {
              "name": "template",
              "type": "",
              "description": " An object containing any number of test methods, other methods,\nan optional name, and anything else the test case needs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Test case containing various tests to run.",
      "file": "TestCase.js"
    },
    "YAHOO.widget.LineChart": {
      "shortname": "LineChart",
      "name": "YAHOO.widget.LineChart",
      "guessedname": "LineChart",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "LineChart class for the YUI Charts widget.",
          "params": [
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "dataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "attributes",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "LineChart class for the YUI Charts widget.",
      "file": "ChartTypes.js",
      "uses": [
        "YAHOO.widget.CartesianChart"
      ]
    },
    "YAHOO.util.Number": {
      "shortname": "Number",
      "methods": {
        "format": {
          "guessedname": "format",
          "guessedtype": "function",
          "description": "Takes a native JavaScript Number and formats to string for display to user.",
          "params": [
            {
              "name": "nData",
              "type": "Number",
              "description": "  Number."
            },
            {
              "name": "oConfig",
              "type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>prefix {String}</dd>\n<dd>String prepended before each number, like a currency designator \"$\"</dd>\n<dt>decimalPlaces {Number}</dd>\n<dd>Number of decimal places to round.</dd>\n<dt>decimalSeparator {String}</dd>\n<dd>Decimal separator</dd>\n<dt>thousandsSeparator {String}</dd>\n<dd>Thousands separator</dd>\n<dt>suffix {String",
              "description": " </dd>\n<dd>String appended after each number, like \" items\" (note the space)</dd>\n<dt>negativeFormat</dt>\n<dd>String used as a guide for how to indicate negative numbers.  The first '#' character in the string will be replaced by the number.  Default '-#'.</dd>\n</dl>"
            }
          ],
          "return": {
            "type": "String",
            "description": "Formatted number for display. Note, the following values\nreturn as \"\": null, undefined, NaN, \"\"."
          }
        }
      },
      "name": "YAHOO.util.Number",
      "guessedname": "Number",
      "module": "datasource",
      "namespace": "YAHOO.util",
      "requires": "yahoo",
      "static": "",
      "guessedtype": "property",
      "description": "The static Number class provides helper functions to deal with data of type\nNumber.",
      "file": "Type.js"
    },
    "YAHOO.widget.PieSeries": {
      "shortname": "PieSeries",
      "name": "YAHOO.widget.PieSeries",
      "guessedname": "PieSeries",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "PieSeries class for the YUI Charts widget."
        }
      ],
      "guessedtype": "function",
      "description": "PieSeries class for the YUI Charts widget.",
      "file": "Series.js",
      "properties": {
        "labelFunction": {
          "guessedname": "labelFunction",
          "type": "String",
          "guessedtype": "property",
          "description": "A string reference to the globally-accessible function that may be called to\ndetermine each of the label values for this series. Also accepts function references."
        },
        "dataField": {
          "guessedname": "dataField",
          "type": "String",
          "guessedtype": "property",
          "description": "The field used to access the data value from the items from the data source."
        },
        "categoryField": {
          "guessedname": "categoryField",
          "type": "String",
          "guessedtype": "property",
          "description": "The field used to access the category value from the items from the data source."
        }
      },
      "uses": [
        "YAHOO.widget.Series"
      ]
    },
    "YAHOO.widget.ProfilerViewer": {
      "shortname": "ProfilerViewer",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "_toggleVisible": {
          "private": "",
          "guessedname": "_toggleVisible",
          "guessedtype": "function",
          "description": "Toggles visibility of the viewer canvas.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_getProfilerData": {
          "guessedname": "_getProfilerData",
          "private": "",
          "guessedtype": "function",
          "description": "Retrieves data from Profiler, filtering and sorting as needed\nbased on current widget state.  Adds calculated percentage\ncolumn and function name to data returned by Profiler."
        },
        "_render": {
          "private": "",
          "guessedname": "_render",
          "guessedtype": "function",
          "description": "Render the viewer canvas",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_setBusyState": {
          "guessedname": "_setBusyState",
          "private": "",
          "guessedtype": "function",
          "description": "Set's console busy state."
        },
        "_getSeriesDef": {
          "guessedname": "_getSeriesDef",
          "private": "",
          "guessedtype": "function",
          "description": "Build series definition based on current configuration attributes."
        },
        "_thClickHandler": {
          "guessedname": "_thClickHandler",
          "private": "",
          "guessedtype": "function",
          "description": "Event handler for clicks on the DataTable's sortable column\nheads."
        },
        "_refreshDataTable": {
          "guessedname": "_refreshDataTable",
          "private": "",
          "guessedtype": "function",
          "description": "Refresh DataTable, getting new data from Profiler."
        },
        "hide": {
          "private": "",
          "guessedname": "_hide",
          "guessedtype": "function",
          "description": "Hides the viewer canvas.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "getBodyEl": {
          "public": "",
          "guessedname": "getBodyEl",
          "guessedtype": "function",
          "description": "Returns the element containing the console's body, including\nthe chart and the datatable..",
          "return": {
            "type": "",
            "description": "HTMLElement"
          }
        },
        "_createButton": {
          "guessedname": "_createButton",
          "private": "",
          "guessedtype": "function",
          "description": "Create anchor elements for use as buttons. Args: label\nis text to appear on the face of the button, parentEl\nis the el to which the anchor will be attached, position\nis true for inserting as the first node and false for\ninserting as the last node of the parentEl."
        },
        "toString": {
          "private": "",
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Provides a readable name for the ProfilerViewer instance.",
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "_initDataTable": {
          "guessedname": "_initDataTable",
          "private": "",
          "guessedtype": "function",
          "description": "Set up the DataTable."
        },
        "_initViewerDOM": {
          "guessedname": "_initViewerDOM",
          "private": "",
          "guessedtype": "function",
          "description": "Set up the DOM structure for the ProfilerViewer canvas,\nincluding the holder for the DataTable."
        },
        "_refreshChart": {
          "guessedname": "_refreshChart",
          "private": "",
          "guessedtype": "function",
          "description": "Refresh chart, getting new data from table."
        },
        "_sizeChartCanvas": {
          "guessedname": "_sizeChartCanvas",
          "private": "",
          "guessedtype": "function",
          "description": "Resize the chart's canvas if based on number of records\nreturned from the chart's datasource."
        },
        "_initChart": {
          "guessedname": "_initChart",
          "private": "",
          "guessedtype": "function",
          "description": "Set up the Chart."
        },
        "_sortedByChange": {
          "guessedname": "_sortedByChange",
          "private": "",
          "guessedtype": "function",
          "description": "Proxy the sort event in DataTable into the ProfilerViewer\nattribute."
        },
        "getDataTable": {
          "public": "",
          "guessedname": "getDataTable",
          "guessedtype": "function",
          "description": "Returns the element containing the console's DataTable\ninstance.",
          "return": {
            "type": "",
            "description": "YAHOO.widget.DataTable"
          }
        },
        "getChartEl": {
          "public": "",
          "guessedname": "getChartEl",
          "guessedtype": "function",
          "description": "Returns the element containing the console's chart.",
          "return": {
            "type": "",
            "description": "HTMLElement"
          }
        },
        "getHeadEl": {
          "public": "",
          "guessedname": "getHeadEl",
          "guessedtype": "function",
          "description": "Returns the element containing the console's header.",
          "return": {
            "type": "",
            "description": "HTMLElement"
          }
        },
        "show": {
          "private": "",
          "guessedname": "_show",
          "guessedtype": "function",
          "description": "Shows the viewer canvas.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "getChart": {
          "public": "",
          "guessedname": "getChart",
          "guessedtype": "function",
          "description": "Returns the element containing the console's Chart instance.",
          "return": {
            "type": "",
            "description": "YAHOO.widget.BarChart"
          }
        },
        "_createProfilerViewerElement": {
          "private": "",
          "guessedname": "_createProfilerViewerElement",
          "guessedtype": "function",
          "description": "If no element is passed in, create it as the first element\nin the document.",
          "return": {
            "type": "",
            "description": "HTMLElement"
          }
        },
        "_arraySum": {
          "guessedname": "_arraySum",
          "private": "",
          "guessedtype": "function",
          "description": "Utility function for array sums."
        },
        "_dataTableRenderHandler": {
          "guessedname": "_dataTableRenderHandler",
          "private": "",
          "guessedtype": "function",
          "description": "Proxy the render event in DataTable into the ProfilerViewer\nattribute."
        },
        "getTableEl": {
          "public": "",
          "guessedname": "getTableEl",
          "guessedtype": "function",
          "description": "Returns the element containing the console's dataTable.",
          "return": {
            "type": "",
            "description": "HTMLElement"
          }
        },
        "initAttributes": {
          "private": "",
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "setAttributeConfigs TabView specific properties.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " Hash of initial attributes"
            }
          ]
        },
        "refreshData": {
          "public": "",
          "guessedname": "refreshData",
          "guessedtype": "function",
          "description": "Refreshes the data displayed in the ProfilerViewer. When called,\nthis will invoke a refresh of the DataTable and (if displayed)\nthe Chart.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_initChartDOM": {
          "guessedname": "_initChartDOM",
          "private": "",
          "guessedtype": "function",
          "description": "Set up the DOM structure for the ProfilerViewer canvas."
        },
        "_initLauncherDOM": {
          "guessedname": "_initLauncherDOM",
          "private": "",
          "guessedtype": "function",
          "description": "Set up the DOM structure for the ProfilerViewer launcher."
        },
        "_getChartData": {
          "guessedname": "_getChartData",
          "private": "",
          "guessedtype": "function",
          "description": "Get data for the Chart from DataTable recordset"
        },
        "_drawChartLegend": {
          "guessedname": "_drawChartLegend",
          "private": "",
          "guessedtype": "function",
          "description": "Set up the Chart's legend"
        }
      },
      "name": "YAHOO.widget.ProfilerViewer",
      "extends": "YAHOO.util.Element",
      "guessedname": "ProfilerViewer",
      "module": "profilerviewer",
      "namespace": "YAHOO.widget",
      "events": {
        "beforeShowChartChange": {
          "name": "beforeShowChartChange",
          "description": "Fires before the value for the configuration attribute 'showChart' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeBaseChange": {
          "name": "beforeBaseChange",
          "description": "Fires before the value for the configuration attribute 'base' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeVisibleChange": {
          "name": "beforeVisibleChange",
          "description": "Fires before the value for the configuration attribute 'visible' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeChartStyleChange": {
          "name": "beforeChartStyleChange",
          "description": "Fires before the value for the configuration attribute 'chartStyle' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "baseChange": {
          "name": "baseChange",
          "description": "Fires when the value for the configuration attribute 'base' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSortedByChange": {
          "name": "beforeSortedByChange",
          "description": "Fires before the value for the configuration attribute 'sortedBy' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "chartSeriesDefinitionsChange": {
          "name": "chartSeriesDefinitionsChange",
          "description": "Fires when the value for the configuration attribute 'chartSeriesDefinitions' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "renderEvent": {
          "description": "Fired when the viewer canvas first renders. No arguments are passed\nwith this event."
        },
        "visibleChange": {
          "name": "visibleChange",
          "description": "Fires when the value for the configuration attribute 'visible' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTableHeightChange": {
          "name": "beforeTableHeightChange",
          "description": "Fires before the value for the configuration attribute 'tableHeight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "sortedByChange": {
          "name": "sortedByChange",
          "description": "Fires when the value for the configuration attribute 'sortedBy' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMaxChartFunctionsChange": {
          "name": "beforeMaxChartFunctionsChange",
          "description": "Fires before the value for the configuration attribute 'maxChartFunctions' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "chartStyleChange": {
          "name": "chartStyleChange",
          "description": "Fires when the value for the configuration attribute 'chartStyle' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSwfUrlChange": {
          "name": "beforeSwfUrlChange",
          "description": "Fires before the value for the configuration attribute 'swfUrl' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "showChartChange": {
          "name": "showChartChange",
          "description": "Fires when the value for the configuration attribute 'showChart' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeChartSeriesDefinitionsChange": {
          "name": "beforeChartSeriesDefinitionsChange",
          "description": "Fires before the value for the configuration attribute 'chartSeriesDefinitions' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tableHeightChange": {
          "name": "tableHeightChange",
          "description": "Fires when the value for the configuration attribute 'tableHeight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeFilterChange": {
          "name": "beforeFilterChange",
          "description": "Fires before the value for the configuration attribute 'filter' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "swfUrlChange": {
          "name": "swfUrlChange",
          "description": "Fires when the value for the configuration attribute 'swfUrl' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "refreshDataEvent": {
          "description": "Fired when a data refresh is requested. No arguments are passed\nwith this event."
        },
        "filterChange": {
          "name": "filterChange",
          "description": "Fires when the value for the configuration attribute 'filter' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "maxChartFunctionsChange": {
          "name": "maxChartFunctionsChange",
          "description": "Fires when the value for the configuration attribute 'maxChartFunctions' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "A widget to view YUI Profiler output.",
          "params": [
            {
              "name": "el(optional)",
              "type": "HTMLElement | String | Object",
              "description": " The html \nelement into which the ProfileViewer should be rendered. \nAn element will be created if none provided."
            },
            {
              "name": "attr",
              "type": "Object",
              "description": " (optional) A key map of the ProfilerViewer's \ninitial attributes.  Ignored if first arg is an attributes object."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A widget to view YUI Profiler output.",
      "file": "profilerviewer.js",
      "configs": {
        "sortedBy": {
          "default": "{key:\"total\", dir:\"yui-dt-desc\"}",
          "type": "string",
          "description": "The default column key to sort by.  Valid keys are: fn, calls,\navg, min, max, total.  Valid dir values are: \nYAHOO.widget.DataTable.CLASS_ASC and\nYAHOO.widget.DataTable.CLASS_DESC (or their\nstring equivalents)."
        },
        "showChart": {
          "default": "true",
          "type": "boolean",
          "description": "The default visibility setting for the chart."
        },
        "chartStyle": {
          "default": "See JS source for default definitions.",
          "type": "obj",
          "description": "The style object that defines the chart's visual presentation.\nConforms to the style attribute passed to the Charts Control\nconstructor.  See Charts Control User's Guide for more information\non how to format this object."
        },
        "swfUrl": {
          "default": "\"http://yui.yahooapis.com/2.5.0/build/charts/assets/charts.swf\"",
          "type": "string",
          "description": "The path to the YUI Charts swf file; must be a full URI\nor a path relative to the page being profiled. Changes at runtime\nnot supported; pass this value in at instantiation."
        },
        "maxChartFunctions": {
          "default": "6",
          "type": "int",
          "description": "The maximum number of functions to profile in the chart. The\ngreater the number of functions, the greater the height of the\nchart canvas.\nheight."
        },
        "chartSeriesDefinitions": {
          "default": "See JS source for full default definitions.",
          "type": "obj",
          "description": "The series definition information to use when charting\nspecific fields on the chart.  displayName, xField,\nand style members are used to construct the series\ndefinition; the \"group\" member is the array of fields\nthat should be charted when the table is sorted by a\ngiven field."
        },
        "filter": {
          "default": "null",
          "type": "function",
          "description": "A filter function to use in selecting functions that will\nappear in the ProfilerViewer report.  The function is passed\na function report object and should return a boolean indicating\nwhether that function should be included in the ProfilerViewer\ndisplay.  The argument is structured as follows:\n{\nfn: <str function name>,\ncalls : <n number of calls>,\navg : <n average call duration>,\nmax: <n duration of longest call>,\nmin: <n duration of shortest call>,\ntotal: <n total time of all calls>\npoints : <array time in ms of each call>\n}\nFor example, you would use the follwing filter function to \nreturn only functions that have been called at least once:\nfunction(o) {\nreturn (o.calls > 0);\n}"
        },
        "visible": {
          "default": "false",
          "type": "boolean",
          "description": "The default visibility setting for the viewer canvas. If true,\nthe viewer will load all necessary files and render itself\nimmediately upon instantiation; otherwise, the viewer will\nload only minimal resources until the user toggles visibility\nvia the UI."
        },
        "base": {
          "default": "\"\"",
          "type": "string",
          "description": "The YUI Loader base path from which to pull YUI files needed\nin the rendering of the ProfilerViewer canvas.  Passed directly\nto YUI Loader.  Leave blank to draw files from\nyui.yahooapis.com."
        },
        "tableHeight": {
          "default": "\"15em\"",
          "type": "string",
          "description": "The height of the DataTable.  The table will scroll\nvertically if the content overflows the specified\nheight."
        }
      },
      "properties": {
        "CLASS_TABLE": {
          "public": "",
          "guessedname": "CLASS_TABLE",
          "default": "\"yui-pv-table\"",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Classname for element containing the datatable."
        },
        "CLASS_BUSY": {
          "public": "",
          "guessedname": "CLASS_BUSY",
          "default": "\"yui-pv-busy\"",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Classname for busy indicator in the dashboard."
        },
        "CLASS_CHART_CONTAINER": {
          "public": "",
          "guessedname": "CLASS_CHART_CONTAINER",
          "default": "\"yui-pv-chartcontainer\"",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Classname for element containing the chart and chart\nlegend elements."
        },
        "CLASS_CHART": {
          "public": "",
          "guessedname": "CLASS_CHART",
          "default": "\"yui-pv-chart\"",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Classname for element containing the chart."
        },
        "CLASS": {
          "public": "",
          "guessedname": "CLASS",
          "default": "\"yui-pv\"",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Classname for ProfilerViewer containing element."
        },
        "CLASS_DASHBOARD": {
          "public": "",
          "guessedname": "CLASS_DASHBOARD",
          "default": "\"yui-pv-dashboard\"",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Classname for ProfilerViewer button dashboard."
        },
        "STRINGS": {
          "public": "",
          "guessedname": "STRINGS",
          "default": "English language strings for UI.",
          "static": "",
          "guessedtype": "property",
          "description": "Strings used in the UI.",
          "object": ""
        },
        "percentAxisLabelFunction": {
          "guessedname": "percentAxisLabelFunction",
          "private": "",
          "static": "",
          "type": "function",
          "guessedtype": "function",
          "description": "Function used to format percent numbers for chart; must\nbe publicly accessible, per Charts spec."
        },
        "CLASS_REFRESH": {
          "public": "",
          "guessedname": "CLASS_REFRESH",
          "default": "\"yui-pv-refresh\"",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Classname for the \"refresh data\" button."
        },
        "CLASS_CHART_LEGEND": {
          "public": "",
          "guessedname": "CLASS_CHART_LEGEND",
          "default": "\"yui-pv-chartlegend\"",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Classname for element containing the chart's legend."
        },
        "timeAxisLabelFunction": {
          "guessedname": "timeAxisLabelFunction",
          "private": "",
          "static": "",
          "type": "function",
          "guessedtype": "function",
          "description": "Function used to format numbers in milliseconds\nfor chart; must be publicly accessible, per Charts spec."
        }
      }
    },
    "YAHOO.widget.ToolbarButton": {
      "shortname": "ToolbarButton",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "checkValue": {
          "guessedname": "checkValue",
          "guessedtype": "function",
          "description": "Select an option by value",
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": " The value of the option that we want to mark as selected"
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the toolbar.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "getMenu": {
          "guessedname": "getMenu",
          "guessedtype": "function",
          "description": "A stub function to mimic YAHOO.widget.Button's getMenu method"
        },
        "fireEvent": {
          "guessedname": "fireEvent",
          "guessedtype": "function",
          "description": "Overridden fireEvent method to prevent DOM events from firing if the button is disabled."
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Destroy the button"
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The ToolbarButton class's initialization method"
        },
        "_handleSelect": {
          "private": "",
          "guessedname": "_handleSelect",
          "guessedtype": "function",
          "description": "The event fired when a change event gets fired on a select element",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The change event."
            }
          ]
        },
        "_handleMouseOver": {
          "guessedname": "_handleMouseOver",
          "private": "",
          "guessedtype": "function",
          "description": "Adds classes to the button elements on mouseover (hover)"
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Initializes all of the configuration attributes used to create \nthe toolbar.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the toolbar."
            }
          ]
        },
        "_handleMouseOut": {
          "guessedname": "_handleMouseOut",
          "private": "",
          "guessedtype": "function",
          "description": "Removes classes from the button elements on mouseout (hover)"
        }
      },
      "name": "YAHOO.widget.ToolbarButton",
      "extends": "YAHOO.util.Element",
      "guessedname": "ToolbarButton",
      "module": "editor",
      "namespace": "YAHOO.widget",
      "requires": "yahoo, dom, element, event",
      "events": {
        "beforeTypeChange": {
          "name": "beforeTypeChange",
          "description": "Fires before the value for the configuration attribute 'type' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTitleChange": {
          "name": "beforeTitleChange",
          "description": "Fires before the value for the configuration attribute 'title' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "disabledChange": {
          "name": "disabledChange",
          "description": "Fires when the value for the configuration attribute 'disabled' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "labelChange": {
          "name": "labelChange",
          "description": "Fires when the value for the configuration attribute 'label' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeValueChange": {
          "name": "beforeValueChange",
          "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "valueChange": {
          "name": "valueChange",
          "description": "Fires when the value for the configuration attribute 'value' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMenuChange": {
          "name": "beforeMenuChange",
          "description": "Fires before the value for the configuration attribute 'menu' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLabelChange": {
          "name": "beforeLabelChange",
          "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "menuChange": {
          "name": "menuChange",
          "description": "Fires when the value for the configuration attribute 'menu' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDisabledChange": {
          "name": "beforeDisabledChange",
          "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "typeChange": {
          "name": "typeChange",
          "description": "Fires when the value for the configuration attribute 'type' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "titleChange": {
          "name": "titleChange",
          "description": "Fires when the value for the configuration attribute 'title' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "<p>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p><p>Provides a toolbar button based on the button and menu widgets, &lt;select&gt; elements are used in place of menu's.</p>",
          "params": [
            {
              "name": "el",
              "type": "String/HTMLElement",
              "description": " The element to turn into a button."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": " Object liternal containing configuration parameters."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "<p>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p><p>Provides a toolbar button based on the button and menu widgets, &lt;select&gt; elements are used in place of menu's.</p>",
      "file": "toolbar-button.js",
      "configs": {
        "label": {
          "type": "String",
          "description": "The text label for the button"
        },
        "title": {
          "type": "String",
          "description": "The title of the button"
        },
        "container": {
          "type": "String",
          "description": "The container that the button is rendered to, handled by Toolbar"
        },
        "type": {
          "type": "String",
          "description": "The type of button to create: push, menu, color, select, spin"
        },
        "value": {
          "type": "String",
          "description": "The value of the button"
        },
        "disabled": {
          "type": "String",
          "description": "Set the button into a disabled state"
        },
        "menu": {
          "type": "Object",
          "description": "The menu attribute, see YAHOO.widget.Button"
        }
      },
      "properties": {
        "buttonType": {
          "guessedname": "buttonType",
          "private": "",
          "guessedtype": "property",
          "description": "Tells if the Button is a Rich Button or a Simple Button"
        }
      }
    },
    "YAHOO.widget.TreeView": {
      "shortname": "TreeView",
      "methods": {
        "collapseAll": {
          "guessedname": "collapseAll",
          "guessedtype": "function",
          "description": "Collapses all expanded child nodes in the entire tree."
        },
        "setCollapseAnim": {
          "guessedname": "setCollapseAnim",
          "guessedtype": "function",
          "description": "Sets up the animation for collapsing children",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": " of animation (acceptable values defined in \nYAHOO.widget.TVAnim)"
            }
          ]
        },
        "_removeChildren_animComplete": {
          "private": "",
          "guessedname": "_removeChildren_animComplete",
          "guessedtype": "function",
          "description": "wait until the animation is complete before deleting \nto avoid javascript errors",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " the custom event payload"
            }
          ]
        },
        "YAHOO.widget.TreeView.getNode": {
          "guessedname": "getNode",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "treeId",
              "type": "String",
              "description": "  the id of the tree instance"
            },
            {
              "name": "nodeIndex",
              "type": "String",
              "description": "  the index of the node to return"
            }
          ],
          "description": "Global method for getting a node by its id.  Used in the generated\ntree html.",
          "return": {
            "type": "Node",
            "description": "the node instance requested, null if not found"
          }
        },
        "getEl": {
          "guessedname": "getEl",
          "guessedtype": "function",
          "description": "Returns the tree's host element",
          "return": {
            "type": "HTMLElement",
            "description": "the host element"
          }
        },
        "_onMouseOverEvent": {
          "guessedname": "_onMouseOverEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Event listener for mouse over events"
        },
        "_destroyEditor": {
          "private": "",
          "guessedname": "_destroyEditor",
          "guessedtype": "function",
          "description": "Entry point for TreeView's destroy method to destroy whatever the editing plug-in has created"
        },
        "expandComplete": {
          "guessedname": "expandComplete",
          "guessedtype": "function",
          "description": "Function executed when the expand animation completes"
        },
        "_nodeEditing": {
          "guessedname": "_nodeEditing",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "node",
              "type": "YAHOO.widget.Node",
              "description": "  the node to be edited"
            }
          ],
          "description": "Entry point of the editing plug-in.  \nTreeView will call this method if it exists when a node label is clicked",
          "return": {
            "type": "Boolean",
            "description": "true to indicate that the node is editable and prevent any further bubbling of the click."
          }
        },
        "_deleteNode": {
          "guessedname": "_deleteNode",
          "private": "",
          "guessedtype": "function",
          "description": "Deletes the node and recurses children"
        },
        "getNodeByElement": {
          "guessedname": "getNodeByElement",
          "guessedtype": "function",
          "description": "Returns the treeview node reference for an ancestor element\nof the node, or null if it is not contained within any node\nin this tree.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  the element to test"
            }
          ],
          "return": {
            "type": "YAHOO.widget.Node",
            "description": "a node reference or null"
          }
        },
        "getNodesBy": {
          "guessedname": "getNodesBy",
          "guessedtype": "function",
          "description": "Returns a collection of nodes that have passed the test function\npassed as its only argument.  \nThe function will receive a reference to each node to be tested.",
          "params": [
            {
              "name": "a",
              "type": "function",
              "description": " boolean function that receives a Node instance and returns true to add the node to the results list"
            }
          ],
          "return": {
            "type": "Array",
            "description": "the matching collection of nodes, null if no match"
          }
        },
        "setNodesProperty": {
          "guessedname": "setNodesProperty",
          "guessedtype": "function",
          "description": "Sets the value of a property for all loaded nodes in the tree.",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "  Name of the property to be set"
            },
            {
              "name": "value",
              "type": "any",
              "description": "  value to be set"
            },
            {
              "name": "refresh",
              "type": "boolean",
              "description": "  if present and true, it does a refresh"
            }
          ]
        },
        "getNodeCount": {
          "guessedname": "getNodeCount",
          "guessedtype": "function",
          "description": "Count of nodes in tree",
          "return": {
            "type": "int",
            "description": "number of nodes in the tree"
          }
        },
        "animateCollapse": {
          "guessedname": "animateCollapse",
          "guessedtype": "function",
          "description": "Perform the collapse animation if configured, or just show the\nelement if not configured or too many animations are in progress",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  the element to animate"
            },
            {
              "name": "node",
              "type": "YAHOO.util.Node",
              "description": "  the node that was expanded"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if animation could be invoked, false otherwise"
          }
        },
        "_onKeyDownEvent": {
          "guessedname": "_onKeyDownEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Event listener for key down events"
        },
        "onExpand": {
          "guessedname": "onExpand",
          "guessedtype": "function",
          "description": "Abstract method that is executed when a node is expanded",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "  the node that was expanded"
            }
          ],
          "deprecated": "use treeobj.subscribe(\"expand\") instead"
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "TreeView instance toString",
          "return": {
            "type": "string",
            "description": "string representation of the tree"
          }
        },
        "setDynamicLoad": {
          "guessedname": "setDynamicLoad",
          "guessedtype": "function",
          "description": "Configures this tree to dynamically load all child data",
          "params": [
            {
              "name": "fnDataLoader",
              "type": "function",
              "description": " the function that will be called to get the data"
            },
            {
              "name": "iconMode",
              "type": "int",
              "description": "  configures the icon that is displayed when a dynamic\nload node is expanded the first time without children.  By default, the \n\"collapse\" icon will be used.  If set to 1, the leaf node icon will be\ndisplayed."
            }
          ]
        },
        "getHighlightedNode": {
          "guessedname": "getHighlightedNode",
          "guessedtype": "function",
          "description": "When in singleNodeHighlight it returns the node highlighted\nor null if none.  Returns null if singleNodeHighlight is false.",
          "return": {
            "type": "YAHOO.widget.Node",
            "description": "a node reference or null"
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Nulls out the entire TreeView instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container. After\ncalling this method, the instance reference should be expliclitly nulled by\nimplementer, as in myDataTable = null. Use with caution!"
        },
        "_getEventTargetTdEl": {
          "guessedname": "_getEventTargetTdEl",
          "private": "",
          "guessedtype": "function",
          "description": "Returns the TD element where the event has occurred"
        },
        "regNode": {
          "private": "",
          "guessedname": "regNode",
          "guessedtype": "function",
          "description": "Nodes register themselves with the tree instance when they are created.",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "  the node to register"
            }
          ]
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Renders the tree boilerplate and visible nodes"
        },
        "_onClickEvent": {
          "guessedname": "_onClickEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Event listener for click events"
        },
        "removeChildren": {
          "guessedname": "removeChildren",
          "guessedtype": "function",
          "description": "Deletes this nodes child collection, recursively.  Also collapses\nthe node, and resets the dynamic load flag.  The primary use for\nthis method is to purge a node and allow it to fetch its data\ndynamically again.",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": " the node to purge"
            }
          ]
        },
        "onCollapse": {
          "guessedname": "onCollapse",
          "guessedtype": "function",
          "description": "Abstract method that is executed when a node is collapsed.",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "  the node that was collapsed."
            }
          ],
          "deprecated": "use treeobj.subscribe(\"collapse\") instead"
        },
        "getRoot": {
          "guessedname": "getRoot",
          "guessedtype": "function",
          "description": "Returns the root node of this tree",
          "return": {
            "type": "Node",
            "description": "the root node"
          }
        },
        "getNodeByProperty": {
          "guessedname": "getNodeByProperty",
          "guessedtype": "function",
          "description": "Returns a node that has a matching property and value in the data\nobject that was passed into its constructor.",
          "params": [
            {
              "name": "property",
              "type": "object",
              "description": " the property to search (usually a string)"
            },
            {
              "name": "value",
              "type": "object",
              "description": " the value we want to find (usuall an int or string)"
            }
          ],
          "return": {
            "type": "Node",
            "description": "the matching node, null if no match"
          }
        },
        "draw": {
          "guessedname": "draw",
          "guessedtype": "property",
          "description": "Renders the tree boilerplate and visible nodes.\nAlias for render",
          "deprecated": "Use render instead"
        },
        "setExpandAnim": {
          "guessedname": "setExpandAnim",
          "guessedtype": "function",
          "description": "Sets up the animation for expanding children",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": " the type of animation (acceptable values defined \nin YAHOO.widget.TVAnim)"
            }
          ]
        },
        "_onDblClickEvent": {
          "guessedname": "_onDblClickEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Event listener for double-click events"
        },
        "init": {
          "private": "",
          "parm": "{string|HTMLElement} id the id of the element that will hold the tree",
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Initializes the tree"
        },
        "onEventToggleHighlight": {
          "guessedname": "onEventToggleHighlight",
          "guessedtype": "function",
          "description": "Event listener to toggle node highlight.\nCan be assigned as listener to clickEvent, dblClickEvent and enterKeyPressed.\nIt returns false to prevent the default action.",
          "params": [
            {
              "name": "oArgs",
              "type": "any",
              "description": "  it takes the arguments of any of the events mentioned above"
            }
          ],
          "return": {
            "type": "false",
            "description": "Always cancels the default action for the event"
          }
        },
        "getNodeByIndex": {
          "guessedname": "getNodeByIndex",
          "guessedtype": "function",
          "description": "Returns a node in the tree that has the specified index (this index\nis created internally, so this function probably will only be used\nin html generated for a given node.)",
          "params": [
            {
              "name": "nodeIndex",
              "type": "int",
              "description": " the index of the node wanted"
            }
          ],
          "return": {
            "type": "Node",
            "description": "the node with index=nodeIndex, null if no match"
          }
        },
        "animateExpand": {
          "guessedname": "animateExpand",
          "guessedtype": "function",
          "description": "Perform the expand animation if configured, or just show the\nelement if not configured or too many animations are in progress",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  the element to animate"
            },
            {
              "name": "node",
              "type": "YAHOO.util.Node",
              "description": "  the node that was expanded"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if animation could be invoked, false otherwise"
          }
        },
        "buildTreeFromMarkup": {
          "guessedname": "buildTreeFromMarkup",
          "guessedtype": "function",
          "description": "Builds the TreeView from existing markup.   Markup should consist of &lt;UL&gt; or &lt;OL&gt; elements containing &lt;LI&gt; elements.  \nEach &lt;LI&gt; can have one element used as label and a second optional element which is to be a &lt;UL&gt; or &lt;OL&gt;\ncontaining nested nodes.\nDepending on what the first element of the &lt;LI&gt; element is, the following Nodes will be created: <ul>\n<li>plain text:  a regular TextNode</li>\n<li>anchor &lt;A&gt;: a TextNode with its <code>href</code> and <code>target</code> taken from the anchor</li>\n<li>anything else: an HTMLNode</li></ul>\nOnly the first  outermost (un-)ordered list in the markup and its children will be parsed.\nNodes will be collapsed unless  an  &lt;LI&gt;  tag has a className called 'expanded'.\nAll other className attributes will be copied over to the Node className property.\nIf the &lt;LI&gt; element contains an attribute called <code>yuiConfig</code>, its contents should be a JSON-encoded object\nas the one used in method <a href=\"#method_buildTreeFromObject\">buildTreeFromObject</a>.",
          "params": [
            {
              "name": "id",
              "type": "string|HTMLElement",
              "description": "  The id of the element that contains the markup or a reference to it."
            }
          ]
        },
        "_closeEditor": {
          "private": "",
          "guessedname": "_closeEditor",
          "guessedtype": "function",
          "description": "Method to be called when the inline editing is finished and the editor is to be closed",
          "params": [
            {
              "name": "save",
              "type": "Boolean",
              "description": "  true if the edited value is to be saved, false if discarded"
            }
          ]
        },
        "_onMouseOutEvent": {
          "guessedname": "_onMouseOutEvent",
          "private": "",
          "guessedtype": "function",
          "description": "Event listener for mouse out events"
        },
        "_initEditor": {
          "private": "",
          "guessedname": "_initEditor",
          "guessedtype": "function",
          "description": "Entry point for initializing the editing plug-in.  \nTreeView will call this method on initializing if it exists"
        },
        "collapseComplete": {
          "guessedname": "collapseComplete",
          "guessedtype": "function",
          "description": "Function executed when the collapse animation completes"
        },
        "onEventEditNode": {
          "guessedname": "onEventEditNode",
          "guessedtype": "function",
          "description": "Method to be associated with an event (clickEvent, dblClickEvent or enterKeyPressed) to pop up the contents editor\nIt calls the corresponding node editNode method.",
          "params": [
            {
              "name": "oArgs",
              "type": "object",
              "description": "  Object passed as arguments to TreeView event listeners"
            }
          ]
        },
        "getNodesByProperty": {
          "guessedname": "getNodesByProperty",
          "guessedtype": "function",
          "description": "Returns a collection of nodes that have a matching property \nand value in the data object that was passed into its constructor.",
          "params": [
            {
              "name": "property",
              "type": "object",
              "description": " the property to search (usually a string)"
            },
            {
              "name": "value",
              "type": "object",
              "description": " the value we want to find (usuall an int or string)"
            }
          ],
          "return": {
            "type": "Array",
            "description": "the matching collection of nodes, null if no match"
          }
        },
        "getTreeDefinition": {
          "guessedname": "getTreeDefinition",
          "guessedtype": "function",
          "description": "Returns an object which could be used to rebuild the tree.\nIt can be passed to the tree constructor to reproduce the same tree.\nIt will return false if any node loads dynamically, regardless of whether it is loaded or not.",
          "return": {
            "type": "Object | false",
            "description": "definition of the tree or false if any node is defined as dynamic"
          }
        },
        "expandAll": {
          "guessedname": "expandAll",
          "guessedtype": "function",
          "description": "Expands all child nodes.  Note: this conflicts with the \"multiExpand\"\nnode property.  If expand all is called in a tree with nodes that\ndo not allow multiple siblings to be displayed, only the last sibling\nwill be expanded."
        },
        "YAHOO.widget.TreeView.getTree": {
          "guessedname": "getTree",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "treeId",
              "type": "String",
              "description": "  the id of the tree instance"
            }
          ],
          "description": "Global method for getting a tree by its id.  Used in the generated\ntree html.",
          "return": {
            "type": "TreeView",
            "description": "the tree instance requested, null if not found."
          }
        },
        "buildTreeFromObject": {
          "guessedname": "buildTreeFromObject",
          "guessedtype": "function",
          "description": "Builds the TreeView from an object.  \nThis is the method called by the constructor to build the tree when it has a second argument.\nA tree can be described by an array of objects, each object corresponding to a node.\nNode descriptions may contain values for any property of a node plus the following extra properties: <ul>\n<li>type:  can be one of the following:<ul>\n<li> A shortname for a node type (<code>'text','menu','html'</code>) </li>\n<li>The name of a Node class under YAHOO.widget (<code>'TextNode', 'MenuNode', 'DateNode'</code>, etc) </li>\n<li>a reference to an actual class: <code>YAHOO.widget.DateNode</code></li>\n</ul></li>\n<li>children: an array containing further node definitions</li></ul>\nA string instead of an object will produce a node of type 'text' with the given string as its label.",
          "params": [
            {
              "name": "oConfig",
              "type": "Array|Object|String",
              "description": "   array containing a full description of the tree.\nAn object or a string will be turned into an array with the given object or string as its only element."
            }
          ]
        },
        "popNode": {
          "guessedname": "popNode",
          "guessedtype": "function",
          "description": "Removes the node from the tree, preserving the child collection \nto make it possible to insert the branch into another part of the \ntree, or another tree.",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": " to remove"
            }
          ]
        },
        "removeNode": {
          "guessedname": "removeNode",
          "guessedtype": "function",
          "description": "Removes the node and its children, and optionally refreshes the \nbranch of the tree that was affected.",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": " to remove"
            },
            {
              "name": "autoRefresh",
              "type": "boolean",
              "description": " automatically refreshes branch if true"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "False is there was a problem, true otherwise."
          }
        }
      },
      "name": "YAHOO.widget.TreeView",
      "guessedname": "TreeView",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "events": {
        "labelClick": {
          "type": "CustomEvent",
          "description": "Custom event that is fired when the text node label is clicked. \nThe node clicked is  provided as an argument",
          "params": [
            {
              "name": "node",
              "type": "YAHOO.widget.Node",
              "description": " the node clicked"
            }
          ],
          "deprecated": "use clickEvent or dblClickEvent"
        },
        "expandComplete": {
          "type": "CustomEvent",
          "description": "Fires after a node is successfully expanded.  This event will not fire\nif the \"expand\" event was cancelled.",
          "params": [
            {
              "name": "node",
              "type": "YAHOO.widget.Node",
              "description": " the node that was expanded"
            }
          ]
        },
        "dblClickEvent": {
          "guessedname": "self",
          "type": "CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the label in a TextNode or MenuNode or content in an HTMLNode receives a double Click",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "   The event object"
            },
            {
              "name": "oArgs.node",
              "type": "YAHOO.widget.Node",
              "description": "  node the node that was clicked"
            }
          ]
        },
        "expand": {
          "type": "CustomEvent",
          "description": "Fires when a node is going to be expanded.  Return false to stop\nthe collapse.",
          "params": [
            {
              "name": "node",
              "type": "YAHOO.widget.Node",
              "description": " the node that is expanding"
            }
          ]
        },
        "focusChanged": {
          "type": "CustomEvent",
          "description": "Fires when the focus receives the focus, when it changes from a Node \nto another Node or when it is completely lost (blurred)",
          "params": [
            {
              "name": "oArgs.oldNode",
              "type": "YAHOO.widget.Node",
              "description": "   Node that had the focus or null if none"
            },
            {
              "name": "oArgs.newNode",
              "type": "YAHOO.widget.Node",
              "description": "  Node that receives the focus or null if none"
            }
          ]
        },
        "collapse": {
          "type": "CustomEvent",
          "description": "Fires when a node is going to be collapsed.  Return false to stop\nthe collapse.",
          "params": [
            {
              "name": "node",
              "type": "YAHOO.widget.Node",
              "description": " the node that is collapsing"
            }
          ]
        },
        "editorSaveEvent": {
          "type": "CustomEvent",
          "description": "Fires when the user clicks on the ok button of a node editor",
          "params": [
            {
              "name": "oArgs.newValue",
              "type": "mixed",
              "description": "  the new value just entered"
            },
            {
              "name": "oArgs.oldValue",
              "type": "mixed",
              "description": "  the value originally in the tree"
            },
            {
              "name": "oArgs.node",
              "type": "YAHOO.widget.Node",
              "description": "  the node that has the focus"
            }
          ]
        },
        "enterKeyPressed": {
          "type": "CustomEvent",
          "description": "Fires when the Enter key is pressed on a node that has the focus",
          "params": [
            {
              "name": "node",
              "type": "YAHOO.widget.Node",
              "description": " the node that has the focus"
            }
          ]
        },
        "animStart": {
          "type": "CustomEvent",
          "description": "When animation is enabled, this event fires when the animation\nstarts",
          "params": [
            {
              "name": "oArgs.node",
              "type": "YAHOO.widget.Node",
              "description": " the node that is expanding/collapsing"
            },
            {
              "name": "oArgs.type",
              "type": "String",
              "description": " the type of animation (\"expand\" or \"collapse\")"
            }
          ]
        },
        "collapseComplete": {
          "type": "CustomEvent",
          "description": "Fires after a node is successfully collapsed.  This event will not fire\nif the \"collapse\" event was cancelled.",
          "params": [
            {
              "name": "node",
              "type": "YAHOO.widget.Node",
              "description": " the node that was collapsed"
            }
          ]
        },
        "highlightEvent": {
          "type": "CustomEvent",
          "description": "Custom event fired when the highlight of a node changes.\nThe node that triggered the change is provided as an argument:\nThe status of the highlight can be checked in \n<a href=\"YAHOO.widget.Node.html#property_highlightState\">nodeRef.highlightState</a>.\nDepending on <a href=\"YAHOO.widget.Node.html#property_propagateHighlight\">nodeRef.propagateHighlight</a>, other nodes might have changed",
          "params": [
            {
              "name": "node",
              "type": "YAHOO.widget.Node",
              "description": "  the node that started the change in highlighting state"
            }
          ]
        },
        "clickEvent": {
          "type": "CustomEvent",
          "description": "Fires when the label in a TextNode or MenuNode or content in an HTMLNode receives a Click.\nThe listener may return false to cancel toggling and focusing on the node.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "   The event object"
            },
            {
              "name": "oArgs.node",
              "type": "YAHOO.widget.Node",
              "description": "  node the node that was clicked"
            }
          ]
        },
        "animComplete": {
          "type": "CustomEvent",
          "description": "When animation is enabled, this event fires when the animation\ncompletes",
          "params": [
            {
              "name": "oArgs.node",
              "type": "YAHOO.widget.Node",
              "description": " the node that is expanding/collapsing"
            },
            {
              "name": "oArgs.type",
              "type": "String",
              "description": " the type of animation (\"expand\" or \"collapse\")"
            }
          ]
        },
        "editorCancelEvent": {
          "type": "CustomEvent",
          "description": "Fires when the user clicks on the cancel button of a node editor",
          "params": [
            {
              "name": "node",
              "type": "YAHOO.widget.Node",
              "description": " the node that has the focus"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Contains the tree view state data and the root node.",
          "params": [
            {
              "name": "id",
              "type": "string|HTMLElement",
              "description": " The id of the element, or the element itself that the tree will be inserted into.  \nExisting markup in this element, if valid, will be used to build the tree"
            },
            {
              "name": "oConfig",
              "type": "Array|Object|String",
              "description": " (optional)  If present, it will be used to build the tree via method <a href=\"#method_buildTreeFromObject\">buildTreeFromObject</a>"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Contains the tree view state data and the root node.",
      "file": "TreeView.js",
      "properties": {
        "validator": {
          "guessedname": "validator",
          "default": "null",
          "type": "function",
          "guessedtype": "property",
          "description": "Validator function for edited data, called from the TreeView instance scope, \nreceives the arguments (newValue, oldValue, nodeInstance) \nand returns either the validated (or type-converted) value or undefined. \nAn undefined return will prevent the editor from closing"
        },
        "_animCount": {
          "private": "",
          "guessedname": "_animCount",
          "type": "int",
          "guessedtype": "property",
          "description": "The current number of animations that are executing"
        },
        "_nodes": {
          "private": "",
          "guessedname": "_nodes",
          "type": "Node[]",
          "guessedtype": "property",
          "description": "Flat collection of all nodes in this tree.  This is a sparse\narray, so the length property can't be relied upon for a\nnode count for the tree."
        },
        "currentFocus": {
          "guessedname": "currentFocus",
          "type": "YAHOO.widget.Node",
          "guessedtype": "property",
          "description": "A reference to the Node currently having the focus or null if none."
        },
        "singleNodeHighlight": {
          "guessedname": "singleNodeHighlight",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "If true, only one Node can be highlighted at a time"
        },
        "maxAnim": {
          "guessedname": "maxAnim",
          "type": "int",
          "guessedtype": "property",
          "description": "The maximum number of animations to run at one time."
        },
        "_expandAnim": {
          "private": "",
          "guessedname": "_expandAnim",
          "type": "string",
          "guessedtype": "property",
          "description": "The animation to use for expanding children, if any"
        },
        "_currentlyHighlighted": {
          "guessedname": "_currentlyHighlighted",
          "private": "",
          "default": "null",
          "type": "YAHOO.widget.Node",
          "guessedtype": "property",
          "description": "A reference to the Node that is currently highlighted.\nIt is only meaningful if singleNodeHighlight is enabled"
        },
        "_dblClickTimer": {
          "private": "",
          "guessedname": "_dblClickTimer",
          "type": "window.timer object",
          "guessedtype": "property",
          "description": "Stores the timer used to check for double clicks"
        },
        "id": {
          "guessedname": "id",
          "type": "String",
          "guessedtype": "property",
          "description": "The id of tree container element"
        },
        "editorData": {
          "guessedname": "editorData",
          "static": "",
          "guessedtype": "property",
          "description": "An object to store information used for in-line editing\nfor all Nodes of all TreeViews. It contains:\n<ul>\n<li>active {boolean}, whether there is an active cell editor </li>\n<li>whoHasIt {YAHOO.widget.TreeView} TreeView instance that is currently using the editor</li>\n<li>nodeType {string} value of static Node._type property, allows reuse of input element if node is of the same type.</li>\n<li>editorPanel {HTMLelement (&lt;div&gt;)} element holding the in-line editor</li>\n<li>inputContainer {HTMLelement (&lt;div&gt;)} element which will hold the type-specific input element(s) to be filled by the fillEditorContainer method</li>\n<li>buttonsContainer {HTMLelement (&lt;div&gt;)} element which holds the &lt;button&gt; elements for Ok/Cancel.  If you don't want any of the buttons, hide it via CSS styles, don't destroy it</li>\n<li>node {YAHOO.widget.Node} reference to the Node being edited</li>\n<li>saveOnEnter {boolean}, whether the Enter key should be accepted as a Save command (Esc. is always taken as Cancel), disable for multi-line input elements </li>\n<li>oldValue {any}  value before editing</li>\n</ul>\nEditors are free to use this object to store additional data."
        },
        "TreeView.FOCUS_CLASS_NAME": {
          "final": "",
          "guessedname": "FOCUS_CLASS_NAME",
          "default": "\"ygtvfocus\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to elements that have the focus"
        },
        "_el": {
          "private": "",
          "guessedname": "_el",
          "type": "HTMLelement",
          "guessedtype": "property",
          "description": "The host element for this tree"
        },
        "_hasDblClickSubscriber": {
          "private": "",
          "guessedname": "_hasDblClickSubscriber",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Whether there is any subscriber to dblClickEvent"
        },
        "YAHOO.widget.TreeView.trees": {
          "guessedname": "trees",
          "private": "",
          "static": "",
          "type": "Array",
          "guessedtype": "property",
          "description": "Global cache of tree instances"
        },
        "_collapseAnim": {
          "private": "",
          "guessedname": "_collapseAnim",
          "type": "string",
          "guessedtype": "property",
          "description": "The animation to use for collapsing children, if any"
        },
        "YAHOO.widget.TreeView.nodeCount": {
          "guessedname": "nodeCount",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "Running count of all nodes created in all trees.  This is \nused to provide unique identifies for all nodes.  Deleting\nnodes does not change the nodeCount."
        },
        "locked": {
          "guessedname": "locked",
          "type": "boolean",
          "guessedtype": "property",
          "description": "We lock the tree control while waiting for the dynamic loader to return"
        }
      },
      "uses": [
        "YAHOO.util.EventProvider"
      ]
    },
    "YAHOO.util.ArrayAssert": {
      "shortname": "ArrayAssert",
      "methods": {
        "itemsAreEqual": {
          "guessedname": "itemsAreEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that the values in an array are equal, and in the same position,\nas values in another array. This uses the double equals sign\nso type cohersion may occur. Note that the array objects themselves\nneed not be the same for this test to pass.",
          "params": [
            {
              "name": "expected",
              "type": "Array",
              "description": " An array of the expected values."
            },
            {
              "name": "actual",
              "type": "Array",
              "description": " Any array of the actual values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "lastIndexOf": {
          "guessedname": "lastIndexOf",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that the given value is contained in an array at the specified index,\nstarting from the back of the array.\nThis uses the triple equals sign so no type cohersion will occur.",
          "params": [
            {
              "name": "needle",
              "type": "Object",
              "description": " The value to look for."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " The array to search in."
            },
            {
              "name": "index",
              "type": "int",
              "description": " The index at which the value should exist."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "itemsAreEquivalent": {
          "guessedname": "itemsAreEquivalent",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "expected",
              "type": "Array",
              "description": " An array of the expected values."
            },
            {
              "name": "actual",
              "type": "Array",
              "description": " Any array of the actual values."
            },
            {
              "name": "comparator",
              "type": "Function",
              "description": " A function that returns true if the values are equivalent\nor false if not."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ],
          "description": "Asserts that the values in an array are equivalent, and in the same position,\nas values in another array. This uses a function to determine if the values\nare equivalent. Note that the array objects themselves\nneed not be the same for this test to pass.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "isNotEmpty": {
          "guessedname": "isNotEmpty",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that an array is not empty.",
          "params": [
            {
              "name": "actual",
              "type": "Array",
              "description": " The array to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "isEmpty": {
          "guessedname": "isEmpty",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that an array is empty.",
          "params": [
            {
              "name": "actual",
              "type": "Array",
              "description": " The array to test."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "containsItems": {
          "guessedname": "containsItems",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a set of values are present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nbe found.",
          "params": [
            {
              "name": "needles",
              "type": "Object[]",
              "description": " An array of values that are expected in the array."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values to check."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "doesNotContainMatch": {
          "guessedname": "doesNotContainMatch",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that no values matching a condition are present in an array. This uses\na function to determine a match.",
          "params": [
            {
              "name": "matcher",
              "type": "Function",
              "description": " A function that returns true if the items matches or false if not."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "itemsAreSame": {
          "guessedname": "itemsAreSame",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that the values in an array are the same, and in the same position,\nas values in another array. This uses the triple equals sign\nso no type cohersion will occur. Note that the array objects themselves\nneed not be the same for this test to pass.",
          "params": [
            {
              "name": "expected",
              "type": "Array",
              "description": " An array of the expected values."
            },
            {
              "name": "actual",
              "type": "Array",
              "description": " Any array of the actual values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "doesNotContain": {
          "guessedname": "doesNotContain",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is not present in an array. This uses the triple equals \nsign so no type cohersion may occur.",
          "params": [
            {
              "name": "needle",
              "type": "Object",
              "description": " The value that is expected in the array."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "indexOf": {
          "guessedname": "indexOf",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that the given value is contained in an array at the specified index.\nThis uses the triple equals sign so no type cohersion will occur.",
          "params": [
            {
              "name": "needle",
              "type": "Object",
              "description": " The value to look for."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " The array to search in."
            },
            {
              "name": "index",
              "type": "int",
              "description": " The index at which the value should exist."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "doesNotContainItems": {
          "guessedname": "doesNotContainItems",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a set of values are not present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nnot be found.",
          "params": [
            {
              "name": "needles",
              "type": "Object[]",
              "description": " An array of values that are not expected in the array."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values to check."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "containsMatch": {
          "guessedname": "containsMatch",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value matching some condition is present in an array. This uses\na function to determine a match.",
          "params": [
            {
              "name": "matcher",
              "type": "Function",
              "description": " A function that returns true if the items matches or false if not."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        },
        "contains": {
          "guessedname": "contains",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that a value is present in an array. This uses the triple equals \nsign so no type cohersion may occur.",
          "params": [
            {
              "name": "needle",
              "type": "Object",
              "description": " The value that is expected in the array."
            },
            {
              "name": "haystack",
              "type": "Array",
              "description": " An array of values."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        }
      },
      "name": "YAHOO.util.ArrayAssert",
      "guessedname": "ArrayAssert",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "static": "",
      "guessedtype": "property",
      "description": "The ArrayAssert object provides functions to test JavaScript array objects\nfor a variety of cases.",
      "file": "ArrayAssert.js"
    },
    "YAHOO.util.Cookie": {
      "shortname": "Cookie",
      "methods": {
        "get": {
          "guessedname": "get",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to retrieve."
            },
            {
              "name": "options",
              "type": "Object|Function",
              "description": " (Optional) An object containing one or more\ncookie options: raw (true/false) and converter (a function).\nThe converter function is run on the value before returning it. The\nfunction is not used if the cookie doesn't exist. The function can be\npassed instead of the options object for backwards compatibility."
            }
          ],
          "description": "Returns the cookie value for the given name.",
          "return": {
            "type": "Variant",
            "description": "If no converter is specified, returns a string or null if\nthe cookie doesn't exist. If the converter is specified, returns the value\nreturned from the converter or null if the cookie doesn't exist."
          }
        },
        "_createCookieHashString": {
          "guessedname": "_createCookieHashString",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "hash",
              "type": "Object",
              "description": " An object of key-value pairs to create a string for."
            }
          ],
          "description": "Formats a cookie value for an object containing multiple values.",
          "return": {
            "type": "String",
            "description": "A string suitable for use as a cookie value."
          }
        },
        "_parseCookieString": {
          "guessedname": "_parseCookieString",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "text",
              "type": "String",
              "description": " The cookie string to parse."
            },
            {
              "name": "decode",
              "type": "Boolean",
              "description": " (Optional) Indicates if the cookie values should be decoded or not. Default is true."
            }
          ],
          "description": "Parses a cookie string into an object representing all accessible cookies.",
          "return": {
            "type": "Object",
            "description": "An object containing entries for each accessible cookie."
          }
        },
        "set": {
          "guessedname": "set",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to set."
            },
            {
              "name": "value",
              "type": "Variant",
              "description": " The value to set for the cookie."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nraw (true/false), and secure (true/false)."
            }
          ],
          "description": "Sets a cookie with a given name and value.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        },
        "getSub": {
          "guessedname": "getSub",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to retrieve."
            },
            {
              "name": "subName",
              "type": "String",
              "description": " The name of the subcookie to retrieve."
            },
            {
              "name": "converter",
              "type": "Function",
              "description": " (Optional) A function to run on the value before returning\nit. The function is not used if the cookie doesn't exist."
            }
          ],
          "description": "Returns the value of a subcookie.",
          "return": {
            "type": "Variant",
            "description": "If the cookie doesn't exist, null is returned. If the subcookie\ndoesn't exist, null if also returned. If no converter is specified and the\nsubcookie exists, a string is returned. If a converter is specified and the\nsubcookie exists, the value returned from the converter is returned."
          }
        },
        "remove": {
          "guessedname": "remove",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to remove."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string),\nand secure (true/false). The expires option will be overwritten\nby the method."
            }
          ],
          "description": "Removes a cookie from the machine by setting its expiration date to\nsometime in the past.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        },
        "_parseCookieHash": {
          "guessedname": "_parseCookieHash",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "text",
              "type": "String",
              "description": " The cookie hash string to parse. The string should already be URL-decoded."
            }
          ],
          "description": "Parses a cookie hash string into an object.",
          "return": {
            "type": "Object",
            "description": "An object containing entries for each cookie value."
          }
        },
        "setSub": {
          "guessedname": "setSub",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to set."
            },
            {
              "name": "subName",
              "type": "String",
              "description": " The name of the subcookie to set."
            },
            {
              "name": "value",
              "type": "Variant",
              "description": " The value to set."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."
            }
          ],
          "description": "Sets a sub cookie with a given name to a particular value.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        },
        "_createCookieString": {
          "guessedname": "_createCookieString",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie."
            },
            {
              "name": "value",
              "type": "String",
              "description": " The value of the cookie."
            },
            {
              "name": "encodeValue",
              "type": "Boolean",
              "description": " True to encode the value, false to leave as-is."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) Options for the cookie."
            }
          ],
          "description": "Creates a cookie string that can be assigned into document.cookie.",
          "return": {
            "type": "String",
            "description": "The formatted cookie string."
          }
        },
        "getSubs": {
          "guessedname": "getSubs",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to retrieve."
            }
          ],
          "description": "Returns an object containing name-value pairs stored in the cookie with the given name.",
          "return": {
            "type": "Object",
            "description": "An object of name-value pairs if the cookie with the given name\nexists, null if it does not."
          }
        },
        "removeSub": {
          "guessedname": "removeSub",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie in which the subcookie exists."
            },
            {
              "name": "subName",
              "type": "String",
              "description": " The name of the subcookie to remove."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nremoveIfEmpty (true/false), and secure (true/false). This must be the same\nsettings as the original subcookie."
            }
          ],
          "description": "Removes a subcookie with a given name. Removing the last subcookie\nwon't remove the entire cookie unless options.removeIfEmpty is true.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        },
        "exists": {
          "guessedname": "exists",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to check."
            }
          ],
          "description": "Determines if the cookie with the given name exists. This is useful for\nBoolean cookies (those that do not follow the name=value convention).",
          "return": {
            "type": "Boolean",
            "description": "True if the cookie exists, false if not."
          }
        },
        "setSubs": {
          "guessedname": "setSubs",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the cookie to set."
            },
            {
              "name": "value",
              "type": "Object",
              "description": " An object containing name-value pairs."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."
            }
          ],
          "description": "Sets a cookie with a given name to contain a hash of name-value pairs.",
          "return": {
            "type": "String",
            "description": "The created cookie string."
          }
        }
      },
      "name": "YAHOO.util.Cookie",
      "guessedname": "Cookie",
      "module": "cookie",
      "namespace": "YAHOO.util",
      "static": "",
      "guessedtype": "property",
      "description": "Cookie utility.",
      "file": "Cookie.js"
    },
    "YAHOO.util.UserAction": {
      "shortname": "UserAction",
      "methods": {
        "simulateKeyEvent": {
          "guessedname": "simulateKeyEvent",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The target of the given event."
            },
            {
              "name": "type",
              "type": "String",
              "description": " The type of event to fire. This can be any one of\nthe following: keyup, keydown, and keypress."
            },
            {
              "name": "bubbles",
              "type": "Boolean",
              "description": " (Optional) Indicates if the event can be\nbubbled up. DOM Level 3 specifies that all key events bubble by\ndefault. The default is true."
            },
            {
              "name": "cancelable",
              "type": "Boolean",
              "description": " (Optional) Indicates if the event can be\ncanceled using preventDefault(). DOM Level 3 specifies that all\nkey events can be cancelled. The default \nis true."
            },
            {
              "name": "view",
              "type": "Window",
              "description": " (Optional) The view containing the target. This is\ntypically the window object. The default is window."
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": " (Optional) Indicates if one of the CTRL keys\nis pressed while the event is firing. The default is false."
            },
            {
              "name": "altKey",
              "type": "Boolean",
              "description": " (Optional) Indicates if one of the ALT keys\nis pressed while the event is firing. The default is false."
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": " (Optional) Indicates if one of the SHIFT keys\nis pressed while the event is firing. The default is false."
            },
            {
              "name": "metaKey",
              "type": "Boolean",
              "description": " (Optional) Indicates if one of the META keys\nis pressed while the event is firing. The default is false."
            },
            {
              "name": "keyCode",
              "type": "int",
              "description": " (Optional) The code for the key that is in use. \nThe default is 0."
            },
            {
              "name": "charCode",
              "type": "int",
              "description": " (Optional) The Unicode code for the character\nassociated with the key being used. The default is 0."
            }
          ],
          "description": "Simulates a key event using the given event information to populate\nthe generated event object. This method does browser-equalizing\ncalculations to account for differences in the DOM and IE event models\nas well as different browser quirks. Note: keydown causes Safari 2.x to\ncrash."
        },
        "mouseEvent": {
          "guessedname": "fireMouseEvent",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a mouse event on a particular element.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to click on."
            },
            {
              "name": "type",
              "type": "String",
              "description": " The type of event to fire. This can be any one of\nthe following: click, dblclick, mousedown, mouseup, mouseout,\nmouseover, and mousemove."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "mousemove": {
          "guessedname": "mousemove",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a mousemove on a particular element.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to act on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "dblclick": {
          "guessedname": "dblclick",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a double click on a particular element.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to double click on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "mouseout": {
          "guessedname": "mouseout",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a mouseout event on a particular element. Use \"relatedTarget\"\non the options object to specify where the mouse moved to.\nQuirks: Firefox less than 2.0 doesn't set relatedTarget properly, so\ntoElement is assigned in its place. IE doesn't allow toElement to be\nbe assigned, so relatedTarget is assigned in its place. Both of these\nconcessions allow YAHOO.util.Event.getRelatedTarget() to work correctly\nin both browsers.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to act on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "mouseup": {
          "guessedname": "mouseup",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a mouseup on a particular element.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to act on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "mouseover": {
          "guessedname": "mouseover",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a mouseover event on a particular element. Use \"relatedTarget\"\non the options object to specify where the mouse moved from.\nQuirks: Firefox less than 2.0 doesn't set relatedTarget properly, so\nfromElement is assigned in its place. IE doesn't allow fromElement to be\nbe assigned, so relatedTarget is assigned in its place. Both of these\nconcessions allow YAHOO.util.Event.getRelatedTarget() to work correctly\nin both browsers.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to act on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "keydown": {
          "guessedname": "keydown",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a keydown event on a particular element.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to act on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "simulateMouseEvent": {
          "guessedname": "simulateMouseEvent",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The target of the given event."
            },
            {
              "name": "type",
              "type": "String",
              "description": " The type of event to fire. This can be any one of\nthe following: click, dblclick, mousedown, mouseup, mouseout,\nmouseover, and mousemove."
            },
            {
              "name": "bubbles",
              "type": "Boolean",
              "description": " (Optional) Indicates if the event can be\nbubbled up. DOM Level 2 specifies that all mouse events bubble by\ndefault. The default is true."
            },
            {
              "name": "cancelable",
              "type": "Boolean",
              "description": " (Optional) Indicates if the event can be\ncanceled using preventDefault(). DOM Level 2 specifies that all\nmouse events except mousemove can be cancelled. The default \nis true for all events except mousemove, for which the default \nis false."
            },
            {
              "name": "view",
              "type": "Window",
              "description": " (Optional) The view containing the target. This is\ntypically the window object. The default is window."
            },
            {
              "name": "detail",
              "type": "int",
              "description": " (Optional) The number of times the mouse button has\nbeen used. The default value is 1."
            },
            {
              "name": "screenX",
              "type": "int",
              "description": " (Optional) The x-coordinate on the screen at which\npoint the event occured. The default is 0."
            },
            {
              "name": "screenY",
              "type": "int",
              "description": " (Optional) The y-coordinate on the screen at which\npoint the event occured. The default is 0."
            },
            {
              "name": "clientX",
              "type": "int",
              "description": " (Optional) The x-coordinate on the client at which\npoint the event occured. The default is 0."
            },
            {
              "name": "clientY",
              "type": "int",
              "description": " (Optional) The y-coordinate on the client at which\npoint the event occured. The default is 0."
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": " (Optional) Indicates if one of the CTRL keys\nis pressed while the event is firing. The default is false."
            },
            {
              "name": "altKey",
              "type": "Boolean",
              "description": " (Optional) Indicates if one of the ALT keys\nis pressed while the event is firing. The default is false."
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": " (Optional) Indicates if one of the SHIFT keys\nis pressed while the event is firing. The default is false."
            },
            {
              "name": "metaKey",
              "type": "Boolean",
              "description": " (Optional) Indicates if one of the META keys\nis pressed while the event is firing. The default is false."
            },
            {
              "name": "button",
              "type": "int",
              "description": " (Optional) The button being pressed while the event\nis executing. The value should be 0 for the primary mouse button\n(typically the left button), 1 for the terciary mouse button\n(typically the middle button), and 2 for the secondary mouse button\n(typically the right button). The default is 0."
            },
            {
              "name": "relatedTarget",
              "type": "HTMLElement",
              "description": " (Optional) For mouseout events,\nthis is the element that the mouse has moved to. For mouseover\nevents, this is the element that the mouse has moved from. This\nargument is ignored for all other events. The default is null."
            }
          ],
          "description": "Simulates a mouse event using the given event information to populate\nthe generated event object. This method does browser-equalizing\ncalculations to account for differences in the DOM and IE event models\nas well as different browser quirks."
        },
        "click": {
          "guessedname": "click",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a click on a particular element.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to click on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "keyup": {
          "guessedname": "keyup",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a keyup event on a particular element.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to act on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "keypress": {
          "guessedname": "keypress",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a keypress on a particular element.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to act on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        },
        "fireKeyEvent": {
          "guessedname": "fireKeyEvent",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The type of event (\"keyup\", \"keydown\" or \"keypress\")."
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The target of the event."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Options for the event. Either keyCode or charCode\nare required."
            }
          ],
          "description": "Fires an event that normally would be fired by the keyboard (keyup,\nkeydown, keypress). Make sure to specify either keyCode or charCode as\nan option."
        },
        "mousedown": {
          "guessedname": "mousedown",
          "static": "",
          "guessedtype": "function",
          "description": "Simulates a mousedown on a particular element.",
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": " The element to act on."
            },
            {
              "name": "options",
              "type": "Object",
              "description": " Additional event options (use DOM standard names)."
            }
          ]
        }
      },
      "name": "YAHOO.util.UserAction",
      "guessedname": "UserAction",
      "module": "event-simulate",
      "namespace": "YAHOO.util",
      "static": "",
      "guessedtype": "property",
      "description": "The UserAction object provides functions that simulate events occurring in\nthe browser. Since these are simulated events, they do not behave exactly\nas regular, user-initiated events do, but can be used to test simple\nuser interactions safely.",
      "file": "UserAction.js"
    },
    "YAHOO.widget.Tab": {
      "shortname": "Tab",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Provides a readable name for the tab.",
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "setAttributeConfigs Tab specific properties.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " Hash of initial attributes"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Tab",
      "extends": "YAHOO.util.Element",
      "guessedname": "Tab",
      "module": "tabview",
      "namespace": "YAHOO.widget",
      "events": {
        "dataLoadedChange": {
          "name": "dataLoadedChange",
          "description": "Fires when the value for the configuration attribute 'dataLoaded' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "contentVisibleChange": {
          "name": "contentVisibleChange",
          "description": "Fires when the value for the configuration attribute 'contentVisible' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "labelElChange": {
          "name": "labelElChange",
          "description": "Fires when the value for the configuration attribute 'labelEl' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "activationEventChange": {
          "name": "activationEventChange",
          "description": "Fires when the value for the configuration attribute 'activationEvent' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "dataSrcChange": {
          "name": "dataSrcChange",
          "description": "Fires when the value for the configuration attribute 'dataSrc' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "loadMethodChange": {
          "name": "loadMethodChange",
          "description": "Fires when the value for the configuration attribute 'loadMethod' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLoadMethodChange": {
          "name": "beforeLoadMethodChange",
          "description": "Fires before the value for the configuration attribute 'loadMethod' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "activeChange": {
          "name": "activeChange",
          "description": "Fires when the value for the configuration attribute 'active' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "contentChange": {
          "name": "contentChange",
          "description": "Fires when the value for the configuration attribute 'content' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLabelElChange": {
          "name": "beforeLabelElChange",
          "description": "Fires before the value for the configuration attribute 'labelEl' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "disabledChange": {
          "name": "disabledChange",
          "description": "Fires when the value for the configuration attribute 'disabled' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeActivationEventChange": {
          "name": "beforeActivationEventChange",
          "description": "Fires before the value for the configuration attribute 'activationEvent' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "labelChange": {
          "name": "labelChange",
          "description": "Fires when the value for the configuration attribute 'label' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDataSrcChange": {
          "name": "beforeDataSrcChange",
          "description": "Fires before the value for the configuration attribute 'dataSrc' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePostDataChange": {
          "name": "beforePostDataChange",
          "description": "Fires before the value for the configuration attribute 'postData' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCacheDataChange": {
          "name": "beforeCacheDataChange",
          "description": "Fires before the value for the configuration attribute 'cacheData' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "remove": {
          "guessedname": "Tab",
          "type": "CustomEvent",
          "guessedtype": "property",
          "description": "Fires when a tab is removed from the tabview",
          "params": [
            {
              "name": "An",
              "type": "Event",
              "description": " event object with fields for \"type\" (\"remove\")\nand \"tabview\" (the tabview instance it was removed from)"
            }
          ]
        },
        "beforeContentElChange": {
          "name": "beforeContentElChange",
          "description": "Fires before the value for the configuration attribute 'contentEl' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "postDataChange": {
          "name": "postDataChange",
          "description": "Fires when the value for the configuration attribute 'postData' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "contentElChange": {
          "name": "contentElChange",
          "description": "Fires when the value for the configuration attribute 'contentEl' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLabelChange": {
          "name": "beforeLabelChange",
          "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "dataTimeoutChange": {
          "name": "dataTimeoutChange",
          "description": "Fires when the value for the configuration attribute 'dataTimeout' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDataLoadedChange": {
          "name": "beforeDataLoadedChange",
          "description": "Fires before the value for the configuration attribute 'dataLoaded' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "hrefChange": {
          "name": "hrefChange",
          "description": "Fires when the value for the configuration attribute 'href' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDisabledChange": {
          "name": "beforeDisabledChange",
          "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeActiveChange": {
          "name": "beforeActiveChange",
          "description": "Fires before the value for the configuration attribute 'active' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeContentVisibleChange": {
          "name": "beforeContentVisibleChange",
          "description": "Fires before the value for the configuration attribute 'contentVisible' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "cacheDataChange": {
          "name": "cacheDataChange",
          "description": "Fires when the value for the configuration attribute 'cacheData' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHrefChange": {
          "name": "beforeHrefChange",
          "description": "Fires before the value for the configuration attribute 'href' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDataTimeoutChange": {
          "name": "beforeDataTimeoutChange",
          "description": "Fires before the value for the configuration attribute 'dataTimeout' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeContentChange": {
          "name": "beforeContentChange",
          "description": "Fires before the value for the configuration attribute 'content' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "A representation of a Tab's label and content.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement | String",
              "description": "  (optional) The html element that \nrepresents the Tab. An element will be created if none provided."
            },
            {
              "name": "properties",
              "type": "Object",
              "description": " A key map of initial properties"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A representation of a Tab's label and content.",
      "file": "Tab.js",
      "configs": {
        "label": {
          "type": "String",
          "description": "The tab's label text (or innerHTML)."
        },
        "href": {
          "default": "'#'",
          "type": "String",
          "description": "The href of the tab's anchor element."
        },
        "contentEl": {
          "type": "HTMLElement",
          "description": "The HTMLElement that contains the tab's content."
        },
        "cacheData": {
          "default": "false",
          "type": "Boolean",
          "description": "Whether or not content should be reloaded for every view."
        },
        "dataTimeout": {
          "default": "null",
          "type": "Number",
          "description": "Number if milliseconds before aborting and calling failure handler."
        },
        "dataLoaded": {
          "type": "Boolean",
          "description": "Whether or not any data has been loaded from the server."
        },
        "contentVisible": {
          "default": "false",
          "type": "Boolean",
          "description": "The Whether or not the tab's content is visible."
        },
        "activationEvent": {
          "type": "String",
          "description": "The event that triggers the tab's activation."
        },
        "dataSrc": {
          "type": "String",
          "description": "The tab's data source, used for loading content dynamically."
        },
        "labelEl": {
          "type": "HTMLElement",
          "description": "The element that contains the tab's label."
        },
        "content": {
          "type": "String",
          "description": "The tab's content."
        },
        "postData": {
          "default": "null",
          "description": "Arguments to pass when POST method is used"
        },
        "disabled": {
          "type": "Boolean",
          "description": "Whether or not the tab is disabled."
        },
        "loadMethod": {
          "default": "\"GET\"",
          "type": "String",
          "description": "The method to use for the data request."
        },
        "active": {
          "type": "Boolean",
          "description": "Whether or not the tab is currently active.\nIf a dataSrc is set for the tab, the content will be loaded from\nthe given source."
        }
      },
      "properties": {
        "ACTIVE_CLASSNAME": {
          "guessedname": "ACTIVE_CLASSNAME",
          "default": "\"selected\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The class name applied to active tabs."
        },
        "LOADING_CLASSNAME": {
          "guessedname": "LOADING_CLASSNAME",
          "default": "\"disabled\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The class name applied to dynamic tabs while loading."
        },
        "loadHandler": {
          "guessedname": "loadHandler",
          "type": "object",
          "guessedtype": "property",
          "description": "Object containing success and failure callbacks for loading data."
        },
        "DISABLED_CLASSNAME": {
          "guessedname": "DISABLED_CLASSNAME",
          "default": "\"disabled\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The class name applied to disabled tabs."
        },
        "HIDDEN_CLASSNAME": {
          "guessedname": "HIDDEN_CLASSNAME",
          "default": "\"yui-hidden\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The class name applied to active tabs."
        },
        "LABEL_INNER_TAGNAME": {
          "guessedname": "LABEL_TAGNAME",
          "default": "\"em\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The default tag name for a Tab's inner element."
        },
        "ACTIVE_TITLE": {
          "guessedname": "ACTIVE_TITLE",
          "default": "\"active\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The title applied to active tabs."
        },
        "dataConnection": {
          "guessedname": "dataConnection",
          "type": "Object",
          "guessedtype": "property",
          "description": "Provides a reference to the connection request object when data is\nloaded dynamically."
        }
      }
    },
    "YAHOO.util.KeyListener": {
      "shortname": "KeyListener",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a String representation of the object.",
          "return": {
            "type": "String",
            "description": "The string representation of the KeyListener"
          }
        },
        "handleKeyPress": {
          "private": "",
          "description": "Handles the key event when a key is pressed.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": "   The keypress DOM event"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The DOM event scope object"
            }
          ]
        },
        "enable": {
          "guessedname": "enable",
          "guessedtype": "function",
          "description": "Enables the KeyListener by attaching the DOM event listeners to the \ntarget DOM element"
        },
        "disable": {
          "guessedname": "disable",
          "guessedtype": "function",
          "description": "Disables the KeyListener by removing the DOM event listeners from the \ntarget DOM element"
        }
      },
      "name": "YAHOO.util.KeyListener",
      "knownissue": "the \"keypress\" event is completely broken in Safari 2.x and below.\nthe workaround is use \"keydown\" for key listening.  However, if\nit is desired to prevent the default behavior of the keystroke,\nthat can only be done on the keypress event.  This makes key\nhandling quite ugly.",
      "guessedname": "KeyListener",
      "module": "event",
      "namespace": "YAHOO.util",
      "events": {
        "enabledEvent": {
          "guessedname": "enabledEvent",
          "guessedtype": "property",
          "description": "The CustomEvent fired when the KeyListener is enabled via the enable() \nfunction",
          "params": [
            {
              "name": "keyData",
              "type": "Object",
              "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."
            }
          ]
        },
        "keyEvent": {
          "private": "",
          "guessedname": "keyEvent",
          "guessedtype": "property",
          "description": "The CustomEvent fired internally when a key is pressed",
          "params": [
            {
              "name": "keyData",
              "type": "Object",
              "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."
            }
          ]
        },
        "disabledEvent": {
          "guessedname": "disabledEvent",
          "guessedtype": "property",
          "description": "The CustomEvent fired when the KeyListener is disabled via the \ndisable() function",
          "params": [
            {
              "name": "keyData",
              "type": "Object",
              "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "KeyListener is a utility that provides an easy interface for listening for\nkeydown/keyup events fired against DOM elements.",
          "params": [
            {
              "name": "attachTo",
              "type": "HTMLElement",
              "description": " The element or element ID to which the key \nevent should be attached"
            },
            {
              "name": "attachTo",
              "type": "String",
              "description": " The element or element ID to which the key\nevent should be attached"
            },
            {
              "name": "keyData",
              "type": "Object",
              "description": "  The object literal representing the key(s) \nto detect. Possible attributes are \nshift(boolean), alt(boolean), ctrl(boolean) \nand keys(either an int or an array of ints \nrepresenting keycodes)."
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "  The CustomEvent handler to fire when the \nkey event is detected"
            },
            {
              "name": "handler",
              "type": "Object",
              "description": "  An object literal representing the handler."
            },
            {
              "name": "event",
              "type": "String",
              "description": "    Optional. The event (keydown or keyup) to \nlisten for. Defaults automatically to keydown."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "KeyListener is a utility that provides an easy interface for listening for\nkeydown/keyup events fired against DOM elements.",
      "file": "KeyListener.js",
      "properties": {
        "YAHOO.util.KeyListener.KEYDOWN": {
          "final": "",
          "guessedname": "KEYDOWN",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the DOM \"keydown\" event."
        },
        "YAHOO.util.KeyListener.KEYUP": {
          "final": "",
          "guessedname": "KEYUP",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the DOM \"keyup\" event."
        },
        "enabled": {
          "guessedname": "enabled",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean indicating the enabled/disabled state of the Tooltip"
        },
        "KEY": {
          "final": "",
          "guessedname": "KEY",
          "static": "",
          "guessedtype": "property",
          "description": "keycode constants for a subset of the special keys"
        }
      }
    },
    "YAHOO.widget.Record": {
      "shortname": "Record",
      "methods": {
        "getData": {
          "guessedname": "getData",
          "guessedtype": "function",
          "description": "Returns data for the Record for a field if given, or the entire object\nliteral otherwise.",
          "params": [
            {
              "name": "sField",
              "type": "String",
              "description": "  (Optional) The field from which to retrieve data value."
            }
          ],
          "return": {
            "type": "",
            "description": "Object"
          }
        },
        "setData": {
          "guessedname": "setData",
          "guessedtype": "function",
          "description": "Sets given data at the given key. Use the RecordSet method updateRecordValue to trigger\nevents.",
          "params": [
            {
              "name": "sKey",
              "type": "String",
              "description": "  The key of the new value."
            },
            {
              "name": "oData",
              "type": "MIXED",
              "description": "  The new value."
            }
          ]
        },
        "getCount": {
          "guessedname": "getCount",
          "guessedtype": "function",
          "description": "Returns unique count assigned at instantiation.",
          "return": {
            "type": "",
            "description": "Number"
          }
        },
        "getId": {
          "guessedname": "getId",
          "guessedtype": "function",
          "description": "Returns unique ID assigned at instantiation.",
          "return": {
            "type": "",
            "description": "String"
          }
        }
      },
      "name": "YAHOO.widget.Record",
      "guessedname": "Record",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The Record class defines a DataTable record.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (optional) Object literal of key/value pairs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The Record class defines a DataTable record.",
      "file": "RecordSet.js",
      "properties": {
        "_nCount": {
          "private": "",
          "guessedname": "_nCount",
          "type": "Number",
          "guessedtype": "property",
          "description": "Immutable unique count assigned at instantiation. Remains constant while a\nRecord's position index can change from sorting."
        },
        "_sId": {
          "private": "",
          "guessedname": "_sId",
          "type": "String",
          "guessedtype": "property",
          "description": "Immutable unique ID assigned at instantiation. Remains constant while a\nRecord's position index can change from sorting."
        },
        "_oData": {
          "private": "",
          "guessedname": "_oData",
          "type": "Object",
          "guessedtype": "property",
          "description": "Holds data for the Record in an object literal."
        },
        "Record._nCount": {
          "private": "",
          "guessedname": "_nCount",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class variable to give unique IDs to Record instances."
        }
      }
    },
    "YAHOO.widget.Paginator.ui.RowsPerPageDropdown": {
      "shortname": "RowsPerPageDropdown",
      "methods": {
        "_handleTotalRecordsChange": {
          "guessedname": "_handleTotalRecordsChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the all option value (and Paginator's rowsPerPage attribute if\nnecessary) in response to a change in the Paginator's totalRecords.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  attribute change event"
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the select node and clears event listeners"
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Generate the select and option nodes and returns the select node.",
          "params": [
            {
              "name": "id_base",
              "type": "string",
              "description": "  used to create unique ids for generated nodes"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "init": {
          "guessedname": "init",
          "static": "",
          "guessedtype": "function",
          "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.",
          "params": [
            {
              "name": "p",
              "type": "Paginator",
              "description": "  Paginator instance to decorate"
            }
          ]
        },
        "rebuild": {
          "guessedname": "rebuild",
          "guessedtype": "function",
          "description": "(Re)generate the select options."
        },
        "onChange": {
          "guessedname": "onChange",
          "guessedtype": "function",
          "description": "Listener for the select's onchange event.  Sent to setRowsPerPage method.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": "  The change event"
            }
          ]
        },
        "update": {
          "guessedname": "update",
          "guessedtype": "function",
          "description": "Select the appropriate option if changed.",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  The calling change event"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Paginator.ui.RowsPerPageDropdown",
      "guessedname": "RowsPerPageDropdown",
      "module": "paginator",
      "namespace": "YAHOO.widget.Paginator.ui",
      "events": {
        "rowsPerPageOptionsChange": {
          "name": "rowsPerPageOptionsChange",
          "description": "Fires when the value for the configuration attribute 'rowsPerPageOptions' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRowsPerPageOptionsChange": {
          "name": "beforeRowsPerPageOptionsChange",
          "description": "Fires before the value for the configuration attribute 'rowsPerPageOptions' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "rowsPerPageDropdownClassChange": {
          "name": "rowsPerPageDropdownClassChange",
          "description": "Fires when the value for the configuration attribute 'rowsPerPageDropdownClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRowsPerPageDropdownClassChange": {
          "name": "beforeRowsPerPageDropdownClassChange",
          "description": "Fires before the value for the configuration attribute 'rowsPerPageDropdownClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "ui Component to generate the rows-per-page dropdown",
          "params": [
            {
              "name": "p",
              "type": "Pagintor",
              "description": "  Paginator instance to attach to"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ui Component to generate the rows-per-page dropdown",
      "configs": {
        "rowsPerPageOptions": {
          "default": "[]",
          "description": "Array of available rows-per-page sizes.  Converted into select options.\nArray values may be positive integers or object literals in the form<br>\n{ value : NUMBER, text : STRING }"
        },
        "rowsPerPageDropdownClass": {
          "default": "'yui-pg-rpp-options'",
          "description": "CSS class assigned to the select node"
        }
      },
      "file": "RowsPerPageDropDown.js",
      "innerClasses": [
        "YAHOO.widget.Paginator"
      ],
      "for": "YAHOO.widget.Paginator",
      "properties": {
        "all": {
          "guessedname": "all",
          "type": "HTMLElement",
          "guessedtype": "property",
          "protected": "",
          "description": "option node for the optional All value"
        },
        "select": {
          "private": "",
          "guessedname": "select",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "select node"
        }
      }
    },
    "YAHOO.widget.TextNode": {
      "shortname": "TextNode",
      "superclass": "YAHOO.widget.Node",
      "methods": {
        "getEditorValue": {
          "guessedname": "getEditorValue",
          "guessedtype": "function",
          "description": "Returns the value from the input element.\nOverrides Node.getEditorValue.",
          "params": [
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ],
          "return": {
            "type": "string",
            "description": "value entered"
          }
        },
        "getNodeDefinition": {
          "guessedname": "getNodeDefinition",
          "guessedtype": "function",
          "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nIt will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not.",
          "return": {
            "type": "Object | false",
            "description": "definition of the tree or false if this node or any descendant is defined as dynamic"
          }
        },
        "setUpLabel": {
          "guessedname": "setUpLabel",
          "guessedtype": "function",
          "description": "Sets up the node label",
          "params": [
            {
              "name": "oData",
              "type": "",
              "description": " string containing the label, or an object with a label property"
            }
          ]
        },
        "getLabelEl": {
          "guessedname": "getLabelEl",
          "guessedtype": "function",
          "description": "Returns the label element",
          "return": {
            "type": "object",
            "description": "the element"
          }
        },
        "destroyEditorContents": {
          "guessedname": "destroyEditorContents",
          "guessedtype": "function",
          "description": "Destroys the contents of the inline editor panel.\nOverrides Node.destroyEditorContent.\nSince we didn't set any event listeners on this inline editor, it is more efficient to avoid the generic method in Node.",
          "params": [
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ]
        },
        "displayEditedValue": {
          "guessedname": "displayEditedValue",
          "guessedtype": "function",
          "description": "Finally displays the newly edited value in the tree.\nOverrides Node.displayEditedValue.",
          "params": [
            {
              "name": "value",
              "type": "string",
              "description": "  value to be displayed and stored in the node"
            },
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ]
        },
        "fillEditorContainer": {
          "guessedname": "fillEditorContainer",
          "guessedtype": "function",
          "description": "Places an &lt;input&gt;  textbox in the input container and loads the label text into it.",
          "params": [
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        }
      },
      "name": "YAHOO.widget.TextNode",
      "extends": "YAHOO.widget.Node",
      "guessedname": "TextNode",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The default node presentation.  The first parameter should be\neither a string that will be used as the node's label, or an object\nthat has at least a string property called label.  By default,  clicking the\nlabel will toggle the expanded/collapsed state of the node.  By\nsetting the href property of the instance, this behavior can be\nchanged so that the label will go to the specified href.",
          "params": [
            {
              "name": "oData",
              "type": "object",
              "description": "  a string or object containing the data that will\nbe used to render this node.\nProviding a string is the same as providing an object with a single property named label.\nAll values in the oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private or functions.\nAll attributes are made available in noderef.data, which\ncan be used to store custom attributes.  TreeView.getNode(s)ByProperty\ncan be used to retrieve a node by one of the attributes."
            },
            {
              "name": "oParent",
              "type": "YAHOO.widget.Node",
              "description": "  this node's parent node"
            },
            {
              "name": "expanded",
              "type": "boolean",
              "description": "  the initial expanded/collapsed state (deprecated; use oData.expanded)"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The default node presentation.  The first parameter should be\neither a string that will be used as the node's label, or an object\nthat has at least a string property called label.  By default,  clicking the\nlabel will toggle the expanded/collapsed state of the node.  By\nsetting the href property of the instance, this behavior can be\nchanged so that the label will go to the specified href.",
      "file": "TextNode.js",
      "properties": {
        "href": {
          "guessedname": "href",
          "type": "string",
          "guessedtype": "property",
          "description": "The href for the node's label.  If one is not specified, the href will\nbe set so that it toggles the node."
        },
        "label": {
          "guessedname": "label",
          "type": "string",
          "guessedtype": "property",
          "description": "The text for the label.  It is assumed that the oData parameter will\neither be a string that will be used as the label, or an object that\nhas a property called \"label\" that we will use."
        },
        "title": {
          "guessedname": "title",
          "type": "string",
          "guessedtype": "property",
          "description": "The text for the title (tooltip) for the label element"
        },
        "labelElId": {
          "guessedname": "labelElId",
          "type": "string",
          "guessedtype": "property",
          "description": "The derived element id of the label for this node"
        },
        "_type": {
          "guessedname": "_type",
          "private": "",
          "default": "\"TextNode\"",
          "type": "string",
          "guessedtype": "property",
          "description": "The node type"
        },
        "target": {
          "guessedname": "target",
          "type": "string",
          "guessedtype": "property",
          "description": "The label href target, defaults to current window"
        },
        "labelStyle": {
          "guessedname": "labelStyle",
          "type": "string",
          "guessedtype": "property",
          "description": "The CSS class for the label href.  Defaults to ygtvlabel, but can be\noverridden to provide a custom presentation for a specific node."
        }
      }
    },
    "YAHOO.widget.RecordSet": {
      "shortname": "RecordSet",
      "methods": {
        "updateKey": {
          "guessedname": "updateKey",
          "guessedtype": "function",
          "deprecated": "Use updateRecordValue"
        },
        "getRecordIndex": {
          "guessedname": "getRecordIndex",
          "guessedtype": "function",
          "description": "Returns current position index for the given Record.",
          "params": [
            {
              "name": "oRecord",
              "type": "YAHOO.widget.Record",
              "description": "  Record instance."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Record's RecordSet position index."
          }
        },
        "reverseRecords": {
          "guessedname": "reverseRecords",
          "guessedtype": "function",
          "description": "Reverses all Records, so [\"one\", \"two\", \"three\"] becomes [\"three\", \"two\", \"one\"].",
          "return": {
            "type": "YAHOO.widget.Record[]",
            "description": "Reverse-sorted array of Records."
          }
        },
        "deleteRecords": {
          "guessedname": "deleteRecords",
          "guessedtype": "function",
          "description": "Removes the Record at the given position index from the RecordSet. If a range\nis also provided, removes that many Records, starting from the index. Length\nof RecordSet is correspondingly shortened.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  Record's RecordSet position index."
            },
            {
              "name": "range",
              "type": "Number",
              "description": "  (optional) How many Records to delete."
            }
          ],
          "return": {
            "type": "Object[]",
            "description": "An array of copies of the data held by the deleted Records."
          }
        },
        "getRecords": {
          "guessedname": "getRecords",
          "guessedtype": "function",
          "description": "Returns an array of Records from the RecordSet.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) Recordset position index of which Record to\nstart at."
            },
            {
              "name": "range",
              "type": "Number",
              "description": "  (optional) Number of Records to get."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record[]",
            "description": "Array of Records starting at given index and\nlength equal to given range. If index is not given, all Records are returned."
          }
        },
        "addRecords": {
          "guessedname": "addRecords",
          "guessedtype": "function",
          "description": "Adds multiple Records at once to the RecordSet at the given index with the\ngiven object literal data. If index is null, then the new Records are\nadded to the end of the RecordSet.",
          "params": [
            {
              "name": "aData",
              "type": "Object[]",
              "description": "  An object literal data or an array of data object literals."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) Position index."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record[]",
            "description": "An array of Record instances."
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the RecordSet instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the RecordSet instance."
          }
        },
        "setRecords": {
          "guessedname": "setRecords",
          "guessedtype": "function",
          "description": "Sets or replaces multiple Records at once to the RecordSet with the given\ndata, starting at the given index. If index is not specified, then the new\nRecords are added to the end of the RecordSet.",
          "params": [
            {
              "name": "aData",
              "type": "Object[]",
              "description": "  An array of object literal data."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) Position index."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record[]",
            "description": "An array of Record instances."
          }
        },
        "_deleteRecord": {
          "private": "",
          "guessedname": "_deleteRecord",
          "guessedtype": "function",
          "description": "Deletes Records from the RecordSet at the given index. If range is null,\nthen only one Record is deleted.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  Position index."
            },
            {
              "name": "range",
              "type": "Number",
              "description": "  (optional) How many Records to delete"
            }
          ]
        },
        "updateRecordValue": {
          "guessedname": "updateRecordValue",
          "guessedtype": "function",
          "description": "Sets given Record at given key to given data.",
          "params": [
            {
              "name": "record",
              "type": "YAHOO.widget.Record | Number | String",
              "description": "  A Record instance,\na RecordSet position index, or a Record ID."
            },
            {
              "name": "sKey",
              "type": "String",
              "description": "  Key name."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  New data."
            }
          ]
        },
        "deleteRecord": {
          "guessedname": "deleteRecord",
          "guessedtype": "function",
          "description": "Removes the Record at the given position index from the RecordSet. If a range\nis also provided, removes that many Records, starting from the index. Length\nof RecordSet is correspondingly shortened.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  Record's RecordSet position index."
            },
            {
              "name": "range",
              "type": "Number",
              "description": "  (optional) How many Records to delete."
            }
          ],
          "return": {
            "type": "Object",
            "description": "A copy of the data held by the deleted Record."
          }
        },
        "updateRecord": {
          "guessedname": "updateRecord",
          "guessedtype": "function",
          "description": "Updates given Record with given data.",
          "params": [
            {
              "name": "record",
              "type": "YAHOO.widget.Record | Number | String",
              "description": "  A Record instance,\na RecordSet position index, or a Record ID."
            },
            {
              "name": "oData",
              "type": "Object",
              "description": "  Object literal of new data."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record",
            "description": "Updated Record, or null."
          }
        },
        "replaceRecords": {
          "guessedname": "replaceRecords",
          "guessedtype": "function",
          "description": "Replaces all Records in RecordSet with new object literal data.",
          "params": [
            {
              "name": "data",
              "type": "Object || Object[]",
              "description": "  An object literal of data or an array of\ndata object literals."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record || YAHOO.widget.Record[]",
            "description": "A Record instance or\nan array of Records."
          }
        },
        "sortRecords": {
          "guessedname": "sortRecords",
          "guessedtype": "function",
          "description": "Sorts all Records by given function. Records keep their unique IDs but will\nhave new RecordSet position indexes.",
          "params": [
            {
              "name": "fnSort",
              "type": "Function",
              "description": "  Reference to a sort function."
            },
            {
              "name": "desc",
              "type": "Boolean",
              "description": "  True if sort direction is descending, false if sort\ndirection is ascending."
            },
            {
              "name": "field",
              "type": "String",
              "description": "  The field to sort by, from sortOptions.field"
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record[]",
            "description": "Sorted array of Records."
          }
        },
        "reset": {
          "guessedname": "reset",
          "guessedtype": "function",
          "description": "Deletes all Records from the RecordSet."
        },
        "getRecord": {
          "guessedname": "getRecord",
          "guessedtype": "function",
          "description": "Returns Record by ID or RecordSet position index.",
          "params": [
            {
              "name": "record",
              "type": "YAHOO.widget.Record | Number | String",
              "description": "  Record instance,\nRecordSet position index, or Record ID."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record",
            "description": "Record object."
          }
        },
        "_setRecord": {
          "guessedname": "_setRecord",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oData",
              "type": "Object",
              "description": "  An object literal of data."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) Position index."
            }
          ],
          "description": "Sets/replaces one Record to the RecordSet at the given index.  Existing\nRecords with higher indexes are not shifted.  If no index specified, the\nRecord is added to the end of the RecordSet.",
          "return": {
            "type": "YAHOO.widget.Record",
            "description": "A Record instance."
          }
        },
        "addRecord": {
          "guessedname": "addRecord",
          "guessedtype": "function",
          "description": "Adds one Record to the RecordSet at the given index. If index is null,\nthen adds the Record to the end of the RecordSet.",
          "params": [
            {
              "name": "oData",
              "type": "Object",
              "description": "  An object literal of data."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) Position index."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record",
            "description": "A Record instance."
          }
        },
        "_addRecord": {
          "guessedname": "_addRecord",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oData",
              "type": "Object",
              "description": "  An object literal of data."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) Position index."
            }
          ],
          "description": "Adds one Record to the RecordSet at the given index. If index is null,\nthen adds the Record to the end of the RecordSet.",
          "return": {
            "type": "YAHOO.widget.Record",
            "description": "A Record instance."
          }
        },
        "setRecord": {
          "guessedname": "setRecord",
          "guessedtype": "function",
          "description": "Sets or replaces one Record to the RecordSet at the given index. Unlike\naddRecord, an existing Record at that index is not shifted to preserve it.\nIf no index is specified, it adds the Record to the end of the RecordSet.",
          "params": [
            {
              "name": "oData",
              "type": "Object",
              "description": "  An object literal of data."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) Position index."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Record",
            "description": "A Record instance."
          }
        },
        "getId": {
          "guessedname": "getId",
          "guessedtype": "function",
          "description": "Returns unique name of the RecordSet instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the RecordSet instance."
          }
        },
        "getLength": {
          "guessedname": "getLength",
          "guessedtype": "function",
          "description": "Returns the number of Records held in the RecordSet.",
          "return": {
            "type": "Number",
            "description": "Number of records in the RecordSet."
          }
        },
        "hasRecords": {
          "guessedname": "hasRecords",
          "guessedtype": "function",
          "description": "Returns a boolean indicating whether Records exist in the RecordSet at the\nspecified index range.  Returns true if and only if a Record exists at each\nindex in the range.",
          "params": [
            {
              "name": "index",
              "type": "",
              "description": ""
            },
            {
              "name": "range",
              "type": "",
              "description": ""
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true if all indices are populated in the RecordSet"
          }
        }
      },
      "name": "YAHOO.widget.RecordSet",
      "guessedname": "RecordSet",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "events": {
        "resetEvent": {
          "description": "Fired when all Records are deleted from the RecordSet at once."
        },
        "recordAddEvent": {
          "description": "Fired when a new Record is added to the RecordSet.",
          "params": [
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The Record instance."
            },
            {
              "name": "oArgs.data",
              "type": "Object",
              "description": "  Data added."
            }
          ]
        },
        "recordsSetEvent": {
          "description": "Fired when multiple Records are set in the RecordSet at once.",
          "params": [
            {
              "name": "oArgs.records",
              "type": "YAHOO.widget.Record[]",
              "description": "  An array of Record instances."
            },
            {
              "name": "oArgs.data",
              "type": "Object[]",
              "description": "  Data added."
            }
          ]
        },
        "recordUpdateEvent": {
          "description": "Fired when a Record is updated with new data.",
          "params": [
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The Record instance."
            },
            {
              "name": "oArgs.newData",
              "type": "Object",
              "description": "  New data."
            },
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Old data."
            }
          ]
        },
        "recordsDeleteEvent": {
          "description": "Fired when multiple Records are deleted from the RecordSet at once.",
          "params": [
            {
              "name": "oArgs.data",
              "type": "Object[]",
              "description": "  An array of data object literals copied\nfrom the Records."
            },
            {
              "name": "oArgs.index",
              "type": "Object",
              "description": "  Index of the first deleted Record."
            }
          ]
        },
        "recordsAddEvent": {
          "description": "Fired when multiple Records are added to the RecordSet at once.",
          "params": [
            {
              "name": "oArgs.records",
              "type": "YAHOO.widget.Record[]",
              "description": "  An array of Record instances."
            },
            {
              "name": "oArgs.data",
              "type": "Object[]",
              "description": "  Data added."
            }
          ]
        },
        "recordValueUpdateEvent": {
          "description": "Fired when a Record value is updated with new data.",
          "params": [
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The Record instance."
            },
            {
              "name": "oArgs.key",
              "type": "String",
              "description": "  The updated key."
            },
            {
              "name": "oArgs.newData",
              "type": "Object",
              "description": "  New data."
            },
            {
              "name": "oArgs.oldData",
              "type": "Object",
              "description": "  Old data."
            }
          ]
        },
        "keyUpdateEvent": {
          "deprecated": "Use recordValueUpdateEvent"
        },
        "recordSetEvent": {
          "description": "Fired when a Record is set in the RecordSet.",
          "params": [
            {
              "name": "oArgs.record",
              "type": "YAHOO.widget.Record",
              "description": "  The Record instance."
            },
            {
              "name": "oArgs.data",
              "type": "Object",
              "description": "  Data added."
            }
          ]
        },
        "recordDeleteEvent": {
          "description": "Fired when a Record is deleted from the RecordSet.",
          "params": [
            {
              "name": "oArgs.data",
              "type": "Object",
              "description": "  A copy of the data held by the Record,\nor an array of data object literals if multiple Records were deleted at once."
            },
            {
              "name": "oArgs.index",
              "type": "Object",
              "description": "  Index of the deleted Record."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "A RecordSet defines and manages a set of Records.",
          "params": [
            {
              "name": "data",
              "type": "Object || Object[]",
              "description": "  An object literal or an array of data."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A RecordSet defines and manages a set of Records.",
      "file": "RecordSet.js",
      "properties": {
        "_sId": {
          "private": "",
          "guessedname": "_sId",
          "type": "String",
          "guessedtype": "property",
          "description": "Unique String identifier assigned at instantiation."
        },
        "RecordSet._nCount": {
          "guessedname": "_nCount",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class variable to name multiple Recordset instances."
        },
        "_length": {
          "private": "",
          "type": "Number",
          "description": "Internal counter of how many Records are in the RecordSet.",
          "deprecated": "No longer used"
        }
      }
    },
    "YAHOO.util.ScriptNodeDataSource": {
      "shortname": "ScriptNodeDataSource",
      "superclass": "YAHOO.util.DataSourceBase",
      "methods": {
        "generateRequestCallback": {
          "guessedname": "generateRequestCallback",
          "guessedtype": "function",
          "description": "Creates a request callback that gets appended to the script URI. Implementers\ncan customize this string to match their server's query syntax.",
          "return": {
            "type": "String",
            "description": "String fragment that gets appended to script URI that \nspecifies the callback function"
          }
        },
        "makeConnection": {
          "guessedname": "makeConnection",
          "guessedtype": "function",
          "description": "Overriding method passes query to Get Utility. The returned\nresponse is then forwarded to the handleResponse function.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  Callback object literal."
            },
            {
              "name": "oCaller",
              "type": "Object",
              "description": "  (deprecated) Use oCallback.scope."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Transaction ID."
          }
        },
        "doBeforeGetScriptNode": {
          "guessedname": "doBeforeGetScriptNode",
          "guessedtype": "function",
          "description": "Overridable method gives implementers access to modify the URI before the dynamic\nscript node gets inserted. Implementers should take care not to return an\ninvalid URI.",
          "params": [
            {
              "name": "URI",
              "type": "String",
              "description": " to the script"
            }
          ],
          "return": {
            "type": "String",
            "description": "URI to the script"
          }
        }
      },
      "name": "YAHOO.util.ScriptNodeDataSource",
      "extends": "YAHOO.util.DataSourceBase",
      "guessedname": "ScriptNodeDataSource",
      "module": "datasource",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "ScriptNodeDataSource class for accessing remote data via the YUI Get Utility.",
          "params": [
            {
              "name": "oLiveData",
              "type": "HTMLElement",
              "description": "   Pointer to live data."
            },
            {
              "name": "oConfigs",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ScriptNodeDataSource class for accessing remote data via the YUI Get Utility.",
      "file": "DataSource.js",
      "properties": {
        "asyncMode": {
          "guessedname": "asyncMode",
          "default": "\"allowAll\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Defines request/response management in the following manner:\n<dl>\n<!--<dt>queueRequests</dt>\n<dd>If a request is already in progress, wait until response is returned before sending the next request.</dd>\n<dt>cancelStaleRequests</dt>\n<dd>If a request is already in progress, cancel it before sending the next request.</dd>-->\n<dt>ignoreStaleResponses</dt>\n<dd>Send all requests, but handle only the response for the most recently sent request.</dd>\n<dt>allowAll</dt>\n<dd>Send all requests and handle all responses.</dd>\n</dl>"
        },
        "_nId": {
          "guessedname": "_nId",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Unique ID to track requests."
        },
        "getUtility": {
          "guessedname": "getUtility",
          "default": "YAHOO.util.Get",
          "type": "Object",
          "guessedtype": "property",
          "description": "Alias to YUI Get Utility, to allow implementers to use a custom class."
        },
        "callbacks": {
          "guessedname": "callbacks",
          "static": "",
          "type": "Function[]",
          "guessedtype": "property",
          "description": "Global array of callback functions, one for each request sent."
        },
        "scriptCallbackParam": {
          "guessedname": "scriptCallbackParam",
          "default": "\"callback\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Callback string parameter name sent to the remote script. By default,\nrequests are sent to\n&#60;URI&#62;?&#60;scriptCallbackParam&#62;=callback"
        },
        "_nPending": {
          "guessedname": "_nPending",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Counter for pending requests. When this is 0, it is safe to purge callbacks\narray."
        }
      }
    },
    "YAHOO.widget.Paginator.ui.NextPageLink": {
      "shortname": "NextPageLink",
      "methods": {
        "onClick": {
          "guessedname": "onClick",
          "guessedtype": "function",
          "description": "Listener for the link's onclick event.  Passes to setPage method.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": "  The click event"
            }
          ]
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Generate the nodes and return the appropriate node given the current\npagination state.",
          "params": [
            {
              "name": "id_base",
              "type": "string",
              "description": "  used to create unique ids for generated nodes"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the link/span node and clears event listeners"
        },
        "init": {
          "guessedname": "init",
          "static": "",
          "guessedtype": "function",
          "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.",
          "params": [
            {
              "name": "p",
              "type": "Paginator",
              "description": "  Paginator instance to decorate"
            }
          ]
        },
        "update": {
          "guessedname": "update",
          "guessedtype": "function",
          "description": "Swap the link and span nodes if appropriate.",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  The calling change event"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Paginator.ui.NextPageLink",
      "guessedname": "NextPageLink",
      "module": "paginator",
      "namespace": "YAHOO.widget.Paginator.ui",
      "events": {
        "beforeNextPageLinkLabelChange": {
          "name": "beforeNextPageLinkLabelChange",
          "description": "Fires before the value for the configuration attribute 'nextPageLinkLabel' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeNextPageLinkClassChange": {
          "name": "beforeNextPageLinkClassChange",
          "description": "Fires before the value for the configuration attribute 'nextPageLinkClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "nextPageLinkClassChange": {
          "name": "nextPageLinkClassChange",
          "description": "Fires when the value for the configuration attribute 'nextPageLinkClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "nextPageLinkLabelChange": {
          "name": "nextPageLinkLabelChange",
          "description": "Fires when the value for the configuration attribute 'nextPageLinkLabel' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "ui Component to generate the link to jump to the next page.",
          "params": [
            {
              "name": "p",
              "type": "Pagintor",
              "description": "  Paginator instance to attach to"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ui Component to generate the link to jump to the next page.",
      "configs": {
        "nextPageLinkLabel": {
          "default": "'next &gt;'",
          "description": "Used as innerHTML for the next page link/span."
        },
        "nextPageLinkClass": {
          "default": "'yui-pg-next'",
          "description": "CSS class assigned to the link/span"
        }
      },
      "file": "NextPageLink.js",
      "innerClasses": [
        "YAHOO.widget.Paginator"
      ],
      "for": "YAHOO.widget.Paginator",
      "properties": {
        "current": {
          "private": "",
          "guessedname": "current",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Currently placed HTMLElement node"
        },
        "link": {
          "private": "",
          "guessedname": "link",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Link node"
        },
        "span": {
          "private": "",
          "guessedname": "span",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Span node (inactive link)"
        }
      }
    },
    "YAHOO.util.XHRDataSource": {
      "shortname": "XHRDataSource",
      "superclass": "YAHOO.util.DataSourceBase",
      "methods": {
        "_xhrSuccess": {
          "private": "",
          "guessedname": "_xhrSuccess",
          "guessedtype": "function",
          "description": "Define Connection Manager success handler",
          "params": [
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  HTTPXMLRequest object"
            }
          ]
        },
        "makeConnection": {
          "guessedname": "makeConnection",
          "guessedtype": "function",
          "description": "Overriding method passes query to Connection Manager. The returned\nresponse is then forwarded to the handleResponse function.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  Callback object literal."
            },
            {
              "name": "oCaller",
              "type": "Object",
              "description": "  (deprecated) Use oCallback.scope."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Transaction ID."
          }
        },
        "_xhrFailure": {
          "private": "",
          "guessedname": "_xhrFailure",
          "guessedtype": "function",
          "description": "Define Connection Manager failure handler",
          "params": [
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  HTTPXMLRequest object"
            }
          ]
        }
      },
      "name": "YAHOO.util.XHRDataSource",
      "extends": "YAHOO.util.DataSourceBase",
      "guessedname": "XHRDataSource",
      "module": "datasource",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "XHRDataSource class for accessing remote data via the YUI Connection Manager\nUtility",
          "params": [
            {
              "name": "oLiveData",
              "type": "HTMLElement",
              "description": "   Pointer to live data."
            },
            {
              "name": "oConfigs",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "XHRDataSource class for accessing remote data via the YUI Connection Manager\nUtility",
      "file": "DataSource.js",
      "properties": {
        "_xhrCallback": {
          "private": "",
          "guessedname": "_xhrCallback",
          "param": "oResponse {Object} HTTPXMLRequest object",
          "guessedtype": "property",
          "description": "Define Connection Manager callback object"
        },
        "connMethodPost": {
          "guessedname": "connMethodPost",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if data is to be sent via POST. By default, data will be sent via GET."
        },
        "connMgr": {
          "guessedname": "connMgr",
          "default": "YAHOO.util.Connect",
          "type": "Object",
          "guessedtype": "property",
          "description": "Alias to YUI Connection Manager, to allow implementers to use a custom class."
        },
        "connXhrMode": {
          "guessedname": "connXhrMode",
          "default": "\"allowAll\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Defines request/response management in the following manner:\n<dl>\n<dt>queueRequests</dt>\n<dd>If a request is already in progress, wait until response is returned\nbefore sending the next request.</dd>\n<dt>cancelStaleRequests</dt>\n<dd>If a request is already in progress, cancel it before sending the next\nrequest.</dd>\n<dt>ignoreStaleResponses</dt>\n<dd>Send all requests, but handle only the response for the most recently\nsent request.</dd>\n<dt>allowAll</dt>\n<dd>Send all requests and handle all responses.</dd>\n</dl>"
        },
        "connTimeout": {
          "guessedname": "connTimeout",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "The connection timeout defines how many  milliseconds the XHR connection will\nwait for a server response. Any non-zero value will enable the Connection Manager's\nAuto-Abort feature."
        }
      }
    },
    "YAHOO.util.Bezier": {
      "shortname": "Bezier",
      "methods": {
        "getPosition": {
          "guessedname": "getPosition",
          "guessedtype": "function",
          "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.",
          "params": [
            {
              "name": "points",
              "type": "Array",
              "description": " An array containing Bezier points"
            },
            {
              "name": "t",
              "type": "Number",
              "description": " A number between 0 and 1 which is the basis for determining current position"
            }
          ],
          "return": {
            "type": "Array",
            "description": "An array containing int x and y member data"
          }
        }
      },
      "name": "YAHOO.util.Bezier",
      "guessedname": "Bezier",
      "module": "animation",
      "namespace": "YAHOO.util",
      "guessedtype": "function",
      "description": "Used to calculate Bezier splines for any number of control points.",
      "file": "Bezier.js"
    },
    "YAHOO.util.Subscriber": {
      "shortname": "Subscriber",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function"
        },
        "contains": {
          "guessedname": "contains",
          "guessedtype": "function",
          "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": " the function to execute"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " an object to be passed along when the event fires"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if the supplied arguments match this \nsubscriber's signature."
          }
        },
        "getScope": {
          "guessedname": "getScope",
          "guessedtype": "function",
          "description": "Returns the execution context for this listener.  If overrideContext was set to true\nthe custom obj will be the context.  If overrideContext is an object, that is the\ncontext, otherwise the default context will be used.",
          "params": [
            {
              "name": "defaultScope",
              "type": "Object",
              "description": " the context to use if this listener does not\noverride it."
            }
          ]
        }
      },
      "name": "YAHOO.util.Subscriber",
      "guessedname": "Subscriber",
      "module": "event",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "Stores the subscriber information to be used when the event fires.",
          "params": [
            {
              "name": "fn",
              "type": "Function",
              "description": "       The function to execute"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": "      An object to be passed along when the event fires"
            },
            {
              "name": "overrideContext",
              "type": "boolean",
              "description": " If true, the obj passed in becomes the execution\ncontext of the listener"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Stores the subscriber information to be used when the event fires.",
      "file": "CustomEvent.js",
      "properties": {
        "obj": {
          "guessedname": "obj",
          "type": "object",
          "guessedtype": "property",
          "description": "An optional custom object that will passed to the callback when\nthe event fires"
        },
        "overrideContext": {
          "guessedname": "overrideContext",
          "type": "boolean|object",
          "guessedtype": "property",
          "description": "The default execution context for the event listener is defined when the\nevent is created (usually the object which contains the event).\nBy setting overrideContext to true, the execution context becomes the custom\nobject passed in by the subscriber.  If overrideContext is an object, that \nobject becomes the context."
        },
        "fn": {
          "guessedname": "fn",
          "type": "function",
          "guessedtype": "property",
          "description": "The callback that will be execute when the event fires"
        }
      }
    },
    "YAHOO.util.Motion": {
      "shortname": "Motion",
      "superclass": "YAHOO.util.ColorAnim",
      "name": "YAHOO.util.Motion",
      "extends": "YAHOO.util.ColorAnim",
      "guessedname": "Motion",
      "module": "animation",
      "namespace": "YAHOO.util",
      "requires": "YAHOO.util.Anim",
      "constructors": [
        {
          "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement",
              "description": " Reference to the element that will be animated"
            },
            {
              "name": "attributes",
              "type": "Object",
              "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."
            },
            {
              "name": "duration",
              "type": "Number",
              "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>",
      "file": "Motion.js"
    },
    "YAHOO.util.DD": {
      "shortname": "DD",
      "superclass": "YAHOO.util.DragDrop",
      "methods": {
        "setDelta": {
          "guessedname": "setDelta",
          "guessedtype": "function",
          "description": "Sets the pointer offset.  You can call this directly to force the \noffset to be in a particular location (e.g., pass in 0,0 to set it \nto the center of the object, as done in YAHOO.widget.Slider)",
          "params": [
            {
              "name": "iDeltaX",
              "type": "int",
              "description": " the distance from the left"
            },
            {
              "name": "iDeltaY",
              "type": "int",
              "description": " the distance from the top"
            }
          ]
        },
        "autoOffset": {
          "guessedname": "autoOffset",
          "guessedtype": "function",
          "description": "Sets the pointer offset to the distance between the linked element's top \nleft corner and the location the element was clicked",
          "params": [
            {
              "name": "iPageX",
              "type": "int",
              "description": " the X coordinate of the click"
            },
            {
              "name": "iPageY",
              "type": "int",
              "description": " the Y coordinate of the click"
            }
          ]
        },
        "setDragElPos": {
          "guessedname": "setDragElPos",
          "guessedtype": "function",
          "description": "Sets the drag element to the location of the mousedown or click event, \nmaintaining the cursor location relative to the location on the element \nthat was clicked.  Override this if you want to place the element in a \nlocation other than where the cursor is.",
          "params": [
            {
              "name": "iPageX",
              "type": "int",
              "description": " the X coordinate of the mousedown or drag event"
            },
            {
              "name": "iPageY",
              "type": "int",
              "description": " the Y coordinate of the mousedown or drag event"
            }
          ]
        },
        "cachePosition": {
          "guessedname": "cachePosition",
          "guessedtype": "function",
          "description": "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.",
          "params": [
            {
              "name": "iPageX",
              "type": "",
              "description": " the current x position (optional, this just makes it so we\ndon't have to look it up again)"
            },
            {
              "name": "iPageY",
              "type": "",
              "description": " the current y position (optional, this just makes it so we\ndon't have to look it up again)"
            }
          ]
        },
        "autoScroll": {
          "private": "",
          "guessedname": "autoScroll",
          "guessedtype": "function",
          "description": "Auto-scroll the window if the dragged object has been moved beyond the \nvisible window boundary.",
          "params": [
            {
              "name": "x",
              "type": "int",
              "description": " the drag element's x position"
            },
            {
              "name": "y",
              "type": "int",
              "description": " the drag element's y position"
            },
            {
              "name": "h",
              "type": "int",
              "description": " the height of the drag element"
            },
            {
              "name": "w",
              "type": "int",
              "description": " the width of the drag element"
            }
          ]
        },
        "alignElWithMouse": {
          "guessedname": "alignElWithMouse",
          "guessedtype": "function",
          "description": "Sets the element to the location of the mousedown or click event, \nmaintaining the cursor location relative to the location on the element \nthat was clicked.  Override this if you want to place the element in a \nlocation other than where the cursor is.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " the element to move"
            },
            {
              "name": "iPageX",
              "type": "int",
              "description": " the X coordinate of the mousedown or drag event"
            },
            {
              "name": "iPageY",
              "type": "int",
              "description": " the Y coordinate of the mousedown or drag event"
            }
          ]
        }
      },
      "name": "YAHOO.util.DD",
      "extends": "YAHOO.util.DragDrop",
      "guessedname": "DD",
      "module": "dragdrop",
      "namespace": "YAHOO.util",
      "events": {
        "b4DragOverEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragOverEvent."
        },
        "endDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires on the mouseup event after a drag has been initiated (startDrag fired)."
        },
        "b4DragOutEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragOutEvent"
        },
        "b4StartDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the startDragEvent, returning false will cancel the startDrag Event."
        },
        "b4EndDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the endDragEvent. Returning false will cancel."
        },
        "dragOutEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires when a dragged object is no longer over an object that had the onDragEnter fire."
        },
        "dragDropEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires when the dragged objects is dropped on another."
        },
        "dragEnterEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Occurs when the dragged object first interacts with another targettable drag and drop object."
        },
        "mouseUpEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fired from inside DragDropMgr when the drag operation is finished."
        },
        "dragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Occurs every mousemove event while dragging."
        },
        "b4MouseDownEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Provides access to the mousedown event, before the mouseDownEvent gets fired. Returning false will cancel the drag."
        },
        "startDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Occurs after a mouse down and the drag threshold has been met. The drag threshold default is either 3 pixels of mouse movement or 1 full second of holding the mousedown."
        },
        "invalidDropEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires when the dragged objects is dropped in a location that contains no drop targets."
        },
        "b4DragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragEvent."
        },
        "b4DragDropEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragDropEvent"
        },
        "dragOverEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires every mousemove event while over a drag and drop object."
        },
        "mouseDownEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Provides access to the mousedown event. The mousedown does not always result in a drag operation."
        }
      },
      "constructors": [
        {
          "description": "A DragDrop implementation where the linked element follows the \nmouse cursor during a drag.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id of the linked element"
            },
            {
              "name": "sGroup",
              "type": "String",
              "description": " the group of related DragDrop items"
            },
            {
              "name": "config",
              "type": "object",
              "description": " an object containing configurable attributes\nValid properties for DD: \nscroll"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A DragDrop implementation where the linked element follows the \nmouse cursor during a drag.",
      "file": "DD.js",
      "properties": {
        "scroll": {
          "guessedname": "scroll",
          "type": "boolean",
          "guessedtype": "property",
          "description": "When set to true, the utility automatically tries to scroll the browser\nwindow when a drag and drop element is dragged near the viewport boundary.\nDefaults to true."
        }
      }
    },
    "YAHOO.widget.Paginator": {
      "shortname": "Paginator",
      "methods": {
        "initConfig": {
          "guessedname": "initConfig",
          "private": "",
          "guessedtype": "function",
          "description": "Initialize the Paginator's attributes (see YAHOO.util.Element class\nAttributeProvider)."
        },
        "hasPage": {
          "guessedname": "hasPage",
          "guessedtype": "function",
          "description": "Does the requested page have any records?",
          "params": [
            {
              "name": "page",
              "type": "number",
              "description": "  the page in question"
            }
          ],
          "return": {
            "type": "boolean",
            "description": ""
          }
        },
        "setTotalRecords": {
          "guessedname": "setTotalRecords",
          "guessedtype": "function",
          "description": "Set the total number of records.",
          "params": [
            {
              "name": "total",
              "type": "number",
              "description": "  the new total number of records"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": "  whether to forcibly avoid firing the changeRequest event"
            }
          ]
        },
        "_firePageChange": {
          "guessedname": "_firePageChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Fires a pageChange event in the form of a standard attribute change\nevent with additional properties prevState and newState.",
          "params": [
            {
              "name": "state",
              "type": "Object",
              "description": "  the result of getState(oldState)"
            }
          ]
        },
        "_selfSubscribe": {
          "guessedname": "_selfSubscribe",
          "guessedtype": "function",
          "protected": "",
          "description": "Subscribes to instance attribute change events to automate certain\nbehaviors."
        },
        "getTotalPages": {
          "guessedname": "getTotalPages",
          "guessedtype": "function",
          "description": "Get the total number of pages in the data set according to the current\nrowsPerPage and totalRecords values.  If totalRecords is not set, or\nset to YAHOO.widget.Paginator.VALUE_UNLIMITED, returns\nYAHOO.widget.Paginator.VALUE_UNLIMITED.",
          "return": {
            "type": "number",
            "description": ""
          }
        },
        "getTotalRecords": {
          "guessedname": "getTotalRecords",
          "guessedtype": "function",
          "description": "Get the total number of records.",
          "return": {
            "type": "number",
            "description": "the current setting of totalRecords attribute"
          }
        },
        "Paginator.toNumber": {
          "guessedname": "toNumber",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "n",
              "type": "Number|String",
              "description": "  a number or numeric string"
            }
          ],
          "description": "Return a number or null from input",
          "return": {
            "type": "",
            "description": "Number"
          }
        },
        "hasPreviousPage": {
          "guessedname": "hasPreviousPage",
          "guessedtype": "function",
          "description": "Is there a page before the current page?",
          "return": {
            "type": "boolean",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes controls from the page and unhooks events."
        },
        "setState": {
          "guessedname": "setState",
          "guessedtype": "function",
          "description": "Convenience method to facilitate setting state attributes rowsPerPage,\ntotalRecords, recordOffset in batch.  Also supports calculating\nrecordOffset from state.page if state.recordOffset is not provided.\nFires only a single pageChange event, if appropriate.\nThis will not fire a changeRequest event.",
          "params": [
            {
              "name": "state",
              "type": "Object",
              "description": "  Object literal of attribute:value pairs to set"
            }
          ]
        },
        "render": {
          "guessedname": "render",
          "chainable": "",
          "guessedtype": "function",
          "description": "Render the pagination controls per the format attribute into the\nspecified container nodes.",
          "return": {
            "type": "",
            "description": "the Paginator instance"
          }
        },
        "updateVisibility": {
          "guessedname": "updateVisibility",
          "guessedtype": "function",
          "description": "Hides the containers if there is only one page of data and attribute\nalwaysVisible is false.  Conversely, it displays the containers if either\nthere is more than one page worth of data or alwaysVisible is turned on."
        },
        "getRowsPerPage": {
          "guessedname": "getRowsPerPage",
          "guessedtype": "function",
          "description": "Get the number of rows per page.",
          "return": {
            "type": "number",
            "description": "the current setting of the rowsPerPage attribute"
          }
        },
        "getNextPage": {
          "guessedname": "getNextPage",
          "guessedtype": "function",
          "description": "Get the page number of the next page, or null if the current page is the\nlast page.",
          "return": {
            "type": "number",
            "description": ""
          }
        },
        "_renderTemplate": {
          "guessedname": "_renderTemplate",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates the individual ui components and renders them into a container.",
          "params": [
            {
              "name": "container",
              "type": "HTMLElement",
              "description": "  where to add the ui components"
            },
            {
              "name": "template",
              "type": "String",
              "description": "  the template to use as a guide for rendering"
            },
            {
              "name": "id_base",
              "type": "String",
              "description": "  id base for the container's ui components"
            },
            {
              "name": "hide",
              "type": "Boolean",
              "description": "  leave the container hidden after assembly"
            }
          ]
        },
        "getPageRecords": {
          "guessedname": "getPageRecords",
          "guessedtype": "function",
          "description": "Get the start and end record indexes of the specified page.",
          "params": [
            {
              "name": "page",
              "type": "number",
              "description": "  (optional) The page (current page if not specified)"
            }
          ],
          "return": {
            "type": "Array",
            "description": "[start_index, end_index]"
          }
        },
        "getState": {
          "guessedname": "getState",
          "guessedtype": "function",
          "description": "Get an object literal describing the current state of the paginator.  If\nan object literal of proposed values is passed, the proposed state will\nbe returned as an object literal with the following keys:\n<ul>\n<li>paginator - instance of the Paginator</li>\n<li>page - number</li>\n<li>totalRecords - number</li>\n<li>recordOffset - number</li>\n<li>rowsPerPage - number</li>\n<li>records - [ start_index, end_index ]</li>\n<li>before - (OPTIONAL) { state object literal for current state }</li>\n</ul>",
          "params": [
            {
              "name": "changes",
              "type": "object",
              "description": "  OPTIONAL object literal with proposed values\nSupported change keys include:\n<ul>\n<li>rowsPerPage</li>\n<li>totalRecords</li>\n<li>recordOffset OR</li>\n<li>page</li>\n</ul>"
            }
          ],
          "return": {
            "type": "object",
            "description": ""
          }
        },
        "getContainerNodes": {
          "guessedname": "getContainerNodes",
          "guessedtype": "function",
          "description": "Get the configured container nodes",
          "return": {
            "type": "Array",
            "description": "array of HTMLElement nodes"
          }
        },
        "_syncRecordOffset": {
          "guessedname": "_syncRecordOffset",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets recordOffset to the starting index of the previous page when\ntotalRecords is reduced below the current recordOffset.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  totalRecordsChange event"
            }
          ]
        },
        "setPage": {
          "guessedname": "setPage",
          "guessedtype": "function",
          "description": "Set the current page to the provided page number if possible.",
          "params": [
            {
              "name": "newPage",
              "type": "number",
              "description": "  the new page number"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": "  whether to forcibly avoid firing the\nchangeRequest event"
            }
          ]
        },
        "_handleStateChange": {
          "guessedname": "_handleStateChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Fires the pageChange event when the state attributes have changed in\nsuch a way as to locate the current recordOffset on a new page.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the attribute change event"
            }
          ]
        },
        "getPreviousPage": {
          "guessedname": "getPreviousPage",
          "guessedtype": "function",
          "description": "Get the page number of the previous page, or null if the current page\nis the first page.",
          "return": {
            "type": "number",
            "description": ""
          }
        },
        "getCurrentPage": {
          "guessedname": "getCurrentPage",
          "guessedtype": "function",
          "description": "Get the page number corresponding to the current record offset.",
          "return": {
            "type": "number",
            "description": ""
          }
        },
        "setStartIndex": {
          "guessedname": "setStartIndex",
          "guessedtype": "function",
          "description": "Move the record offset to a new starting index.  This will likely cause\nthe calculated current page to change.  You should probably use setPage.",
          "params": [
            {
              "name": "offset",
              "type": "number",
              "description": "  the new record offset"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": "  whether to forcibly avoid firing the changeRequest event"
            }
          ]
        },
        "initEvents": {
          "guessedname": "initEvents",
          "private": "",
          "guessedtype": "function",
          "description": "Initialize this instance's CustomEvents."
        },
        "renderUIComponent": {
          "guessedname": "renderUIComponent",
          "guessedtype": "function",
          "description": "Replaces a marker node with a rendered UI component, determined by the\nyui-pg-ui-(UI component class name) in the marker's className. e.g.\nyui-pg-ui-PageLinks => new YAHOO.widget.Paginator.ui.PageLinks(this)",
          "params": [
            {
              "name": "marker",
              "type": "HTMLElement",
              "description": "  the marker node to replace"
            },
            {
              "name": "id_base",
              "type": "String",
              "description": "  string base the component's generated id"
            }
          ]
        },
        "Paginator.isNumeric": {
          "guessedname": "isNumeric",
          "static": "",
          "returns": "{Boolean} true if the input is coercable into a finite number",
          "guessedtype": "function",
          "params": [
            {
              "name": "v",
              "type": "Number|String",
              "description": "  value to be checked for number or numeric string"
            }
          ],
          "description": "Similar to YAHOO.lang.isNumber, but allows numeric strings.  This is\nis used for attribute validation in conjunction with getters that return\nnumbers."
        },
        "initUIComponents": {
          "guessedname": "initUIComponents",
          "private": "",
          "guessedtype": "function",
          "description": "Initialize registered ui components onto this instance."
        },
        "hasNextPage": {
          "guessedname": "hasNextPage",
          "guessedtype": "function",
          "description": "Are there records on the next page?",
          "return": {
            "type": "boolean",
            "description": ""
          }
        },
        "setRowsPerPage": {
          "guessedname": "setRowsPerPage",
          "guessedtype": "function",
          "description": "Set the number of rows per page.",
          "params": [
            {
              "name": "rpp",
              "type": "number",
              "description": "  the new number of rows per page"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": "  whether to forcibly avoid firing the\nchangeRequest event"
            }
          ]
        },
        "getStartIndex": {
          "guessedname": "getStartIndex",
          "guessedtype": "function",
          "description": "Get the index of the first record on the current page",
          "return": {
            "type": "number",
            "description": "the index of the first record on the current page"
          }
        }
      },
      "name": "YAHOO.widget.Paginator",
      "module": "paginator",
      "namespace": "YAHOO.widget",
      "events": {
        "containerClassChange": {
          "name": "containerClassChange",
          "description": "Fires when the value for the configuration attribute 'containerClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "recordOffsetChange": {
          "name": "recordOffsetChange",
          "description": "Fires when the value for the configuration attribute 'recordOffset' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "changeRequest": {
          "description": "Event fired when a change in pagination values is requested,\neither by interacting with the various ui components or via the\nsetStartIndex(n) etc APIs.\nSubscribers will receive the proposed state as the first parameter.\nThe proposed state object will contain the following keys:\n<ul>\n<li>paginator - the Paginator instance</li>\n<li>page</li>\n<li>totalRecords</li>\n<li>recordOffset - index of the first record on the new page</li>\n<li>rowsPerPage</li>\n<li>records - array containing [start index, end index] for the records on the new page</li>\n<li>before - object literal with all these keys for the current state</li>\n</ul>"
        },
        "beforeTemplateChange": {
          "name": "beforeTemplateChange",
          "description": "Fires before the value for the configuration attribute 'template' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "templateChange": {
          "name": "templateChange",
          "description": "Fires when the value for the configuration attribute 'template' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "rendered": {
          "description": "Event fired when the Paginator is initially rendered",
          "deprecated": "use render event"
        },
        "beforeAlwaysVisibleChange": {
          "name": "beforeAlwaysVisibleChange",
          "description": "Fires before the value for the configuration attribute 'alwaysVisible' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pageChange": {
          "description": "Event fired when attribute changes have resulted in the calculated\ncurrent page changing."
        },
        "beforeIdChange": {
          "name": "beforeIdChange",
          "description": "Fires before the value for the configuration attribute 'id' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "rowsPerPageChange": {
          "name": "rowsPerPageChange",
          "description": "Fires when the value for the configuration attribute 'rowsPerPage' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeContainersChange": {
          "name": "beforeContainersChange",
          "description": "Fires before the value for the configuration attribute 'containers' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "idChange": {
          "name": "idChange",
          "description": "Fires when the value for the configuration attribute 'id' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "containersChange": {
          "name": "containersChange",
          "description": "Fires when the value for the configuration attribute 'containers' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "destroy": {
          "description": "Event used to trigger cleanup of ui components"
        },
        "render": {
          "description": "Event fired when the Paginator is initially rendered"
        },
        "totalRecordsChange": {
          "name": "totalRecordsChange",
          "description": "Fires when the value for the configuration attribute 'totalRecords' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDestroy": {
          "description": "Event that fires before the destroy event."
        },
        "initialPageChange": {
          "name": "initialPageChange",
          "description": "Fires when the value for the configuration attribute 'initialPage' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeInitialPageChange": {
          "name": "beforeInitialPageChange",
          "description": "Fires before the value for the configuration attribute 'initialPage' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTotalRecordsChange": {
          "name": "beforeTotalRecordsChange",
          "description": "Fires before the value for the configuration attribute 'totalRecords' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRenderedChange": {
          "name": "beforeRenderedChange",
          "description": "Fires before the value for the configuration attribute 'rendered' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeUpdateOnChangeChange": {
          "name": "beforeUpdateOnChangeChange",
          "description": "Fires before the value for the configuration attribute 'updateOnChange' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "renderedChange": {
          "name": "renderedChange",
          "description": "Fires when the value for the configuration attribute 'rendered' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "updateOnChangeChange": {
          "name": "updateOnChangeChange",
          "description": "Fires when the value for the configuration attribute 'updateOnChange' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRecordOffsetChange": {
          "name": "beforeRecordOffsetChange",
          "description": "Fires before the value for the configuration attribute 'recordOffset' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRowsPerPageChange": {
          "name": "beforeRowsPerPageChange",
          "description": "Fires before the value for the configuration attribute 'rowsPerPage' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "alwaysVisibleChange": {
          "name": "alwaysVisibleChange",
          "description": "Fires when the value for the configuration attribute 'alwaysVisible' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeContainerClassChange": {
          "name": "beforeContainerClassChange",
          "description": "Fires before the value for the configuration attribute 'containerClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Instantiate a Paginator, passing a configuration object to the contructor.\nThe configuration object should contain the following properties:\n<ul>\n<li>rowsPerPage : <em>n</em> (int)</li>\n<li>totalRecords : <em>n</em> (int or Paginator.VALUE_UNLIMITED)</li>\n<li>containers : <em>id | el | arr</em> (HTMLElement reference, its id, or an array of either)</li>\n</ul>",
          "params": [
            {
              "name": "config",
              "type": "Object",
              "description": "  Object literal to set instance and ui component\nconfiguration."
            }
          ]
        }
      ],
      "description": "Instantiate a Paginator, passing a configuration object to the contructor.\nThe configuration object should contain the following properties:\n<ul>\n<li>rowsPerPage : <em>n</em> (int)</li>\n<li>totalRecords : <em>n</em> (int or Paginator.VALUE_UNLIMITED)</li>\n<li>containers : <em>id | el | arr</em> (HTMLElement reference, its id, or an array of either)</li>\n</ul>",
      "file": "Paginator.js",
      "configs": {
        "rendered": {
          "final": "",
          "type": "boolean",
          "description": "Indicator of whether the DOM nodes have been initially created"
        },
        "updateOnChange": {
          "default": "false",
          "type": "boolean",
          "description": "Update the UI immediately upon interaction.  If false, changeRequest\nsubscribers or other external code will need to explicitly set the\nnew values in the paginator to trigger repaint.",
          "deprecated": "use changeRequest listener that calls setState"
        },
        "id": {
          "final": "",
          "type": "integer",
          "description": "Unique id assigned to this instance"
        },
        "containerClass": {
          "default": "'yui-pg-container'",
          "type": "string",
          "description": "Class assigned to the element(s) containing pagination controls."
        },
        "template": {
          "type": "string",
          "description": "Template used to render controls.  The string will be used as\ninnerHTML on all specified container nodes.  Bracketed keys\n(e.g. {pageLinks}) in the string will be replaced with an instance\nof the so named ui component.",
          "see": "Paginator.TEMPLATE_DEFAULT"
        },
        "recordOffset": {
          "default": "0",
          "type": "integer",
          "description": "Zero based index of the record considered first on the current page.\nFor page based interactions, don't modify this attribute directly;\nuse setPage(n)."
        },
        "alwaysVisible": {
          "default": "true",
          "type": "boolean",
          "description": "Display pagination controls even when there is only one page.  Set\nto false to forgo rendering and/or hide the containers when there\nis only one page of data.  Note if you are using the rowsPerPage\ndropdown ui component, visibility will be maintained as long as the\nnumber of records exceeds the smallest page size."
        },
        "containers": {
          "type": "{string|HTMLElement|Array(string|HTMLElement)}",
          "description": "REQUIRED. Node references or ids of nodes in which to render the\npagination controls."
        },
        "rowsPerPage": {
          "type": "integer",
          "description": "REQUIRED. Number of records constituting a &quot;page&quot;"
        },
        "totalRecords": {
          "default": "0",
          "type": "integer",
          "description": "Total number of records to paginate through"
        },
        "initialPage": {
          "default": "1",
          "type": "integer",
          "description": "Page to display on initial paint"
        }
      },
      "properties": {
        "Paginator.VALUE_UNLIMITED": {
          "final": "",
          "guessedname": "VALUE_UNLIMITED",
          "static": "",
          "type": "number",
          "guessedtype": "property",
          "description": "Used to identify unset, optional configurations, or used explicitly in\nthe case of totalRecords to indicate unlimited pagination."
        },
        "Paginator.TEMPLATE_DEFAULT": {
          "guessedname": "TEMPLATE_DEFAULT",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Default template used by Paginator instances.  Update this if you want\nall new Paginators to use a different default template."
        },
        "Paginator.ID_BASE": {
          "guessedname": "ID_BASE",
          "private": "",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Base of id strings used for ui components."
        },
        "Paginator.id": {
          "guessedname": "id",
          "private": "",
          "static": "",
          "type": "number",
          "guessedtype": "property",
          "description": "Incrementing index used to give instances unique ids."
        },
        "_batch": {
          "guessedname": "_batch",
          "type": "boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Flag used to indicate multiple attributes are being updated via setState"
        },
        "Paginator.TEMPLATE_ROWS_PER_PAGE": {
          "guessedname": "TEMPLATE_ROWS_PER_PAGE",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Common alternate pagination format, including page links, links for\nprevious, next, first and last pages as well as a rows-per-page\ndropdown.  Offered as a convenience."
        },
        "_pageChanged": {
          "guessedname": "_pageChanged",
          "type": "boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Used by setState to indicate when a page change has occurred"
        },
        "_state": {
          "guessedname": "_state",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Temporary state cache used by setState to keep track of the previous\nstate for eventual pageChange event firing"
        },
        "Paginator.ui": {
          "guessedname": "ui",
          "static": "",
          "guessedtype": "property",
          "description": "Storage object for UI Components"
        },
        "_containers": {
          "private": "",
          "guessedname": "_containers",
          "type": "Array(HTMLElement)",
          "guessedtype": "property",
          "description": "Array of nodes in which to render pagination controls.  This is set via\nthe &quot;containers&quot; attribute."
        }
      }
    },
    "Connect": {
      "name": "Connect",
      "shortname": "Connect",
      "methods": {
        "uploadFile": {
          "private": "",
          "static": "",
          "description": "Uploads HTML form, inclusive of files/attachments, using the\niframe created in createFrame to facilitate the transaction.",
          "params": [
            {
              "name": "id",
              "type": "int",
              "description": " The transaction id."
            },
            {
              "name": "callback",
              "type": "object",
              "description": " User-defined callback object."
            },
            {
              "name": "uri",
              "type": "string",
              "description": " Fully qualified path of resource."
            },
            {
              "name": "postData",
              "type": "string",
              "description": " POST data to be submitted in addition to HTML form."
            }
          ],
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "_swf": {
          "private": "",
          "static": "",
          "description": "This method creates and instantiates the Flash transport.",
          "params": [
            {
              "name": "URI",
              "type": "string",
              "description": " to connection.swf."
            }
          ],
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "resetFormState": {
          "private": "",
          "static": "",
          "description": "Resets HTML form properties when an HTML form or HTML form\nwith file upload transaction is sent.",
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "xdr": {
          "private": "",
          "static": "",
          "description": "This method calls the public method on the\nFlash transport to start the XDR transaction.  It is analogous\nto Connection Manager's asyncRequest method.",
          "params": [
            {
              "name": "The",
              "type": "object",
              "description": " transaction object."
            },
            {
              "name": "HTTP",
              "type": "string",
              "description": " request method."
            },
            {
              "name": "URI",
              "type": "string",
              "description": " for the transaction."
            },
            {
              "name": "The",
              "type": "object",
              "description": " transaction's callback object."
            },
            {
              "name": "The",
              "type": "object",
              "description": " JSON object used as HTTP POST data."
            }
          ],
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "_xdrStart": {
          "private": "",
          "static": "",
          "description": "This method fires the global and transaction start\nevents.",
          "params": [
            {
              "name": "The",
              "type": "object",
              "description": " transaction object."
            },
            {
              "name": "The",
              "type": "string",
              "description": " transaction's callback object."
            }
          ],
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "appendPostData": {
          "private": "",
          "static": "",
          "description": "Parses the POST data and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.",
          "params": [
            {
              "name": "postData",
              "type": "string",
              "description": " The HTTP POST data"
            }
          ],
          "return": {
            "type": "array",
            "description": "formElements Collection of hidden fields."
          }
        },
        "setForm": {
          "public": "",
          "static": "",
          "description": "This method assembles the form label and value pairs and\nconstructs an encoded string.\nasyncRequest() will automatically initialize the transaction with a\na HTTP header Content-Type of application/x-www-form-urlencoded.",
          "params": [
            {
              "name": "form",
              "type": "string || object",
              "description": " id or name attribute, or form object."
            },
            {
              "name": "optional",
              "type": "boolean",
              "description": " enable file upload."
            },
            {
              "name": "optional",
              "type": "boolean",
              "description": " enable file upload over SSL in IE only."
            }
          ],
          "return": {
            "type": "string",
            "description": "string of the HTML form field name and value pairs.."
          }
        },
        "transport": {
          "public": "",
          "static": "",
          "description": "This method instantiates the Flash transport and\nestablishes a static reference to it, used for all XDR requests.",
          "params": [
            {
              "name": "URI",
              "type": "string",
              "description": " to connection.swf."
            }
          ],
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "handleXdrResponse": {
          "private": "",
          "static": "",
          "description": "This method is the initial response handler\nfor XDR transactions.  The Flash transport calls this\nfunction and sends the response payload.",
          "params": [
            {
              "name": "The",
              "type": "object",
              "description": " response object sent from the Flash transport."
            }
          ],
          "return": {
            "type": "void",
            "description": ""
          }
        },
        "createFrame": {
          "private": "",
          "static": "",
          "description": "Creates an iframe to be used for form file uploads.  It is remove from the\ndocument upon completion of the upload transaction.",
          "params": [
            {
              "name": "optional",
              "type": "string",
              "description": " qualified path of iframe resource for SSL in IE."
            }
          ],
          "return": {
            "type": "void",
            "description": ""
          }
        }
      },
      "namespace": "",
      "properties": {
        "failureEvent": {
          "guessedname": "uploadEvent",
          "private": "",
          "static": "",
          "type": "CustomEvent",
          "guessedtype": "property",
          "description": "Custom event that fires when handleTransactionResponse() determines a\nresponse in the HTTP 4xx/5xx range."
        },
        "_sFormData": {
          "guessedname": "_sFormData",
          "private": "",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Property modified by setForm() to set the HTML form data\nfor each transaction."
        },
        "_submitElementValue": {
          "guessedname": "_submitElementValue",
          "private": "",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Tracks the name-value pair of the \"clicked\" submit button if multiple submit\nbuttons are present in an HTML form; and, if YAHOO.util.Event is available."
        },
        "_formNode": {
          "guessedname": "_formNode",
          "private": "",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Property modified by setForm() to set a reference to the HTML\nform node if the desired action is file upload."
        },
        "_isFormSubmit": {
          "guessedname": "_isFormSubmit",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Property modified by setForm() to determine if the data\nshould be submitted as an HTML form."
        },
        "_isFileUpload": {
          "guessedname": "_isFileUpload",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Property modified by setForm() to determine if a file(s)\nupload is expected."
        },
        "_hasSubmitListener": {
          "private": "",
          "guessedname": "_hasSubmitListener",
          "static": "",
          "guessedtype": "function",
          "description": "Determines whether YAHOO.util.Event is available and returns true or false.\nIf true, an event listener is bound at the document level to trap click events that\nresolve to a target type of \"Submit\".  This listener will enable setForm() to determine\nthe clicked \"Submit\" value in a multi-Submit button, HTML form."
        }
      }
    },
    "YAHOO.util.DataSource": {
      "shortname": "DataSource",
      "name": "YAHOO.util.DataSource",
      "guessedname": "DataSource",
      "module": "datasource",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "Factory class for creating a BaseDataSource subclass instance. The sublcass is\ndetermined by oLiveData's type, unless the dataType config is explicitly passed in.",
          "params": [
            {
              "name": "oLiveData",
              "type": "HTMLElement",
              "description": "   Pointer to live data."
            },
            {
              "name": "oConfigs",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Factory class for creating a BaseDataSource subclass instance. The sublcass is\ndetermined by oLiveData's type, unless the dataType config is explicitly passed in.",
      "file": "DataSource.js"
    },
    "YAHOO.util.Easing": {
      "shortname": "Easing",
      "methods": {
        "elasticBoth": {
          "guessedname": "elasticBoth",
          "guessedtype": "function",
          "description": "Snap both elastic effect.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "a",
              "type": "Number",
              "description": " Amplitude (optional)"
            },
            {
              "name": "p",
              "type": "Number",
              "description": " Period (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "bounceBoth": {
          "guessedname": "bounceBoth",
          "guessedtype": "function",
          "description": "Bounces off start and end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeInStrong": {
          "guessedname": "easeInStrong",
          "guessedtype": "function",
          "description": "Begins slowly and accelerates towards end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "backIn": {
          "guessedname": "backIn",
          "guessedtype": "function",
          "description": "Backtracks slightly, then reverses direction and moves to end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "s",
              "type": "Number",
              "description": " Overshoot (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeOutStrong": {
          "guessedname": "easeOutStrong",
          "guessedtype": "function",
          "description": "Begins quickly and decelerates towards end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "elasticOut": {
          "guessedname": "elasticOut",
          "guessedtype": "function",
          "description": "Snap out elastic effect.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "a",
              "type": "Number",
              "description": " Amplitude (optional)"
            },
            {
              "name": "p",
              "type": "Number",
              "description": " Period (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeOut": {
          "guessedname": "easeOut",
          "guessedtype": "function",
          "description": "Begins quickly and decelerates towards end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeBothStrong": {
          "guessedname": "easeBothStrong",
          "guessedtype": "function",
          "description": "Begins slowly and decelerates towards end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "elasticIn": {
          "guessedname": "elasticIn",
          "guessedtype": "function",
          "description": "Snap in elastic effect.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "a",
              "type": "Number",
              "description": " Amplitude (optional)"
            },
            {
              "name": "p",
              "type": "Number",
              "description": " Period (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "bounceIn": {
          "guessedname": "bounceIn",
          "guessedtype": "function",
          "description": "Bounce off of start.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeBoth": {
          "guessedname": "easeBoth",
          "guessedtype": "function",
          "description": "Begins slowly and decelerates towards end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeNone": {
          "guessedname": "easeNone",
          "guessedtype": "function",
          "description": "Uniform speed between points.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "bounceOut": {
          "guessedname": "bounceOut",
          "guessedtype": "function",
          "description": "Bounces off end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "backOut": {
          "guessedname": "backOut",
          "guessedtype": "function",
          "description": "Overshoots end, then reverses and comes back to end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "s",
              "type": "Number",
              "description": " Overshoot (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "backBoth": {
          "guessedname": "backBoth",
          "guessedtype": "function",
          "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            },
            {
              "name": "s",
              "type": "Number",
              "description": " Overshoot (optional)"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        },
        "easeIn": {
          "guessedname": "easeIn",
          "guessedtype": "function",
          "description": "Begins slowly and accelerates towards end.",
          "params": [
            {
              "name": "t",
              "type": "Number",
              "description": " Time value used to compute current value"
            },
            {
              "name": "b",
              "type": "Number",
              "description": " Starting value"
            },
            {
              "name": "c",
              "type": "Number",
              "description": " Delta between start and end values"
            },
            {
              "name": "d",
              "type": "Number",
              "description": " Total length of animation"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The computed value for the current animation frame"
          }
        }
      },
      "name": "YAHOO.util.Easing",
      "guessedname": "Easing",
      "module": "animation",
      "namespace": "YAHOO.util",
      "guessedtype": "property",
      "description": "Singleton that determines how an animation proceeds from start to end.",
      "file": "Easing.js"
    },
    "YAHOO.widget.Tooltip": {
      "shortname": "Tooltip",
      "superclass": "YAHOO.widget.Overlay",
      "methods": {
        "onContextMouseOver": {
          "guessedname": "onContextMouseOver",
          "guessedtype": "function",
          "description": "The default event handler fired when the user mouses over the \ncontext element.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The current DOM event"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The object argument"
            }
          ]
        },
        "preventOverlay": {
          "guessedname": "preventOverlap",
          "guessedtype": "function",
          "description": "Fired when the Tooltip is moved, this event handler is used to \nprevent the Tooltip from overlapping with its context element.",
          "params": [
            {
              "name": "pageX",
              "type": "Number",
              "description": " The x coordinate position of the mouse pointer"
            },
            {
              "name": "pageY",
              "type": "Number",
              "description": " The y coordinate position of the mouse pointer"
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the object.",
          "return": {
            "type": "String",
            "description": "The string representation of the Tooltip"
          }
        },
        "forceUnderlayRedraw": {
          "guessedname": "forceUnderlayRedraw",
          "guessedtype": "function",
          "description": "Forces the underlay element to be repainted, through the application/removal\nof a yui-force-redraw class to the underlay element."
        },
        "onContextMouseOut": {
          "guessedname": "onContextMouseOut",
          "guessedtype": "function",
          "description": "The default event handler fired when the user mouses out of \nthe context element.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The current DOM event"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The object argument"
            }
          ]
        },
        "onRender": {
          "guessedname": "onRender",
          "guessedtype": "function",
          "description": "\"render\" event handler for the Tooltip.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the Tooltip element from the DOM and sets all child \nelements to null."
        },
        "doHide": {
          "guessedname": "doHide",
          "guessedtype": "function",
          "description": "Sets the timeout for the auto-dismiss delay, which by default is 5 \nseconds, meaning that a tooltip will automatically dismiss itself \nafter 5 seconds of being displayed."
        },
        "configText": {
          "guessedname": "configText",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"text\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "configContext": {
          "guessedname": "configContext",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"context\" property \nis changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers,\nthis will usually equal the owner."
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Tooltip initialization method. This method is automatically \ncalled by the constructor. A Tooltip is automatically rendered by \nthe init method, and it also is set to be invisible by default, \nand constrained to viewport by default as well.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Tooltip <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Tooltip"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal \ncontaining the configuration that should be set for this Tooltip. \nSee configuration documentation for more details."
            }
          ]
        },
        "configContainer": {
          "guessedname": "configContainer",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"container\" property \nis changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For \nconfiguration handlers, args[0] will equal the newly applied value \nfor the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers,\nthis will usually equal the owner."
            }
          ]
        },
        "onContextMouseMove": {
          "guessedname": "onContextMouseMove",
          "guessedtype": "function",
          "description": "The default event handler fired when the user moves the mouse while \nover the context element.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The current DOM event"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The object argument"
            }
          ]
        },
        "initEvents": {
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initializes the custom events for Tooltip"
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the class's configurable properties which can be \nchanged using the Overlay's Config object (cfg)."
        },
        "_removeEventListeners": {
          "guessedname": "_removeEventListeners",
          "guessedtype": "function",
          "protected": "",
          "description": "Removes all of the DOM event handlers from the HTML\nelement(s) that trigger the display of the tooltip."
        },
        "doShow": {
          "guessedname": "doShow",
          "guessedtype": "function",
          "description": "Processes the showing of the Tooltip by setting the timeout delay \nand offset of the Tooltip.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The current DOM event"
            },
            {
              "name": "context",
              "type": "HTMLElement",
              "description": " The current context element"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The process ID of the timeout function associated \nwith doShow"
          }
        }
      },
      "name": "YAHOO.widget.Tooltip",
      "extends": "YAHOO.widget.Overlay",
      "guessedname": "Tooltip",
      "module": "container",
      "namespace": "YAHOO.widget",
      "events": {
        "contextMouseOutEvent": {
          "guessedname": "contextMouseOutEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired when the user mouses out of a context element.",
          "params": [
            {
              "name": "context",
              "type": "HTMLElement",
              "description": " The context element which the user just moused out of"
            },
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The DOM event object, associated with the mouse out"
            }
          ]
        },
        "contextMouseOverEvent": {
          "guessedname": "contextMouseOverEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired when user mouses over a context element. Returning false from\na subscriber to this event will prevent the tooltip from being displayed for\nthe current context element.",
          "params": [
            {
              "name": "context",
              "type": "HTMLElement",
              "description": " The context element which the user just moused over"
            },
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The DOM event object, associated with the mouse over"
            }
          ]
        },
        "contextTriggerEvent": {
          "guessedname": "contextTriggerEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired just before the tooltip is displayed for the current context.\n<p>\nYou can subscribe to this event if you need to set up the text for the \ntooltip based on the context element for which it is about to be displayed.\n</p>\n<p>This event differs from the beforeShow event in following respects:</p>\n<ol>\n<li>\nWhen moving from one context element to another, if the tooltip is not\nhidden (the <code>hidedelay</code> is not reached), the beforeShow and Show events will not\nbe fired when the tooltip is displayed for the new context since it is already visible.\nHowever the contextTrigger event is always fired before displaying the tooltip for\na new context.\n</li>\n<li>\nThe trigger event provides access to the context element, allowing you to \nset the text of the tooltip based on context element for which the tooltip is\ntriggered.\n</li>\n</ol>\n<p>\nIt is not possible to prevent the tooltip from being displayed\nusing this event. You can use the contextMouseOverEvent if you need to prevent\nthe tooltip from being displayed.\n</p>",
          "params": [
            {
              "name": "context",
              "type": "HTMLElement",
              "description": " The context element for which the tooltip is triggered"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, \ndisplaying when the user mouses over a particular element, and \ndisappearing on mouse out.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Tooltip <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Tooltip"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal containing \nthe configuration that should be set for this Overlay. See configuration \ndocumentation for more details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, \ndisplaying when the user mouses over a particular element, and \ndisappearing on mouse out.",
      "file": "Tooltip.js",
      "configs": {
        "hidedelay": {
          "default": "250",
          "type": "Number",
          "description": "The number of milliseconds to wait before hiding a Tooltip \nafter mouseout."
        },
        "container": {
          "default": "document.body",
          "type": "HTMLElement/String",
          "description": "Specifies the container element that the Tooltip's markup \nshould be rendered into."
        },
        "preventoverlap": {
          "default": "true",
          "type": "Boolean",
          "description": "Specifies whether the Tooltip should be kept from overlapping \nits context element."
        },
        "text": {
          "default": "null",
          "type": "String",
          "description": "Specifies the Tooltip's text."
        },
        "autodismissdelay": {
          "default": "5000",
          "type": "Number",
          "description": "The number of milliseconds to wait before automatically \ndismissing a Tooltip after the mouse has been resting on the \ncontext element."
        },
        "context": {
          "default": "null",
          "type": "HTMLElement[]/String[]",
          "description": "Specifies the element or elements that the Tooltip should be \nanchored to on mouseover."
        },
        "disabled": {
          "default": "false",
          "type": "Boolean",
          "description": "Specifies whether or not the tooltip is disabled. Disabled tooltips\nwill not be displayed. If the tooltip is driven by the title attribute\nof the context element, the title attribute will still be removed for \ndisabled tooltips, to prevent default tooltip behavior."
        },
        "showdelay": {
          "default": "200",
          "type": "Number",
          "description": "The number of milliseconds to wait before showing a Tooltip \non mouseover."
        },
        "xyoffset": {
          "default": "[0, 25]",
          "type": "Array",
          "description": "Specifies the XY offset from the mouse position, where the tooltip should be displayed, specified\nas a 2 element array (e.g. [10, 20]);"
        },
        "width": {
          "default": "null",
          "type": "String",
          "description": "String representing the width of the Tooltip.  <em>Please note:\n</em> As of version 2.3 if either no value or a value of \"auto\" \nis specified, and the Toolip's \"container\" configuration property\nis set to something other than <code>document.body</code> or \nits \"context\" element resides outside the immediately visible \nportion of the document, the width of the Tooltip will be \ncalculated based on the offsetWidth of its root HTML and set just \nbefore it is made visible.  The original value will be \nrestored when the Tooltip is hidden. This ensures the Tooltip is \nrendered at a usable width.  For more information see \nYUILibrary bug #1685496 and YUILibrary \nbug #1735423."
        }
      },
      "properties": {
        "YAHOO.widget.Tooltip.CSS_TOOLTIP": {
          "final": "",
          "guessedname": "CSS_TOOLTIP",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the Tooltip CSS class"
        },
        "EVENT_TYPES": {
          "final": "",
          "guessedname": "EVENT_TYPES",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the name of the Tooltip's events"
        },
        "showProcId": {
          "guessedname": "showProcId",
          "type": "int",
          "guessedtype": "property",
          "description": "The unique process ID associated with the thread responsible \nfor showing the Tooltip."
        },
        "DEFAULT_CONFIG": {
          "final": "",
          "guessedname": "DEFAULT_CONFIG",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the Tooltip's configuration properties"
        }
      }
    },
    "YAHOO.widget.RootNode": {
      "shortname": "RootNode",
      "superclass": "YAHOO.widget.Node",
      "methods": {
        "getNodeDefinition": {
          "guessedname": "getNodeDefinition",
          "guessedtype": "function",
          "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nSince the RootNode is automatically created by treeView, \nits own definition is excluded from the returned node definition\nwhich only contains its children.",
          "return": {
            "type": "Object | false",
            "description": "definition of the tree or false if any child node is defined as dynamic"
          }
        },
        "getNodeCount": {
          "guessedname": "getNodeCount",
          "guessedtype": "function",
          "description": "Count of nodes in tree.  \nIt overrides Nodes.getNodeCount because the root node should not be counted.",
          "return": {
            "type": "int",
            "description": "number of nodes in the tree"
          }
        }
      },
      "name": "YAHOO.widget.RootNode",
      "extends": "YAHOO.widget.Node",
      "guessedname": "RootNode",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "A custom YAHOO.widget.Node that handles the unique nature of \nthe virtual, presentationless root node.",
          "params": [
            {
              "name": "oTree",
              "type": "YAHOO.widget.TreeView",
              "description": "  The tree instance this node belongs to"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A custom YAHOO.widget.Node that handles the unique nature of \nthe virtual, presentationless root node.",
      "file": "RootNode.js",
      "properties": {
        "_type": {
          "guessedname": "_type",
          "private": "",
          "default": "\"RootNode\"",
          "type": "string",
          "guessedtype": "property",
          "description": "The node type"
        }
      }
    },
    "YAHOO.util.UnexpectedError": {
      "shortname": "UnexpectedError",
      "superclass": "YAHOO.util.AssertionError",
      "name": "YAHOO.util.UnexpectedError",
      "extends": "YAHOO.util.AssertionError",
      "guessedname": "UnexpectedError",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "UnexpectedError is subclass of AssertionError that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error.",
          "params": [
            {
              "name": "cause",
              "type": "Error",
              "description": " The unexpected error that caused this error to be \nthrown."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "UnexpectedError is subclass of AssertionError that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "type": "String",
          "description": "The name of the error that occurred."
        },
        "stack": {
          "type": "String",
          "description": "Stack information for the error (if provided)."
        },
        "cause": {
          "type": "Error",
          "description": "The unexpected error that occurred."
        }
      }
    },
    "YAHOO.tool.TestNode": {
      "shortname": "TestNode",
      "methods": {
        "appendChild": {
          "guessedname": "appendChild",
          "guessedtype": "function",
          "description": "Appends a new test object (TestSuite, TestCase, or test function name) as a child\nof this node.",
          "params": [
            {
              "name": "testObject",
              "type": "Variant",
              "description": " A TestSuite, TestCase, or the name of a test function."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        }
      },
      "name": "YAHOO.tool.TestNode",
      "private": "",
      "module": "yuitest",
      "namespace": "YAHOO.tool",
      "constructors": [
        {
          "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function.",
          "params": [
            {
              "name": "testObject",
              "type": "Variant",
              "description": " A TestSuite, TestCase, or the name of a test function."
            }
          ]
        }
      ],
      "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function.",
      "file": "TestRunner.js",
      "properties": {
        "results": {
          "type": "object",
          "description": "Test results for this test object."
        },
        "parent": {
          "guessedname": "parent",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to this node's parent."
        },
        "firstChild": {
          "type": "TestNode",
          "description": "Pointer to this node's first child."
        },
        "next": {
          "guessedname": "next",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to this node's next sibling."
        },
        "testObject": {
          "guessedname": "testObject",
          "type": "Variant",
          "guessedtype": "property",
          "description": "The TestSuite, TestCase, or test function represented by this node."
        },
        "lastChild": {
          "guessedname": "lastChild",
          "type": "TestNode",
          "guessedtype": "property",
          "description": "Pointer to this node's last child."
        }
      }
    },
    "YAHOO.util.Dom": {
      "shortname": "Dom",
      "methods": {
        "setX": {
          "guessedname": "setX",
          "guessedtype": "function",
          "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."
            },
            {
              "name": "x",
              "type": "Int",
              "description": " The value to use as the X coordinate for the element(s)."
            }
          ]
        },
        "removeClass": {
          "guessedname": "removeClass",
          "guessedtype": "function",
          "description": "Removes a class name from a given element or collection of elements.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " The element or collection to remove the class from"
            },
            {
              "name": "className",
              "type": "String",
              "description": " the class name to remove from the class attribute"
            }
          ],
          "return": {
            "type": "Boolean | Array",
            "description": "A pass/fail boolean or array of booleans"
          }
        },
        "get": {
          "guessedname": "get",
          "guessedtype": "function",
          "description": "Returns an HTMLElement reference.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement |Array",
              "description": " Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and/or HTMLElements."
            }
          ],
          "return": {
            "type": "HTMLElement | Array",
            "description": "A DOM reference to an HTML element or an array of HTMLElements."
          }
        },
        "getElementsByClassName": {
          "guessedname": "getElementsByClassName",
          "guessedtype": "function",
          "description": "Returns an array of HTMLElements with the given class.\nFor optimized performance, include a tag and/or root node when possible.\nNote: This method operates against a live collection, so modifying the \ncollection in the callback (removing/appending nodes, etc.) will have\nside effects.  Instead you should iterate the returned nodes array,\nas you would with the native \"getElementsByTagName\" method.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " The class name to match against"
            },
            {
              "name": "tag",
              "type": "String",
              "description": " (optional) The tag name of the elements being collected"
            },
            {
              "name": "root",
              "type": "String | HTMLElement",
              "description": " (optional) The HTMLElement or an ID to use as the starting point.\nThis element is not included in the className scan."
            },
            {
              "name": "apply",
              "type": "Function",
              "description": " (optional) A function to apply to each element when found"
            },
            {
              "name": "o",
              "type": "Any",
              "description": " (optional) An optional arg that is passed to the supplied method"
            },
            {
              "name": "overrides",
              "type": "Boolean",
              "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""
            }
          ],
          "return": {
            "type": "Array",
            "description": "An array of elements that have the given class name"
          }
        },
        "getLastChildBy": {
          "guessedname": "getLastChildBy",
          "guessedtype": "function",
          "description": "Returns the last HTMLElement child that passes the test method.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The HTMLElement to use as the starting point"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement or null if not found"
          }
        },
        "hasClass": {
          "guessedname": "hasClass",
          "guessedtype": "function",
          "description": "Determines whether an HTMLElement has the given className.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " The element or collection to test"
            },
            {
              "name": "className",
              "type": "String",
              "description": " the class name to search for"
            }
          ],
          "return": {
            "type": "Boolean | Array",
            "description": "A boolean value or array of boolean values"
          }
        },
        "setY": {
          "guessedname": "setY",
          "guessedtype": "function",
          "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."
            },
            {
              "name": "x",
              "type": "Int",
              "description": " To use as the Y coordinate for the element(s)."
            }
          ]
        },
        "getPreviousSibling": {
          "guessedname": "getPreviousSibling",
          "guessedtype": "function",
          "description": "Returns the previous sibling that is an HTMLElement",
          "params": [
            {
              "name": "node",
              "type": "String | HTMLElement",
              "description": " The HTMLElement or an ID to use as the starting point"
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement or null if not found"
          }
        },
        "getViewportWidth": {
          "guessedname": "getViewportWidth",
          "guessedtype": "function",
          "description": "Returns the current width of the viewport.",
          "return": {
            "type": "Int",
            "description": "The width of the viewable area of the page (excludes scrollbars)."
          }
        },
        "getChildren": {
          "guessedname": "getChildren",
          "guessedtype": "function",
          "description": "Returns an array of HTMLElement childNodes.",
          "params": [
            {
              "name": "node",
              "type": "String | HTMLElement",
              "description": " The HTMLElement or an ID to use as the starting point"
            }
          ],
          "return": {
            "type": "Array",
            "description": "A static array of HTMLElements"
          }
        },
        "inDocument": {
          "guessedname": "inDocument",
          "guessedtype": "function",
          "description": "Determines whether an HTMLElement is present in the current document.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement",
              "description": " The element to search for"
            },
            {
              "name": "doc",
              "type": "Object",
              "description": " An optional document to search, defaults to element's owner document"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the element is present in the current document"
          }
        },
        "getAncestorBy": {
          "guessedname": "getAncestorBy",
          "guessedtype": "function",
          "description": "Returns the nearest ancestor that passes the test applied by supplied boolean method.\nFor performance reasons, IDs are not accepted and argument validation omitted.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The HTMLElement to use as the starting point"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " - A boolean method for testing elements which receives the element as its only argument."
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement or null if not found"
          }
        },
        "getDocumentScrollTop": {
          "guessedname": "getDocumentScrollTop",
          "guessedtype": "function",
          "description": "Returns the top scroll value of the document",
          "params": [
            {
              "name": "document",
              "type": "HTMLDocument",
              "description": " (optional) The document to get the scroll value of"
            }
          ],
          "return": {
            "type": "Int",
            "description": "The amount that the document is scrolled to the top"
          }
        },
        "setXY": {
          "guessedname": "setXY",
          "guessedtype": "function",
          "description": "Set the position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements"
            },
            {
              "name": "pos",
              "type": "Array",
              "description": " Contains X & Y values for new position (coordinates are page-based)"
            },
            {
              "name": "noRetry",
              "type": "Boolean",
              "description": " By default we try and set the position a second time if the first fails"
            }
          ]
        },
        "getStyle": {
          "guessedname": "getStyle",
          "guessedtype": "function",
          "description": "Normalizes currentStyle and ComputedStyle.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement |Array",
              "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."
            },
            {
              "name": "property",
              "type": "String",
              "description": " The style property whose value is returned."
            }
          ],
          "return": {
            "type": "String | Array",
            "description": "The current value of the style property for the element(s)."
          }
        },
        "addClass": {
          "guessedname": "addClass",
          "guessedtype": "function",
          "description": "Adds a class name to a given element or collection of elements.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " The element or collection to add the class to"
            },
            {
              "name": "className",
              "type": "String",
              "description": " the class name to add to the class attribute"
            }
          ],
          "return": {
            "type": "Boolean | Array",
            "description": "A pass/fail boolean or array of booleans"
          }
        },
        "getNextSibling": {
          "guessedname": "getNextSibling",
          "guessedtype": "function",
          "description": "Returns the next sibling that is an HTMLElement",
          "params": [
            {
              "name": "node",
              "type": "String | HTMLElement",
              "description": " The HTMLElement or an ID to use as the starting point"
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement or null if not found"
          }
        },
        "getPreviousSiblingBy": {
          "guessedname": "getPreviousSiblingBy",
          "guessedtype": "function",
          "description": "Returns the previous sibling that is an HTMLElement. \nFor performance reasons, IDs are not accepted and argument validation omitted.\nReturns the nearest HTMLElement sibling if no method provided.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The HTMLElement to use as the starting point"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement or null if not found"
          }
        },
        "setAttribute": {
          "guessedname": "setAttribute",
          "guessedtype": "function",
          "description": "Provides a normalized attribute interface.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement",
              "description": " The target element for the attribute."
            },
            {
              "name": "attr",
              "type": "String",
              "description": " The attribute to set."
            },
            {
              "name": "val",
              "type": "String",
              "description": " The value of the attribute."
            }
          ]
        },
        "getDocumentHeight": {
          "guessedname": "getDocumentHeight",
          "guessedtype": "function",
          "description": "Returns the height of the document.",
          "return": {
            "type": "Int",
            "description": "The height of the actual document (which includes the body and its margin)."
          }
        },
        "insertBefore": {
          "guessedname": "insertBefore",
          "guessedtype": "function",
          "description": "Inserts the new node as the previous sibling of the reference node",
          "params": [
            {
              "name": "newNode",
              "type": "String | HTMLElement",
              "description": " The node to be inserted"
            },
            {
              "name": "referenceNode",
              "type": "String | HTMLElement",
              "description": " The node to insert the new node before"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "The node that was inserted (or null if insert fails)"
          }
        },
        "setStyle": {
          "guessedname": "setStyle",
          "guessedtype": "function",
          "description": "Wrapper for setting style properties of HTMLElements.  Normalizes \"opacity\" across modern browsers.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."
            },
            {
              "name": "property",
              "type": "String",
              "description": " The style property to be set."
            },
            {
              "name": "val",
              "type": "String",
              "description": " The value to apply to the given property."
            }
          ]
        },
        "isAncestor": {
          "guessedname": "isAncestor",
          "guessedtype": "function",
          "description": "Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.",
          "params": [
            {
              "name": "haystack",
              "type": "String | HTMLElement",
              "description": " The possible ancestor"
            },
            {
              "name": "needle",
              "type": "String | HTMLElement",
              "description": " The possible descendent"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the haystack is an ancestor of needle"
          }
        },
        "getChildrenBy": {
          "guessedname": "getChildrenBy",
          "guessedtype": "function",
          "description": "Returns an array of HTMLElement childNodes that pass the test method.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The HTMLElement to start from"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"
            }
          ],
          "return": {
            "type": "Array",
            "description": "A static array of HTMLElements"
          }
        },
        "getFirstChildBy": {
          "guessedname": "getFirstChildBy",
          "guessedtype": "function",
          "description": "Returns the first HTMLElement child that passes the test method.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The HTMLElement to use as the starting point"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement or null if not found"
          }
        },
        "getXY": {
          "guessedname": "getXY",
          "guessedtype": "function",
          "description": "Gets the current position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " Accepts a string to use as an ID, an actual DOM\nreference, or an Array of IDs and/or HTMLElements"
            }
          ],
          "return": {
            "type": "Array",
            "description": "The XY position of the element(s)"
          }
        },
        "getAncestorByClassName": {
          "guessedname": "getAncestorByClassName",
          "guessedtype": "function",
          "description": "Returns the nearest ancestor with the given className.",
          "params": [
            {
              "name": "node",
              "type": "String | HTMLElement",
              "description": " The HTMLElement or an ID to use as the starting point"
            },
            {
              "name": "className",
              "type": "String",
              "description": ""
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement"
          }
        },
        "getViewportHeight": {
          "guessedname": "getViewportHeight",
          "guessedtype": "function",
          "description": "Returns the current height of the viewport.",
          "return": {
            "type": "Int",
            "description": "The height of the viewable area of the page (excludes scrollbars)."
          }
        },
        "generateId": {
          "guessedname": "generateId",
          "guessedtype": "function",
          "description": "Returns an ID and applies it to the element \"el\", if provided.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " (optional) An optional element array of elements to add an ID to (no ID is added if one is already present)."
            },
            {
              "name": "prefix",
              "type": "String",
              "description": " (optional) an optional prefix to use (defaults to \"yui-gen\")."
            }
          ],
          "return": {
            "type": "String | Array",
            "description": "The generated ID, or array of generated IDs (or original ID if already present on an element)"
          }
        },
        "getFirstChild": {
          "guessedname": "getFirstChild",
          "guessedtype": "function",
          "description": "Returns the first HTMLElement child.",
          "params": [
            {
              "name": "node",
              "type": "String | HTMLElement",
              "description": " The HTMLElement or an ID to use as the starting point"
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement or null if not found"
          }
        },
        "getX": {
          "guessedname": "getX",
          "guessedtype": "function",
          "description": "Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements"
            }
          ],
          "return": {
            "type": "Number | Array",
            "description": "The X position of the element(s)"
          }
        },
        "getElementsBy": {
          "guessedname": "getElementsBy",
          "guessedtype": "function",
          "description": "Returns an array of HTMLElements that pass the test applied by supplied boolean method.\nFor optimized performance, include a tag and/or root node when possible.\nNote: This method operates against a live collection, so modifying the \ncollection in the callback (removing/appending nodes, etc.) will have\nside effects.  Instead you should iterate the returned nodes array,\nas you would with the native \"getElementsByTagName\" method.",
          "params": [
            {
              "name": "method",
              "type": "Function",
              "description": " - A boolean method for testing elements which receives the element as its only argument."
            },
            {
              "name": "tag",
              "type": "String",
              "description": " (optional) The tag name of the elements being collected"
            },
            {
              "name": "root",
              "type": "String | HTMLElement",
              "description": " (optional) The HTMLElement or an ID to use as the starting point"
            },
            {
              "name": "apply",
              "type": "Function",
              "description": " (optional) A function to apply to each element when found"
            },
            {
              "name": "o",
              "type": "Any",
              "description": " (optional) An optional arg that is passed to the supplied method"
            },
            {
              "name": "overrides",
              "type": "Boolean",
              "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""
            }
          ],
          "return": {
            "type": "Array",
            "description": "Array of HTMLElements"
          }
        },
        "getAncestorByTagName": {
          "guessedname": "getAncestorByTagName",
          "guessedtype": "function",
          "description": "Returns the nearest ancestor with the given tagName.",
          "params": [
            {
              "name": "node",
              "type": "String | HTMLElement",
              "description": " The HTMLElement or an ID to use as the starting point"
            },
            {
              "name": "tagName",
              "type": "String",
              "description": ""
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement"
          }
        },
        "getNextSiblingBy": {
          "guessedname": "getNextSiblingBy",
          "guessedtype": "function",
          "description": "Returns the next HTMLElement sibling that passes the boolean method. \nFor performance reasons, IDs are not accepted and argument validation omitted.\nReturns the nearest HTMLElement sibling if no method provided.",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The HTMLElement to use as the starting point"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement or null if not found"
          }
        },
        "getClientWidth": {
          "guessedname": "getClientWidth",
          "guessedtype": "function",
          "description": "Returns the width of the client (viewport).",
          "deprecated": "Now using getViewportWidth.  This interface left intact for back compat.",
          "return": {
            "type": "Int",
            "description": "The width of the viewable area of the page."
          }
        },
        "insertAfter": {
          "guessedname": "insertAfter",
          "guessedtype": "function",
          "description": "Inserts the new node as the next sibling of the reference node",
          "params": [
            {
              "name": "newNode",
              "type": "String | HTMLElement",
              "description": " The node to be inserted"
            },
            {
              "name": "referenceNode",
              "type": "String | HTMLElement",
              "description": " The node to insert the new node after"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "The node that was inserted (or null if insert fails)"
          }
        },
        "getLastChild": {
          "guessedname": "getLastChild",
          "guessedtype": "function",
          "description": "Returns the last HTMLElement child.",
          "params": [
            {
              "name": "node",
              "type": "String | HTMLElement",
              "description": " The HTMLElement or an ID to use as the starting point"
            }
          ],
          "return": {
            "type": "Object",
            "description": "HTMLElement or null if not found"
          }
        },
        "getY": {
          "guessedname": "getY",
          "guessedtype": "function",
          "description": "Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements"
            }
          ],
          "return": {
            "type": "Number | Array",
            "description": "The Y position of the element(s)"
          }
        },
        "batch": {
          "guessedname": "batch",
          "guessedtype": "function",
          "description": "Runs the supplied method against each item in the Collection/Array.\nThe method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " (optional) An element or array of elements to apply the method to"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " The method to apply to the element(s)"
            },
            {
              "name": "o",
              "type": "Any",
              "description": " (optional) An optional arg that is passed to the supplied method"
            },
            {
              "name": "overrides",
              "type": "Boolean",
              "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""
            }
          ],
          "return": {
            "type": "Any | Array",
            "description": "The return value(s) from the supplied method"
          }
        },
        "replaceClass": {
          "guessedname": "replaceClass",
          "guessedtype": "function",
          "description": "Replace a class with another class for a given element or collection of elements.\nIf no oldClassName is present, the newClassName is simply added.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " The element or collection to remove the class from"
            },
            {
              "name": "oldClassName",
              "type": "String",
              "description": " the class name to be replaced"
            },
            {
              "name": "newClassName",
              "type": "String",
              "description": " the class name that will be replacing the old class name"
            }
          ],
          "return": {
            "type": "Boolean | Array",
            "description": "A pass/fail boolean or array of booleans"
          }
        },
        "getAttribute": {
          "guessedname": "getAttribute",
          "guessedtype": "function",
          "description": "Provides a normalized attribute interface.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement",
              "description": " The target element for the attribute."
            },
            {
              "name": "attr",
              "type": "String",
              "description": " The attribute to get."
            }
          ],
          "return": {
            "type": "String",
            "description": "The current value of the attribute."
          }
        },
        "getDocumentScrollLeft": {
          "guessedname": "getDocumentScrollLeft",
          "guessedtype": "function",
          "description": "Returns the left scroll value of the document",
          "params": [
            {
              "name": "document",
              "type": "HTMLDocument",
              "description": " (optional) The document to get the scroll value of"
            }
          ],
          "return": {
            "type": "Int",
            "description": "The amount that the document is scrolled to the left"
          }
        },
        "getElementBy": {
          "guessedname": "getElementBy",
          "guessedtype": "function",
          "description": "Returns the first HTMLElement that passes the test applied by the supplied boolean method.",
          "params": [
            {
              "name": "method",
              "type": "Function",
              "description": " - A boolean method for testing elements which receives the element as its only argument."
            },
            {
              "name": "tag",
              "type": "String",
              "description": " (optional) The tag name of the elements being collected"
            },
            {
              "name": "root",
              "type": "String | HTMLElement",
              "description": " (optional) The HTMLElement or an ID to use as the starting point"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "getRegion": {
          "guessedname": "getRegion",
          "guessedtype": "function",
          "description": "Returns the region position of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false).",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement | Array",
              "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements."
            }
          ],
          "return": {
            "type": "Region | Array",
            "description": "A Region or array of Region instances containing \"top, left, bottom, right\" member data."
          }
        },
        "getClientHeight": {
          "guessedname": "getClientHeight",
          "guessedtype": "function",
          "description": "Returns the height of the client (viewport).",
          "deprecated": "Now using getViewportHeight.  This interface left intact for back compat.",
          "return": {
            "type": "Int",
            "description": "The height of the viewable area of the page."
          }
        },
        "getClientRegion": {
          "guessedname": "getClientRegion",
          "guessedtype": "function",
          "description": "Creates a Region based on the viewport relative to the document.",
          "return": {
            "type": "Region",
            "description": "A Region object representing the viewport which accounts for document scroll"
          }
        },
        "getDocumentWidth": {
          "guessedname": "getDocumentWidth",
          "guessedtype": "function",
          "description": "Returns the width of the document.",
          "return": {
            "type": "Int",
            "description": "The width of the actual document (which includes the body and its margin)."
          }
        }
      },
      "name": "YAHOO.util.Dom",
      "guessedname": "Dom",
      "module": "dom",
      "namespace": "YAHOO.util",
      "requires": "yahoo, event",
      "guessedtype": "property",
      "description": "Provides helper methods for DOM elements.",
      "file": "Dom.js"
    },
    "YAHOO": {
      "methods": {
        "namespace": {
          "guessedname": "namespace",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "arguments",
              "type": "String*",
              "description": " 1-n namespaces to create"
            }
          ],
          "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYAHOO.namespace(\"property.package\");\nYAHOO.namespace(\"YAHOO.property.package\");\n</pre>\nEither of the above would create YAHOO.property, then\nYAHOO.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYAHOO.namespace(\"really.long.nested.namespace\");\n</pre>\nThis fails because \"long\" is a future reserved word in ECMAScript\nFor implementation code that uses YUI, do not create your components\nin the namespaces defined by YUI (\n<code>YAHOO.util</code>, \n<code>YAHOO.widget</code>, \n<code>YAHOO.lang</code>, \n<code>YAHOO.tool</code>, \n<code>YAHOO.example</code>, \n<code>YAHOO.env</code>) -- create your own namespace (e.g., 'companyname').",
          "return": {
            "type": "Object",
            "description": "A reference to the last namespace object created"
          }
        },
        "register": {
          "guessedname": "register",
          "static": "",
          "guessedtype": "function",
          "description": "Registers a module with the YAHOO object",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "    the name of the module (event, slider, etc)"
            },
            {
              "name": "mainClass",
              "type": "Function",
              "description": " a reference to class in the module.  This\nclass will be tagged with the version info\nso that it will be possible to identify the\nversion that is in use when multiple versions\nhave loaded"
            },
            {
              "name": "data",
              "type": "Object",
              "description": "      metadata object for the module.  Currently it\nis expected to contain a \"version\" property\nand a \"build\" property at minimum."
            }
          ]
        },
        "log": {
          "guessedname": "log",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "msg",
              "type": "String",
              "description": "  The message to log."
            },
            {
              "name": "cat",
              "type": "String",
              "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"
            },
            {
              "name": "src",
              "type": "String",
              "description": "  The source of the the message (opt)"
            }
          ],
          "description": "Uses YAHOO.widget.Logger to output a log message, if the widget is\navailable.",
          "return": {
            "type": "Boolean",
            "description": "True if the log operation was successful."
          }
        },
        "augment": {
          "guessedname": "augment",
          "static": "",
          "guessedtype": "property",
          "description": "An alias for <a href=\"YAHOO.lang.html#augment\">YAHOO.lang.augment</a>",
          "params": [
            {
              "name": "r",
              "type": "Function",
              "description": "  the object to receive the augmentation"
            },
            {
              "name": "s",
              "type": "Function",
              "description": "  the object that supplies the properties to augment"
            },
            {
              "name": "arguments",
              "type": "String*",
              "description": " zero or more properties methods to \naugment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver"
            }
          ]
        },
        "extend": {
          "guessedname": "extend",
          "static": "",
          "guessedtype": "property",
          "description": "An alias for <a href=\"YAHOO.lang.html#extend\">YAHOO.lang.extend</a>",
          "params": [
            {
              "name": "subc",
              "type": "Function",
              "description": "   the object to modify"
            },
            {
              "name": "superc",
              "type": "Function",
              "description": " the object to inherit"
            },
            {
              "name": "overrides",
              "type": "Object",
              "description": "  additional properties/methods to add to the\nsubclass prototype.  These will override the\nmatching items obtained from the superclass if present."
            }
          ]
        }
      },
      "shortname": "YAHOO",
      "name": "YAHOO",
      "guessedname": "YAHOO",
      "module": "yahoo",
      "namespace": "",
      "static": "",
      "guessedtype": "property",
      "file": "YAHOO.js",
      "description": "The YAHOO global namespace object.  If YAHOO is already defined, the\nexisting YAHOO object will not be overwritten so that defined\nnamespaces are preserved."
    },
    "YAHOO.util.StyleSheet": {
      "shortname": "StyleSheet",
      "methods": {
        "unset": {
          "guessedname": "unset",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "sel",
              "type": "String",
              "description": "  the selector string to apply the changes to"
            },
            {
              "name": "css",
              "type": "String|Array",
              "description": "  style property name or Array of names"
            }
          ],
          "description": "<p>Unset style properties for a provided selector string, removing\ntheir effect from the style cascade.</p>\n<p>If the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If there are no properties\nremaining in the rule after unsetting, the rule is removed.</p>\n<p>The style property or properties in the second parameter must be the\n<p>JavaScript style property names. E.g. fontSize rather than font-size.</p>\n<p>The float style property will be unset by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>",
          "return": {
            "type": "StyleSheet",
            "description": "the StyleSheet instance"
          }
        },
        "set": {
          "guessedname": "set",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "sel",
              "type": "String",
              "description": "  the selector string to apply the changes to"
            },
            {
              "name": "css",
              "type": "Object|String",
              "description": "  Object literal of style properties and\nnew values, or a string of cssText"
            }
          ],
          "description": "<p>Set style properties for a provided selector string.\nIf the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If the selector string does not\nhave a corresponding rule in the sheet, it will be added.</p>\n<p>The second parameter can be either a string of CSS text,\nformatted as CSS (\"font-size: 10px;\"), or an object collection of\nproperties and their new values.  Object properties must be in\nJavaScript format ({ fontSize: \"10px\" }).</p>\n<p>The float style property will be set by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot; if passed in the\nobject map.  Use \"float: left;\" format when passing a CSS text\nstring.</p>",
          "return": {
            "type": "StyleSheet",
            "description": "the StyleSheet instance"
          }
        },
        "StyleSheet.register": {
          "guessedname": "register",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  the name to assign the StyleSheet in the registry"
            },
            {
              "name": "sheet",
              "type": "StyleSheet",
              "description": "  The StyleSheet instance"
            }
          ],
          "description": "Registers a StyleSheet instance in the static registry by the given name",
          "return": {
            "type": "Boolean",
            "description": "false if no name or sheet is not a StyleSheet\ninstance. true otherwise."
          }
        },
        "isEnabled": {
          "guessedname": "isEnabled",
          "guessedtype": "function",
          "description": "Returns boolean indicating whether the StyleSheet is enabled",
          "return": {
            "type": "Boolean",
            "description": "is it enabled?"
          }
        },
        "enable": {
          "chainable": "",
          "description": "Enable all the rules in the sheet",
          "return": {
            "type": "StyleSheet",
            "description": "the instance"
          }
        },
        "disable": {
          "guessedname": "disable",
          "chainable": "",
          "guessedtype": "function",
          "description": "Disable all the rules in the sheet.  Rules may be changed while the\nStyleSheet is disabled.",
          "return": {
            "type": "StyleSheet",
            "description": "the instance"
          }
        },
        "StyleSheet.toCssText": {
          "guessedname": "toCssText",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "css",
              "type": "Object",
              "description": "  object literal of style properties and values"
            },
            {
              "name": "cssText",
              "type": "String",
              "description": "  OPTIONAL starting cssText value"
            }
          ],
          "description": "<p>Converts an object literal of style properties and values into a string\nof css text.  This can then be assigned to el.style.cssText.</p>\n<p>The optional second parameter is a cssText string representing the\nstarting state of the style prior to alterations.  This is most often\nextracted from the eventual target's current el.style.cssText.</p>",
          "return": {
            "type": "String",
            "description": "the resulting cssText string"
          }
        },
        "getId": {
          "guessedname": "getId",
          "guessedtype": "function",
          "description": "Get the unique yuiSSID for this StyleSheet instance",
          "return": {
            "type": "Number",
            "description": "the static id"
          }
        },
        "getCssText": {
          "guessedname": "getCssText",
          "guessedtype": "function",
          "description": "Get the current cssText for a rule or the entire sheet.  If the\nselector param is supplied, only the cssText for that rule will be\nreturned, if found.  If the selector string targets multiple\nselectors separated by commas, the cssText of the first rule only\nwill be returned.  If no selector string, the stylesheet's full\ncssText will be returned.",
          "params": [
            {
              "name": "sel",
              "type": "String",
              "description": "  Selector string"
            }
          ],
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "StyleSheet.isValidSelector": {
          "guessedname": "isValidSelector",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "sel",
              "type": "String",
              "description": "  the selector string"
            }
          ],
          "description": "<p>Determines if a selector string is safe to use.  Used internally\nin set to prevent IE from locking up when attempting to add a rule for a\n&quot;bad selector&quot;.</p>\n<p>Bad selectors are considered to be any string containing unescaped\n`~!@$%^&()+=|{}[];'\"?< or space. Also forbidden are . or # followed by\nanything other than an alphanumeric.  Additionally -abc or .-abc or\n#_abc or '# ' all fail.  There are likely more failure cases, so\nplease file a bug if you encounter one.</p>",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        }
      },
      "name": "YAHOO.util.StyleSheet",
      "module": "stylesheet",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = YAHOO.util.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new YAHOO.util.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing YAHOO.util.StyleSheet instance</li>\n<li>The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>",
          "params": [
            {
              "name": "seed",
              "type": "String|HTMLElement",
              "description": "  a style or link node, its id, or a name or\nyuiSSID of a StyleSheet, or a string of css text (see above)"
            },
            {
              "name": "name",
              "type": "String",
              "description": "  OPTIONAL name to register instance for future static\naccess"
            }
          ]
        }
      ],
      "description": "Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = YAHOO.util.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new YAHOO.util.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing YAHOO.util.StyleSheet instance</li>\n<li>The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>",
      "file": "stylesheet.js",
      "properties": {
        "node": {
          "guessedname": "node",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The HTMLElement that this instance encapsulates"
        }
      }
    },
    "YAHOO.widget.Menu": {
      "shortname": "Menu",
      "superclass": "YAHOO.widget.Overlay",
      "methods": {
        "_execSubmenuHideDelay": {
          "private": "",
          "guessedname": "_execSubmenuHideDelay",
          "guessedtype": "function",
          "description": "Hides a submenu after the number of milliseconds specified by \nthe \"submenuhidedelay\" configuration property have ellapsed.",
          "params": [
            {
              "name": "p_oSubmenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object specifying the submenu that  \nshould be hidden."
            },
            {
              "name": "p_nMouseX",
              "type": "Number",
              "description": " The x coordinate of the mouse when it left \nthe specified submenu's parent menu item."
            },
            {
              "name": "p_nHideDelay",
              "type": "Number",
              "description": " The number of milliseconds that should ellapse\nbefore the submenu is hidden."
            }
          ]
        },
        "configContainer": {
          "guessedname": "configContainer",
          "guessedtype": "function",
          "description": "Event handler for when the \"container\" configuration property \nof the menu changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the menu that \nfired the event."
            }
          ]
        },
        "_onBeforeRender": {
          "private": "",
          "guessedname": "_onBeforeRender",
          "guessedtype": "function",
          "description": "\"beforerender\" event handler for the menu.  Appends all of the \n<code>&#60;ul&#62;</code>, <code>&#60;li&#62;</code> and their accompanying \ntitle elements to the body element of the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "_setMaxHeight": {
          "private": "",
          "guessedname": "_setMaxHeight",
          "guessedtype": "function",
          "description": "\"renderEvent\" handler used to defer the setting of the \n\"maxheight\" configuration property until the menu is rendered in lazy \nload scenarios.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event \nwas fired."
            },
            {
              "name": "p_nMaxHeight",
              "type": "Number",
              "description": " Number representing the value to set for the \n\"maxheight\" configuration property."
            }
          ]
        },
        "_disableScrollHeader": {
          "guessedname": "_disableScrollHeader",
          "guessedtype": "function",
          "protected": "",
          "description": "Disables the header used for scrolling the body of the menu."
        },
        "checkPosition": {
          "private": "",
          "description": "Checks to make sure that the value of the \"position\" property \nis one of the supported strings. Returns true if the position is supported.",
          "params": [
            {
              "name": "p_sPosition",
              "type": "Object",
              "description": " String specifying the position of the menu."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "initEvents": {
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initializes the custom events for the menu."
        },
        "_onScrollTargetMouseOver": {
          "guessedname": "_onScrollTargetMouseOver",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseover\" event handler for the menu's \"header\" and \"footer\" \nelements.  Used to scroll the body of the menu up and down when the \nmenu's \"maxheight\" configuration property is set to a value greater than 0.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the menu that \nfired the event."
            }
          ]
        },
        "_enableScrollFooter": {
          "guessedname": "_enableScrollFooter",
          "guessedtype": "function",
          "protected": "",
          "description": "Enables the footer used for scrolling the body of the menu."
        },
        "_initSubTree": {
          "guessedname": "_initSubTree",
          "private": "",
          "guessedtype": "function",
          "description": "Iterates the childNodes of the source element to find nodes \nused to instantiate menu and menu items."
        },
        "setItemGroupTitle": {
          "guessedname": "setItemGroupTitle",
          "guessedtype": "function",
          "description": "Sets the title of a group of menu items.",
          "params": [
            {
              "name": "p_sGroupTitle",
              "type": "String",
              "description": " String specifying the title of the group."
            },
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Optional. Number specifying the group to which\nthe title belongs."
            }
          ]
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Causes the menu to receive focus and fires the \"focus\" event."
        },
        "getItems": {
          "guessedname": "getItems",
          "guessedtype": "function",
          "description": "Returns an array of all of the items in the menu.",
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "insertItem": {
          "guessedname": "insertItem",
          "guessedtype": "function",
          "description": "Inserts an item into the menu at the specified index.",
          "params": [
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object reference for the MenuItem \ninstance to be added to the menu."
            },
            {
              "name": "p_oItem",
              "type": "String",
              "description": " String specifying the text of the item to be added \nto the menu."
            },
            {
              "name": "p_oItem",
              "type": "Object",
              "description": " Object literal containing a set of menu item \nconfiguration properties."
            },
            {
              "name": "p_nItemIndex",
              "type": "Number",
              "description": " Number indicating the ordinal position at which\nthe item should be added."
            },
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Optional. Number indicating the group to which \nthe item belongs."
            }
          ],
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "_onMenuItemConfigChange": {
          "private": "",
          "guessedname": "_onMenuItemConfigChange",
          "guessedtype": "function",
          "description": "\"configchange\" event handler for the menu's items.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item \nthat fired the event."
            }
          ]
        },
        "_onMenuItemDestroy": {
          "private": "",
          "guessedname": "_onMenuItemDestroy",
          "guessedtype": "function",
          "description": "\"destroy\" event handler for the menu's items.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object representing the menu item \nthat fired the event."
            }
          ]
        },
        "configMaxHeight": {
          "guessedname": "configMaxHeight",
          "guessedtype": "function",
          "description": "Event handler for when the \"maxheight\" configuration property of \na Menu changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event \nwas fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " The Menu instance fired\nthe event."
            }
          ]
        },
        "_getFirstEnabledItem": {
          "private": "",
          "guessedname": "_getFirstEnabledItem",
          "guessedtype": "function",
          "description": "Returns the first enabled item in the menu.",
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "configClassName": {
          "guessedname": "configClassName",
          "guessedtype": "function",
          "description": "Event handler for when the \"classname\" configuration property of \na menu changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " The Menu instance fired the event."
            }
          ]
        },
        "_onParentMenuRender": {
          "private": "",
          "guessedname": "_onParentMenuRender",
          "guessedtype": "function",
          "description": "\"render\" event handler for a submenu.  Renders a  \nsubmenu in response to the firing of its parent's \"render\" event.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oSubmenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the submenu that \nsubscribed to the event."
            }
          ]
        },
        "getRoot": {
          "guessedname": "getRoot",
          "guessedtype": "function",
          "description": "Finds the menu's root menu."
        },
        "removeItem": {
          "guessedname": "removeItem",
          "guessedtype": "function",
          "description": "Removes the specified item from the menu.",
          "params": [
            {
              "name": "p_oObject",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object reference for the MenuItem \ninstance to be removed from the menu."
            },
            {
              "name": "p_oObject",
              "type": "Number",
              "description": " Number specifying the index of the item \nto be removed."
            },
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Optional. Number specifying the group to \nwhich the item belongs."
            }
          ],
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "_onParentMenuConfigChange": {
          "private": "",
          "guessedname": "_onParentMenuConfigChange",
          "guessedtype": "function",
          "description": "\"configchange\" event handler for a submenu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oSubmenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the submenu that \nsubscribed to the event."
            }
          ]
        },
        "_cancelShowDelay": {
          "guessedname": "_cancelShowDelay",
          "private": "",
          "guessedtype": "function",
          "description": "Cancels the call to the \"showMenu.\""
        },
        "_removeItemFromGroupByIndex": {
          "guessedname": "_removeItemFromGroupByIndex",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Number indicating the group to which the menu \nitem belongs."
            },
            {
              "name": "p_nItemIndex",
              "type": "Number",
              "description": " Number indicating the index of the menu item \nto be removed."
            }
          ],
          "description": "Removes a menu item from a group by index.  Returns the menu \nitem that was removed.",
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "blur": {
          "guessedname": "blur",
          "guessedtype": "function",
          "description": "Causes the menu to lose focus and fires the \"blur\" event."
        },
        "subscribe": {
          "guessedname": "subscribe",
          "guessedtype": "function",
          "description": "Adds the specified CustomEvent subscriber to the menu and each of \nits submenus.",
          "params": [
            {
              "name": "p_type",
              "type": "string",
              "description": "        the type, or name of the event"
            },
            {
              "name": "p_fn",
              "type": "function",
              "description": "        the function to exectute when the event fires"
            },
            {
              "name": "p_obj",
              "type": "Object",
              "description": "         An object to be passed along when the event \nfires"
            },
            {
              "name": "p_override",
              "type": "boolean",
              "description": "   If true, the obj passed in becomes the \nexecution scope of the listener"
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the menu's <code>&#60;div&#62;</code> element \n(and accompanying child nodes) from the document."
        },
        "_updateItemProperties": {
          "private": "",
          "guessedname": "_updateItemProperties",
          "guessedtype": "function",
          "description": "Updates the \"index,\" \"groupindex,\" and \"className\" properties \nof the menu items in the specified group.",
          "params": [
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Number indicating the group of items to update."
            }
          ]
        },
        "_setScrollHeight": {
          "private": "",
          "guessedname": "_setScrollHeight",
          "guessedtype": "function",
          "description": "",
          "params": [
            {
              "name": "p_nScrollHeight",
              "type": "String",
              "description": " Number representing the scrolling height of the Menu."
            }
          ]
        },
        "_onBlur": {
          "guessedname": "_onBlur",
          "guessedtype": "function",
          "protected": "",
          "description": "\"blur\" event handler for a Menu instance.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event \nwas fired."
            }
          ]
        },
        "configIframe": {
          "guessedname": "configIframe",
          "guessedtype": "function",
          "description": "Event handler for when the \"iframe\" configuration property of \nthe menu changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the menu that \nfired the event."
            }
          ]
        },
        "_onClick": {
          "guessedname": "_onClick",
          "guessedtype": "function",
          "protected": "",
          "description": "\"click\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "setInitialFocus": {
          "guessedname": "setInitialFocus",
          "guessedtype": "function",
          "description": "Sets focus to the menu's first enabled item."
        },
        "setInitialSelection": {
          "guessedname": "setInitialSelection",
          "guessedtype": "function",
          "description": "Sets the \"selected\" configuration property of the menu's first \nenabled item to \"true.\""
        },
        "_onKeyDown": {
          "guessedname": "_onKeyDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keydown\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "hasFocus": {
          "guessedname": "hasFocus",
          "guessedtype": "function",
          "description": "Returns a boolean indicating whether or not the menu has focus.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_addItemToGroup": {
          "guessedname": "_addItemToGroup",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Number indicating the group to which the \nitem belongs."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object reference for the MenuItem \ninstance to be added to the menu."
            },
            {
              "name": "p_oItem",
              "type": "String",
              "description": " String specifying the text of the item to be added \nto the menu."
            },
            {
              "name": "p_oItem",
              "type": "Object",
              "description": " Object literal containing a set of menu item \nconfiguration properties."
            },
            {
              "name": "p_nItemIndex",
              "type": "Number",
              "description": " Optional. Number indicating the index at \nwhich the menu item should be added."
            }
          ],
          "description": "Adds a menu item to a group.",
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "getItemGroups": {
          "guessedname": "getItemGroups",
          "guessedtype": "function",
          "description": "Multi-dimensional Array representing the menu items as they \nare grouped in the menu.",
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "configShadow": {
          "guessedname": "configShadow",
          "guessedtype": "function",
          "description": "Event handler for when the \"shadow\" configuration property of \na menu changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " The Menu instance fired the event."
            }
          ]
        },
        "clearContent": {
          "guessedname": "clearContent",
          "guessedtype": "function",
          "description": "Removes all of the content from the menu, including the menu \nitems, group titles, header and footer."
        },
        "_onMouseOver": {
          "guessedname": "_onMouseOver",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseover\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "_onVisibleChange": {
          "private": "",
          "guessedname": "_onVisibleChange",
          "guessedtype": "function",
          "description": "Change event handler for the the menu's \"visible\" configuration\nproperty.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "_onItemAdded": {
          "private": "",
          "guessedname": "_onItemAdded",
          "guessedtype": "function",
          "description": "\"itemadded\" event handler for a Menu instance.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event \nwas fired."
            }
          ]
        },
        "_configureSubmenu": {
          "private": "",
          "guessedname": "_configureSubmenu",
          "guessedtype": "function",
          "description": "Subscribes the menu item's submenu to its parent menu's events.",
          "params": [
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object reference for the MenuItem \ninstance with the submenu to be configured."
            }
          ]
        },
        "_onYChange": {
          "guessedname": "_onYChange",
          "guessedtype": "function",
          "protected": "",
          "description": "\"y\" event handler for a Menu instance.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event \nwas fired."
            }
          ]
        },
        "_onKeyPress": {
          "guessedname": "_onKeyPress",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keypress\" event handler for a Menu instance.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event \nwas fired."
            }
          ]
        },
        "_cancelHideDelay": {
          "guessedname": "_cancelHideDelay",
          "private": "",
          "guessedtype": "function",
          "description": "Cancels the call to \"hideMenu.\""
        },
        "_onScrollTargetMouseOut": {
          "guessedname": "_onScrollTargetMouseOut",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseout\" event handler for the menu's \"header\" and \"footer\" \nelements.  Used to stop scrolling the body of the menu up and down when the \nmenu's \"maxheight\" configuration property is set to a value greater than 0.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the menu that \nfired the event."
            }
          ]
        },
        "_onInit": {
          "private": "",
          "guessedname": "_onInit",
          "guessedtype": "function",
          "description": "\"init\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "_getItemGroup": {
          "guessedname": "_getItemGroup",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "p_nIndex",
              "type": "Number",
              "description": " Number indicating the index of the menu item group \nto be retrieved."
            }
          ],
          "description": "Returns the menu item group at the specified index.",
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "getSubmenus": {
          "guessedname": "getSubmenus",
          "guessedtype": "function",
          "description": "Returns an array of all of the submenus that are immediate \nchildren of the menu.",
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "positionOffScreen": {
          "guessedname": "positionOffScreen",
          "guessedtype": "function",
          "description": "Positions the menu outside of the boundaries of the browser's \nviewport.  Called automatically when a menu is hidden to ensure that \nit doesn't force the browser to render uncessary scrollbars."
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the class's configurable properties which can be\nchanged using the menu's Config object (\"cfg\")."
        },
        "_clearSetWidthFlag": {
          "guessedname": "_clearSetWidthFlag",
          "private": "",
          "guessedtype": "function",
          "description": "Change event listener for the \"width\" configuration property.  This listener is \nadded when a Menu's \"width\" configuration property is set by the \"_setScrollHeight\" method, and \nis used to set the \"_widthSetForScroll\" property to \"false\" if the \"width\" configuration property \nis changed after it was set by the \"_setScrollHeight\" method.  If the \"_widthSetForScroll\" \nproperty is set to \"false\", and the \"_setScrollHeight\" method is in the process of tearing down \nscrolling functionality, it will maintain the Menu's new width rather than reseting it."
        },
        "_onRender": {
          "private": "",
          "guessedname": "_onRender",
          "guessedtype": "function",
          "description": "\"render\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "_createItemGroup": {
          "guessedname": "_createItemGroup",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "p_nIndex",
              "type": "Number",
              "description": " Number indicating the group to create."
            }
          ],
          "description": "Creates a new menu item group (array) and its associated \n<code>&#60;ul&#62;</code> element. Returns an aray of menu item groups.",
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "_subscribeToItemEvents": {
          "private": "",
          "guessedname": "_subscribeToItemEvents",
          "guessedtype": "function",
          "description": "Subscribes a menu to a menu item's event.",
          "params": [
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object reference for the MenuItem \ninstance whose events should be subscribed to."
            }
          ]
        },
        "getItem": {
          "guessedname": "getItem",
          "guessedtype": "function",
          "description": "Returns the item at the specified index.",
          "params": [
            {
              "name": "p_nItemIndex",
              "type": "Number",
              "description": " Number indicating the ordinal position of the \nitem to be retrieved."
            },
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Optional. Number indicating the group to which \nthe item belongs."
            }
          ],
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "_onMouseOut": {
          "guessedname": "_onMouseOut",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseout\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "_onMouseMove": {
          "guessedname": "_onMouseMove",
          "guessedtype": "function",
          "protected": "",
          "description": "\"click\" event handler for the menu.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the menu that \nfired the event."
            }
          ]
        },
        "_removeItemFromGroupByValue": {
          "guessedname": "_removeItemFromGroupByValue",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Number indicating the group to which the\nmenu item belongs."
            },
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object reference for the MenuItem \ninstance to be removed."
            }
          ],
          "description": "Removes a menu item from a group by reference.  Returns the \nmenu item that was removed.",
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "addItems": {
          "guessedname": "addItems",
          "guessedtype": "function",
          "description": "Adds an array of items to the menu.",
          "params": [
            {
              "name": "p_aItems",
              "type": "Array",
              "description": " Array of items to be added to the menu.  The array \ncan contain strings specifying the text for each item to be created, object\nliterals specifying each of the menu item configuration properties, \nor MenuItem instances."
            },
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Optional. Number specifying the group to \nwhich the items belongs."
            }
          ],
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "_execHideDelay": {
          "guessedname": "_execHideDelay",
          "private": "",
          "guessedtype": "function",
          "description": "Hides the menu after the number of milliseconds specified by \nthe \"hidedelay\" configuration property."
        },
        "configPosition": {
          "guessedname": "configPosition",
          "guessedtype": "function",
          "description": "Event handler for when the \"position\" configuration property \nof the menu changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the menu that \nfired the event."
            }
          ]
        },
        "configDisabled": {
          "guessedname": "configDisabled",
          "guessedtype": "function",
          "description": "Event handler for when the \"disabled\" configuration property of \na menu changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " The Menu instance fired the event."
            }
          ]
        },
        "configVisible": {
          "guessedname": "configVisible",
          "guessedtype": "function",
          "description": "Event handler for when the \"visible\" configuration property \nthe menu changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the menu that \nfired the event."
            }
          ]
        },
        "configHideDelay": {
          "guessedname": "configHideDelay",
          "guessedtype": "function",
          "description": "Event handler for when the \"hidedelay\" configuration property \nof the menu changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object representing the menu that \nfired the event."
            }
          ]
        },
        "_onBeforeHide": {
          "private": "",
          "guessedname": "_onBeforeHide",
          "guessedtype": "function",
          "description": "\"beforehide\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "clearActiveItem": {
          "guessedname": "clearActiveItem",
          "guessedtype": "function",
          "description": "Sets the \"selected\" configuration property of the menu's active\nitem to \"false\" and hides the item's submenu.",
          "params": [
            {
              "name": "p_bBlur",
              "type": "Boolean",
              "description": " Boolean indicating if the menu's active item \nshould be blurred."
            }
          ]
        },
        "_onShow": {
          "private": "",
          "guessedname": "_onShow",
          "guessedtype": "function",
          "description": "\"show\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "_onBeforeShow": {
          "private": "",
          "guessedname": "_onBeforeShow",
          "guessedtype": "function",
          "description": "\"beforeshow\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "_enableScrollHeader": {
          "guessedname": "_enableScrollHeader",
          "guessedtype": "function",
          "protected": "",
          "description": "Enables the header used for scrolling the body of the menu."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the menu.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "_onHide": {
          "private": "",
          "guessedname": "_onHide",
          "guessedtype": "function",
          "description": "\"hide\" event handler for the menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            }
          ]
        },
        "addItem": {
          "guessedname": "addItem",
          "guessedtype": "function",
          "description": "Appends an item to the menu.",
          "params": [
            {
              "name": "p_oItem",
              "type": "YAHOO.widget.MenuItem",
              "description": " Object reference for the MenuItem \ninstance to be added to the menu."
            },
            {
              "name": "p_oItem",
              "type": "String",
              "description": " String specifying the text of the item to be added \nto the menu."
            },
            {
              "name": "p_oItem",
              "type": "Object",
              "description": " Object literal containing a set of menu item \nconfiguration properties."
            },
            {
              "name": "p_nGroupIndex",
              "type": "Number",
              "description": " Optional. Number indicating the group to\nwhich the item belongs."
            }
          ],
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "_disableScrollFooter": {
          "guessedname": "_disableScrollFooter",
          "guessedtype": "function",
          "protected": "",
          "description": "Disables the footer used for scrolling the body of the menu."
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Menu class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references \nfor pre-existing markup, and creates required markup if it is not \nalready present.",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the menu."
            },
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source \nfor the menu."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>",
              "description": " Object \nspecifying the <code>&#60;div&#62;</code> element of the menu."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement</a>",
              "description": " \nObject specifying the <code>&#60;select&#62;</code> element to be used as \nthe data source for the menu."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the menu. See configuration class documentation for \nmore details."
            }
          ]
        }
      },
      "name": "YAHOO.widget.Menu",
      "extends": "YAHOO.widget.Overlay",
      "guessedname": "Menu",
      "module": "menu",
      "namespace": "YAHOO.widget",
      "events": {
        "keyPressEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user presses an alphanumeric key when one of the\nmenu's items has focus.  Passes back the DOM Event object as an argument."
        },
        "mouseOverEvent": {
          "description": "Fires when the mouse has entered the menu.  Passes back \nthe DOM Event object as an argument."
        },
        "keyUpEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user releases a key when one of the menu's items \nhas focus.  Passes back the DOM Event object as an argument."
        },
        "mouseUpEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user releases a mouse button while the mouse is \nover the menu.  Passes back the DOM Event object as an argument."
        },
        "keyDownEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user presses a key when one of the menu's items \nhas focus.  Passes back the DOM Event object as an argument."
        },
        "itemRemovedEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when an item is removed to the menu."
        },
        "itemAddedEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when an item is added to the menu."
        },
        "clickEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user clicks the on the menu.  Passes back the \nDOM Event object as an argument."
        },
        "mouseDownEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user mouses down on the menu.  Passes back the \nDOM Event object as an argument."
        },
        "mouseOutEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the mouse has left the menu.  Passes back the DOM \nEvent object as an argument."
        }
      },
      "constructors": [
        {
          "description": "The Menu class creates a container that holds a vertical list representing \na set of options or commands.  Menu is the base class for all \nmenu containers.",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the menu."
            },
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source \nfor the menu."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>",
              "description": " Object \nspecifying the <code>&#60;div&#62;</code> element of the menu."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement</a>",
              "description": " \nObject specifying the <code>&#60;select&#62;</code> element to be used as \nthe data source for the menu."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the menu. See configuration class documentation for \nmore details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The Menu class creates a container that holds a vertical list representing \na set of options or commands.  Menu is the base class for all \nmenu containers.",
      "file": "menu.js",
      "configs": {
        "position": {
          "default": "dynamic",
          "type": "String",
          "description": "String indicating how a menu should be positioned on the \nscreen.  Possible values are \"static\" and \"dynamic.\"  Static menus are \nvisible by default and reside in the normal flow of the document \n(CSS position: static).  Dynamic menus are hidden by default, reside \nout of the normal flow of the document (CSS position: absolute), and \ncan overlay other elements on the screen."
        },
        "maxheight": {
          "default": "0",
          "type": "Number",
          "description": "Number defining the maximum height (in pixels) for a menu's \nbody element (<code>&#60;div class=\"bd\"&#62;</code>).  Once a menu's body \nexceeds this height, the contents of the body are scrolled to maintain \nthis value.  This value cannot be set lower than the value of the \n\"minscrollheight\" configuration property."
        },
        "hidedelay": {
          "default": "0",
          "type": "Number",
          "description": "Number indicating the time (in milliseconds) that should \nexpire before the menu is hidden.  This property is only applied when \nthe \"position\" configuration property is set to dynamic and is \nautomatically applied to all submenus."
        },
        "xy": {
          "default": "null",
          "type": "Number[]",
          "description": "Array of the absolute x and y positions of the Menu.  This \nproperty is only applied when the \"position\" configuration property is \nset to dynamic."
        },
        "shadow": {
          "default": "true",
          "type": "Boolean",
          "description": "Boolean indicating if the menu should have a shadow."
        },
        "x": {
          "default": "null",
          "type": "Number",
          "description": "Number representing the absolute x-coordinate position of \nthe Menu.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic."
        },
        "y": {
          "default": "null",
          "type": "Number",
          "description": "Number representing the absolute y-coordinate position of \nthe Menu.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic."
        },
        "container": {
          "default": "document.body",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|String",
          "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the menu's markup should be \nrendered into."
        },
        "classname": {
          "default": "null",
          "type": "String",
          "description": "String representing the CSS class to be applied to the \nmenu's root <code>&#60;div&#62;</code> element.  The specified class(es)  \nare appended in addition to the default class as specified by the menu's\nCSS_CLASS_NAME constant. When set this property is automatically \napplied to all submenus."
        },
        "iframe": {
          "default": "true for IE6 and below, false for all other browsers.",
          "type": "Boolean",
          "description": "Boolean indicating whether or not the Menu should \nhave an IFRAME shim; used to prevent SELECT elements from \npoking through an Overlay instance in IE6.  When set to \"true\", \nthe iframe shim is created when the Menu instance is intially\nmade visible.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic and is automatically applied \nto all submenus."
        },
        "scrollincrement": {
          "default": "1",
          "type": "Number",
          "description": "Number used to control the scroll speed of a menu.  Used to \nincrement the \"scrollTop\" property of the menu's body by when a menu's \ncontent is scrolling.  When set this property is automatically applied \nto all submenus."
        },
        "constraintoviewport": {
          "default": "true",
          "type": "Boolean",
          "description": "Boolean indicating if the menu will try to remain inside \nthe boundaries of the size of viewport.  This property is only applied \nwhen the \"position\" configuration property is set to dynamic and is \nautomatically applied to all submenus."
        },
        "submenuhidedelay": {
          "default": "250",
          "type": "Number",
          "description": "Number indicating the time (in milliseconds) that should \nexpire before a submenu is hidden when the user mouses out of a menu item \nheading in the direction of a submenu.  The value must be greater than or \nequal to the value specified for the \"showdelay\" configuration property.\nThis property is only applied when the \"position\" configuration property \nis set to dynamic and is automatically applied to all submenus."
        },
        "clicktohide": {
          "default": "true",
          "type": "Boolean",
          "description": "Boolean indicating if the menu will automatically be \nhidden if the user clicks outside of it.  This property is only \napplied when the \"position\" configuration property is set to dynamic \nand is automatically applied to all submenus."
        },
        "autosubmenudisplay": {
          "default": "true",
          "type": "Boolean",
          "description": "Boolean indicating if submenus are automatically made \nvisible when the user mouses over the menu's items."
        },
        "showdelay": {
          "default": "250",
          "type": "Number",
          "description": "Number indicating the time (in milliseconds) that should \nexpire before a submenu is made visible when the user mouses over \nthe menu's items.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic and is automatically applied \nto all submenus."
        },
        "effect": {
          "default": "null",
          "type": "Object",
          "description": "Object or array of objects representing the ContainerEffect \nclasses that are active for animating the container.  When set this \nproperty is automatically applied to all submenus."
        },
        "disabled": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the menu should be disabled.  \nDisabling a menu disables each of its items.  (Disabled menu items are \ndimmed and will not respond to user input or fire events.)  Disabled\nmenus have a corresponding \"disabled\" CSS class applied to their root\n<code>&#60;div&#62;</code> element."
        },
        "context": {
          "default": "null",
          "type": "Array",
          "description": "Array of context arguments for context-sensitive positioning.  \nThe format is: [id or element, element corner, context corner]. \nFor example, setting this property to [\"img1\", \"tl\", \"bl\"] would \nalign the Menu's top left corner to the context element's \nbottom left corner.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic."
        },
        "minscrollheight": {
          "default": "90",
          "type": "Number",
          "description": "Number defining the minimum threshold for the \"maxheight\" \nconfiguration property.  When set this property is automatically applied \nto all submenus."
        },
        "preventcontextoverlap": {
          "default": "true",
          "type": "Boolean",
          "description": "Boolean indicating whether or not a submenu should overlap its parent MenuItem \nwhen the \"constraintoviewport\" configuration property is set to \"true\"."
        },
        "fixedcenter": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the Menu should be anchored to the \ncenter of the viewport.  This property is only applied when the \n\"position\" configuration property is set to dynamic."
        },
        "visible": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating whether or not the menu is visible.  If \nthe menu's \"position\" configuration property is set to \"dynamic\" (the \ndefault), this property toggles the menu's <code>&#60;div&#62;</code> \nelement's \"visibility\" style property between \"visible\" (true) or \n\"hidden\" (false).  If the menu's \"position\" configuration property is \nset to \"static\" this property toggles the menu's \n<code>&#60;div&#62;</code> element's \"display\" style property \nbetween \"block\" (true) or \"none\" (false)."
        },
        "submenualignment": {
          "default": "[\"tl\",\"tr\"]",
          "type": "Array",
          "description": "Array defining how submenus should be aligned to their \nparent menu item. The format is: [itemCorner, submenuCorner]. By default\na submenu's top left corner is aligned to its parent menu item's top \nright corner."
        },
        "keepopen": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the menu should remain open when clicked."
        }
      },
      "properties": {
        "_aItemGroups": {
          "guessedname": "_aItemGroups",
          "private": "",
          "default": "[]",
          "type": "Array",
          "guessedtype": "property",
          "description": "Multi-dimensional Array representing the menu items as they\nare grouped in the menu."
        },
        "GROUP_TITLE_TAG_NAME": {
          "final": "",
          "guessedname": "GROUP_TITLE_TAG_NAME",
          "default": "H6",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the tagname of the HTML element used to \ntitle the menu's item groups."
        },
        "parent": {
          "guessedname": "parent",
          "default": "null",
          "type": "YAHOO.widget.MenuItem",
          "guessedtype": "property",
          "description": "Object reference to the menu's parent menu or menu item.  \nThis property can be set via the constructor using the configuration \nobject literal."
        },
        "_useHideDelay": {
          "guessedname": "_useHideDelay",
          "private": "",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean indicating if the \"mouseover\" and \"mouseout\" event \nhandlers used for hiding the menu via a call to \"YAHOO.lang.later\" have \nalready been assigned."
        },
        "CSS_CLASS_NAME": {
          "final": "",
          "guessedname": "CSS_CLASS_NAME",
          "default": "\"yuimenu\"",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the CSS class(es) to be applied to the \nmenu's <code>&#60;div&#62;</code> element."
        },
        "activeItem": {
          "guessedname": "activeItem",
          "default": "null",
          "type": "YAHOO.widget.MenuItem",
          "guessedtype": "property",
          "description": "Object reference to the item in the menu that has is selected."
        },
        "_bHandledMouseOutEvent": {
          "guessedname": "_bHandledMouseOutEvent",
          "private": "",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean indicating the current state of the menu's\n\"mouseout\" event."
        },
        "srcElement": {
          "guessedname": "srcElement",
          "default": "null",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement</a>|<a \nhref=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.\nhtml#ID-22445964\">HTMLDivElement</a>",
          "guessedtype": "property",
          "description": "Object reference to the HTML element (either \n<code>&#60;select&#62;</code> or <code>&#60;div&#62;</code>) used to \ncreate the menu."
        },
        "_bHandledMouseOverEvent": {
          "guessedname": "_bHandledMouseOverEvent",
          "private": "",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean indicating the current state of the menu's \n\"mouseover\" event."
        },
        "OFF_SCREEN_POSITION": {
          "final": "",
          "guessedname": "OFF_SCREEN_POSITION",
          "default": "\"-999em\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Array representing the default x and y position that a menu \nshould have when it is positioned outside the viewport by the \n\"poistionOffScreen\" method."
        },
        "_aListElements": {
          "guessedname": "_aListElements",
          "private": "",
          "default": "[]",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of <code>&#60;ul&#62;</code> elements, each of which is \nthe parent node for each item's <code>&#60;li&#62;</code> element."
        },
        "_bStopMouseEventHandlers": {
          "guessedname": "_bStopMouseEventHandlers",
          "private": "",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Stops \"mouseover,\" \"mouseout,\" and \"mousemove\" event handlers \nfrom executing."
        },
        "lazyLoad": {
          "guessedname": "lazyLoad",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean indicating if the menu's \"lazy load\" feature is \nenabled.  If set to \"true,\" initialization and rendering of the menu's \nitems will be deferred until the first time it is made visible.  This \nproperty should be set via the constructor using the configuration \nobject literal."
        },
        "itemData": {
          "guessedname": "itemData",
          "default": "null",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of items to be added to the menu.  The array can contain \nstrings representing the text for each item to be created, object literals \nrepresenting the menu item configuration properties, or MenuItem instances.  \nThis property should be set via the constructor using the configuration \nobject literal."
        },
        "ITEM_TYPE": {
          "final": "",
          "guessedname": "ITEM_TYPE",
          "default": "YAHOO.widget.MenuItem",
          "type": "YAHOO.widget.MenuItem",
          "guessedtype": "property",
          "description": "Object representing the type of menu item to instantiate and \nadd when parsing the child nodes (either <code>&#60;li&#62;</code> element, \n<code>&#60;optgroup&#62;</code> element or <code>&#60;option&#62;</code>) \nof the menu's source HTML element."
        },
        "_sClassName": {
          "guessedname": "_sClassName",
          "private": "",
          "default": "null",
          "type": "String",
          "guessedtype": "property",
          "description": "The current value of the \"classname\" configuration attribute."
        },
        "_nCurrentMouseX": {
          "guessedname": "_nCurrentMouseX",
          "private": "",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "The current x coordinate of the mouse inside the area of \nthe menu."
        },
        "_aGroupTitleElements": {
          "guessedname": "_aGroupTitleElements",
          "private": "",
          "default": "[]",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of HTML element used to title groups of menu items."
        }
      }
    },
    "YAHOO.util.History": {
      "shortname": "History",
      "methods": {
        "_updateIFrame": {
          "private": "",
          "description": "Update the IFrame with our new state.",
          "return": {
            "type": "boolean",
            "description": "true if successful. false otherwise."
          }
        },
        "register": {
          "guessedname": "register",
          "guessedtype": "function",
          "description": "Registers a new module.",
          "params": [
            {
              "name": "module",
              "type": "string",
              "description": " Non-empty string uniquely identifying the\nmodule you wish to register."
            },
            {
              "name": "initialState",
              "type": "string",
              "description": " The initial state of the specified\nmodule corresponding to its earliest history entry."
            },
            {
              "name": "onStateChange",
              "type": "function",
              "description": " Callback called when the\nstate of the specified module has changed."
            },
            {
              "name": "obj",
              "type": "object",
              "description": " An arbitrary object that will be passed as a\nparameter to the handler."
            },
            {
              "name": "overrideContext",
              "type": "boolean",
              "description": " If true, the obj passed in becomes the\nexecution scope of the listener."
            }
          ]
        },
        "_initialize": {
          "private": "",
          "description": "Finish up the initialization of the Browser History Manager."
        },
        "initialize": {
          "public": "",
          "guessedname": "initialize",
          "guessedtype": "function",
          "description": "Initializes the Browser History Manager. Call this method\nfrom a script block located right after the opening body tag.",
          "params": [
            {
              "name": "stateField",
              "type": "string|HTML Element",
              "description": " <input type=\"hidden\"> used\nto store application states. Must be in the static markup."
            },
            {
              "name": "histFrame",
              "type": "string|HTML Element",
              "description": " IFrame used to store\nthe history (only required on Internet Explorer)"
            }
          ]
        },
        "getCurrentState": {
          "public": "",
          "guessedname": "getCurrentState",
          "guessedtype": "function",
          "params": [
            {
              "name": "module",
              "type": "string",
              "description": " Non-empty string representing your module."
            }
          ],
          "description": "Returns the current state of the specified module.",
          "return": {
            "type": "string",
            "description": "The current state of the specified module."
          }
        },
        "navigate": {
          "public": "",
          "guessedname": "navigate",
          "guessedtype": "function",
          "params": [
            {
              "name": "module",
              "type": "string",
              "description": " Non-empty string representing your module."
            },
            {
              "name": "state",
              "type": "string",
              "description": " String representing the new state of the specified module."
            }
          ],
          "description": "Call this method when you want to store a new entry in the browser's history.",
          "return": {
            "type": "boolean",
            "description": "Indicates whether the new state was successfully added to the history."
          }
        },
        "onReady": {
          "guessedname": "onReady",
          "guessedtype": "function",
          "description": "Executes the supplied callback when the Browser History Manager is\nready. This will execute immediately if called after the Browser\nHistory Manager onLoad event has fired.",
          "params": [
            {
              "name": "fn",
              "type": "function",
              "description": " what to execute when the Browser History Manager is ready."
            },
            {
              "name": "obj",
              "type": "object",
              "description": " an optional object to be passed back as a parameter to fn."
            },
            {
              "name": "overrideContext",
              "type": "boolean|object",
              "description": " If true, the obj passed in becomes fn's execution scope."
            }
          ],
          "see": "onLoadEvent"
        },
        "_getHash": {
          "private": "",
          "description": "location.hash is a bit buggy on Opera. I have seen instances where\nnavigating the history using the back/forward buttons, and hence\nchanging the URL, would not change location.hash. That's ok, the\nimplementation of an equivalent is trivial.",
          "return": {
            "type": "string",
            "description": "The hash portion of the document's location"
          }
        },
        "_checkIframeLoaded": {
          "private": "",
          "description": "Periodically checks whether our internal IFrame is ready to be used."
        },
        "_storeStates": {
          "private": "",
          "description": "Stores all the registered modules' initial state and current state.\nOn Safari, we also store all the fully qualified states visited by\nthe application within a single browser session. The storage takes\nplace in the form field specified during initialization."
        },
        "getBookmarkedState": {
          "public": "",
          "guessedname": "getBookmarkedState",
          "guessedtype": "function",
          "params": [
            {
              "name": "module",
              "type": "string",
              "description": " Non-empty string representing your module."
            }
          ],
          "description": "Returns the state of a module according to the URL fragment\nidentifier. This method is useful to initialize your modules\nif your application was bookmarked from a particular state.",
          "return": {
            "type": "string",
            "description": "The bookmarked state of the specified module."
          }
        },
        "_handleFQStateChange": {
          "private": "",
          "description": "Sets the new currentState attribute of all modules depending on the new\nfully qualified state. Also notifies the modules which current state has\nchanged.",
          "params": [
            {
              "name": "fqstate",
              "type": "string",
              "description": " Fully qualified state"
            }
          ]
        },
        "multiNavigate": {
          "public": "",
          "guessedname": "multiNavigate",
          "guessedtype": "function",
          "params": [
            {
              "name": "states",
              "type": "object",
              "description": " Associative array of module-state pairs to set simultaneously."
            }
          ],
          "description": "Call this method when you want to store a new entry in the browser's history.",
          "return": {
            "type": "boolean",
            "description": "Indicates whether the new state was successfully added to the history."
          }
        },
        "getQueryStringParameter": {
          "public": "",
          "guessedname": "getQueryStringParameter",
          "guessedtype": "function",
          "params": [
            {
              "name": "paramName",
              "type": "string",
              "description": " Name of the parameter we want to look up."
            },
            {
              "name": "queryString",
              "type": "string",
              "description": " Optional URL to look at. If not specified,\nthis method uses the URL in the address bar."
            }
          ],
          "description": "Returns the value of the specified query string parameter.\nThis method is not used internally by the Browser History Manager.\nHowever, it is provided here as a helper since many applications\nusing the Browser History Manager will want to read the value of\nurl parameters to initialize themselves.",
          "return": {
            "type": "string",
            "description": "The value of the specified parameter, or null."
          }
        }
      },
      "name": "YAHOO.util.History",
      "guessedname": "History",
      "module": "history",
      "namespace": "YAHOO.util",
      "events": {
        "onLoadEvent": {
          "guessedname": "onLoadEvent",
          "guessedtype": "property",
          "description": "Fired when the Browser History Manager is ready. If you subscribe to\nthis event after the Browser History Manager has been initialized,\nit will not fire. Therefore, it is recommended to use the onReady\nmethod instead.",
          "see": "onReady"
        }
      },
      "constructors": [
        {
          "description": "The History class provides the ability to use the back/forward navigation\nbuttons in a DHTML application. It also allows a DHTML application to\nbe bookmarked in a specific state."
        }
      ],
      "guessedtype": "function",
      "description": "The History class provides the ability to use the back/forward navigation\nbuttons in a DHTML application. It also allows a DHTML application to\nbe bookmarked in a specific state.",
      "file": "history.js",
      "properties": {
        "_stateField": {
          "guessedname": "_stateField",
          "private": "",
          "default": "null",
          "type": "HTMLInputElement|HTMLTextAreaElement",
          "guessedtype": "property",
          "description": "INPUT field (with type=\"hidden\" or type=\"text\") or TEXTAREA.\nThis field keeps the value of the initial state, current state\nthe list of all states across pages within a single browser session."
        },
        "_histFrame": {
          "guessedname": "_histFrame",
          "private": "",
          "default": "null",
          "type": "HTMLIFrameElement",
          "guessedtype": "property",
          "description": "Our hidden IFrame used to store the browsing history."
        },
        "_fqstates": {
          "guessedname": "_fqstates",
          "private": "",
          "default": "[]",
          "type": "array",
          "guessedtype": "property",
          "description": "List of fully qualified states. This is used only by Safari."
        },
        "_initialized": {
          "guessedname": "_initialized",
          "private": "",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag used to tell whether YAHOO.util.History.initialize has been called."
        },
        "_modules": {
          "guessedname": "_modules",
          "private": "",
          "default": "[]",
          "type": "array",
          "guessedtype": "property",
          "description": "List of registered modules."
        }
      }
    },
    "YAHOO.widget.Chart": {
      "shortname": "Chart",
      "methods": {
        "_getAltText": {
          "guessedname": "_getAltText",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for altText attribute."
        },
        "YAHOO.widget.Chart.getFunctionReference": {
          "private": "",
          "guessedname": "getFunctionReference",
          "static": "",
          "guessedtype": "function",
          "description": "Uses YAHOO.widget.Chart.createProxyFunction to return string\nreference to a function."
        },
        "_setCategoryNames": {
          "guessedname": "_setCategoryNames",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the categoryNames attribute."
        },
        "YAHOO.widget.Chart.createProxyFunction": {
          "private": "",
          "guessedname": "createProxyFunction",
          "static": "",
          "guessedtype": "function",
          "description": "Creates a globally accessible function that wraps a function reference.\nReturns the proxy function's name as a string for use by the SWF through\nExternalInterface."
        },
        "_setAltText": {
          "guessedname": "_setAltText",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for altText attribute."
        },
        "_getPolling": {
          "guessedname": "_getPolling",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for the polling attribute."
        },
        "_setRequest": {
          "guessedname": "_setRequest",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the request attribute."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the Chart instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the Chart instance."
          }
        },
        "YAHOO.widget.Chart.removeProxyFunction": {
          "private": "",
          "guessedname": "removeProxyFunction",
          "static": "",
          "guessedtype": "function",
          "description": "Removes a function created with createProxyFunction()"
        },
        "setStyle": {
          "guessedname": "setStyle",
          "guessedtype": "function",
          "description": "Sets a single style value on the Chart instance.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "  Name of the Chart style value to change."
            },
            {
              "name": "value",
              "type": "Object",
              "description": "  New value to pass to the Chart style."
            }
          ]
        },
        "_getRequest": {
          "guessedname": "_getRequest",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for the request attribute."
        },
        "_eventHandler": {
          "guessedname": "_eventHandler",
          "private": "",
          "guessedtype": "function",
          "description": "Handles swfReady event from SWF."
        },
        "_getSeriesDefs": {
          "guessedname": "_getSeriesDefs",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for the series attribute."
        },
        "_setPolling": {
          "guessedname": "_setPolling",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the polling attribute."
        },
        "setSeriesStyles": {
          "guessedname": "setSeriesStyles",
          "guessedtype": "function",
          "description": "Sets the styles on all series in the Chart.",
          "params": [
            {
              "name": "styles",
              "type": "Array",
              "description": "  Initializer for all Chart series styles."
            }
          ]
        },
        "_loadDataHandler": {
          "guessedname": "_loadDataHandler",
          "private": "",
          "guessedtype": "function",
          "description": "Called when the DataSource receives new data. The series definitions are used\nto build a data provider for the SWF chart."
        },
        "_setDataTipFunction": {
          "guessedname": "_setDataTipFunction",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the dataTipFunction attribute."
        },
        "_getSWFURL": {
          "guessedname": "_getSWFURL",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for swfURL attribute."
        },
        "setStyles": {
          "guessedname": "setStyles",
          "guessedtype": "function",
          "description": "Resets all styles on the Chart instance.",
          "params": [
            {
              "name": "styles",
              "type": "Object",
              "description": "  Initializer for all Chart styles."
            }
          ]
        },
        "_initAttributes": {
          "guessedname": "_initAttributes",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the attributes."
        },
        "_getCategoryNames": {
          "guessedname": "_getCategoryNames",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for the categoryNames attribute."
        },
        "_setSeriesDefs": {
          "guessedname": "_setSeriesDefs",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the series attribute."
        },
        "_getDataSource": {
          "guessedname": "_getDataSource",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for the dataSource attribute."
        },
        "refreshData": {
          "guessedname": "refreshData",
          "guessedtype": "function",
          "description": "Sends (or resends) the request to the DataSource."
        },
        "_loadHandler": {
          "guessedname": "_loadHandler",
          "private": "",
          "guessedtype": "function",
          "description": "Called when the SWF is ready for communication. Sets the type, initializes\nthe styles, and sets the DataSource."
        },
        "_setDataSource": {
          "guessedname": "_setDataSource",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the dataSource attribute."
        },
        "_setLegendLabelFunction": {
          "guessedname": "_setLegendLabelFunction",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the legendLabelFunction attribute."
        }
      },
      "name": "YAHOO.widget.Chart",
      "guessedname": "Chart",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "events": {
        "beforeAltTextChange": {
          "name": "beforeAltTextChange",
          "description": "Fires before the value for the configuration attribute 'altText' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeVersionChange": {
          "name": "beforeVersionChange",
          "description": "Fires before the value for the configuration attribute 'version' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "requestChange": {
          "name": "requestChange",
          "description": "Fires when the value for the configuration attribute 'request' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePollingChange": {
          "name": "beforePollingChange",
          "description": "Fires before the value for the configuration attribute 'polling' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCategoryNamesChange": {
          "name": "beforeCategoryNamesChange",
          "description": "Fires before the value for the configuration attribute 'categoryNames' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDataSourceChange": {
          "name": "beforeDataSourceChange",
          "description": "Fires before the value for the configuration attribute 'dataSource' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRequestChange": {
          "name": "beforeRequestChange",
          "description": "Fires before the value for the configuration attribute 'request' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeWmodeChange": {
          "name": "beforeWmodeChange",
          "description": "Fires before the value for the configuration attribute 'wmode' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "itemMouseOverEvent": {
          "description": "Fires when the user moves the mouse over the bounds of an item renderer in the chart.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.item",
              "type": "Object",
              "description": "  The data displayed by the renderer"
            },
            {
              "name": "event.index",
              "type": "Number",
              "description": "  The position within the series that the item appears."
            },
            {
              "name": "event.seriesIndex",
              "type": "Number",
              "description": "  The position within the series definition that the series appears."
            },
            {
              "name": "event.x",
              "type": "Number",
              "description": "  The horizontal position of the mouse, relative to the SWF."
            },
            {
              "name": "event.y",
              "type": "Number",
              "description": "  The vertical position of the mouse, relative to the SWF."
            }
          ]
        },
        "itemDoubleClickEvent": {
          "description": "Fires when the user double-clicks an item renderer in the chart with the mouse.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.item",
              "type": "Object",
              "description": "  The data displayed by the renderer"
            },
            {
              "name": "event.index",
              "type": "Number",
              "description": "  The position within the series that the item appears."
            },
            {
              "name": "event.seriesIndex",
              "type": "Number",
              "description": "  The position within the series definition that the series appears."
            },
            {
              "name": "event.x",
              "type": "Number",
              "description": "  The horizontal position of the mouse, relative to the SWF."
            },
            {
              "name": "event.y",
              "type": "Number",
              "description": "  The vertical position of the mouse, relative to the SWF."
            }
          ]
        },
        "dataSourceChange": {
          "name": "dataSourceChange",
          "description": "Fires when the value for the configuration attribute 'dataSource' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDataTipFunctionChange": {
          "name": "beforeDataTipFunctionChange",
          "description": "Fires before the value for the configuration attribute 'dataTipFunction' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeExpressInstallChange": {
          "name": "beforeExpressInstallChange",
          "description": "Fires before the value for the configuration attribute 'expressInstall' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "expressInstallChange": {
          "name": "expressInstallChange",
          "description": "Fires when the value for the configuration attribute 'expressInstall' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "categoryNamesChange": {
          "name": "categoryNamesChange",
          "description": "Fires when the value for the configuration attribute 'categoryNames' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSwfURLChange": {
          "name": "beforeSwfURLChange",
          "description": "Fires before the value for the configuration attribute 'swfURL' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLegendLabelFunctionChange": {
          "name": "beforeLegendLabelFunctionChange",
          "description": "Fires before the value for the configuration attribute 'legendLabelFunction' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "backgroundColorChange": {
          "name": "backgroundColorChange",
          "description": "Fires when the value for the configuration attribute 'backgroundColor' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "dataTipFunctionChange": {
          "name": "dataTipFunctionChange",
          "description": "Fires when the value for the configuration attribute 'dataTipFunction' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "legendLabelFunctionChange": {
          "name": "legendLabelFunctionChange",
          "description": "Fires when the value for the configuration attribute 'legendLabelFunction' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeBackgroundColorChange": {
          "name": "beforeBackgroundColorChange",
          "description": "Fires before the value for the configuration attribute 'backgroundColor' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "altTextChange": {
          "name": "altTextChange",
          "description": "Fires when the value for the configuration attribute 'altText' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSeriesChange": {
          "name": "beforeSeriesChange",
          "description": "Fires before the value for the configuration attribute 'series' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "seriesChange": {
          "name": "seriesChange",
          "description": "Fires when the value for the configuration attribute 'series' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "swfURLChange": {
          "name": "swfURLChange",
          "description": "Fires when the value for the configuration attribute 'swfURL' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "itemClickEvent": {
          "description": "Fires when the user clicks an item renderer in the chart with the mouse.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.item",
              "type": "Object",
              "description": "  The data displayed by the renderer"
            },
            {
              "name": "event.index",
              "type": "Number",
              "description": "  The position within the series that the item appears."
            },
            {
              "name": "event.seriesIndex",
              "type": "Number",
              "description": "  The position within the series definition that the series appears."
            },
            {
              "name": "event.x",
              "type": "Number",
              "description": "  The horizontal position of the mouse, relative to the SWF."
            },
            {
              "name": "event.y",
              "type": "Number",
              "description": "  The vertical position of the mouse, relative to the SWF."
            }
          ]
        },
        "itemDragStartEvent": {
          "description": "Fires when the user presses the mouse down on an item to initiate a drag action.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.item",
              "type": "Object",
              "description": "  The data displayed by the renderer"
            },
            {
              "name": "event.index",
              "type": "Number",
              "description": "  The position within the series that the item appears."
            },
            {
              "name": "event.seriesIndex",
              "type": "Number",
              "description": "  The position within the series definition that the series appears."
            },
            {
              "name": "event.x",
              "type": "Number",
              "description": "  The horizontal position of the mouse, relative to the SWF."
            },
            {
              "name": "event.y",
              "type": "Number",
              "description": "  The vertical position of the mouse, relative to the SWF."
            }
          ]
        },
        "itemMouseOutEvent": {
          "description": "Fires when the user moves the mouse out of the bounds of an item renderer in the chart.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.item",
              "type": "Object",
              "description": "  The data displayed by the renderer"
            },
            {
              "name": "event.index",
              "type": "Number",
              "description": "  The position within the series that the item appears."
            },
            {
              "name": "event.seriesIndex",
              "type": "Number",
              "description": "  The position within the series definition that the series appears."
            },
            {
              "name": "event.x",
              "type": "Number",
              "description": "  The horizontal position of the mouse, relative to the SWF."
            },
            {
              "name": "event.y",
              "type": "Number",
              "description": "  The vertical position of the mouse, relative to the SWF."
            }
          ]
        },
        "versionChange": {
          "name": "versionChange",
          "description": "Fires when the value for the configuration attribute 'version' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "itemDragEndEvent": {
          "description": "Fires when the user releases the mouse during a drag action.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.item",
              "type": "Object",
              "description": "  The data displayed by the renderer"
            },
            {
              "name": "event.index",
              "type": "Number",
              "description": "  The position within the series that the item appears."
            },
            {
              "name": "event.seriesIndex",
              "type": "Number",
              "description": "  The position within the series definition that the series appears."
            },
            {
              "name": "event.x",
              "type": "Number",
              "description": "  The horizontal position of the mouse, relative to the SWF."
            },
            {
              "name": "event.y",
              "type": "Number",
              "description": "  The vertical position of the mouse, relative to the SWF."
            }
          ]
        },
        "wmodeChange": {
          "name": "wmodeChange",
          "description": "Fires when the value for the configuration attribute 'wmode' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pollingChange": {
          "name": "pollingChange",
          "description": "Fires when the value for the configuration attribute 'polling' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "itemDragEvent": {
          "description": "Fires when the user moves the mouse during a drag action.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.item",
              "type": "Object",
              "description": "  The data displayed by the renderer"
            },
            {
              "name": "event.index",
              "type": "Number",
              "description": "  The position within the series that the item appears."
            },
            {
              "name": "event.seriesIndex",
              "type": "Number",
              "description": "  The position within the series definition that the series appears."
            },
            {
              "name": "event.x",
              "type": "Number",
              "description": "  The horizontal position of the mouse, relative to the SWF."
            },
            {
              "name": "event.y",
              "type": "Number",
              "description": "  The vertical position of the mouse, relative to the SWF."
            }
          ]
        },
        "contentReady": {
          "description": "Fires when the SWF is initialized and communication is possible."
        }
      },
      "constructors": [
        {
          "description": "Chart class for the YUI Charts widget.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "  The char type. May be \"line\", \"column\", \"bar\", or \"pie\""
            },
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "dataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "attributes",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Chart class for the YUI Charts widget.",
      "file": "Chart.js",
      "configs": {
        "legendLabelFunction": {
          "type": "String",
          "description": "The string representation of a globally-accessible function\nthat may be called by the SWF to format the labels of a Chart's legend."
        },
        "categoryNames": {
          "type": "Array",
          "description": "Defines the names of the categories to be displayed in the Chart.."
        },
        "dataTipFunction": {
          "type": "String",
          "description": "The string representation of a globally-accessible function\nthat may be called by the SWF to generate the datatip text for a Chart's item."
        },
        "swfURL": {
          "type": "String",
          "description": "Absolute or relative URL to the SWF displayed by the Chart. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."
        },
        "altText": {
          "type": "String",
          "description": "The alternative text to provide for screen readers and other assistive technology."
        },
        "series": {
          "type": "Array",
          "description": "Defines the series to be displayed by the Chart."
        },
        "expressInstall": {
          "type": "String",
          "description": "URL pointing to a SWF file that handles Flash Player's express\ninstall feature. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."
        },
        "wmode": {
          "type": "String",
          "description": "Sets the window mode of the Flash Player control. May be\n\"window\", \"opaque\", or \"transparent\". Only available in the constructor\nbecause it may not be set after Flash Player has been embedded in the page."
        },
        "request": {
          "type": "String",
          "description": "Request to be sent to the Chart's DataSource."
        },
        "version": {
          "type": "String",
          "description": "Minimum required version for the SWF file. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."
        },
        "polling": {
          "type": "Number",
          "description": "A numeric value indicating the number of milliseconds between\npolling requests to the DataSource."
        },
        "dataSource": {
          "type": "DataSource",
          "description": "The DataSource instance to display in the Chart."
        },
        "backgroundColor": {
          "type": "String",
          "description": "The background color of the SWF. Only available in the constructor because it may not be\nset after Flash Player has been embedded in the page."
        }
      },
      "uses": [
        "YAHOO.util.AttributeProvider"
      ],
      "properties": {
        "_pollingID": {
          "private": "",
          "guessedname": "_pollingID",
          "type": "Number",
          "guessedtype": "property",
          "description": "The id returned from the DataSource's setInterval function."
        },
        "Chart.SWFURL": {
          "final": "",
          "guessedname": "SWFURL",
          "private": "",
          "default": "\"assets/charts.swf\"",
          "static": "",
          "guessedtype": "property",
          "description": "Storage for the dataTipFunction attribute."
        },
        "_swf": {
          "guessedname": "_swf",
          "private": "",
          "guessedtype": "property",
          "description": "A reference to the embedded SWF file."
        },
        "_dataTipFunction": {
          "private": "",
          "guessedname": "_dataTipFunction",
          "type": "String",
          "guessedtype": "property",
          "description": "Stores a reference to the dataTipFunction created by\nYAHOO.widget.Chart.createProxyFunction()"
        },
        "_dataSource": {
          "guessedname": "_dataSource",
          "private": "",
          "guessedtype": "property",
          "description": "Storage for the dataSource attribute."
        },
        "_swfEmbed": {
          "private": "",
          "guessedname": "_swfEmbed",
          "type": "swf",
          "guessedtype": "property",
          "description": "The javascript wrapper for the swf object"
        },
        "_legendLabelFunction": {
          "private": "",
          "guessedname": "_legendLabelFunction",
          "type": "String",
          "guessedtype": "property",
          "description": "Stores a reference to the legendLabelFunction created by\nYAHOO.widget.Chart.createProxyFunction()"
        },
        "_pollingInterval": {
          "private": "",
          "guessedname": "_pollingInterval",
          "type": "Number",
          "guessedtype": "property",
          "description": "The time, in ms, between requests for data."
        },
        "_swfURL": {
          "private": "",
          "guessedname": "_swfURL",
          "type": "String",
          "guessedtype": "property",
          "description": "The URL of the SWF file."
        },
        "_initialized": {
          "private": "",
          "guessedname": "_initialized",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates whether the SWF has been initialized and is ready\nto communicate with JavaScript"
        },
        "_id": {
          "private": "",
          "guessedname": "_id",
          "type": "String",
          "guessedtype": "property",
          "description": "The id of this instance."
        },
        "_attributes": {
          "private": "",
          "guessedname": "_attributes",
          "type": "Object",
          "guessedtype": "property",
          "description": "The initializing attributes are stored here until the SWF is ready."
        },
        "_type": {
          "private": "",
          "guessedname": "_type",
          "type": "String",
          "guessedtype": "property",
          "description": "The type of this chart instance."
        },
        "_request": {
          "guessedname": "_request",
          "private": "",
          "guessedtype": "property",
          "description": "Storage for the request attribute."
        },
        "_seriesDefs": {
          "guessedname": "_seriesDefs",
          "private": "",
          "guessedtype": "property",
          "description": "Storage for the series attribute."
        },
        "_containerID": {
          "private": "",
          "guessedname": "_containerID",
          "type": "String",
          "guessedtype": "property",
          "description": "The ID of the containing DIV."
        },
        "_seriesFunctions": {
          "private": "",
          "guessedname": "_seriesFunctions",
          "type": "Array",
          "guessedtype": "property",
          "description": "Stores references to series function values created by\nYAHOO.widget.Chart.createProxyFunction()"
        },
        "proxyFunctionCount": {
          "private": "",
          "guessedname": "proxyFunctionCount",
          "static": "",
          "guessedtype": "property",
          "description": "The number of proxy functions that have been created."
        }
      }
    },
    "YAHOO.widget.Logger": {
      "shortname": "Logger",
      "methods": {
        "_createNewSource": {
          "private": "",
          "guessedname": "_createNewSource",
          "guessedtype": "function",
          "description": "Creates a new source of log messages and fires sourceCreateEvent.",
          "params": [
            {
              "name": "sSource",
              "type": "String",
              "description": "  Source name."
            }
          ]
        },
        "_isNewSource": {
          "guessedname": "_isNewSource",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "sSource",
              "type": "String",
              "description": "  Source name."
            }
          ],
          "description": "Checks to see if a source already exists.",
          "return": {
            "type": "Boolean",
            "description": "Returns true if source is unknown, else returns false."
          }
        },
        "_printToBrowserConsole": {
          "private": "",
          "guessedname": "_printToBrowserConsole",
          "guessedtype": "function",
          "description": "Outputs a log message to global console.log() function.",
          "params": [
            {
              "name": "oEntry",
              "type": "Object",
              "description": "  Log entry object."
            }
          ]
        },
        "_onWindowError": {
          "private": "",
          "guessedname": "_onWindowError",
          "guessedtype": "function",
          "description": "Handles logging of messages due to window error events.",
          "params": [
            {
              "name": "sMsg",
              "type": "String",
              "description": "  The error message."
            },
            {
              "name": "sUrl",
              "type": "String",
              "description": "  URL of the error."
            },
            {
              "name": "sLine",
              "type": "String",
              "description": "  Line number of the error."
            }
          ]
        },
        "log": {
          "guessedname": "log",
          "guessedtype": "function",
          "description": "Saves a log message to the stack and fires newLogEvent. If the log message is\nassigned to an unknown category, creates a new category. If the log message is\nfrom an unknown source, creates a new source.  If browser console is enabled,\noutputs the log message to browser console.",
          "params": [
            {
              "name": "sMsg",
              "type": "String",
              "description": "  The log message."
            },
            {
              "name": "sCategory",
              "type": "String",
              "description": "  Category of log message, or null."
            },
            {
              "name": "sSource",
              "type": "String",
              "description": "  Source of LogWriter, or null if global."
            }
          ]
        },
        "getStartTime": {
          "guessedname": "getStartTime",
          "guessedtype": "function",
          "description": "Public accessor to internal start time.",
          "return": {
            "type": "Date",
            "description": "Internal date of when Logger singleton was initialized."
          }
        },
        "disableBrowserConsole": {
          "guessedname": "disableBrowserConsole",
          "guessedtype": "function",
          "description": "Disables output to the browser's global console.log() function, which is used\nby the Firebug extension to Firefox as well as Safari."
        },
        "enableBrowserConsole": {
          "guessedname": "enableBrowserConsole",
          "guessedtype": "function",
          "description": "Enables output to the browser's global console.log() function, which is used\nby the Firebug extension to Firefox as well as Safari."
        },
        "_createNewCategory": {
          "private": "",
          "guessedname": "_createNewCategory",
          "guessedtype": "function",
          "description": "Creates a new category of log messages and fires categoryCreateEvent.",
          "params": [
            {
              "name": "sCategory",
              "type": "String",
              "description": "  Category name."
            }
          ]
        },
        "handleWindowErrors": {
          "guessedname": "handleWindowErrors",
          "guessedtype": "function",
          "description": "Surpresses native JavaScript errors and outputs to console. By default,\nLogger does not handle JavaScript window error events.\nNB: Not all browsers support the window.onerror event."
        },
        "reset": {
          "guessedname": "reset",
          "guessedtype": "function",
          "description": "Resets internal stack and startTime, enables Logger, and fires logResetEvent."
        },
        "getStack": {
          "guessedname": "getStack",
          "guessedtype": "function",
          "description": "Public accessor to internal stack of log message objects.",
          "return": {
            "type": "Object[]",
            "description": "Array of log message objects."
          }
        },
        "unhandleWindowErrors": {
          "guessedname": "unhandleWindowErrors",
          "guessedtype": "function",
          "description": "Unsurpresses native JavaScript errors. By default,\nLogger does not handle JavaScript window error events.\nNB: Not all browsers support the window.onerror event."
        },
        "_isNewCategory": {
          "guessedname": "_isNewCategory",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "sCategory",
              "type": "String",
              "description": "  Category name."
            }
          ],
          "description": "Checks to see if a category has already been created.",
          "return": {
            "type": "Boolean",
            "description": "Returns true if category is unknown, else returns false."
          }
        }
      },
      "name": "YAHOO.widget.Logger",
      "guessedname": "Logger",
      "module": "logger",
      "namespace": "YAHOO.widget",
      "static": "",
      "events": {
        "newLogEvent": {
          "guessedname": "newLogEvent",
          "guessedtype": "property",
          "description": "Fired when a new log message has been created.",
          "params": [
            {
              "name": "sMsg",
              "type": "String",
              "description": "  Log message."
            }
          ]
        },
        "categoryCreateEvent": {
          "guessedname": "categoryCreateEvent",
          "guessedtype": "property",
          "description": "Fired when a new category has been created.",
          "params": [
            {
              "name": "sCategory",
              "type": "String",
              "description": "  Category name."
            }
          ]
        },
        "logResetEvent": {
          "guessedname": "logResetEvent",
          "guessedtype": "property",
          "description": "Fired when the Logger has been reset has been created."
        },
        "sourceCreateEvent": {
          "guessedname": "sourceCreateEvent",
          "guessedtype": "property",
          "description": "Fired when a new source has been named.",
          "params": [
            {
              "name": "sSource",
              "type": "String",
              "description": "  Source name."
            }
          ]
        }
      },
      "guessedtype": "property",
      "description": "The singleton Logger class provides core log management functionality. Saves\nlogs written through the global YAHOO.log function or written by a LogWriter\ninstance. Provides access to logs for reading by a LogReader instance or\nnative browser console such as the Firebug extension to Firefox or Safari's\nJavaScript console through integration with the console.log() method.",
      "file": "Logger.js",
      "properties": {
        "_lastTime": {
          "private": "",
          "static": "",
          "type": "Date",
          "description": "Timestamp of last logged message."
        },
        "loggerEnabled": {
          "default": "true",
          "static": "",
          "type": "Boolean",
          "description": "True if Logger is enabled, false otherwise."
        },
        "_browserConsoleEnabled": {
          "private": "",
          "default": "false",
          "static": "",
          "type": "Boolean",
          "description": "Internal property to track whether output to browser console is enabled."
        },
        "maxStackEntries": {
          "default": "2500",
          "static": "",
          "type": "Number",
          "description": "Upper limit on size of internal stack."
        },
        "sources": {
          "default": "[\"global\"]",
          "static": "",
          "type": "String[]",
          "description": "Array of sources."
        },
        "categories": {
          "default": "[\"info\",\"warn\",\"error\",\"time\",\"window\"]",
          "static": "",
          "type": "String[]",
          "description": "Array of categories."
        },
        "_stack": {
          "private": "",
          "static": "",
          "type": "Array",
          "description": "Array to hold all log messages."
        },
        "_startTime": {
          "private": "",
          "static": "",
          "type": "Date",
          "description": "Static timestamp of Logger initialization."
        }
      }
    },
    "YAHOO.util.StorageEngineKeyed": {
      "shortname": "StorageEngineKeyed",
      "methods": {
        "_indexOfKey": {
          "guessedname": "_indexOfKey",
          "guessedtype": "function",
          "protected": "",
          "description": "Evaluates if a key exists in the keys array; indexOf does not work in all flavors of IE.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key to evaluate."
            }
          ]
        },
        "_addKey": {
          "guessedname": "_addKey",
          "guessedtype": "function",
          "protected": "",
          "description": "Adds the key to the set.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key to evaluate."
            }
          ]
        },
        "_removeKey": {
          "guessedname": "_removeKey",
          "guessedtype": "function",
          "protected": "",
          "description": "Removes a key from the keys array.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key to remove."
            }
          ]
        }
      },
      "name": "YAHOO.util.StorageEngineKeyed",
      "guessedname": "StorageEngineKeyed",
      "module": "Storage",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "The StorageEngineKeyed class implements the interface necessary for managing keys."
        }
      ],
      "guessedtype": "function",
      "description": "The StorageEngineKeyed class implements the interface necessary for managing keys.",
      "file": "StorageEngineKeyed.js",
      "extend": "YAHOO.util.Storage",
      "properties": {
        "_keys": {
          "guessedname": "_keys",
          "type": "{Array}",
          "guessedtype": "property",
          "protected": "",
          "description": "A collection of keys applicable to the current location. This should never be edited by the developer."
        },
        "_keyMap": {
          "guessedname": "_keyMap",
          "type": "{Object}",
          "guessedtype": "property",
          "protected": "",
          "description": "A map of keys to their applicable position in keys array. This should never be edited by the developer."
        }
      }
    },
    "YAHOO.tool.TestSuite": {
      "shortname": "TestSuite",
      "methods": {
        "add": {
          "guessedname": "add",
          "guessedtype": "function",
          "description": "Adds a test suite or test case to the test suite.",
          "params": [
            {
              "name": "testObject",
              "type": "YAHOO.tool.TestSuite||YAHOO.tool.TestCase",
              "description": " The test suite or test case to add."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "XML": {
          "guessedname": "XML",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "result",
              "type": "Object",
              "description": " The results object created by TestRunner."
            }
          ],
          "description": "Returns test results formatted as an XML string.",
          "return": {
            "type": "String",
            "description": "An XML-formatted string of results."
          }
        },
        "tearDown": {
          "guessedname": "tearDown",
          "guessedtype": "function",
          "description": "Function to run after each test is executed.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "setUp": {
          "guessedname": "setUp",
          "guessedtype": "function",
          "description": "Function to run before each test is executed.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "JSON": {
          "guessedname": "JSON",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "result",
              "type": "Object",
              "description": " The results object created by TestRunner."
            }
          ],
          "description": "Returns test results formatted as a JSON string. Requires JSON utility.",
          "return": {
            "type": "String",
            "description": "An XML-formatted string of results."
          }
        }
      },
      "name": "YAHOO.tool.TestSuite",
      "guessedname": "TestSuite",
      "module": "yuitest",
      "namespace": "YAHOO.tool",
      "constructors": [
        {
          "description": "A test suite that can contain a collection of TestCase and TestSuite objects.",
          "params": [
            {
              "name": "data",
              "type": "String||Object",
              "description": " The name of the test suite or an object containing\na name property as well as setUp and tearDown methods."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A test suite that can contain a collection of TestCase and TestSuite objects.",
      "file": "TestSuite.js",
      "properties": {
        "name": {
          "type": "String",
          "description": "The name of the test suite."
        }
      }
    },
    "YAHOO.widget.CheckboxCellEditor": {
      "shortname": "CheckboxCellEditor",
      "superclass": "YAHOO.widget.BaseCellEditor",
      "methods": {
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Sets focus in CheckboxCellEditor."
        },
        "getInputValue": {
          "guessedname": "getInputValue",
          "guessedtype": "function",
          "description": "Retrieves input value from CheckboxCellEditor."
        },
        "handleDisabledBtns": {
          "guessedname": "handleDisabledBtns",
          "guessedtype": "function",
          "description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them."
        },
        "resetForm": {
          "guessedname": "resetForm",
          "guessedtype": "function",
          "description": "Resets CheckboxCellEditor UI to initial state."
        },
        "renderForm": {
          "guessedname": "renderForm",
          "guessedtype": "function",
          "description": "Render a form with input(s) type=checkbox."
        }
      },
      "name": "YAHOO.widget.CheckboxCellEditor",
      "extends": "YAHOO.widget.BaseCellEditor",
      "guessedname": "CheckboxCellEditor",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The CheckboxCellEditor class provides functionality for inline editing\nDataTable cell data with checkboxes.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal of configs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The CheckboxCellEditor class provides functionality for inline editing\nDataTable cell data with checkboxes.",
      "file": "CellEditor.js",
      "properties": {
        "checkboxOptions": {
          "guessedname": "checkboxOptions",
          "type": "String[] | Object[]",
          "guessedtype": "property",
          "description": "Array of checkbox values. Can either be a simple array (e.g., [\"red\",\"green\",\"blue\"])\nor a an array of objects (e.g., [{label:\"red\", value:\"#FF0000\"},\n{label:\"green\", value:\"#00FF00\"}, {label:\"blue\", value:\"#0000FF\"}])."
        },
        "value": {
          "guessedname": "value",
          "type": "String[]",
          "guessedtype": "property",
          "description": "Array of checked values"
        },
        "checkboxes": {
          "guessedname": "checkboxes",
          "type": "HTMLElement[]",
          "guessedtype": "property",
          "description": "Reference to the checkbox elements."
        }
      }
    },
    "YAHOO.widget.ScrollingDataTable": {
      "shortname": "ScrollingDataTable",
      "superclass": "YAHOO.widget.DataTable",
      "methods": {
        "_runRenderChain": {
          "guessedname": "_runRenderChain",
          "private": "",
          "guessedtype": "function",
          "description": "Internal wrapper calls run() on render Chain instance."
        },
        "_syncScroll": {
          "guessedname": "_syncScroll",
          "private": "",
          "guessedtype": "function",
          "description": "Syncs padding around scrollable tables, including Column header right-padding\nand container width and height."
        },
        "_focusEl": {
          "private": "",
          "guessedname": "_focusEl",
          "guessedtype": "function",
          "description": "Sets focus on the given element.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  Element."
            }
          ]
        },
        "_onTheadKeydown": {
          "private": "",
          "guessedname": "_onTheadKeydown",
          "guessedtype": "function",
          "description": "Handles keydown events on the THEAD element.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The key event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.ScrollingDataTable",
              "description": "  ScrollingDataTable instance."
            }
          ]
        },
        "_initThEl": {
          "private": "",
          "guessedname": "_initThEl",
          "guessedtype": "function",
          "description": "SDT changes ID so as not to duplicate the accessibility TH IDs.",
          "params": [
            {
              "name": "elTh",
              "type": "HTMLElement",
              "description": "  TH element reference."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column object."
            }
          ]
        },
        "_initBdTheadEl": {
          "guessedname": "_initBdTheadEl",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "elTable",
              "type": "HTMLElement",
              "description": "  TABLE element into which to create THEAD."
            }
          ],
          "description": "Initializes body THEAD element.",
          "return": {
            "type": "HTMLElement",
            "description": "Initialized THEAD element."
          }
        },
        "_initDomElements": {
          "private": "",
          "guessedname": "_initDomElements",
          "guessedtype": "function",
          "description": "Initializes DOM elements for a ScrollingDataTable, including creation of\ntwo separate TABLE elements.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement | String} HTML DIV element by reference or ID. \nreturn {Boolean",
              "description": "  False in case of error, otherwise true"
            }
          ]
        },
        "_destroyBdTheadEl": {
          "guessedname": "_destroyBdTheadEl",
          "private": "",
          "guessedtype": "function",
          "description": "Destroy's the DataTable body THEAD element, if available."
        },
        "_initBdThEl": {
          "private": "",
          "guessedname": "_initBdThEl",
          "guessedtype": "function",
          "description": "Populates TH element for the body THEAD element.",
          "params": [
            {
              "name": "elTh",
              "type": "HTMLElement",
              "description": "  TH element reference."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column object."
            }
          ]
        },
        "_onScroll": {
          "private": "",
          "guessedname": "_onScroll",
          "guessedtype": "function",
          "description": "Syncs scrolltop and scrollleft of all TABLEs.",
          "params": [
            {
              "name": "e",
              "type": "HTMLEvent",
              "description": "  The scroll event."
            },
            {
              "name": "oSelf",
              "type": "YAHOO.widget.ScrollingDataTable",
              "description": "  ScrollingDataTable instance."
            }
          ]
        },
        "getHdContainerEl": {
          "guessedname": "getHdContainerEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the DataTable's fixed header container element.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to DIV element."
          }
        },
        "showTableMessage": {
          "guessedname": "showTableMessage",
          "guessedtype": "function",
          "description": "Displays message within secondary TBODY.",
          "params": [
            {
              "name": "sHTML",
              "type": "String",
              "description": "  (optional) Value for innerHTMlang."
            },
            {
              "name": "sClassName",
              "type": "String",
              "description": "  (optional) Classname."
            }
          ]
        },
        "_initContainerEl": {
          "private": "",
          "guessedname": "_initContainerEl",
          "guessedtype": "function",
          "description": "Initializes the DataTable outer container element and creates inner header\nand body container elements.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement | String",
              "description": "  HTML DIV element by reference or ID."
            }
          ]
        },
        "_initTbodyEl": {
          "private": "",
          "guessedname": "_initTbodyEl",
          "guessedtype": "function",
          "description": "Initializes ScrollingDataTable TBODY element for data",
          "params": [
            {
              "name": "elTable",
              "type": "HTMLElement",
              "description": "  TABLE element into which to create TBODY ."
            }
          ]
        },
        "_initTheadEl": {
          "private": "",
          "guessedname": "_initTheadEl",
          "guessedtype": "function",
          "description": "Initializes ScrollingDataTable THEAD elements into the two inner containers.",
          "params": [
            {
              "name": "elHdTable",
              "type": "HTMLElement",
              "description": "  (optional) Fixed header TABLE element reference."
            },
            {
              "name": "elTable",
              "type": "HTMLElement",
              "description": "  (optional) TABLE element reference."
            }
          ]
        },
        "removeColumn": {
          "guessedname": "removeColumn",
          "guessedtype": "function",
          "description": "Removes given Column. NOTE: You cannot remove nested Columns. You can only remove\nnon-nested Columns, and top-level parent Columns (which will remove all\nchildren Columns).",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "oColumn  Removed Column instance."
          }
        },
        "insertColumn": {
          "guessedname": "insertColumn",
          "guessedtype": "function",
          "description": "Inserts given Column at the index if given, otherwise at the end. NOTE: You\ncan only add non-nested Columns and top-level parent Columns. You cannot add\na nested Column to an existing parent.",
          "params": [
            {
              "name": "oColumn",
              "type": "Object | YAHOO.widget.Column",
              "description": "  Object literal Column\ndefinition or a Column instance."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  (optional) New tree index."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "oColumn  Inserted Column instance."
          }
        },
        "clearScrollPositions": {
          "guessedname": "clearScrollPositions",
          "private": "",
          "guessedtype": "function",
          "description": "Clears stored scroll positions to interrupt the automatic restore mechanism.\nUseful for setting scroll positions programmatically rather than as part of\nthe post-render cleanup process."
        },
        "getHdTableEl": {
          "guessedname": "getHdTableEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the DataTable's fixed header TABLE element.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TABLE element."
          }
        },
        "setColumnWidth": {
          "guessedname": "setColumnWidth",
          "guessedtype": "function",
          "description": "Sets given Column to given pixel width. If new width is less than minWidth\nwidth, sets to minWidth. Updates oColumn.width value.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "nWidth",
              "type": "Number",
              "description": "  New width in pixels."
            }
          ]
        },
        "_syncScrollOverhang": {
          "guessedname": "_syncScrollOverhang",
          "private": "",
          "guessedtype": "function",
          "description": "Adds/removes Column header overhang as necesary."
        },
        "_destroyContainerEl": {
          "private": "",
          "guessedname": "_destroyContainerEl",
          "guessedtype": "function",
          "description": "Destroy's the DataTable outer and inner container elements, if available.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement",
              "description": "  Reference to the container element."
            }
          ]
        },
        "_initTableEl": {
          "guessedname": "_initTableEl",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes ScrollingDataTable TABLE elements into the two inner containers."
        },
        "_syncScrollX": {
          "guessedname": "_syncScrollX",
          "private": "",
          "guessedtype": "function",
          "description": "Snaps container height for x-scrolling tables in IE. Syncs message TBODY width."
        },
        "_storeScrollPositions": {
          "guessedname": "_storeScrollPositions",
          "private": "",
          "guessedtype": "function",
          "description": "Stores scroll positions so they can be restored after a render."
        },
        "_syncScrollY": {
          "guessedname": "_syncScrollY",
          "private": "",
          "guessedtype": "function",
          "description": "Snaps container width for y-scrolling tables."
        },
        "_validateColumnWidth": {
          "private": "",
          "guessedname": "_validateColumnWidth",
          "guessedtype": "function",
          "description": "Helper function calculates and sets a validated width for a Column in a ScrollingDataTable.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "elTd",
              "type": "HTMLElement",
              "description": "  TD element to validate against."
            }
          ]
        },
        "validateColumnWidths": {
          "guessedname": "validateColumnWidths",
          "guessedtype": "function",
          "description": "For one or all Columns of a ScrollingDataTable, when Column is not hidden,\nand width is not set, syncs widths of header and body cells and \nvalidates that width against minWidth and/or maxAutoWidth as necessary.",
          "params": [
            {
              "name": "oArg.column",
              "type": "YAHOO.widget.Column",
              "description": "  (optional) One Column to validate. If null, all Columns' widths are validated."
            }
          ]
        },
        "onColumnChange": {
          "guessedname": "_onColumnChange",
          "guessedtype": "function",
          "description": "Handles Column mutations",
          "params": [
            {
              "name": "oArgs",
              "type": "Object",
              "description": "  Custom Event data."
            }
          ]
        },
        "disable": {
          "guessedname": "disable",
          "guessedtype": "function",
          "description": "Disables ScrollingDataTable UI."
        },
        "scrollTo": {
          "guessedname": "scrollTo",
          "guessedtype": "function",
          "description": "Scrolls to given row or cell",
          "params": [
            {
              "name": "to",
              "type": "YAHOO.widget.Record | HTMLElement ",
              "description": "  Itme to scroll to."
            }
          ]
        },
        "_retoreScrollPositions": {
          "guessedname": "_restoreScrollPositions",
          "private": "",
          "guessedtype": "function",
          "description": "Restores scroll positions to stored value."
        },
        "getBdTableEl": {
          "guessedname": "getBdTableEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the DataTable's scrolling body TABLE element.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to TABLE element."
          }
        },
        "getBdContainerEl": {
          "guessedname": "getBdContainerEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the DataTable's scrolling body container element.",
          "return": {
            "type": "HTMLElement",
            "description": "Reference to DIV element."
          }
        },
        "initAttributes": {
          "private": "",
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Implementation of Element's abstract method. Sets up config values.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal definition of configuration values."
            }
          ]
        },
        "reorderColumn": {
          "guessedname": "reorderColumn",
          "guessedtype": "function",
          "description": "Removes given Column and inserts into given tree index. NOTE: You\ncan only reorder non-nested Columns and top-level parent Columns. You cannot\nreorder a nested Column to an existing parent.",
          "params": [
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  New tree index."
            }
          ]
        },
        "_initCaptionEl": {
          "private": "",
          "guessedname": "_initCaptionEl",
          "guessedtype": "function",
          "description": "Creates HTML markup CAPTION element.",
          "params": [
            {
              "name": "sCaption",
              "type": "String",
              "description": "  Text for caption."
            }
          ]
        },
        "_setOverhangValue": {
          "private": "",
          "guessedname": "_setOverhangValue",
          "guessedtype": "function",
          "description": "Sets Column header overhang to given width.",
          "params": [
            {
              "name": "nBorderWidth",
              "type": "Number",
              "description": "  Value of new border for overhang."
            }
          ]
        },
        "_destroyHdTableEl": {
          "guessedname": "_destroyHdTableEl",
          "private": "",
          "guessedtype": "function",
          "description": "Destroy's the DataTable head TABLE element, if available."
        }
      },
      "name": "YAHOO.widget.ScrollingDataTable",
      "extends": "YAHOO.widget.DataTable",
      "guessedname": "ScrollingDataTable",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "events": {
        "widthChange": {
          "name": "widthChange",
          "description": "Fires when the value for the configuration attribute 'width' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tableScrollEvent": {
          "description": "Fired when a fixed scrolling DataTable has a scroll.",
          "params": [
            {
              "name": "oArgs.event",
              "type": "HTMLEvent",
              "description": "  The event object."
            },
            {
              "name": "oArgs.target",
              "type": "HTMLElement",
              "description": "  The DataTable's CONTAINER element (in IE)\nor the DataTable's TBODY element (everyone else)."
            }
          ]
        },
        "COLOR_COLUMNFILLERChange": {
          "name": "COLOR_COLUMNFILLERChange",
          "description": "Fires when the value for the configuration attribute 'COLOR_COLUMNFILLER' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "heightChange": {
          "name": "heightChange",
          "description": "Fires when the value for the configuration attribute 'height' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHeightChange": {
          "name": "beforeHeightChange",
          "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeWidthChange": {
          "name": "beforeWidthChange",
          "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCOLOR_COLUMNFILLERChange": {
          "name": "beforeCOLOR_COLUMNFILLERChange",
          "description": "Fires before the value for the configuration attribute 'COLOR_COLUMNFILLER' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The ScrollingDataTable class extends the DataTable class to provide\nfunctionality for x-scrolling, y-scrolling, and xy-scrolling.",
          "params": [
            {
              "name": "elContainer",
              "type": "HTMLElement",
              "description": "  Container element for the TABLE."
            },
            {
              "name": "aColumnDefs",
              "type": "Object[]",
              "description": "  Array of object literal Column definitions."
            },
            {
              "name": "oDataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "oConfigs",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The ScrollingDataTable class extends the DataTable class to provide\nfunctionality for x-scrolling, y-scrolling, and xy-scrolling.",
      "file": "ScrollingDataTable.js",
      "configs": {
        "COLOR_COLUMNFILLER": {
          "default": "\"#F2F2F2\"",
          "type": "String",
          "description": "CSS color value assigned to header filler on scrollable tables."
        },
        "height": {
          "type": "String",
          "description": "Table body height for scrollable tables, not including headers (e.g., \"40em\")."
        },
        "width": {
          "type": "String",
          "description": "Table width for scrollable tables (e.g., \"40em\")."
        }
      },
      "properties": {
        "_elBdContainer": {
          "private": "",
          "guessedname": "_elBdContainer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Container for scrolling body TABLE element."
        },
        "_elBdThead": {
          "private": "",
          "guessedname": "_elBdThead",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Body THEAD element."
        },
        "DataTable.CLASS_BODY": {
          "final": "",
          "guessedname": "CLASS_BODY",
          "default": "\"yui-dt-bd\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to inner DataTable body container."
        },
        "_elHdContainer": {
          "private": "",
          "guessedname": "_elHdContainer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Container for fixed header TABLE element."
        },
        "_bScrollbarX": {
          "private": "",
          "guessedname": "_bScrollbarX",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if x-scrollbar is currently visible."
        },
        "DataTable.CLASS_HEADER": {
          "final": "",
          "guessedname": "CLASS_HEADER",
          "default": "\"yui-dt-hd\"",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name assigned to inner DataTable header container."
        },
        "_elTmpContainer": {
          "private": "",
          "guessedname": "_elTmpContainer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Offscreen container to temporarily clone SDT for auto-width calculation."
        },
        "_elHdTable": {
          "private": "",
          "guessedname": "_elHdTable",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Fixed header TABLE element."
        },
        "_elTmpTable": {
          "private": "",
          "guessedname": "_elTmpTable",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Offscreen TABLE element for auto-width calculation."
        }
      }
    },
    "YAHOO.util.StorageEvent": {
      "shortname": "StorageEvent",
      "name": "YAHOO.util.StorageEvent",
      "guessedname": "StorageEvent",
      "module": "Storage",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "The StorageEvent class manages the storage events by emulating the HTML 5 implementation.",
          "params": [
            {
              "name": "storageArea",
              "type": "Object",
              "description": "  Required. The Storage object that was affected."
            },
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key being changed; DOMString in HTML 5 spec."
            },
            {
              "name": "oldValue",
              "type": "String",
              "description": "  Required. The old value of the key being changed; DOMString in HTML 5 spec."
            },
            {
              "name": "newValue",
              "type": "String",
              "description": "  Required. The new value of the key being changed; DOMString in HTML 5 spec."
            },
            {
              "name": "type",
              "type": "String",
              "description": "  Required. The storage event type."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The StorageEvent class manages the storage events by emulating the HTML 5 implementation.",
      "file": "StorageEvent.js",
      "properties": {
        "oldValue": {
          "guessedname": "oldValue",
          "readonly": "",
          "static": "",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The 'oldValue' attribute represents the old value of the key being changed."
        },
        "url": {
          "guessedname": "url",
          "readonly": "",
          "static": "",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The 'url' attribute represents the address of the document whose key changed."
        },
        "type": {
          "guessedname": "type",
          "readonly": "",
          "static": "",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "The 'type' attribute represents the Storage event type."
        },
        "storageArea": {
          "guessedname": "storageArea",
          "readonly": "",
          "static": "",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "The 'storageArea' attribute represents the Storage object that was affected."
        },
        "newValue": {
          "guessedname": "newValue",
          "readonly": "",
          "static": "",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The 'newValue' attribute represents the new value of the key being changed."
        },
        "source": {
          "guessedname": "source",
          "readonly": "",
          "static": "",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "The 'source' attribute represents the WindowProxy object of the browsing context of the document whose key changed."
        },
        "key": {
          "guessedname": "key",
          "readonly": "",
          "static": "",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The 'key' attribute represents the key being changed."
        }
      }
    },
    "YAHOO.tool.TestReporter": {
      "shortname": "TestReporter",
      "methods": {
        "report": {
          "guessedname": "report",
          "guessedtype": "function",
          "description": "Sends the report to the server.",
          "params": [
            {
              "name": "results",
              "type": "Object",
              "description": " The results object created by TestRunner."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Cleans up the memory associated with the TestReporter, removing DOM elements\nthat were created.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "addField": {
          "guessedname": "addField",
          "guessedtype": "function",
          "description": "Adds a field to the form that submits the results.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the field."
            },
            {
              "name": "value",
              "type": "Variant",
              "description": " The value of the field."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_convertToISOString": {
          "guessedname": "_convertToISOString",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The date to convert."
            }
          ],
          "description": "Convert a date into ISO format.\nFrom Douglas Crockford's json2.js",
          "return": {
            "type": "String",
            "description": "An ISO-formatted date string"
          }
        }
      },
      "name": "YAHOO.tool.TestReporter",
      "guessedname": "TestReporter",
      "module": "yuitest",
      "namespace": "YAHOO.tool",
      "constructors": [
        {
          "description": "An object capable of sending test results to a server.",
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": " The URL to submit the results to."
            },
            {
              "name": "format",
              "type": "Function",
              "description": " (Optiona) A function that outputs the results in a specific format.\nDefault is YAHOO.tool.TestFormat.XML."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "An object capable of sending test results to a server.",
      "file": "TestReporter.js",
      "properties": {
        "format": {
          "type": "Function",
          "description": "The formatting function to call when submitting the data."
        },
        "_fields": {
          "private": "",
          "type": "Object",
          "description": "Extra fields to submit with the request."
        },
        "url": {
          "type": "String",
          "description": "The URL to submit the data to."
        },
        "_iframe": {
          "private": "",
          "type": "HTMLIFrameElement",
          "description": "Iframe used as a target for form submission."
        },
        "_form": {
          "private": "",
          "type": "HTMLFormElement",
          "description": "The form element used to submit the results."
        }
      }
    },
    "YAHOO.widget.SWF": {
      "shortname": "SWF",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the SWF instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the SWF instance."
          }
        },
        "eventHandler": {
          "private": "",
          "guessedname": "eventHandler",
          "guessedtype": "function",
          "description": "Handles an event coming from within the SWF and delegate it\nto a specific instance of SWF.",
          "params": [
            {
              "name": "swfid",
              "type": "String",
              "description": "  the id of the SWF dispatching the event"
            },
            {
              "name": "event",
              "type": "Object",
              "description": "  the event being transmitted."
            }
          ]
        },
        "callSWF": {
          "guessedname": "callSWF",
          "guessedtype": "function",
          "description": "Calls a specific function exposed by the SWF's\nExternalInterface.",
          "params": [
            {
              "name": "func",
              "type": "String",
              "description": "  the name of the function to call"
            },
            {
              "name": "args",
              "type": "Object",
              "description": "  the set of arguments to pass to the function."
            }
          ]
        }
      },
      "name": "YAHOO.widget.SWF",
      "extends": "YAHOO.util.Element",
      "guessedname": "SWF",
      "module": "swf",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "Creates the SWF instance and keeps the configuration data",
          "params": [
            {
              "name": "id",
              "type": "String|HTMLElement",
              "description": " The id of the element, or the element itself that the SWF will be inserted into.  \nThe width and height of the SWF will be set to the width and height of this container element."
            },
            {
              "name": "swfURL",
              "type": "String",
              "description": " The URL of the SWF to be embedded into the page."
            },
            {
              "name": "p_oAttributes",
              "type": "Object",
              "description": " (optional) Configuration parameters for the Flash application and values for Flashvars\nto be passed to the SWF."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Creates the SWF instance and keeps the configuration data",
      "file": "swf.js",
      "properties": {
        "_instances": {
          "private": "",
          "guessedname": "_instances",
          "type": "Object",
          "guessedtype": "property",
          "description": "The static collection of all instances of the SWFs on the page."
        },
        "_id": {
          "guessedname": "_id",
          "type": "String",
          "guessedtype": "property",
          "description": "The DOM id of this instance of the element. Automatically generated."
        }
      }
    },
    "YAHOO.widget.Overlay": {
      "shortname": "Overlay",
      "superclass": "YAHOO.widget.Module",
      "methods": {
        "enforceConstraints": {
          "guessedname": "enforceConstraints",
          "guessedtype": "function",
          "description": "The default event handler executed when the moveEvent is fired, if the \n\"constraintoviewport\" is set to true.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "syncIframe": {
          "guessedname": "syncIframe",
          "guessedtype": "function",
          "description": "Syncronizes the size and position of iframe shim to that of its \ncorresponding Overlay instance."
        },
        "_autoFillOnHeightChange": {
          "guessedname": "_autoFillOnHeightChange",
          "guessedtype": "function",
          "protected": "",
          "description": "The default custom event handler executed when the overlay's height is changed, \nif the autofillheight property has been set.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The event type"
            },
            {
              "name": "args",
              "type": "Array",
              "description": " The array of arguments passed to event subscribers"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The header, body or footer element which is to be resized to fill\nout the containers height"
            }
          ]
        },
        "hideMacGeckoScrollbars": {
          "guessedname": "hideMacGeckoScrollbars",
          "guessedtype": "function",
          "description": "Adds a CSS class (\"hide-scrollbars\") and removes a CSS class \n(\"show-scrollbars\") to the Overlay to fix a bug in Gecko on Mac OS X \n(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)"
        },
        "center": {
          "guessedname": "center",
          "guessedtype": "function",
          "description": "Centers the container in the viewport."
        },
        "YAHOO.widget.Overlay.windowScrollHandler": {
          "guessedname": "windowScrollHandler",
          "static": "",
          "guessedtype": "function",
          "description": "The DOM event handler used to fire the CustomEvent for window scroll",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The DOM scroll event"
            }
          ]
        },
        "fillHeight": {
          "guessedname": "fillHeight",
          "guessedtype": "function",
          "description": "<p>\nSets the height on the provided header, body or footer element to \nfill out the height of the container. It determines the height of the \ncontainers content box, based on it's configured height value, and \nsets the height of the autofillheight element to fill out any \nspace remaining after the other standard module element heights \nhave been accounted for.\n</p>\n<p><strong>NOTE:</strong> This method is not designed to work if an explicit \nheight has not been set on the container, since for an \"auto\" height container, \nthe heights of the header/body/footer will drive the height of the container.</p>",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element which should be resized to fill out the height\nof the container element."
            }
          ]
        },
        "_getConstrainedPos": {
          "guessedname": "_getConstrainedPos",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "pos",
              "type": "String",
              "description": " The coordinate which needs to be constrained, either \"x\" or \"y\""
            },
            {
              "name": "The",
              "type": "Number",
              "description": " coordinate value which needs to be constrained"
            }
          ],
          "description": "Shared implementation method for getConstrainedX and getConstrainedY.\n<p>\nGiven a coordinate value, returns the calculated coordinate required to \nposition the Overlay if it is to be constrained to the viewport, based on the \ncurrent element size, viewport dimensions, scroll values and preventoverlap \nsettings\n</p>",
          "return": {
            "type": "Number",
            "description": "The constrained coordinate value"
          }
        },
        "getConstrainedX": {
          "guessedname": "getConstrainedX",
          "guessedtype": "function",
          "description": "Given x coordinate value, returns the calculated x coordinate required to \nposition the Overlay if it is to be constrained to the viewport, based on the \ncurrent element size, viewport dimensions and scroll values.",
          "params": [
            {
              "name": "x",
              "type": "Number",
              "description": " The X coordinate value to be constrained"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The constrained x coordinate"
          }
        },
        "configX": {
          "guessedname": "configX",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"x\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "configConstrainToViewport": {
          "guessedname": "configConstrainToViewport",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"constraintoviewport\" \nproperty is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for \nthe property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "_getPreciseHeight": {
          "guessedname": "_getPreciseHeight",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": ""
            }
          ],
          "description": "Returns the sub-pixel height of the el, using getBoundingClientRect, if available,\notherwise returns the offsetHeight",
          "return": {
            "type": "Float",
            "description": "The sub-pixel height if supported by the browser, else the rounded height."
          }
        },
        "doCenterOnDOMEvent": {
          "guessedname": "doCenterOnDOMEvent",
          "guessedtype": "function",
          "description": "Fixed center event handler used for centering on scroll/resize, but only if \nthe overlay is visible and, if \"fixedcenter\" is set to \"contained\", only if \nthe overlay fits within the viewport."
        },
        "getConstrainedY": {
          "guessedname": "getConstrainedY",
          "guessedtype": "function",
          "description": "Given y coordinate value, returns the calculated y coordinate required to \nposition the Overlay if it is to be constrained to the viewport, based on the \ncurrent element size, viewport dimensions and scroll values.",
          "params": [
            {
              "name": "y",
              "type": "Number",
              "description": " The Y coordinate value to be constrained"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The constrained y coordinate"
          }
        },
        "configY": {
          "guessedname": "configY",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"y\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "_primeXYFromDOM": {
          "guessedname": "_primeXYFromDOM",
          "guessedtype": "function",
          "protected": "",
          "description": "Set's the container's XY value from DOM if not already set.\nDiffers from syncPosition, in that the XY value is only sync'd with DOM if \nnot already set. The method also refire's the XY config property event, so any\nbeforeMove, Move event listeners are invoked."
        },
        "onDomResize": {
          "guessedname": "onDomResize",
          "guessedtype": "function",
          "description": "Event handler fired when the resize monitor element is resized.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The resize DOM event"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object"
            }
          ]
        },
        "_preventOverlap": {
          "guessedname": "_preventOverlap",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "pos",
              "type": "String",
              "description": " The coordinate to prevent overlap for, either \"x\" or \"y\"."
            },
            {
              "name": "contextEl",
              "type": "HTMLElement",
              "description": " The context element"
            },
            {
              "name": "overlaySize",
              "type": "Number",
              "description": " The related overlay dimension value (for \"x\", the width, for \"y\", the height)"
            },
            {
              "name": "viewportSize",
              "type": "Number",
              "description": " The related viewport dimension value (for \"x\", the width, for \"y\", the height)"
            },
            {
              "name": "docScroll",
              "type": "Object",
              "description": "  The related document scroll value (for \"x\", the scrollLeft, for \"y\", the scrollTop)"
            }
          ],
          "description": "Helper method, used to position the Overlap to prevent overlap with the \ncontext element (used when preventcontextoverlap is enabled)",
          "return": {
            "type": "Number",
            "description": "The new coordinate value which was set to prevent overlap"
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a String representation of the object.",
          "return": {
            "type": "String",
            "description": "The string representation of the Overlay."
          }
        },
        "YAHOO.widget.Overlay.windowResizeHandler": {
          "guessedname": "windowResizeHandler",
          "static": "",
          "guessedtype": "function",
          "description": "The DOM event handler used to fire the CustomEvent for window resize",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The DOM resize event"
            }
          ]
        },
        "stackIframe": {
          "guessedname": "stackIframe",
          "guessedtype": "function",
          "description": "Sets the zindex of the iframe shim, if it exists, based on the zindex of\nthe Overlay element. The zindex of the iframe is set to be one less \nthan the Overlay element's zindex.\n<p>NOTE: This method will not bump up the zindex of the Overlay element\nto ensure that the iframe shim has a non-negative zindex.\nIf you require the iframe zindex to be 0 or higher, the zindex of \nthe Overlay element should be set to a value greater than 0, before \nthis method is called.\n</p>"
        },
        "moveTo": {
          "guessedname": "moveTo",
          "guessedtype": "function",
          "description": "Moves the Overlay to the specified position. This function is  \nidentical to calling this.cfg.setProperty(\"xy\", [x,y]);",
          "params": [
            {
              "name": "x",
              "type": "Number",
              "description": " The Overlay's new x position"
            },
            {
              "name": "y",
              "type": "Number",
              "description": " The Overlay's new y position"
            }
          ]
        },
        "configzIndex": {
          "guessedname": "configzIndex",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"zIndex\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "_findTriggerCE": {
          "private": "",
          "guessedname": "_findTriggerCE",
          "guessedtype": "function",
          "description": "Helper method to locate the custom event instance for the event name string\npassed in. As a convenience measure, any custom events passed in are returned.",
          "params": [
            {
              "name": "t",
              "type": "String|CustomEvent",
              "description": " Either a CustomEvent, or event type (e.g. \"windowScroll\") for which a \ncustom event instance needs to be looked up from the Overlay._TRIGGER_MAP."
            }
          ]
        },
        "forceContainerRedraw": {
          "guessedname": "forceContainerRedraw",
          "guessedtype": "function",
          "description": "Can be used to force the container to repaint/redraw it's contents.\n<p>\nBy default applies and then removes a 1px bottom margin through the \napplication/removal of a \"yui-force-redraw\" class.\n</p>\n<p>\nIt is currently used by Overlay to force a repaint for webkit \nbrowsers, when centering.\n</p>"
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the Overlay element from the DOM and sets all child \nelements to null."
        },
        "syncPosition": {
          "guessedname": "syncPosition",
          "guessedtype": "function",
          "description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the \nPanel's position in the DOM. This is primarily used to update  \nposition information during drag & drop."
        },
        "_processTriggers": {
          "guessedname": "_processTriggers",
          "guessedtype": "function",
          "protected": "",
          "description": "Utility method that subscribes or unsubscribes the given \nfunction from the list of trigger events provided.",
          "params": [
            {
              "name": "triggers",
              "type": "Array[String|CustomEvent]",
              "description": " An array of either CustomEvents, event type strings \n(e.g. \"beforeShow\", \"windowScroll\") to/from which the provided function should be \nsubscribed/unsubscribed respectively."
            },
            {
              "name": "mode",
              "type": "String",
              "description": " Either \"subscribe\" or \"unsubscribe\", specifying whether or not\nwe are subscribing or unsubscribing trigger listeners"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The function to be subscribed/unsubscribed to/from the trigger event.\nContext is always set to the overlay instance, and no additional object argument \nget passed to the subscribed function."
            }
          ]
        },
        "fitsInViewport": {
          "guessedname": "fitsInViewport",
          "guessedtype": "function",
          "description": "Determines if the Overlay (including the offset value defined by Overlay.VIEWPORT_OFFSET) \nwill fit entirely inside the viewport, in both dimensions - width and height.",
          "return": {
            "type": "",
            "description": "boolean true if the Overlay will fit, false if not"
          }
        },
        "_validateAutoFillHeight": {
          "guessedname": "_validateAutoFillHeight",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "String",
              "description": ""
            }
          ],
          "description": "autofillheight validator. Verifies that the autofill value is either null \nor one of the strings : \"body\", \"header\" or \"footer\".",
          "return": {
            "type": "",
            "description": "true, if valid, false otherwise"
          }
        },
        "getConstrainedXY": {
          "guessedname": "getConstrainedXY",
          "guessedtype": "function",
          "description": "Given x, y coordinate values, returns the calculated coordinates required to \nposition the Overlay if it is to be constrained to the viewport, based on the \ncurrent element size, viewport dimensions and scroll values.",
          "params": [
            {
              "name": "x",
              "type": "Number",
              "description": " The X coordinate value to be constrained"
            },
            {
              "name": "y",
              "type": "Number",
              "description": " The Y coordinate value to be constrained"
            }
          ],
          "return": {
            "type": "Array",
            "description": "The constrained x and y coordinates at index 0 and 1 respectively;"
          }
        },
        "showIframe": {
          "guessedname": "showIframe",
          "guessedtype": "function",
          "description": "Shows the iframe shim, if it has been enabled."
        },
        "_getComputedHeight": {
          "guessedname": "_getComputedHeight",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element for which the content height needs to be determined"
            }
          ],
          "description": "Determines the content box height of the given element (height of the element, without padding or borders) in pixels.",
          "return": {
            "type": "Number",
            "description": "The content box height of the given element, or null if it could not be determined."
          }
        },
        "configIframe": {
          "guessedname": "configIframe",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"iframe\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "configWidth": {
          "guessedname": "configWidth",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"width\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "configContext": {
          "guessedname": "configContext",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"context\" property\nis changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "hideIframe": {
          "guessedname": "hideIframe",
          "guessedtype": "function",
          "description": "Hides the iframe shim, if it has been enabled."
        },
        "align": {
          "guessedname": "align",
          "guessedtype": "function",
          "description": "Aligns the Overlay to its context element using the specified corner \npoints (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, \nand BOTTOM_RIGHT.",
          "params": [
            {
              "name": "elementAlign",
              "type": "String",
              "description": "  The String representing the corner of \nthe Overlay that should be aligned to the context element"
            },
            {
              "name": "contextAlign",
              "type": "String",
              "description": "  The corner of the context element \nthat the elementAlign corner should stick to."
            },
            {
              "name": "xyOffset",
              "type": "Number[]",
              "description": " Optional. A 2 element array specifying the x and y pixel offsets which should be applied\nafter aligning the element and context corners. For example, passing in [5, -10] for this value, would offset the \nOverlay by 5 pixels along the X axis (horizontally) and -10 pixels along the Y axis (vertically) after aligning the specified corners."
            }
          ]
        },
        "configAutoFillHeight": {
          "guessedname": "configAutoFillHeight",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"autofillheight\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "configVisible": {
          "guessedname": "configVisible",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"visible\" property is \nchanged.  This method is responsible for firing showEvent\nand hideEvent.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration\nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "configXY": {
          "guessedname": "configXY",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"xy\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Overlay initialization method, which is executed for Overlay and  \nall of its subclasses. This method is automatically called by the \nconstructor, and  sets up all DOM references for pre-existing markup, \nand creates required markup if it is not already present.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Overlay <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Overlay"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal \ncontaining the configuration that should be set for this Overlay. \nSee configuration documentation for more details."
            }
          ]
        },
        "configFixedCenter": {
          "guessedname": "configFixedCenter",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"fixedcenter\" property \nis changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "showMacGeckoScrollbars": {
          "guessedname": "showMacGeckoScrollbars",
          "guessedtype": "function",
          "description": "Adds a CSS class (\"show-scrollbars\") and removes a CSS class \n(\"hide-scrollbars\") to the Overlay to fix a bug in Gecko on Mac OS X \n(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)"
        },
        "configHeight": {
          "guessedname": "configHeight",
          "guessedtype": "function",
          "description": "The default event handler fired when the \"height\" property is changed.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "initEvents": {
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initializes the custom events for Overlay which are fired  \nautomatically at appropriate times by the Overlay class."
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the class's configurable properties which can be changed \nusing the Overlay's Config object (cfg)."
        },
        "_alignOnTrigger": {
          "guessedname": "_alignOnTrigger",
          "guessedtype": "function",
          "protected": "",
          "description": "Custom Event handler for context alignment triggers. Invokes the align method",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The event type (not used by the default implementation)"
            },
            {
              "name": "args",
              "type": "Any[]",
              "description": " The array of arguments for the trigger event (not used by the default implementation)"
            }
          ]
        },
        "bringToTop": {
          "guessedname": "bringToTop",
          "guessedtype": "function",
          "description": "Places the Overlay on top of all other instances of \nYAHOO.widget.Overlay."
        },
        "_setDomVisibility": {
          "guessedname": "_setDomVisibility",
          "guessedtype": "function",
          "protected": "",
          "description": "Internal implementation to set the visibility of the overlay in the DOM.",
          "params": [
            {
              "name": "visible",
              "type": "boolean",
              "description": " Whether to show or hide the Overlay's outer element"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Overlay",
      "extends": "YAHOO.widget.Module",
      "guessedname": "Overlay",
      "module": "container",
      "namespace": "YAHOO.widget",
      "events": {
        "beforeMoveEvent": {
          "guessedname": "beforeMoveEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired before the Overlay is moved.",
          "params": [
            {
              "name": "x",
              "type": "Number",
              "description": " x coordinate"
            },
            {
              "name": "y",
              "type": "Number",
              "description": " y coordinate"
            }
          ]
        },
        "YAHOO.widget.Overlay.windowScrollEvent": {
          "guessedname": "windowScrollEvent",
          "guessedtype": "property",
          "description": "A singleton CustomEvent used for reacting to the DOM event for \nwindow scroll"
        },
        "YAHOO.widget.Overlay.windowResizeEvent": {
          "guessedname": "windowResizeEvent",
          "guessedtype": "property",
          "description": "A singleton CustomEvent used for reacting to the DOM event for\nwindow resize"
        },
        "moveEvent": {
          "guessedname": "moveEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after the Overlay is moved.",
          "params": [
            {
              "name": "x",
              "type": "Number",
              "description": " x coordinate"
            },
            {
              "name": "y",
              "type": "Number",
              "description": " y coordinate"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Overlay is a Module that is absolutely positioned above the page flow. It \nhas convenience methods for positioning and sizing, as well as options for \ncontrolling zIndex and constraining the Overlay's position to the current \nvisible viewport. Overlay also contains a dynamicly generated IFRAME which \nis placed beneath it for Internet Explorer 6 and 5.x so that it will be \nproperly rendered above SELECT elements.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Overlay <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Overlay"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal containing \nthe configuration that should be set for this Overlay. See configuration \ndocumentation for more details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Overlay is a Module that is absolutely positioned above the page flow. It \nhas convenience methods for positioning and sizing, as well as options for \ncontrolling zIndex and constraining the Overlay's position to the current \nvisible viewport. Overlay also contains a dynamicly generated IFRAME which \nis placed beneath it for Internet Explorer 6 and 5.x so that it will be \nproperly rendered above SELECT elements.",
      "file": "Overlay.js",
      "configs": {
        "xy": {
          "default": "null",
          "type": "Number[]",
          "description": "An array with the absolute x and y positions of the Overlay"
        },
        "x": {
          "default": "null",
          "type": "Number",
          "description": "The absolute x-coordinate position of the Overlay"
        },
        "zIndex": {
          "default": "null",
          "type": "Number",
          "description": "CSS z-index of the Overlay."
        },
        "y": {
          "default": "null",
          "type": "Number",
          "description": "The absolute y-coordinate position of the Overlay"
        },
        "constraintoviewport": {
          "default": "false",
          "type": "Boolean",
          "description": "True if the Overlay should be prevented from being positioned \nout of the viewport."
        },
        "iframe": {
          "default": "true for IE6 and below, false for all other browsers.",
          "type": "Boolean",
          "description": "Boolean indicating whether or not the Overlay should \nhave an IFRAME shim; used to prevent SELECT elements from \npoking through an Overlay instance in IE6.  When set to \"true\", \nthe iframe shim is created when the Overlay instance is intially\nmade visible."
        },
        "autofillheight": {
          "default": "null",
          "type": "String",
          "description": "Standard module element which should auto fill out the height of the Overlay if the height config property is set.\nSupported values are \"header\", \"body\", \"footer\"."
        },
        "height": {
          "default": "null",
          "type": "String",
          "description": "CSS height of the Overlay."
        },
        "context": {
          "default": "null",
          "type": "Array",
          "description": "<p>\nThe array of context arguments for context-sensitive positioning. \n</p>\n<p>\nThe format of the array is: <code>[contextElementOrId, overlayCorner, contextCorner, arrayOfTriggerEvents (optional), xyOffset (optional)]</code>, the\nthe 5 array elements described in detail below:\n</p>\n<dl>\n<dt>contextElementOrId &#60;String|HTMLElement&#62;</dt>\n<dd>A reference to the context element to which the overlay should be aligned (or it's id).</dd>\n<dt>overlayCorner &#60;String&#62;</dt>\n<dd>The corner of the overlay which is to be used for alignment. This corner will be aligned to the \ncorner of the context element defined by the \"contextCorner\" entry which follows. Supported string values are: \n\"tr\" (top right), \"tl\" (top left), \"br\" (bottom right), or \"bl\" (bottom left).</dd>\n<dt>contextCorner &#60;String&#62;</dt>\n<dd>The corner of the context element which is to be used for alignment. Supported string values are the same ones listed for the \"overlayCorner\" entry above.</dd>\n<dt>arrayOfTriggerEvents (optional) &#60;Array[String|CustomEvent]&#62;</dt>\n<dd>\n<p>\nBy default, context alignment is a one time operation, aligning the Overlay to the context element when context configuration property is set, or when the <a href=\"#method_align\">align</a> \nmethod is invoked. However, you can use the optional \"arrayOfTriggerEvents\" entry to define the list of events which should force the overlay to re-align itself with the context element. \nThis is useful in situations where the layout of the document may change, resulting in the context element's position being modified.\n</p>\n<p>\nThe array can contain either event type strings for events the instance publishes (e.g. \"beforeShow\") or CustomEvent instances. Additionally the following\n3 static container event types are also currently supported : <code>\"windowResize\", \"windowScroll\", \"textResize\"</code> (defined in <a href=\"#property__TRIGGER_MAP\">_TRIGGER_MAP</a> private property).\n</p>\n</dd>\n<dt>xyOffset &#60;Number[]&#62;</dt>\n<dd>\nA 2 element Array specifying the X and Y pixel amounts by which the Overlay should be offset from the aligned corner. e.g. [5,0] offsets the Overlay 5 pixels to the left, <em>after</em> aligning the given context corners.\nNOTE: If using this property and no triggers need to be defined, the arrayOfTriggerEvents property should be set to null to maintain correct array positions for the arguments. \n</dd>\n</dl>\n<p>\nFor example, setting this property to <code>[\"img1\", \"tl\", \"bl\"]</code> will \nalign the Overlay's top left corner to the bottom left corner of the\ncontext element with id \"img1\".\n</p>\n<p>\nSetting this property to <code>[\"img1\", \"tl\", \"bl\", null, [0,5]</code> will \nalign the Overlay's top left corner to the bottom left corner of the\ncontext element with id \"img1\", and then offset it by 5 pixels on the Y axis (providing a 5 pixel gap between the bottom of the context element and top of the overlay).\n</p>\n<p>\nAdding the optional trigger values: <code>[\"img1\", \"tl\", \"bl\", [\"beforeShow\", \"windowResize\"], [0,5]]</code>,\nwill re-align the overlay position, whenever the \"beforeShow\" or \"windowResize\" events are fired.\n</p>"
        },
        "fixedcenter": {
          "default": "false",
          "type": "Boolean | String",
          "description": "Determines whether or not the Overlay should be anchored \nto the center of the viewport.\n<p>This property can be set to:</p>\n<dl>\n<dt>true</dt>\n<dd>\nTo enable fixed center positioning\n<p>\nWhen enabled, the overlay will \nbe positioned in the center of viewport when initially displayed, and \nwill remain in the center of the viewport whenever the window is \nscrolled or resized.\n</p>\n<p>\nIf the overlay is too big for the viewport, \nit's top left corner will be aligned with the top left corner of the viewport.\n</p>\n</dd>\n<dt>false</dt>\n<dd>\nTo disable fixed center positioning.\n<p>In this case the overlay can still be \ncentered as a one-off operation, by invoking the <code>center()</code> method,\nhowever it will not remain centered when the window is scrolled/resized.\n</dd>\n<dt>\"contained\"<dt>\n<dd>To enable fixed center positioning, as with the <code>true</code> option.\n<p>However, unlike setting the property to <code>true</code>, \nwhen the property is set to <code>\"contained\"</code>, if the overlay is \ntoo big for the viewport, it will not get automatically centered when the \nuser scrolls or resizes the window (until the window is large enough to contain the \noverlay). This is useful in cases where the Overlay has both header and footer \nUI controls which the user may need to access.\n</p>\n</dd>\n</dl>"
        },
        "preventcontextoverlap": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating whether or not the Overlay should overlap its \ncontext element (defined using the \"context\" configuration property) when the \n\"constraintoviewport\" configuration property is set to \"true\"."
        },
        "width": {
          "default": "null",
          "type": "String",
          "description": "CSS width of the Overlay."
        }
      },
      "properties": {
        "YAHOO.widget.Overlay.TOP_LEFT": {
          "final": "",
          "guessedname": "TOP_LEFT",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the top left corner of an element, used for \nconfiguring the context element alignment"
        },
        "EVENT_TYPES": {
          "final": "",
          "guessedname": "EVENT_TYPES",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the name of the Overlay's events"
        },
        "CONTEXT_TRIGGERS": {
          "final": "",
          "guessedname": "CONTEXT_TRIGGERS",
          "type": "Array",
          "guessedtype": "property",
          "description": "<p>\nArray of default event types which will trigger\ncontext alignment for the Overlay class.\n</p>\n<p>The array is empty by default for Overlay,\nbut maybe populated in future releases, so classes extending\nOverlay which need to define their own set of CONTEXT_TRIGGERS\nshould concatenate their super class's prototype.CONTEXT_TRIGGERS \nvalue with their own array of values.\n</p>\n<p>\nE.g.:\n<code>CustomOverlay.prototype.CONTEXT_TRIGGERS = YAHOO.widget.Overlay.prototype.CONTEXT_TRIGGERS.concat([\"windowScroll\"]);</code>\n</p>"
        },
        "YAHOO.widget.Overlay.CSS_HIDDEN": {
          "final": "",
          "guessedname": "CSS_HIDDEN",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the default hidden CSS class used for an Overlay. This class is \napplied to the overlay's outer DIV whenever it's hidden."
        },
        "YAHOO.widget.Overlay.TOP_RIGHT": {
          "final": "",
          "guessedname": "TOP_RIGHT",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the top right corner of an element, used for \nconfiguring the context element alignment"
        },
        "YAHOO.widget.Overlay._initialized": {
          "private": "",
          "guessedname": "_initialized",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "A boolean that indicated whether the window resize and scroll events have \nalready been subscribed to."
        },
        "DEFAULT_CONFIG": {
          "final": "",
          "guessedname": "DEFAULT_CONFIG",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the Overlay's configuration properties"
        },
        "YAHOO.widget.Overlay.BOTTOM_LEFT": {
          "final": "",
          "guessedname": "BOTTOM_LEFT",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the top bottom left corner of an element, used for \nconfiguring the context element alignment"
        },
        "YAHOO.widget.Overlay.IFRAME_SRC": {
          "final": "",
          "guessedname": "IFRAME_SRC",
          "default": "3",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The URL that will be placed in the iframe"
        },
        "YAHOO.widget.Overlay.VIEWPORT_OFFSET": {
          "final": "",
          "guessedname": "VIEWPORT_OFFSET",
          "default": "10",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number representing the minimum distance an Overlay instance should be \npositioned relative to the boundaries of the browser's viewport, in pixels."
        },
        "YAHOO.widget.Overlay.BOTTOM_RIGHT": {
          "final": "",
          "guessedname": "BOTTOM_RIGHT",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the bottom right corner of an element, used for \nconfiguring the context element alignment"
        },
        "YAHOO.widget.Overlay.CSS_OVERLAY": {
          "final": "",
          "guessedname": "CSS_OVERLAY",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the default CSS class used for an Overlay"
        },
        "YAHOO.widget.Overlay.CSS_IFRAME": {
          "final": "",
          "guessedname": "CSS_IFRAME",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the default CSS class used for an Overlay iframe shim."
        },
        "YAHOO.widget.Overlay._TRIGGER_MAP": {
          "guessedname": "_TRIGGER_MAP",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Internal map of special event types, which are provided\nby the instance. It maps the event type to the custom event \ninstance. Contains entries for the \"windowScroll\", \"windowResize\" and\n\"textResize\" static container events."
        },
        "YAHOO.widget.Overlay.STD_MOD_RE": {
          "final": "",
          "guessedname": "STD_MOD_RE",
          "static": "",
          "type": "RegExp",
          "guessedtype": "property",
          "description": "Constant representing the names of the standard module elements\nused in the overlay."
        }
      }
    },
    "YAHOO.util.Storage": {
      "shortname": "Storage",
      "methods": {
        "_removeItem": {
          "guessedname": "_removeItem",
          "guessedtype": "function",
          "protected": "",
          "description": "Implementation of the removeItem login; should be overwritten by storage engine.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key to remove."
            }
          ]
        },
        "_createValue": {
          "guessedname": "_createValue",
          "guessedtype": "function",
          "protected": "",
          "description": "Converts the object into a string, with meta data (type), so it can be restored later.",
          "params": [
            {
              "name": "s",
              "type": "Object",
              "description": "  Required. An object to store."
            }
          ]
        },
        "getName": {
          "public": "",
          "guessedname": "getName",
          "guessedtype": "function",
          "description": "Fetches the storage object's name; should be overwritten by storage engine.",
          "return": {
            "type": "String",
            "description": "The name of the data storage object."
          }
        },
        "_getItem": {
          "guessedname": "_getItem",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key used to reference this value."
            }
          ],
          "description": "Implementation of the getItem login; should be overwritten by storage engine.",
          "return": {
            "type": "String|NULL",
            "description": "The value stored at the provided key."
          }
        },
        "_setItem": {
          "guessedname": "_setItem",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key used to reference this value."
            },
            {
              "name": "data",
              "type": "Object",
              "description": "  Required. The data to storage at key."
            }
          ],
          "description": "Implementation of the setItem login; should be overwritten by storage engine.",
          "return": {
            "type": "Boolean",
            "description": "True when successful, false when size QUOTA exceeded."
          }
        },
        "_key": {
          "guessedname": "_key",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  Required. The index to retrieve (unsigned long in HTML 5 spec)."
            }
          ],
          "description": "Implementation of the key logic; should be overwritten by storage engine.",
          "return": {
            "type": "String|NULL",
            "description": "Required. The key at the provided index (DOMString in HTML 5 spec)."
          }
        },
        "clear": {
          "public": "",
          "guessedname": "clear",
          "guessedtype": "function",
          "description": "Clears any existing key/value pairs."
        },
        "_getValue": {
          "guessedname": "_getValue",
          "guessedtype": "function",
          "protected": "",
          "description": "Converts the stored value into its appropriate type.",
          "params": [
            {
              "name": "s",
              "type": "String",
              "description": "  Required. The stored value."
            }
          ]
        },
        "_clear": {
          "guessedname": "_clear",
          "guessedtype": "function",
          "protected": "",
          "description": "Implementation of the clear login; should be overwritten by storage engine."
        },
        "hasKey": {
          "public": "",
          "guessedname": "hasKey",
          "guessedtype": "function",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key to search for."
            }
          ],
          "description": "Tests if the key has been set (not in HTML 5 spec); should be overwritten by storage engine.",
          "return": {
            "type": "Boolean",
            "description": "True when key has been set."
          }
        },
        "key": {
          "public": "",
          "guessedname": "key",
          "guessedtype": "function",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  Required. The index to retrieve (unsigned long in HTML 5 spec)."
            }
          ],
          "description": "Retrieve the key stored at the provided index; should be overwritten by storage engine.",
          "return": {
            "type": "String",
            "description": "Required. The key at the provided index (DOMString in HTML 5 spec)."
          }
        },
        "getItem": {
          "public": "",
          "guessedname": "getItem",
          "guessedtype": "function",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key used to reference this value (DOMString in HTML 5 spec)."
            }
          ],
          "description": "Fetches the data stored and the provided key.",
          "return": {
            "type": "String|NULL",
            "description": "The value stored at the provided key (DOMString in HTML 5 spec)."
          }
        },
        "setItem": {
          "public": "",
          "guessedname": "removeItem",
          "throws": "QUOTA_EXCEEDED_ERROR",
          "param": "key {String} Required. The key used to reference this value (DOMString in HTML 5 spec).",
          "guessedtype": "function",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "  Required. The key to remove (DOMString in HTML 5 spec)."
            }
          ],
          "description": "Remove an item from the data storage."
        }
      },
      "name": "YAHOO.util.Storage",
      "guessedname": "Storage",
      "module": "Storage",
      "namespace": "YAHOO.util",
      "parm": "name {String} Required. The engine name.",
      "constructors": [
        {
          "description": "The Storage class is an HTML 5 storage API clone, used to wrap individual storage implementations with a common API.",
          "params": [
            {
              "name": "location",
              "type": "String",
              "description": "  Required. The storage location."
            },
            {
              "name": "conf",
              "type": "Object",
              "description": "  Required. A configuration object."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The Storage class is an HTML 5 storage API clone, used to wrap individual storage implementations with a common API.",
      "file": "Storage.js",
      "properties": {
        "DELIMITER": {
          "public": "",
          "guessedname": "DELIMITER",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The delimiter uesed between the data type and the data."
        },
        "_location": {
          "guessedname": "_location",
          "type": "{String}",
          "guessedtype": "property",
          "protected": "",
          "description": "The location for this instance."
        },
        "_name": {
          "guessedname": "_name",
          "type": "{String}",
          "guessedtype": "property",
          "protected": "",
          "description": "The name of this engine."
        },
        "isReady": {
          "guessedname": "isReady",
          "type": "{String}",
          "guessedtype": "property",
          "protected": "",
          "description": "This engine singleton has been initialized already."
        },
        "CE_CHANGE": {
          "public": "",
          "guessedname": "CE_CHANGE",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The event name for when the storage item has changed."
        },
        "CE_READY": {
          "public": "",
          "guessedname": "CE_READY",
          "type": "{String}",
          "guessedtype": "property",
          "description": "The event name for when the storage item is ready."
        },
        "_cfg": {
          "guessedname": "_cfg",
          "type": "{Object}",
          "guessedtype": "property",
          "protected": "",
          "description": "The configuration of the engine."
        },
        "length": {
          "public": "",
          "guessedname": "length",
          "type": "{Number}",
          "guessedtype": "property",
          "description": "The current length of the keys."
        }
      }
    },
    "YAHOO.widget.OverlayManager": {
      "shortname": "OverlayManager",
      "methods": {
        "_manageBlur": {
          "guessedname": "_manageBlur",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the state of the OverlayManager and overlay, as a result of the overlay\nbeing blurred.",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": " The overlay instance which got blurred."
            }
          ]
        },
        "_onOverlayElementFocus": {
          "private": "",
          "guessedname": "_onOverlayElementFocus",
          "guessedtype": "function",
          "description": "Event handler for the DOM event that is used to focus \nthe Overlay instance as specified by the \"focusevent\" \nconfiguration property.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event \nobject passed back by the event utility (Event)."
            }
          ]
        },
        "register": {
          "guessedname": "register",
          "guessedtype": "function",
          "description": "Registers an Overlay or an array of Overlays with the manager. Upon \nregistration, the Overlay receives functions for focus and blur, \nalong with CustomEvents for each.",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": "  An Overlay to register with the manager."
            },
            {
              "name": "overlay",
              "type": "Overlay[]",
              "description": "  An array of Overlays to register with \nthe manager."
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if any Overlays are registered."
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the object.",
          "return": {
            "type": "String",
            "description": "The string representation of the OverlayManager"
          }
        },
        "getActive": {
          "guessedname": "getActive",
          "guessedtype": "function",
          "description": "Returns the currently focused Overlay",
          "return": {
            "type": "Overlay",
            "description": "The currently focused Overlay"
          }
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Focuses the specified Overlay",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": " The Overlay to focus"
            },
            {
              "name": "overlay",
              "type": "String",
              "description": " The id of the Overlay to focus"
            }
          ]
        },
        "blurAll": {
          "guessedname": "blurAll",
          "guessedtype": "function",
          "description": "Removes focus from all registered Overlays in the manager"
        },
        "find": {
          "guessedname": "find",
          "guessedtype": "function",
          "description": "Attempts to locate an Overlay by instance or ID.",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": "  An Overlay to locate within the manager"
            },
            {
              "name": "overlay",
              "type": "String",
              "description": "  An Overlay id to locate within the manager"
            }
          ],
          "return": {
            "type": "Overlay",
            "description": "The requested Overlay, if found, or null if it \ncannot be located."
          }
        },
        "remove": {
          "guessedname": "remove",
          "guessedtype": "function",
          "description": "Removes the specified Overlay from the manager",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": " The Overlay to remove"
            },
            {
              "name": "overlay",
              "type": "String",
              "description": " The id of the Overlay to remove"
            }
          ]
        },
        "_onOverlayFocusHandler": {
          "private": "",
          "guessedname": "_onOverlayFocusHandler",
          "guessedtype": "function",
          "description": "focusEvent Handler, used to delegate to _manageFocus with the correct arguments.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            },
            {
              "name": "p_oOverlay",
              "type": "Overlay",
              "description": " Object representing the overlay that \nfired the event."
            }
          ]
        },
        "_bindFocus": {
          "guessedname": "_bindFocus",
          "guessedtype": "function",
          "protected": "",
          "description": "Subscribes to the Overlay based instance focusEvent, to allow the OverlayManager to\nmonitor focus state.\nIf the instance already has a focusEvent (e.g. Menu), OverlayManager will subscribe \nto the existing focusEvent, however if a focusEvent or focus method does not exist\non the instance, the _bindFocus method will add them, and the focus method will \nupdate the OverlayManager's state directly.",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": " The overlay for which focus needs to be managed"
            }
          ]
        },
        "showAll": {
          "guessedname": "showAll",
          "guessedtype": "function",
          "description": "Shows all Overlays in the manager."
        },
        "_onOverlayBlurHandler": {
          "private": "",
          "guessedname": "_onOverlayBlurHandler",
          "guessedtype": "function",
          "description": "blurEvent Handler, used to delegate to _manageBlur with the correct arguments.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            },
            {
              "name": "p_oOverlay",
              "type": "Overlay",
              "description": " Object representing the overlay that \nfired the event."
            }
          ]
        },
        "compareZIndexDesc": {
          "private": "",
          "guessedname": "compareZIndexDesc",
          "guessedtype": "function",
          "description": "Used for sorting the manager's Overlays by z-index.",
          "return": {
            "type": "Number",
            "description": "0, 1, or -1, depending on where the Overlay should \nfall in the stacking order."
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Initializes the OverlayManager",
          "params": [
            {
              "name": "overlays",
              "type": "Overlay[]",
              "description": " Optional. A collection of Overlays to \nregister with the manager."
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": "  The object literal representing the user \nconfiguration of the OverlayManager"
            }
          ]
        },
        "_bindBlur": {
          "guessedname": "_bindBlur",
          "guessedtype": "function",
          "protected": "",
          "description": "Subscribes to the Overlay based instance's blurEvent to allow the OverlayManager to\nmonitor blur state.\nIf the instance already has a blurEvent (e.g. Menu), OverlayManager will subscribe \nto the existing blurEvent, however if a blurEvent or blur method does not exist\non the instance, the _bindBlur method will add them, and the blur method \nupdate the OverlayManager's state directly.",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": " The overlay for which blur needs to be managed"
            }
          ]
        },
        "_syncZIndex": {
          "guessedname": "_syncZIndex",
          "guessedtype": "function",
          "protected": "",
          "description": "Ensures the zIndex configuration property on the managed overlay based instance\nis set to the computed zIndex value from the DOM (with \"auto\" translating to 0).",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": " The overlay instance being managed"
            }
          ]
        },
        "hideAll": {
          "guessedname": "hideAll",
          "guessedtype": "function",
          "description": "Hides all Overlays in the manager."
        },
        "_manageFocus": {
          "guessedname": "_manageFocus",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the state of the OverlayManager and overlay, as a result of the overlay \nreceiving focus.",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": " The overlay instance which got focus."
            }
          ]
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the default configuration of the OverlayManager"
        },
        "_onOverlayDestroy": {
          "private": "",
          "guessedname": "_onOverlayDestroy",
          "guessedtype": "function",
          "description": "\"destroy\" event handler for the Overlay.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            },
            {
              "name": "p_oOverlay",
              "type": "Overlay",
              "description": " Object representing the overlay that \nfired the event."
            }
          ]
        },
        "_bindDestroy": {
          "guessedname": "_bindDestroy",
          "guessedtype": "function",
          "protected": "",
          "description": "Subscribes to the Overlay based instance's destroyEvent, to allow the Overlay\nto be removed for the OverlayManager when destroyed.",
          "params": [
            {
              "name": "overlay",
              "type": "Overlay",
              "description": " The overlay instance being managed"
            }
          ]
        },
        "bringToTop": {
          "guessedname": "bringToTop",
          "guessedtype": "function",
          "description": "Places the specified Overlay instance on top of all other \nOverlay instances.",
          "params": [
            {
              "name": "p_oOverlay",
              "type": "YAHOO.widget.Overlay",
              "description": " Object representing an \nOverlay instance."
            },
            {
              "name": "p_oOverlay",
              "type": "String",
              "description": " String representing the id of an \nOverlay instance."
            }
          ]
        }
      },
      "name": "YAHOO.widget.OverlayManager",
      "guessedname": "OverlayManager",
      "module": "container",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "OverlayManager is used for maintaining the focus status of \nmultiple Overlays.",
          "params": [
            {
              "name": "overlays",
              "type": "Array",
              "description": " Optional. A collection of Overlays to register \nwith the manager."
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": "  The object literal representing the user \nconfiguration of the OverlayManager"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "OverlayManager is used for maintaining the focus status of \nmultiple Overlays.",
      "file": "OverlayManager.js",
      "configs": {
        "overlays": {
          "guessedname": "suppressEvent",
          "default": "null",
          "type": "YAHOO.widget.Overlay[]",
          "guessedtype": "property",
          "description": "The collection of registered Overlays in use by \nthe OverlayManager"
        },
        "focusevent": {
          "guessedname": "value",
          "default": "\"mousedown\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The default DOM event that should be used to focus an Overlay"
        }
      },
      "properties": {
        "contructor": {
          "guessedname": "constructor",
          "type": "Function",
          "guessedtype": "property",
          "description": "The class's constructor function"
        },
        "OverlayManager.CSS_FOCUSED": {
          "final": "",
          "guessedname": "CSS_FOCUSED",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The CSS class representing a focused Overlay"
        },
        "activeOverlay": {
          "private": "",
          "guessedname": "activeOverlay",
          "type": "YAHOO.widget.Overlay",
          "guessedtype": "property",
          "description": "The currently activated Overlay"
        },
        "overlays": {
          "guessedname": "overlays",
          "type": "YAHOO.widget.Overlay[]",
          "guessedtype": "property",
          "description": "The array of Overlays that are currently registered"
        },
        "cfg": {
          "guessedname": "cfg",
          "type": "Config",
          "guessedtype": "property",
          "description": "The OverlayManager's Config object used for monitoring \nconfiguration properties."
        }
      }
    },
    "YAHOO.util.StorageEngineGears": {
      "shortname": "StorageEngineGears",
      "name": "YAHOO.util.StorageEngineGears",
      "guessedname": "StorageEngineGears",
      "module": "Storage",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "The StorageEngineGears class implements the Google Gears storage engine.",
          "params": [
            {
              "name": "location",
              "type": "String",
              "description": "  Required. The storage location."
            },
            {
              "name": "conf",
              "type": "Object",
              "description": "  Required. A configuration object."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The StorageEngineGears class implements the Google Gears storage engine.",
      "file": "StorageEngineGears.js",
      "extend": "YAHOO.util.Storage"
    },
    "YAHOO.util.ShouldFail": {
      "shortname": "ShouldFail",
      "superclass": "YAHOO.util.AssertionError",
      "name": "YAHOO.util.ShouldFail",
      "extends": "YAHOO.util.AssertionError",
      "guessedname": "ShouldFail",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "ShouldFail is subclass of AssertionError that is thrown whenever\na test was expected to fail but did not.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ShouldFail is subclass of AssertionError that is thrown whenever\na test was expected to fail but did not.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "type": "String",
          "description": "The name of the error that occurred."
        }
      }
    },
    "YAHOO.widget.Module": {
      "shortname": "Module",
      "methods": {
        "configMonitorResize": {
          "guessedname": "configMonitorResize",
          "guessedtype": "function",
          "description": "Default event handler for the \"monitorresize\" configuration property",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "YAHOO.widget.Module.forceDocumentRedraw": {
          "guessedname": "forceDocumentRedraw",
          "static": "",
          "guessedtype": "function",
          "description": "Helper utility method, which forces a document level \nredraw for Opera, which can help remove repaint\nirregularities after applying DOM changes."
        },
        "_supportsCWResize": {
          "guessedname": "_supportsCWResize",
          "private": "",
          "guessedtype": "function",
          "description": "Text resize monitor helper method.\nDetermines if the browser supports resize events on iframe content windows."
        },
        "initResizeMonitor": {
          "guessedname": "initResizeMonitor",
          "guessedtype": "function",
          "description": "Initialize an empty IFRAME that is placed out of the visible area \nthat can be used to detect text resize."
        },
        "hide": {
          "guessedname": "hide",
          "guessedtype": "function",
          "description": "Hides the Module element by setting the visible configuration \nproperty to false. Also fires two events: beforeHideEvent prior to \nthe visibility change, and hideEvent after."
        },
        "_initResizeMonitor": {
          "guessedname": "_initResizeMonitor",
          "guessedtype": "function",
          "protected": "",
          "description": "Create and initialize the text resize monitoring iframe."
        },
        "appendToBody": {
          "guessedname": "appendToBody",
          "guessedtype": "function",
          "description": "Appends the passed element to the body. If no body is present, one \nwill be automatically created.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement | DocumentFragment",
              "description": " The element to \nappend to the body. In the case of a document fragment, the\nchildren of the fragment will be appended to the body."
            }
          ]
        },
        "onDomResize": {
          "guessedname": "onDomResize",
          "guessedtype": "function",
          "description": "Event handler fired when the resize monitor element is resized.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The DOM resize event"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object passed to the handler"
            }
          ]
        },
        "_renderFooter": {
          "guessedname": "_renderFooter",
          "guessedtype": "function",
          "protected": "",
          "description": "Renders the currently set footer into it's proper position under the \nmodule element. If the module element is not provided, \"this.element\" \nis used.",
          "params": [
            {
              "name": "moduleElement",
              "type": "HTMLElement",
              "description": " Optional. A reference to the module element"
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a String representation of the Object.",
          "return": {
            "type": "String",
            "description": "The string representation of the Module"
          }
        },
        "_renderBody": {
          "guessedname": "_renderBody",
          "guessedtype": "function",
          "protected": "",
          "description": "Renders the currently set body into it's proper position under the \nmodule element. If the module element is not provided, \"this.element\" \nis used.",
          "params": [
            {
              "name": "moduleElement",
              "type": "HTMLElement",
              "description": " Optional. A reference to the module element."
            }
          ]
        },
        "setHeader": {
          "guessedname": "setHeader",
          "guessedtype": "function",
          "description": "Sets the Module's header content to the string specified, or appends \nthe passed element to the header. If no header is present, one will \nbe automatically created. An empty string can be passed to the method\nto clear the contents of the header.",
          "params": [
            {
              "name": "headerContent",
              "type": "String",
              "description": " The string used to set the header.\nAs a convenience, non HTMLElement objects can also be passed into \nthe method, and will be treated as strings, with the header innerHTML\nset to their default toString implementations.\n<em>OR</em>"
            },
            {
              "name": "headerContent",
              "type": "HTMLElement",
              "description": " The HTMLElement to append to \n<em>OR</em>"
            },
            {
              "name": "headerContent",
              "type": "DocumentFragment",
              "description": " The document fragment \ncontaining elements which are to be added to the header"
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the Module element from the DOM and sets all child elements \nto null."
        },
        "_renderHeader": {
          "guessedname": "_renderHeader",
          "guessedtype": "function",
          "protected": "",
          "description": "Renders the currently set header into it's proper position under the \nmodule element. If the module element is not provided, \"this.element\" \nis used.",
          "params": [
            {
              "name": "moduleElement",
              "type": "HTMLElement",
              "description": " Optional. A reference to the module element"
            }
          ]
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Renders the Module by inserting the elements that are not already \nin the main Module into their correct places. Optionally appends \nthe Module to the specified node prior to the render's execution. \n<p>\nFor Modules without existing markup, the appendToNode argument \nis REQUIRED. If this argument is ommitted and the current element is \nnot present in the document, the function will return false, \nindicating that the render was a failure.\n</p>\n<p>\nNOTE: As of 2.3.1, if the appendToNode is the document's body element\nthen the module is rendered as the first child of the body element, \nand not appended to it, to avoid Operation Aborted errors in IE when \nrendering the module before window's load event is fired. You can \nuse the appendtodocumentbody configuration property to change this \nto append to document.body if required.\n</p>",
          "params": [
            {
              "name": "appendToNode",
              "type": "String",
              "description": " The element id to which the Module \nshould be appended to prior to rendering <em>OR</em>"
            },
            {
              "name": "appendToNode",
              "type": "HTMLElement",
              "description": " The element to which the Module \nshould be appended to prior to rendering"
            },
            {
              "name": "moduleElement",
              "type": "HTMLElement",
              "description": " OPTIONAL. The element that \nrepresents the actual Standard Module container."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Success or failure of the render"
          }
        },
        "appendToFooter": {
          "guessedname": "appendToFooter",
          "guessedtype": "function",
          "description": "Appends the passed element to the footer. If no footer is present, \none will be automatically created.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement | DocumentFragment",
              "description": " The element to \nappend to the footer. In the case of a document fragment, the\nchildren of the fragment will be appended to the footer"
            }
          ]
        },
        "appendToHeader": {
          "guessedname": "appendToHeader",
          "guessedtype": "function",
          "description": "Appends the passed element to the header. If no header is present, \none will be automatically created.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement | DocumentFragment",
              "description": " The element to \nappend to the header. In the case of a document fragment, the\nchildren of the fragment will be appended to the header."
            }
          ]
        },
        "configVisible": {
          "guessedname": "configVisible",
          "guessedtype": "function",
          "description": "Default event handler for changing the visibility property of a \nModule. By default, this is achieved by switching the \"display\" style \nbetween \"block\" and \"none\".\nThis method is responsible for firing showEvent and hideEvent.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "setFooter": {
          "guessedname": "setFooter",
          "guessedtype": "function",
          "description": "Sets the Module's footer content to the HTML specified, or appends \nthe passed element to the footer. If no footer is present, one will \nbe automatically created. An empty string can be passed to the method\nto clear the contents of the footer.",
          "params": [
            {
              "name": "footerContent",
              "type": "String",
              "description": " The HTML used to set the footer \nAs a convenience, non HTMLElement objects can also be passed into \nthe method, and will be treated as strings, with the footer innerHTML\nset to their default toString implementations.\n<em>OR</em>"
            },
            {
              "name": "footerContent",
              "type": "HTMLElement",
              "description": " The HTMLElement to append to \nthe footer\n<em>OR</em>"
            },
            {
              "name": "footerContent",
              "type": "DocumentFragment",
              "description": " The document fragment containing \nelements which are to be added to the footer"
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Module class's initialization method, which is executed for\nModule and all of its subclasses. This method is automatically \ncalled by the constructor, and  sets up all DOM references for \npre-existing markup, and creates required markup if it is not \nalready present.\n<p>\nIf the element passed in does not have an id, one will be generated\nfor it.\n</p>",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Module <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Module"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration Object literal \ncontaining the configuration that should be set for this module. \nSee configuration documentation for more details."
            }
          ]
        },
        "show": {
          "guessedname": "show",
          "guessedtype": "function",
          "description": "Shows the Module element by setting the visible configuration \nproperty to true. Also fires two events: beforeShowEvent prior to \nthe visibility change, and showEvent after."
        },
        "setBody": {
          "guessedname": "setBody",
          "guessedtype": "function",
          "description": "Sets the Module's body content to the HTML specified. \nIf no body is present, one will be automatically created. \nAn empty string can be passed to the method to clear the contents of the body.",
          "params": [
            {
              "name": "bodyContent",
              "type": "String",
              "description": " The HTML used to set the body. \nAs a convenience, non HTMLElement objects can also be passed into \nthe method, and will be treated as strings, with the body innerHTML\nset to their default toString implementations.\n<em>OR</em>"
            },
            {
              "name": "bodyContent",
              "type": "HTMLElement",
              "description": " The HTMLElement to add as the first and only\nchild of the body element.\n<em>OR</em>"
            },
            {
              "name": "bodyContent",
              "type": "DocumentFragment",
              "description": " The document fragment \ncontaining elements which are to be added to the body"
            }
          ]
        },
        "_addToParent": {
          "guessedname": "_addToParent",
          "guessedtype": "function",
          "protected": "",
          "description": "This method is a protected helper, used when constructing the DOM structure for the module \nto account for situations which may cause Operation Aborted errors in IE. It should not \nbe used for general DOM construction.\n<p>\nIf the parentNode is not document.body, the element is appended as the last element.\n</p>\n<p>\nIf the parentNode is document.body the element is added as the first child to help\nprevent Operation Aborted errors in IE.\n</p>",
          "params": [
            {
              "name": "The",
              "type": "parentNode",
              "description": " HTML element to which the element will be added"
            },
            {
              "name": "The",
              "type": "element",
              "description": " HTML element to be added to parentNode's children"
            }
          ]
        },
        "initEvents": {
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initializes the custom events for Module which are fired \nautomatically at appropriate times by the Module class."
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the custom events for Module which are fired \nautomatically at appropriate times by the Module class."
        }
      },
      "name": "YAHOO.widget.Module",
      "guessedname": "Module",
      "module": "container",
      "namespace": "YAHOO.widget",
      "events": {
        "beforeInitEvent": {
          "guessedname": "beforeInitEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired prior to class initalization.",
          "params": [
            {
              "name": "classRef",
              "type": "class",
              "description": " class reference of the initializing \nclass, such as this.beforeInitEvent.fire(Module)"
            }
          ]
        },
        "hideEvent": {
          "guessedname": "hideEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after the Module is hidden"
        },
        "destroyEvent": {
          "guessedname": "destroyEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired when the Module is destroyed"
        },
        "appendEvent": {
          "guessedname": "appendEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired when the Module is appended to the DOM"
        },
        "changeFooterEvent": {
          "guessedname": "changeFooterEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired when the footer content of the Module \nis modified",
          "params": [
            {
              "name": "content",
              "type": "String/HTMLElement",
              "description": " String/element representing \nthe new footer content"
            }
          ]
        },
        "beforeHideEvent": {
          "guessedname": "beforeHideEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired before the Module is hidden"
        },
        "renderEvent": {
          "guessedname": "renderEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after the Module is rendered"
        },
        "showEvent": {
          "guessedname": "showEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after the Module is shown"
        },
        "changeContentEvent": {
          "guessedname": "changeContentEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired when the content of the Module is modified"
        },
        "initEvent": {
          "guessedname": "initEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired after class initalization.",
          "params": [
            {
              "name": "classRef",
              "type": "class",
              "description": " class reference of the initializing \nclass, such as this.beforeInitEvent.fire(Module)"
            }
          ]
        },
        "changeHeaderEvent": {
          "guessedname": "changeHeaderEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired when the header content of the Module \nis modified",
          "params": [
            {
              "name": "content",
              "type": "String/HTMLElement",
              "description": " String/element representing \nthe new header content"
            }
          ]
        },
        "beforeRenderEvent": {
          "guessedname": "beforeRenderEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired before the Module is rendered"
        },
        "beforeShowEvent": {
          "guessedname": "beforeShowEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired before the Module is shown"
        },
        "changeBodyEvent": {
          "guessedname": "changeBodyEvent",
          "guessedtype": "property",
          "description": "CustomEvent fired when the body content of the Module is modified",
          "params": [
            {
              "name": "content",
              "type": "String/HTMLElement",
              "description": " String/element representing \nthe new body content"
            }
          ]
        },
        "YAHOO.widget.Module.textResizeEvent": {
          "guessedname": "textResizeEvent",
          "guessedtype": "property",
          "description": "Singleton CustomEvent fired when the font size is changed in the browser.\nOpera's \"zoom\" functionality currently does not support text \nsize detection."
        }
      },
      "constructors": [
        {
          "description": "Module is a JavaScript representation of the Standard Module Format. \nStandard Module Format is a simple standard for markup containers where \nchild nodes representing the header, body, and footer of the content are \ndenoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. \nModule is the base class for all other classes in the YUI \nContainer package.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the Module <em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the Module"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration Object literal containing \nthe configuration that should be set for this module. See configuration \ndocumentation for more details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Module is a JavaScript representation of the Standard Module Format. \nStandard Module Format is a simple standard for markup containers where \nchild nodes representing the header, body, and footer of the content are \ndenoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. \nModule is the base class for all other classes in the YUI \nContainer package.",
      "file": "Module.js",
      "configs": {
        "appendtodocumentbody": {
          "default": "false",
          "type": "Boolean",
          "description": "Specifies if the module should be rendered as the first child \nof document.body or appended as the last child when render is called\nwith document.body as the \"appendToNode\".\n<p>\nAppending to the body while the DOM is still being constructed can \nlead to Operation Aborted errors in IE hence this flag is set to \nfalse by default.\n</p>"
        },
        "monitorresize": {
          "default": "true",
          "type": "Boolean",
          "description": "Specifies whether to create a special proxy iframe to monitor \nfor user font resizing in the document"
        },
        "effect": {
          "default": "null",
          "type": "Object",
          "description": "<p>\nObject or array of objects representing the ContainerEffect \nclasses that are active for animating the container.\n</p>\n<p>\n<strong>NOTE:</strong> Although this configuration \nproperty is introduced at the Module level, an out of the box\nimplementation is not shipped for the Module class so setting\nthe proroperty on the Module class has no effect. The Overlay \nclass is the first class to provide out of the box ContainerEffect \nsupport.\n</p>"
        },
        "visible": {
          "default": "true",
          "type": "Boolean",
          "description": "Specifies whether the Module is visible on the page."
        }
      },
      "properties": {
        "contructor": {
          "guessedname": "constructor",
          "type": "Function",
          "guessedtype": "property",
          "description": "The class's constructor function"
        },
        "YAHOO.widget.Module.RESIZE_MONITOR_BUFFER": {
          "static": "",
          "type": "Number",
          "description": "Constant representing the buffer amount (in pixels) to use when positioning\nthe text resize monitor offscreen. The resize monitor is positioned\noffscreen by an amount eqaul to its offsetHeight + the buffer value."
        },
        "EVENT_TYPES": {
          "final": "",
          "guessedname": "EVENT_TYPES",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the name of the Module's events"
        },
        "body": {
          "guessedname": "body",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The body element, denoted with CSS class \"bd\""
        },
        "isSecure": {
          "guessedname": "isSecure",
          "type": "Boolean",
          "guessedtype": "function",
          "description": "Boolean representing whether or not the current browsing context is \nsecure (https)"
        },
        "DEFAULT_CONFIG": {
          "final": "",
          "guessedname": "DEFAULT_CONFIG",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the Module's configuration properties"
        },
        "cfg": {
          "guessedname": "cfg",
          "type": "YAHOO.util.Config",
          "guessedtype": "property",
          "description": "The Module's Config object used for monitoring \nconfiguration properties."
        },
        "header": {
          "guessedname": "header",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The header element, denoted with CSS class \"hd\""
        },
        "YAHOO.widget.Module.CSS_HEADER": {
          "final": "",
          "guessedname": "CSS_HEADER",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the module header"
        },
        "id": {
          "guessedname": "id",
          "type": "String",
          "guessedtype": "property",
          "description": "The id of the element"
        },
        "YAHOO.widget.Module.CSS_MODULE": {
          "final": "",
          "guessedname": "CSS_MODULE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant for the default CSS class name that represents a Module"
        },
        "YAHOO.widget.Module.IMG_ROOT": {
          "final": "",
          "guessedname": "IMG_ROOT",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the prefix path to use for non-secure images"
        },
        "YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL": {
          "final": "",
          "guessedname": "RESIZE_MONITOR_SECURE_URL",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the url for the \"src\" attribute of the iframe \nused to monitor changes to the browser's base font size"
        },
        "footer": {
          "guessedname": "footer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The footer element, denoted with CSS class \"ft\""
        },
        "imageRoot": {
          "guessedname": "imageRoot",
          "type": "String",
          "guessedtype": "property",
          "description": "A string representing the root path for all images created by\na Module instance.",
          "deprecated": "It is recommend that any images for a Module be applied\nvia CSS using the \"background-image\" property."
        },
        "YAHOO.widget.Module.CSS_FOOTER": {
          "final": "",
          "guessedname": "CSS_FOOTER",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the module footer"
        },
        "browser": {
          "guessedname": "browser",
          "type": "String",
          "guessedtype": "function",
          "description": "String representing the user-agent of the browser",
          "deprecated": "Use YAHOO.env.ua"
        },
        "YAHOO.widget.Module.IMG_ROOT_SSL": {
          "final": "",
          "guessedname": "IMG_ROOT_SSL",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the prefix path to use for securely served images"
        },
        "YAHOO.widget.Module.CSS_BODY": {
          "final": "",
          "guessedname": "CSS_BODY",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the module body"
        },
        "element": {
          "guessedname": "element",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The main module element that contains the header, body, and footer"
        },
        "platform": {
          "guessedname": "platform",
          "type": "String",
          "guessedtype": "function",
          "description": "String representing the current user-agent platform"
        }
      }
    },
    "YAHOO.util.Resize": {
      "shortname": "Resize",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "_handle_for_b": {
          "private": "",
          "guessedname": "_handle_for_b",
          "guessedtype": "function",
          "description": "Handles the sizes for the Bottom handle.",
          "params": [
            {
              "name": "args",
              "type": "Object",
              "description": " The arguments from the CustomEvent."
            }
          ]
        },
        "getWrapEl": {
          "guessedname": "getWrapEl",
          "guessedtype": "function",
          "description": "Get the HTML reference for the wrap element, returns the current element if not wrapped.",
          "return": {
            "type": "HTMLElement",
            "description": "The wrap element"
          }
        },
        "isLocked": {
          "guessedname": "isLocked",
          "guessedtype": "function",
          "description": "Check the locked status of the resize instance",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_setCache": {
          "guessedname": "_setCache",
          "private": "",
          "guessedtype": "function",
          "description": "Sets up the this._cache hash table."
        },
        "_setWidth": {
          "guessedname": "_setWidth",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The mouse event."
            },
            {
              "name": "flip",
              "type": "Boolean",
              "description": " Argument to determine the direction of the movement."
            }
          ],
          "description": "Calculates the width based on the mouse event.",
          "return": {
            "type": "Number",
            "description": "The new value"
          }
        },
        "_handle_for_br": {
          "private": "",
          "guessedname": "_handle_for_br",
          "guessedtype": "function",
          "description": "Handles the sizes for the Bottom Right handle.",
          "params": [
            {
              "name": "args",
              "type": "Object",
              "description": " The arguments from the CustomEvent."
            }
          ]
        },
        "_setHeight": {
          "guessedname": "_setHeight",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The mouse event."
            },
            {
              "name": "flip",
              "type": "Boolean",
              "description": " Argument to determine the direction of the movement."
            }
          ],
          "description": "Calculated the height based on the mouse event.",
          "return": {
            "type": "Number",
            "description": "The new value"
          }
        },
        "getActiveHandleEl": {
          "guessedname": "getActiveHandleEl",
          "guessedtype": "function",
          "description": "Get the HTML reference for the currently active resize handle.",
          "return": {
            "type": "HTMLElement",
            "description": "The handle element that is active"
          }
        },
        "resize": {
          "guessedname": "resize",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The mouse event."
            },
            {
              "name": "h",
              "type": "Number",
              "description": " The new height setting."
            },
            {
              "name": "w",
              "type": "Number",
              "description": " The new width setting."
            },
            {
              "name": "t",
              "type": "Number",
              "description": " The new top setting."
            },
            {
              "name": "l",
              "type": "Number",
              "description": " The new left setting."
            },
            {
              "name": "force",
              "type": "Boolean",
              "description": " Resize the element (used for proxy resize)."
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": " Don't fire the beforeResize Event."
            }
          ],
          "description": "Resizes the element, wrapper or proxy based on the data from the handlers.",
          "return": {
            "type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>",
            "description": "The Resize instance"
          }
        },
        "_handleMouseDown": {
          "private": "",
          "guessedname": "_handleMouseDown",
          "guessedtype": "function",
          "description": "This method preps the autoRatio on MouseDown.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " A mouse event."
            }
          ]
        },
        "getProxyEl": {
          "guessedname": "getProxyEl",
          "guessedtype": "function",
          "description": "Get the HTML reference for the proxy, returns null if no proxy.",
          "return": {
            "type": "HTMLElement",
            "description": "The proxy element"
          }
        },
        "_setupDragDrop": {
          "guessedname": "_setupDragDrop",
          "private": "",
          "guessedtype": "function",
          "description": "Setup the <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> instance on the element"
        },
        "_setAutoRatio": {
          "private": "",
          "guessedname": "_setAutoRatio",
          "guessedtype": "function",
          "description": "This method checks to see if the \"autoRatio\" config is set. If it is, we will check to see if the \"Shift Key\" is pressed. If so, we will set the config ratio to true.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " A mouse event."
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the Resize Object.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Destroys the resize object and all of it's elements & listeners."
        },
        "unlock": {
          "guessedname": "unlock",
          "guessedtype": "function",
          "description": "Unlock the resize so it can be resized",
          "params": [
            {
              "name": "dd",
              "type": "Boolean",
              "description": " If the draggable config is set, unlock it too"
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>",
            "description": "The Resize instance"
          }
        },
        "lock": {
          "guessedname": "lock",
          "guessedtype": "function",
          "description": "Lock the resize so it can't be resized",
          "params": [
            {
              "name": "dd",
              "type": "Boolean",
              "description": " If the draggable config is set, lock it too"
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>",
            "description": "The Resize instance"
          }
        },
        "_handleMouseUp": {
          "private": "",
          "guessedname": "_handleMouseUp",
          "guessedtype": "function",
          "description": "Cleans up listeners, hides proxy element and removes class names.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " A mouse event."
            }
          ]
        },
        "_createWrap": {
          "guessedname": "_createWrap",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the wrap element if the wrap config is true. It will auto wrap the following element types: img, textarea, input, iframe, select"
        },
        "_handle_for_tr": {
          "private": "",
          "guessedname": "_handle_for_tr",
          "guessedtype": "function",
          "description": "Handles the sizes for the Top Right handle.",
          "params": [
            {
              "name": "args",
              "type": "Object",
              "description": " The arguments from the CustomEvent."
            }
          ]
        },
        "_updateStatus": {
          "private": "",
          "guessedname": "_updateStatus",
          "guessedtype": "function",
          "description": "Using the Height, Width, Top & Left, it updates the status element with the elements sizes.",
          "params": [
            {
              "name": "h",
              "type": "Number",
              "description": " The new height setting."
            },
            {
              "name": "w",
              "type": "Number",
              "description": " The new width setting."
            },
            {
              "name": "t",
              "type": "Number",
              "description": " The new top setting."
            },
            {
              "name": "l",
              "type": "Number",
              "description": " The new left setting."
            }
          ]
        },
        "_handle_for_r": {
          "private": "",
          "guessedname": "_handle_for_r",
          "guessedtype": "function",
          "description": "Handles the sizes for the Right handle.",
          "params": [
            {
              "name": "args",
              "type": "Object",
              "description": " The arguments from the CustomEvent."
            }
          ]
        },
        "getStatusEl": {
          "guessedname": "getStatusEl",
          "guessedtype": "function",
          "description": "Get the HTML reference for the status element.",
          "return": {
            "type": "HTMLElement",
            "description": "The status element"
          }
        },
        "_snapTick": {
          "guessedname": "_snapTick",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "size",
              "type": "Number",
              "description": " The size to tick against."
            },
            {
              "name": "pix",
              "type": "Number",
              "description": " The tick pixels."
            }
          ],
          "description": "Adjusts the number based on the ticks used.",
          "return": {
            "type": "Number",
            "description": "the new snapped position"
          }
        },
        "_handleStartDrag": {
          "private": "",
          "guessedname": "_handleStartDrag",
          "guessedtype": "function",
          "description": "Resizes the proxy, sets up the <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> handlers, updates the status div and preps the cache",
          "params": [
            {
              "name": "args",
              "type": "Object",
              "description": " The args passed from the CustomEvent."
            },
            {
              "name": "dd",
              "type": "Object",
              "description": " The <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> object we are working with."
            }
          ]
        },
        "_handle_for_bl": {
          "private": "",
          "guessedname": "_handle_for_bl",
          "guessedtype": "function",
          "description": "Handles the sizes for the Bottom Left handle.",
          "params": [
            {
              "name": "args",
              "type": "Object",
              "description": " The arguments from the CustomEvent."
            }
          ]
        },
        "isActive": {
          "guessedname": "isActive",
          "guessedtype": "function",
          "description": "Returns true or false if a resize operation is currently active on the element.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_checkWidth": {
          "guessedname": "_checkWidth",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "w",
              "type": "Number",
              "description": " The width to check."
            }
          ],
          "description": "Checks the value passed against the maxWidth and minWidth.",
          "return": {
            "type": "Number",
            "description": "the new value"
          }
        },
        "_createHandles": {
          "guessedname": "_createHandles",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the handles as specified in the config"
        },
        "init": {
          "guessedname": "init",
          "private": "",
          "guessedtype": "function",
          "description": "The Resize class's initialization method"
        },
        "_handle_for_t": {
          "private": "",
          "guessedname": "_handle_for_t",
          "guessedtype": "function",
          "description": "Handles the sizes for the Top handle.",
          "params": [
            {
              "name": "args",
              "type": "Object",
              "description": " The arguments from the CustomEvent."
            }
          ]
        },
        "reset": {
          "guessedname": "reset",
          "guessedtype": "function",
          "description": "Resets the element to is start state.",
          "return": {
            "type": "<a href=\"YAHOO.util.Resize.html\">YAHOO.util.Resize</a>",
            "description": "The Resize instance"
          }
        },
        "getResizeById": {
          "guessedname": "getResizeById",
          "static": "",
          "guessedtype": "function",
          "description": "Get's a resize object by the HTML id of the element associated with the Resize object.",
          "return": {
            "type": "Object",
            "description": "The Resize Object"
          }
        },
        "_handleMouseOut": {
          "private": "",
          "guessedname": "_handleMouseOut",
          "guessedtype": "function",
          "description": "Removes CSS class names to the handles",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " A mouse event."
            }
          ]
        },
        "_checkHeight": {
          "guessedname": "_checkHeight",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "h",
              "type": "Number",
              "description": " The height to check."
            }
          ],
          "description": "Checks the value passed against the maxHeight and minHeight.",
          "return": {
            "type": "Number",
            "description": "The new value"
          }
        },
        "_handleMouseOver": {
          "private": "",
          "guessedname": "_handleMouseOver",
          "guessedtype": "function",
          "description": "Adds CSS class names to the handles",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " A mouse event."
            }
          ]
        },
        "initAttributes": {
          "private": "",
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Initializes all of the configuration attributes used to create a resizable element.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the utility."
            }
          ]
        },
        "_handle_for_l": {
          "private": "",
          "guessedname": "_handle_for_l",
          "guessedtype": "function",
          "description": "Handles the sizes for the Left handle.",
          "params": [
            {
              "name": "args",
              "type": "Object",
              "description": " The arguments from the CustomEvent."
            }
          ]
        },
        "_setRatio": {
          "guessedname": "_setRatio",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "h",
              "type": "Number",
              "description": " The height offset."
            },
            {
              "name": "w",
              "type": "Number",
              "description": " The with offset."
            },
            {
              "name": "t",
              "type": "Number",
              "description": " The top offset."
            },
            {
              "name": "l",
              "type": "Number",
              "description": " The left offset."
            }
          ],
          "description": "Using the Height, Width, Top & Left, it recalcuates them based on the original element size.",
          "return": {
            "type": "Array",
            "description": "The new Height, Width, Top & Left settings"
          }
        },
        "_ieSelectFix": {
          "guessedname": "_ieSelectFix",
          "private": "",
          "guessedtype": "function",
          "description": "The function we use as the onselectstart handler when we start a drag in Internet Explorer"
        },
        "_createProxy": {
          "guessedname": "_createProxy",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the proxy element if the proxy config is true"
        },
        "_handle_for_tl": {
          "private": "",
          "guessedname": "_handle_for_tl",
          "guessedtype": "function",
          "description": "Handles the sizes for the Top Left handle.",
          "params": [
            {
              "name": "args",
              "type": "Object",
              "description": " The arguments from the CustomEvent."
            }
          ]
        }
      },
      "name": "YAHOO.util.Resize",
      "extends": "YAHOO.util.Element",
      "guessedname": "Resize",
      "module": "resize",
      "namespace": "YAHOO.util",
      "events": {
        "widthChange": {
          "name": "widthChange",
          "description": "Fires when the value for the configuration attribute 'width' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "minXChange": {
          "name": "minXChange",
          "description": "Fires when the value for the configuration attribute 'minX' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "minHeightChange": {
          "name": "minHeightChange",
          "description": "Fires when the value for the configuration attribute 'minHeight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSetSizeChange": {
          "name": "beforeSetSizeChange",
          "description": "Fires before the value for the configuration attribute 'setSize' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "startResize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when a resize action is started."
        },
        "ghostChange": {
          "name": "ghostChange",
          "description": "Fires when the value for the configuration attribute 'ghost' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeResize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires before every element resize after the size calculations, returning false will stop the resize."
        },
        "beforeMinXChange": {
          "name": "beforeMinXChange",
          "description": "Fires before the value for the configuration attribute 'minX' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHandlesChange": {
          "name": "beforeHandlesChange",
          "description": "Fires before the value for the configuration attribute 'handles' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "heightChange": {
          "name": "heightChange",
          "description": "Fires when the value for the configuration attribute 'height' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "resize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires on every element resize (only fires once when used with proxy config setting)."
        },
        "beforeMinYChange": {
          "name": "beforeMinYChange",
          "description": "Fires before the value for the configuration attribute 'minY' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "statusChange": {
          "name": "statusChange",
          "description": "Fires when the value for the configuration attribute 'status' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "proxyResize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires on every proxy resize (only fires when used with proxy config setting)."
        },
        "beforeHeightChange": {
          "name": "beforeHeightChange",
          "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeProxyChange": {
          "name": "beforeProxyChange",
          "description": "Fires before the value for the configuration attribute 'proxy' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeYTicksChange": {
          "name": "beforeYTicksChange",
          "description": "Fires before the value for the configuration attribute 'yTicks' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "wrapChange": {
          "name": "wrapChange",
          "description": "Fires when the value for the configuration attribute 'wrap' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMaxYChange": {
          "name": "beforeMaxYChange",
          "description": "Fires before the value for the configuration attribute 'maxY' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHoverChange": {
          "name": "beforeHoverChange",
          "description": "Fires before the value for the configuration attribute 'hover' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "endResize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the mouseUp event from the Drag Instance fires."
        },
        "beforeGhostChange": {
          "name": "beforeGhostChange",
          "description": "Fires before the value for the configuration attribute 'ghost' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAutoRatioChange": {
          "name": "beforeAutoRatioChange",
          "description": "Fires before the value for the configuration attribute 'autoRatio' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeWrapChange": {
          "name": "beforeWrapChange",
          "description": "Fires before the value for the configuration attribute 'wrap' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMaxXChange": {
          "name": "beforeMaxXChange",
          "description": "Fires before the value for the configuration attribute 'maxX' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "hoverChange": {
          "name": "hoverChange",
          "description": "Fires when the value for the configuration attribute 'hover' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeStatusChange": {
          "name": "beforeStatusChange",
          "description": "Fires before the value for the configuration attribute 'status' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "maxHeightChange": {
          "name": "maxHeightChange",
          "description": "Fires when the value for the configuration attribute 'maxHeight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMinWidthChange": {
          "name": "beforeMinWidthChange",
          "description": "Fires before the value for the configuration attribute 'minWidth' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "autoRatioChange": {
          "name": "autoRatioChange",
          "description": "Fires when the value for the configuration attribute 'autoRatio' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "minYChange": {
          "name": "minYChange",
          "description": "Fires when the value for the configuration attribute 'minY' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "yTicksChange": {
          "name": "yTicksChange",
          "description": "Fires when the value for the configuration attribute 'yTicks' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "dragEvent": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> dragEvent is fired for the config option draggable."
        },
        "minWidthChange": {
          "name": "minWidthChange",
          "description": "Fires when the value for the configuration attribute 'minWidth' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "handlesChange": {
          "name": "handlesChange",
          "description": "Fires when the value for the configuration attribute 'handles' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "knobHandlesChange": {
          "name": "knobHandlesChange",
          "description": "Fires when the value for the configuration attribute 'knobHandles' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "xTicksChange": {
          "name": "xTicksChange",
          "description": "Fires when the value for the configuration attribute 'xTicks' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "draggableChange": {
          "name": "draggableChange",
          "description": "Fires when the value for the configuration attribute 'draggable' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "useShimChange": {
          "name": "useShimChange",
          "description": "Fires when the value for the configuration attribute 'useShim' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHiddenHandlesChange": {
          "name": "beforeHiddenHandlesChange",
          "description": "Fires before the value for the configuration attribute 'hiddenHandles' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "animateDurationChange": {
          "name": "animateDurationChange",
          "description": "Fires when the value for the configuration attribute 'animateDuration' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "ratioChange": {
          "name": "ratioChange",
          "description": "Fires when the value for the configuration attribute 'ratio' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "maxYChange": {
          "name": "maxYChange",
          "description": "Fires when the value for the configuration attribute 'maxY' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "maxXChange": {
          "name": "maxXChange",
          "description": "Fires when the value for the configuration attribute 'maxX' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeUseShimChange": {
          "name": "beforeUseShimChange",
          "description": "Fires before the value for the configuration attribute 'useShim' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "animateEasingChange": {
          "name": "animateEasingChange",
          "description": "Fires when the value for the configuration attribute 'animateEasing' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMaxWidthChange": {
          "name": "beforeMaxWidthChange",
          "description": "Fires before the value for the configuration attribute 'maxWidth' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "animateChange": {
          "name": "animateChange",
          "description": "Fires when the value for the configuration attribute 'animate' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "setSizeChange": {
          "name": "setSizeChange",
          "description": "Fires when the value for the configuration attribute 'setSize' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMaxHeightChange": {
          "name": "beforeMaxHeightChange",
          "description": "Fires before the value for the configuration attribute 'maxHeight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeXTicksChange": {
          "name": "beforeXTicksChange",
          "description": "Fires before the value for the configuration attribute 'xTicks' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAnimateChange": {
          "name": "beforeAnimateChange",
          "description": "Fires before the value for the configuration attribute 'animate' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "maxWidthChange": {
          "name": "maxWidthChange",
          "description": "Fires when the value for the configuration attribute 'maxWidth' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAnimateEasingChange": {
          "name": "beforeAnimateEasingChange",
          "description": "Fires before the value for the configuration attribute 'animateEasing' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDraggableChange": {
          "name": "beforeDraggableChange",
          "description": "Fires before the value for the configuration attribute 'draggable' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAnimateDurationChange": {
          "name": "beforeAnimateDurationChange",
          "description": "Fires before the value for the configuration attribute 'animateDuration' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "hiddenHandlesChange": {
          "name": "hiddenHandlesChange",
          "description": "Fires when the value for the configuration attribute 'hiddenHandles' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeKnobHandlesChange": {
          "name": "beforeKnobHandlesChange",
          "description": "Fires before the value for the configuration attribute 'knobHandles' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeWidthChange": {
          "name": "beforeWidthChange",
          "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMinHeightChange": {
          "name": "beforeMinHeightChange",
          "description": "Fires before the value for the configuration attribute 'minHeight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRatioChange": {
          "name": "beforeRatioChange",
          "description": "Fires before the value for the configuration attribute 'ratio' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "proxyChange": {
          "name": "proxyChange",
          "description": "Fires when the value for the configuration attribute 'proxy' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "<p>Makes an element resizable</p>",
          "params": [
            {
              "name": "el",
              "type": "String/HTMLElement",
              "description": " The element to make resizable."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": " Object liternal containing configuration parameters."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "<p>Makes an element resizable</p>",
      "file": "resize.js",
      "configs": {
        "ratio": {
          "type": "Boolean",
          "description": "Maintain the element's ratio when resizing."
        },
        "xTicks": {
          "type": "Number or False",
          "description": "The number of x ticks to span the resize to."
        },
        "knobHandles": {
          "type": "Boolean",
          "description": "Use the smaller handles, instead if the full size handles."
        },
        "maxHeight": {
          "type": "Number",
          "description": "The maximum height of the element"
        },
        "maxX": {
          "type": "Number",
          "description": "The max x coord of the element"
        },
        "setSize": {
          "type": "Boolean",
          "description": "Set the size of the resized element, if set to false the element will not be auto resized,\nthe resize event will contain the dimensions so the end user can resize it on their own.\nThis setting will only work with proxy set to true and animate set to false."
        },
        "animateDuration": {
          "type": "Number",
          "description": "The Duration to apply to the animation."
        },
        "hiddenHandles": {
          "type": "Boolean",
          "description": "Don't show the handles, just use the cursor to the user."
        },
        "minHeight": {
          "type": "Number",
          "description": "The minimum height of the element"
        },
        "animate": {
          "type": "Boolean",
          "description": "Should be use animation to resize the element (can only be used if we use proxy)."
        },
        "wrap": {
          "type": "Boolean",
          "description": "Should we wrap the element"
        },
        "maxY": {
          "type": "Number",
          "description": "The max y coord of the element"
        },
        "draggable": {
          "type": "Boolean",
          "description": "A convienence method to make the element draggable"
        },
        "useShim": {
          "type": "Boolean",
          "description": "This setting will be passed to the DragDrop instances on the resize handles and for the draggable property.\nThis property should be used if you want the resize handles to work over iframe and other elements."
        },
        "handles": {
          "type": "Array",
          "description": "The handles to use (any combination of): 't', 'b', 'r', 'l', 'bl', 'br', 'tl', 'tr'. Defaults to: ['r', 'b', 'br'].\nCan use a shortcut of All. Note: 8 way resizing should be done on an element that is absolutely positioned."
        },
        "maxWidth": {
          "type": "Number",
          "description": "The maximum width of the element"
        },
        "proxy": {
          "type": "Boolean",
          "description": "Resize a proxy element instead of the real element."
        },
        "animateEasing": {
          "type": "Object",
          "description": "The Easing to apply to the animation."
        },
        "ghost": {
          "type": "Boolean",
          "description": "Apply an opacity filter to the element being resized (only works with proxy)."
        },
        "minX": {
          "type": "Number",
          "description": "The minimum x coord of the element"
        },
        "minY": {
          "type": "Number",
          "description": "The minimum y coord of the element"
        },
        "yTicks": {
          "type": "Number or False",
          "description": "The number of y ticks to span the resize to."
        },
        "height": {
          "type": "Number",
          "description": "The height of the element"
        },
        "status": {
          "type": "Boolean",
          "description": "Show the status (new size) of the resize."
        },
        "minWidth": {
          "type": "Number",
          "description": "The minimum width of the element"
        },
        "autoRatio": {
          "type": "Boolean",
          "description": "Using the shift key during a resize will toggle the ratio config."
        },
        "hover": {
          "type": "Boolean",
          "description": "Only show the handles when they are being moused over."
        },
        "width": {
          "type": "Number",
          "description": "The width of the element"
        }
      },
      "properties": {
        "_locked": {
          "private": "",
          "guessedname": "_locked",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "A flag to show if the resize is locked"
        },
        "dd": {
          "private": "",
          "guessedname": "dd",
          "type": "Object",
          "guessedtype": "property",
          "description": "The <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> instance used if draggable is true"
        },
        "_resizeEvent": {
          "private": "",
          "guessedname": "_resizeEvent",
          "type": "Event",
          "guessedtype": "property",
          "description": "The mouse event used to resize with"
        },
        "_instances": {
          "guessedname": "_instances",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Internal hash table for all resize instances"
        },
        "_dds": {
          "private": "",
          "guessedname": "_dds",
          "type": "Object",
          "guessedtype": "property",
          "description": "An Object containing references to all of the <a href=\"YAHOO.util.DragDrop.html\">YAHOO.util.DragDrop</a> instances used for the resize handles"
        },
        "CSS_GHOST": {
          "private": "",
          "guessedname": "CSS_GHOST",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name given to the wrap element when the ghost property is active"
        },
        "CSS_HOVER": {
          "private": "",
          "guessedname": "CSS_HOVER",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name used for hover only handles"
        },
        "_currentDD": {
          "private": "",
          "guessedname": "_currentDD",
          "type": "Object",
          "guessedtype": "property",
          "description": "A link to the currently active DD object"
        },
        "CSS_RESIZING": {
          "private": "",
          "guessedname": "CSS_RESIZING",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name given to the wrap element when a resize action is taking place."
        },
        "CSS_DRAG": {
          "private": "",
          "guessedname": "CSS_DRAG",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name added when dragging is enabled"
        },
        "CSS_STATUS": {
          "private": "",
          "guessedname": "CSS_STATUS",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name given to the status element"
        },
        "_cache": {
          "private": "",
          "guessedname": "_cache",
          "type": "Object",
          "guessedtype": "property",
          "description": "An lookup table containing key information for the element being resized. e.g. height, width, x position, y position, etc.."
        },
        "_currentHandle": {
          "private": "",
          "guessedname": "_currentHandle",
          "type": "String",
          "guessedtype": "property",
          "description": "The string identifier of the currently active handle. e.g. 'r', 'br', 'tl'"
        },
        "_active": {
          "private": "",
          "guessedname": "_active",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to show if the resize is active. Used for events."
        },
        "CSS_PROXY": {
          "private": "",
          "guessedname": "CSS_PROXY",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name given to the proxy element"
        },
        "browser": {
          "private": "",
          "guessedname": "browser",
          "type": "Object",
          "guessedtype": "property",
          "description": "A copy of the YAHOO.env.ua property"
        },
        "CSS_HANDLE": {
          "private": "",
          "guessedname": "CSS_HANDLE",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name given to all handles, used as a base for single handle names as well.. Handle \"t\" will get this.CSS_HANDLE + '-t' as well as this.CSS_HANDLE"
        },
        "_proxy": {
          "private": "",
          "guessedname": "_proxy",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The HTML reference of the element proxy"
        },
        "CSS_WRAP": {
          "private": "",
          "guessedname": "CSS_WRAP",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name given to the wrap element"
        },
        "CSS_HIDDEN": {
          "private": "",
          "guessedname": "CSS_HIDDEN",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name given to the wrap element to make all handles hidden"
        },
        "CSS_KNOB": {
          "private": "",
          "guessedname": "CSS_KNOB",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name used to make the knob style handles"
        },
        "_wrap": {
          "private": "",
          "guessedname": "_wrap",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The HTML reference of the element wrapper"
        },
        "_positioned": {
          "private": "",
          "guessedname": "_positioned",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "A flag to show if the element is absolutely positioned"
        },
        "CSS_RESIZE": {
          "private": "",
          "guessedname": "CSS_RESIZE",
          "type": "String",
          "guessedtype": "property",
          "description": "Base CSS class name"
        },
        "_ieSelectBack": {
          "guessedname": "_ieSelectBack",
          "private": "",
          "guessedtype": "property",
          "description": "We will hold a copy of the current \"onselectstart\" method on this property, and reset it after we are done using it."
        },
        "_handles": {
          "private": "",
          "guessedname": "_handles",
          "type": "Object",
          "guessedtype": "property",
          "description": "An object containing references to all of the resize handles."
        }
      }
    },
    "YAHOO.tool.TestLogger": {
      "shortname": "TestLogger",
      "methods": {
        "formatMsg": {
          "guessedname": "formatMsg",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oLogMsg",
              "type": "Object",
              "description": "  Log message object."
            }
          ],
          "description": "Formats message string to HTML for output to console.",
          "return": {
            "type": "String",
            "description": "HTML-formatted message for output to console."
          }
        },
        "clearTestRunner": {
          "guessedname": "clearTestRunner",
          "static": "",
          "guessedtype": "function",
          "description": "Clears the reference to the TestRunner from previous operations. This \nunsubscribes all events and removes the object reference.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "setTestRunner": {
          "guessedname": "setTestRunner",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "testRunner",
              "type": "YAHOO.tool.TestRunner",
              "description": " The TestRunner to observe."
            }
          ],
          "description": "Sets the source test runner that the logger should monitor.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "_handleTestRunnerEvent": {
          "guessedname": "_handleTestRunnerEvent",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": " The event data object."
            }
          ],
          "description": "Handles all TestRunner events, outputting appropriate data into the console.",
          "return": {
            "type": "Void",
            "description": ""
          }
        }
      },
      "name": "YAHOO.tool.TestLogger",
      "guessedname": "TestLogger",
      "module": "yuitest",
      "namespace": "YAHOO.tool",
      "constructors": [
        {
          "description": "Displays test execution progress and results, providing filters based on\ndifferent key events.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " (Optional) The element to create the logger in."
            },
            {
              "name": "config",
              "type": "Object",
              "description": " (Optional) Configuration options for the logger."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Displays test execution progress and results, providing filters based on\ndifferent key events.",
      "file": "TestLogger.js"
    },
    "YAHOO.widget.BarSeries": {
      "shortname": "BarSeries",
      "name": "YAHOO.widget.BarSeries",
      "guessedname": "BarSeries",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "BarSeries class for the YUI Charts widget."
        }
      ],
      "guessedtype": "function",
      "description": "BarSeries class for the YUI Charts widget.",
      "file": "Series.js",
      "uses": [
        "YAHOO.widget.CartesianSeries"
      ]
    },
    "YAHOO.widget.Calendar_Core": {
      "shortname": "Calendar_Core",
      "superclass": "YAHOO.widget.Calendar",
      "name": "YAHOO.widget.Calendar_Core",
      "extends": "YAHOO.widget.Calendar",
      "guessedname": "Calendar_Core",
      "module": "calendar",
      "namespace": "YAHOO.widget",
      "guessedtype": "property",
      "file": "Calendar.js",
      "deprecated": "The old Calendar_Core class is no longer necessary."
    },
    "YAHOO.util.Attribute": {
      "shortname": "Attribute",
      "methods": {
        "resetValue": {
          "guessedname": "resetValue",
          "guessedtype": "function",
          "description": "Resets the value to the initial config value.",
          "return": {
            "type": "Boolean",
            "description": "Whether or not the value was set."
          }
        },
        "refresh": {
          "guessedname": "refresh",
          "guessedtype": "function",
          "description": "Resets the value to the current value.\nUseful when values may have gotten out of sync with actual properties.",
          "return": {
            "type": "Boolean",
            "description": "Whether or not the value was set."
          }
        },
        "configure": {
          "guessedname": "configure",
          "guessedtype": "function",
          "description": "Allows for configuring the Attribute's properties.",
          "params": [
            {
              "name": "map",
              "type": "Object",
              "description": " A key-value map of Attribute properties."
            },
            {
              "name": "init",
              "type": "Boolean",
              "description": " Whether or not this should become the initial config."
            }
          ]
        },
        "setValue": {
          "guessedname": "setValue",
          "guessedtype": "function",
          "description": "Sets the value of the attribute and fires beforeChange and change events.",
          "params": [
            {
              "name": "value",
              "type": "Any",
              "description": " The value to apply to the attribute."
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": " If true the change events will not be fired."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the value was set."
          }
        },
        "resetConfig": {
          "guessedname": "resetConfig",
          "guessedtype": "function",
          "description": "Resets the attribute config to the initial config state."
        },
        "getValue": {
          "guessedname": "getValue",
          "guessedtype": "function",
          "description": "Retrieves the current value of the attribute.",
          "return": {
            "type": "any",
            "description": "The current value of the attribute."
          }
        }
      },
      "name": "YAHOO.util.Attribute",
      "guessedname": "Attribute",
      "module": "element",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "Provides Attribute configurations.",
          "params": [
            {
              "name": "hash",
              "type": "Object",
              "description": "  The intial Attribute."
            },
            {
              "name": "The",
              "type": "YAHOO.util.AttributeProvider",
              "description": " owner of the Attribute instance."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Provides Attribute configurations.",
      "file": "Attribute.js",
      "properties": {
        "getter": {
          "guessedname": "getter",
          "type": "Function",
          "guessedtype": "property",
          "description": "The function to use when getting the attribute's value.\nThe getter receives the new value as the first arg and the attribute name as the 2nd\nThe return value of the getter will be used as the return from get()."
        },
        "validator": {
          "guessedname": "validator",
          "type": "Function",
          "guessedtype": "property",
          "description": "The validator to use when setting the attribute's value.",
          "return": "Boolean"
        },
        "writeOnce": {
          "guessedname": "writeOnce",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the attribute can only be written once."
        },
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the attribute."
        },
        "_written": {
          "private": "",
          "guessedname": "_written",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the attribute's value has been set."
        },
        "method": {
          "guessedname": "method",
          "type": "Function",
          "guessedtype": "property",
          "description": "A function to call when setting the attribute's value.\nThe method receives the new value as the first arg and the attribute name as the 2nd"
        },
        "readOnly": {
          "guessedname": "readOnly",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the attribute is read only."
        },
        "value": {
          "guessedname": "value",
          "type": "String",
          "guessedtype": "property",
          "description": "The value of the attribute."
        },
        "setter": {
          "guessedname": "setter",
          "type": "Function",
          "guessedtype": "property",
          "description": "The function to use when setting the attribute's value.\nThe setter receives the new value as the first arg and the attribute name as the 2nd\nThe return value of the setter replaces the value passed to set()."
        },
        "_initialConfig": {
          "private": "",
          "guessedname": "_initialConfig",
          "type": "Object",
          "guessedtype": "property",
          "description": "The attribute's initial configuration."
        },
        "owner": {
          "guessedname": "owner",
          "type": "YAHOO.util.AttributeProvider",
          "guessedtype": "property",
          "description": "The owner of the attribute."
        }
      }
    },
    "YAHOO.widget.CellEditor": {
      "shortname": "CellEditor",
      "superclass": "YAHOO.widget.BaseCellEditor",
      "name": "YAHOO.widget.CellEditor",
      "extends": "YAHOO.widget.BaseCellEditor",
      "guessedname": "CellEditor",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "Factory class for instantiating a BaseCellEditor subclass.",
          "params": [
            {
              "name": "sType",
              "type": "String",
              "description": "  Type indicator, to map to YAHOO.widget.DataTable.Editors."
            },
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal of configs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Factory class for instantiating a BaseCellEditor subclass.",
      "file": "CellEditor.js"
    },
    "YAHOO.widget.CategoryAxis": {
      "shortname": "CategoryAxis",
      "name": "YAHOO.widget.CategoryAxis",
      "guessedname": "CategoryAxis",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "A type of axis that displays items in categories."
        }
      ],
      "guessedtype": "function",
      "description": "A type of axis that displays items in categories.",
      "file": "CategoryAxis.js",
      "properties": {
        "categoryNames": {
          "guessedname": "categoryNames",
          "type": "Array",
          "guessedtype": "property",
          "description": "A list of category names to display along this axis."
        },
        "calculateCategoryCount": {
          "guessedname": "calculateCategoryCount",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Indicates whether or not to calculate the number of categories (ticks and labels)\nwhen there is not enough room to display all labels on the axis. If set to true, the axis \nwill determine the number of categories to plot. If not, all categories will be plotted."
        }
      }
    },
    "YAHOO.widget.TextareaCellEditor": {
      "shortname": "TextareaCellEditor",
      "superclass": "YAHOO.widget.BaseCellEditor",
      "methods": {
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Sets focus in TextareaCellEditor."
        },
        "move": {
          "guessedname": "move",
          "guessedtype": "function",
          "description": "Moves TextareaCellEditor UI to a cell."
        },
        "getInputValue": {
          "guessedname": "getInputValue",
          "guessedtype": "function",
          "description": "Retrieves input value from TextareaCellEditor."
        },
        "handleDisabledBtns": {
          "guessedname": "handleDisabledBtns",
          "guessedtype": "function",
          "description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them."
        },
        "resetForm": {
          "guessedname": "resetForm",
          "guessedtype": "function",
          "description": "Resets TextareaCellEditor UI to initial state."
        },
        "renderForm": {
          "guessedname": "renderForm",
          "guessedtype": "function",
          "description": "Render a form with textarea."
        }
      },
      "name": "YAHOO.widget.TextareaCellEditor",
      "extends": "YAHOO.widget.BaseCellEditor",
      "guessedname": "TextareaCellEditor",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The TextareaCellEditor class provides functionality for inline editing\nDataTable cell data with a TEXTAREA element.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal of configs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The TextareaCellEditor class provides functionality for inline editing\nDataTable cell data with a TEXTAREA element.",
      "file": "CellEditor.js",
      "properties": {
        "textarea": {
          "guessedname": "textarea",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to textarea element."
        }
      }
    },
    "YAHOO.env.ua": {
      "shortname": "YAHOO.env.ua",
      "name": "YAHOO.env.ua",
      "guessedname": "ua",
      "module": "yahoo",
      "namespace": "",
      "static": "",
      "guessedtype": "function",
      "description": "Do not fork for a browser if it can be avoided.  Use feature detection when\nyou can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version\nnumber for the browser engine, 0 otherwise.  This value may or may not map\nto the version number of the browser using the engine.  The value is \npresented as a float so that it can easily be used for boolean evaluation \nas well as for looking for a particular range of versions.  Because of this, \nsome of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 \nreports 1.8).",
      "file": "Env.js",
      "properties": {
        "gecko": {
          "guessedname": "gecko",
          "type": "float",
          "guessedtype": "property",
          "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8\nFirefox 3 alpha: 1.9a4   <-- Reports 1.9\n</pre>"
        },
        "webkit": {
          "guessedname": "webkit",
          "type": "float",
          "guessedtype": "property",
          "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9.1\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG\nand many major issues fixed).  \n3.x yahoo.com, flickr:422     <-- Safari 3.x hacks the user agent\nstring when hitting yahoo.com and \nflickr.com.\nSafari 3.0.4 (523.12):523.12  <-- First Tiger release - automatic update\nfrom 2.x via the 10.4.11 OS patch\nWebkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event.\nyahoo.com user agent hack removed.\n</pre>\nhttp://developer.apple.com/internet/safari/uamatrix.html"
        },
        "os": {
          "guessedname": "os",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "The operating system.  Currently only detecting windows or macintosh"
        },
        "secure": {
          "guessedname": "secure",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Set to true if the page appears to be in SSL"
        },
        "mobile": {
          "guessedname": "mobile",
          "type": "string",
          "guessedtype": "property",
          "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini."
        },
        "ie": {
          "guessedname": "ie",
          "type": "float",
          "guessedtype": "property",
          "description": "Internet Explorer version number or 0.  Example: 6"
        },
        "opera": {
          "guessedname": "opera",
          "type": "float",
          "guessedtype": "property",
          "description": "Opera version number or 0.  Example: 9.2"
        },
        "caja": {
          "guessedname": "caja",
          "type": "float",
          "guessedtype": "property",
          "description": "Google Caja version number or 0."
        },
        "air": {
          "guessedname": "air",
          "type": "float",
          "guessedtype": "property",
          "description": "Adobe AIR version number or 0.  Only populated if webkit is detected.\nExample: 1.0"
        }
      }
    },
    "YAHOO.widget.Column": {
      "shortname": "Column",
      "methods": {
        "getTreeIndex": {
          "guessedname": "getTreeIndex",
          "guessedtype": "function",
          "description": "Public accessor returns Column's current position index within its\nColumnSet's tree array, if applicable. Only non-nested and top-level parent\nColumns will return a value;",
          "return": {
            "type": "Number",
            "description": "Position index, or null."
          }
        },
        "getColspan": {
          "guessedname": "getColspan",
          "guessedtype": "function",
          "description": "Public accessor returns Column's calculated COLSPAN value.",
          "return": {
            "type": "Number",
            "description": "Column's COLSPAN value."
          }
        },
        "getKey": {
          "guessedname": "getKey",
          "guessedtype": "function",
          "description": "Returns unique Column key.",
          "return": {
            "type": "String",
            "description": "Column key."
          }
        },
        "getDefinition": {
          "guessedname": "getDefinition",
          "guessedtype": "function",
          "description": "Returns object literal definition.",
          "return": {
            "type": "Object",
            "description": "Object literal definition."
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Column instance name, for logging.",
          "return": {
            "type": "String",
            "description": "Column's unique name."
          }
        },
        "getField": {
          "guessedname": "getField",
          "guessedtype": "function",
          "description": "Returns field.",
          "return": {
            "type": "String",
            "description": "Column field."
          }
        },
        "getParent": {
          "guessedname": "getParent",
          "guessedtype": "function",
          "description": "Public accessor returns Column's parent instance if any, or null otherwise.",
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "Column's parent instance."
          }
        },
        "getRowspan": {
          "guessedname": "getRowspan",
          "guessedtype": "function",
          "description": "Public accessor returns Column's calculated ROWSPAN value.",
          "return": {
            "type": "Number",
            "description": "Column's ROWSPAN value."
          }
        },
        "getResizerEl": {
          "guessedname": "getResizerEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the resizer element, or null.",
          "return": {
            "type": "HTMLElement",
            "description": "DIV element."
          }
        },
        "getThEl": {
          "guessedname": "getThEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the key TH element.",
          "return": {
            "type": "HTMLElement",
            "description": "TH element."
          }
        },
        "getSanitizedKey": {
          "guessedname": "getSanitizedKey",
          "guessedtype": "function",
          "description": "Returns Column key which has been sanitized for DOM (class and ID) usage\nstarts with letter, contains only letters, numbers, hyphen, or period.",
          "return": {
            "type": "String",
            "description": "Sanitized Column key."
          }
        },
        "getThLInerEl": {
          "guessedname": "getThLinerEl",
          "guessedtype": "function",
          "description": "Returns DOM reference to the TH's liner DIV element. Introduced since\nresizeable Columns may have an extra resizer liner, making the DIV liner\nnot reliably the TH element's first child.",
          "return": {
            "type": "HTMLElement",
            "description": "TH element."
          }
        },
        "getColEl": {
          "guessedname": "getColEl",
          "guessedtype": "function",
          "deprecated": "Use getThEl"
        },
        "getKeyIndex": {
          "guessedname": "getKeyIndex",
          "guessedtype": "function",
          "description": "Public accessor returns Column's current position index within its\nColumnSet's keys array, if applicable. Only non-nested and bottom-level\nchild Columns will return a value.",
          "return": {
            "type": "Number",
            "description": "Position index, or null."
          }
        },
        "getId": {
          "guessedname": "getId",
          "guessedtype": "function",
          "description": "Returns unique ID string.",
          "return": {
            "type": "String",
            "description": "Unique ID string."
          }
        }
      },
      "name": "YAHOO.widget.Column",
      "guessedname": "Column",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The Column class defines and manages attributes of DataTable Columns",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  Object literal of definitions."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The Column class defines and manages attributes of DataTable Columns",
      "file": "ColumnSet.js",
      "properties": {
        "label": {
          "guessedname": "label",
          "type": "String",
          "guessedtype": "property",
          "description": "Text or HTML for display as Column's label in the TH element."
        },
        "Column._nCount": {
          "guessedname": "_nCount",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class variable to index multiple Column instances."
        },
        "formatter": {
          "guessedname": "formatter",
          "type": "String || HTMLFunction",
          "guessedtype": "property",
          "description": "Defines a format function."
        },
        "_nRowspan": {
          "private": "",
          "guessedname": "_nRowspan",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number of table rows the Column spans."
        },
        "sortOptions.field": {
          "default": "null",
          "type": "String",
          "description": "Custom field to sort on."
        },
        "_sId": {
          "private": "",
          "guessedname": "_sId",
          "type": "String",
          "guessedtype": "property",
          "description": "Unique String identifier assigned at instantiation."
        },
        "_elResizer": {
          "private": "",
          "guessedname": "_elResizer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The DOM reference to the associated resizerelement (if any)."
        },
        "_nWidth": {
          "private": "",
          "guessedname": "_nWidth",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal width tracker."
        },
        "sortable": {
          "guessedname": "sortable",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if Column is sortable, false otherwise."
        },
        "_elThLabel": {
          "private": "",
          "guessedname": "_elThLabel",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The DOM reference to the associated TH element's label SPAN element."
        },
        "currencyOptions": {
          "guessedname": "currencyOptions",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "description": "Config passed to YAHOO.util.Number.format() by the 'currency' Column formatter."
        },
        "editor": {
          "guessedname": "editor",
          "type": "YAHOO.widget.CellEditor",
          "guessedtype": "property",
          "description": "A CellEditor instance, otherwise Column is not editable."
        },
        "dateOptions": {
          "guessedname": "dateOptions",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "description": "Config passed to YAHOO.util.Date.format() by the 'date' Column formatter."
        },
        "className": {
          "guessedname": "className",
          "type": "String || String[]",
          "guessedtype": "property",
          "description": "Custom CSS class or array of classes to be applied to every cell in the Column."
        },
        "selected": {
          "guessedname": "selected",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if Column is in selected state."
        },
        "resizeable": {
          "guessedname": "resizeable",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if Column is resizeable, false otherwise. The Drag & Drop Utility is\nrequired to enable this feature. Only bottom-level and non-nested Columns are\nresizeble."
        },
        "_nKeyIndex": {
          "private": "",
          "guessedname": "_nKeyIndex",
          "type": "Number",
          "guessedtype": "property",
          "description": "Reference to Column's current position index within its ColumnSet's keys\narray, if applicable. This property only applies to non-nested and bottom-\nlevel child Columns."
        },
        "field": {
          "guessedname": "field",
          "type": "String",
          "guessedtype": "property",
          "description": "Associated database field, or null."
        },
        "_elThLiner": {
          "private": "",
          "guessedname": "_elThLiner",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The DOM reference to the associated TH element's liner DIV element."
        },
        "dropdownOptions": {
          "guessedname": "dropdownOptions",
          "type": "String[] | Object[]",
          "guessedtype": "property",
          "description": "Array of dropdown values for formatter:\"dropdown\" cases. Can either be a simple array (e.g.,\n[\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\"]) or a an array of objects (e.g.,\n[{label:\"Alabama\", value:\"AL\"}, {label:\"Alaska\", value:\"AK\"},\n{label:\"Arizona\", value:\"AZ\"}, {label:\"Arkansas\", value:\"AR\"}])."
        },
        "sortOptions.sortFunction": {
          "guessedname": "sortOptions",
          "default": "null",
          "type": "Function",
          "guessedtype": "property",
          "description": "Custom sort handler. Signature: sortFunction(a, b, desc, field) where field is the sortOptions.field value"
        },
        "_oParent": {
          "private": "",
          "guessedname": "_oParent",
          "type": "YAHOO.widget.Column",
          "guessedtype": "property",
          "description": "Column's parent Column instance, or null."
        },
        "sortOptions.defaultDir": {
          "default": "null",
          "type": "String",
          "description": "Default sort direction for Column: YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC."
        },
        "_elTh": {
          "private": "",
          "guessedname": "_elTh",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The DOM reference to the associated TH element."
        },
        "_ddResizer": {
          "private": "",
          "guessedname": "_ddResizer",
          "type": "YAHOO.util.DragDrop",
          "guessedtype": "property",
          "description": "For unreg() purposes, a reference to the Column resizer's DragDrop instance."
        },
        "key": {
          "guessedname": "key",
          "type": "String",
          "guessedtype": "property",
          "description": "Unique name, required."
        },
        "_dd": {
          "private": "",
          "guessedname": "_dd",
          "type": "YAHOO.util.DragDrop",
          "guessedtype": "property",
          "description": "For unreg() purposes, a reference to the Column's DragDrop instance."
        },
        "_nColspan": {
          "private": "",
          "guessedname": "_nColspan",
          "type": "Number",
          "guessedtype": "property",
          "description": "Number of table cells the Column spans."
        },
        "minWidth": {
          "guessedname": "minWidth",
          "default": "null",
          "type": "Number",
          "guessedtype": "property",
          "description": "Minimum Column width (in pixels)."
        },
        "children": {
          "guessedname": "children",
          "type": "Object[]",
          "guessedtype": "property",
          "description": "Array of object literals that define children (nested headers) of a Column."
        },
        "sortOptions.defaultOrder": {
          "deprecated": "Use sortOptions.defaultDir."
        },
        "_nTreeIndex": {
          "private": "",
          "guessedname": "_nTreeIndex",
          "type": "Number",
          "guessedtype": "property",
          "description": "Reference to Column's current position index within its ColumnSet's tree\narray, if applicable. This property only applies to non-nested and top-\nlevel parent Columns."
        },
        "maxAutoWidth": {
          "guessedname": "maxAutoWidth",
          "default": "null",
          "type": "Number",
          "guessedtype": "property",
          "description": "When a width is not defined for a Column, maxAutoWidth defines an upper\nlimit that the Column should be auto-sized to. If resizeable is enabled, \nusers may still resize to a greater width. Most useful for Columns intended\nto hold long unbroken, unwrapped Strings, such as URLs, to prevent very\nwide Columns from disrupting visual readability by inducing truncation."
        },
        "hidden": {
          "guessedname": "hidden",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if Column is in hidden state."
        },
        "abbr": {
          "guessedname": "abbr",
          "type": "String",
          "guessedtype": "property",
          "description": "Column head cell ABBR for accessibility."
        },
        "width": {
          "guessedname": "width",
          "type": "Number",
          "guessedtype": "property",
          "description": "Column width (in pixels)."
        }
      }
    },
    "YAHOO.util.UnexpectedValue": {
      "shortname": "UnexpectedValue",
      "superclass": "YAHOO.util.AssertionError",
      "methods": {
        "getMessage": {
          "guessedname": "getMessage",
          "guessedtype": "function",
          "description": "Returns a fully formatted error for an assertion failure. The message\ncontains information about the unexpected value that was encountered.",
          "return": {
            "type": "String",
            "description": "A string describing the error."
          }
        }
      },
      "name": "YAHOO.util.UnexpectedValue",
      "extends": "YAHOO.util.AssertionError",
      "guessedname": "UnexpectedValue",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "UnexpectedValue is subclass of AssertionError that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            },
            {
              "name": "unexpected",
              "type": "Object",
              "description": " The unexpected value."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "UnexpectedValue is subclass of AssertionError that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "type": "String",
          "description": "The name of the error that occurred."
        },
        "unexpected": {
          "type": "Object",
          "description": "The unexpected value."
        }
      }
    },
    "YAHOO.widget.EditorWindow": {
      "name": "YAHOO.widget.EditorWindow",
      "shortname": "EditorWindow",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the EditorWindow.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "setHeader": {
          "guessedname": "setHeader",
          "guessedtype": "function",
          "description": "Sets the header for the window.",
          "params": [
            {
              "name": "str",
              "type": "String/HTMLElement",
              "description": " The string or DOM reference to be used as the windows header."
            }
          ]
        },
        "setFooter": {
          "guessedname": "setFooter",
          "guessedtype": "function",
          "description": "Sets the footer for the window.",
          "params": [
            {
              "name": "str",
              "type": "String/HTMLElement",
              "description": " The string or DOM reference to be used as the windows footer."
            }
          ]
        },
        "setBody": {
          "guessedname": "setBody",
          "guessedtype": "function",
          "description": "Sets the body for the window.",
          "params": [
            {
              "name": "str",
              "type": "String/HTMLElement",
              "description": " The string or DOM reference to be used as the windows body."
            }
          ]
        }
      },
      "guessedname": "EditorWindow",
      "module": "editor",
      "namespace": "YAHOO.widget",
      "param": "{String} name The name of the window.",
      "guessedtype": "function",
      "description": "Class to hold Window information between uses. We use the same panel to show the windows, so using this will allow you to configure a window before it is shown.\nThis is what you pass to Editor.openWindow();. These parameters will not take effect until the openWindow() is called in the editor.",
      "file": "editor.js",
      "properties": {
        "name": {
          "guessedname": "name",
          "private": "",
          "guessedtype": "property",
          "description": "A unique name for the window"
        },
        "attrs": {
          "guessedname": "attrs",
          "private": "",
          "guessedtype": "property",
          "description": "The window attributes"
        },
        "body": {
          "guessedname": "body",
          "private": "",
          "guessedtype": "property",
          "description": "Holder for the body of the window, used in Editor.openWindow"
        },
        "header": {
          "guessedname": "header",
          "private": "",
          "guessedtype": "property",
          "description": "Holder for the header of the window, used in Editor.openWindow"
        },
        "footer": {
          "guessedname": "footer",
          "private": "",
          "guessedtype": "property",
          "description": "Holder for the footer of the window, used in Editor.openWindow"
        }
      }
    },
    "YAHOO.util.DragDropMgr.ElementWrapper": {
      "shortname": "DragDropMgr.ElementWrapper",
      "name": "YAHOO.util.DragDropMgr.ElementWrapper",
      "private": "",
      "guessedname": "ElementWrapper",
      "module": "dragdrop",
      "namespace": "YAHOO.util",
      "guessedtype": "function",
      "description": "Inner class for cached elements",
      "file": "DragDropMgr.js",
      "deprecated": "",
      "innerClasses": [
        "DragDropMgr"
      ],
      "for": "DragDropMgr",
      "properties": {
        "css": {
          "guessedname": "css",
          "guessedtype": "property",
          "description": "A reference to the style property"
        },
        "id": {
          "guessedname": "id",
          "guessedtype": "property",
          "description": "The element id"
        },
        "el": {
          "guessedname": "el",
          "guessedtype": "property",
          "description": "The element"
        }
      }
    },
    "YAHOO.util.StorageEngineSWF": {
      "shortname": "StorageEngineSWF",
      "name": "YAHOO.util.StorageEngineSWF",
      "guessedname": "StorageEngineSWF",
      "module": "Storage",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "The StorageEngineSWF class implements the SWF storage engine.",
          "params": [
            {
              "name": "location",
              "type": "String",
              "description": "  Required. The storage location."
            },
            {
              "name": "conf",
              "type": "Object",
              "description": "  Required. A configuration object."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The StorageEngineSWF class implements the SWF storage engine.",
      "file": "StorageEngineSWF.js",
      "extend": "YAHOO.util.Storage",
      "properties": {
        "_swf": {
          "guessedname": "_swf",
          "type": "{Object}",
          "guessedtype": "property",
          "protected": "",
          "description": "The underlying SWF of the engine, exposed so developers can modify the adapter behavior."
        }
      },
      "uses": [
        "YAHOO.widget.SWF"
      ]
    },
    "YAHOO.util.AssertionError": {
      "shortname": "AssertionError",
      "superclass": "Error",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the error.",
          "return": {
            "type": "String",
            "description": "A string representation of the error."
          }
        },
        "getMessage": {
          "guessedname": "getMessage",
          "guessedtype": "function",
          "description": "Returns a fully formatted error for an assertion failure. This should\nbe overridden by all subclasses to provide specific information.",
          "return": {
            "type": "String",
            "description": "A string describing the error."
          }
        }
      },
      "name": "YAHOO.util.AssertionError",
      "extends": "Error",
      "guessedname": "AssertionError",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "AssertionError is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "AssertionError is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "type": "String",
          "description": "The name of the error that occurred."
        }
      }
    },
    "YAHOO.widget.Editor": {
      "shortname": "Editor",
      "superclass": "YAHOO.widget.SimpleEditor",
      "methods": {
        "cmd_removeformat": {
          "guessedname": "cmd_removeformat",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('removeformat') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "cmd_undo": {
          "guessedname": "cmd_undo",
          "guessedtype": "function",
          "description": "Pulls an item from the Undo stack and updates the Editor",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_handleInsertImageWindowClose": {
          "guessedname": "_handleInsertImageWindowClose",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the closing of the Image Properties Window."
        },
        "_handleCreateLinkWindowClose": {
          "guessedname": "_handleCreateLinkWindowClose",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the closing of the Link Properties Window."
        },
        "_handleWindowInputs": {
          "guessedname": "_handleWindowInputs",
          "guessedtype": "function",
          "description": "Disables/Enables all fields inside Editor windows. Used in show/hide events to keep window fields from submitting when the parent form is submitted.",
          "params": [
            {
              "name": "disable",
              "type": "Boolean",
              "description": " The state to set all inputs in all Editor windows to. Defaults to: false."
            }
          ]
        },
        "cmd_superscript": {
          "guessedname": "cmd_superscript",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('superscript') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_putUndo": {
          "private": "",
          "guessedname": "_putUndo",
          "guessedtype": "function",
          "description": "Puts the content of the Editor into the _undoCache.\n//TODO Convert the hash to a series of TEXTAREAS to store state in.",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": " The content of the Editor"
            }
          ]
        },
        "_defaultImageToolbar": {
          "guessedname": "_defaultImageToolbar",
          "private": "",
          "guessedtype": "property",
          "description": "A reference to the Toolbar Object inside Image Editor Window."
        },
        "_undoNodeChange": {
          "guessedname": "_undoNodeChange",
          "private": "",
          "guessedtype": "function",
          "description": "nodeChange listener for undo processing"
        },
        "cmd_redo": {
          "guessedname": "cmd_redo",
          "guessedtype": "function",
          "description": "Pulls an item from the Undo stack and updates the Editor",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the editor.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "moveWindow": {
          "guessedname": "moveWindow",
          "guessedtype": "function",
          "description": "Realign the window with the currentElement and reposition the knob above the panel.",
          "params": [
            {
              "name": "force",
              "type": "Boolean",
              "description": " Boolean to tell it to move but not use any animation (Usually done the first time the window is loaded.)"
            }
          ]
        },
        "cmd_justify": {
          "guessedname": "cmd_justify",
          "guessedtype": "function",
          "description": "This is a factory method for the justify family of commands.",
          "params": [
            {
              "name": "dir",
              "type": "",
              "description": " The direction to justify"
            }
          ]
        },
        "_defaultImageToolbarConfig": {
          "guessedname": "_defaultImageToolbarConfig",
          "private": "",
          "guessedtype": "property",
          "description": "Config to be used for the default Image Editor Window."
        },
        "openWindow": {
          "guessedname": "openWindow",
          "guessedtype": "function",
          "description": "Opens a new \"window/panel\"",
          "params": [
            {
              "name": "win",
              "type": "<a href=\"YAHOO.widget.EditorWindow.html\">YAHOO.widget.EditorWindow</a>",
              "description": " A <a href=\"YAHOO.widget.EditorWindow.html\">YAHOO.widget.EditorWindow</a> instance"
            }
          ]
        },
        "_handleKeyDown": {
          "private": "",
          "guessedname": "_handleKeyDown",
          "guessedtype": "function",
          "description": "Override method that handles some new keydown events inside the iFrame document.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event we are working on."
            }
          ]
        },
        "_windows": {
          "guessedname": "_windows",
          "private": "",
          "guessedtype": "property",
          "description": "A reference to the HTML elements used for the body of Editor Windows."
        },
        "_handleInsertImageClick": {
          "guessedname": "_handleInsertImageClick",
          "private": "",
          "guessedtype": "function",
          "description": "Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked."
        },
        "cmd_subscript": {
          "guessedname": "cmd_subscript",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('subscript') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_checkUndo": {
          "guessedname": "_checkUndo",
          "private": "",
          "guessedtype": "function",
          "description": "Prunes the undo cache when it reaches the maxUndo config"
        },
        "cmd_hiddenelements": {
          "guessedname": "cmd_hiddenelements",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('hiddenelements') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_renderPanel": {
          "private": "",
          "guessedname": "_renderPanel",
          "guessedtype": "function",
          "description": "Renders the panel used for Editor Windows to the document so we can start using it..",
          "return": {
            "type": "<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>",
            "description": ""
          }
        },
        "cmd_outdent": {
          "guessedname": "cmd_outdent",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('outdent') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Editor class' initialization method"
        },
        "cmd_heading": {
          "guessedname": "cmd_heading",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('heading') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_renderCreateLinkWindow": {
          "guessedname": "_renderCreateLinkWindow",
          "private": "",
          "guessedtype": "function",
          "description": "Pre renders the CreateLink window so we get faster window opening."
        },
        "_fixNodes": {
          "guessedname": "_fixNodes",
          "private": "",
          "guessedtype": "function",
          "description": "Fix href and imgs as well as remove invalid HTML."
        },
        "cmd_indent": {
          "guessedname": "cmd_indent",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('indent') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_storeUndo": {
          "guessedname": "_storeUndo",
          "private": "",
          "guessedtype": "function",
          "description": "Method to call when you want to store an undo state. Currently called from nodeChange and _handleKeyUp"
        },
        "cmd_justifyright": {
          "guessedname": "cmd_justifyright",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('justifyright') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_closeWindow": {
          "private": "",
          "guessedname": "_closeWindow",
          "guessedtype": "function",
          "description": "Close the currently open EditorWindow with the Escape key.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The keypress Event that we are trapping"
            }
          ]
        },
        "_getUndo": {
          "guessedname": "_getUndo",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": " The index of the undo level we want to get."
            }
          ],
          "description": "Get's a level from the undo cache.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "_renderInsertImageWindow": {
          "guessedname": "_renderInsertImageWindow",
          "private": "",
          "guessedtype": "function",
          "description": "Pre renders the InsertImage window so we get faster window opening."
        },
        "cmd_script": {
          "guessedname": "cmd_script",
          "guessedtype": "function",
          "description": "This is a combined execCommand override method. It is called from the cmd_superscript and cmd_subscript methods.",
          "params": [
            {
              "name": "action",
              "type": "",
              "description": " action passed from the execCommand method"
            },
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "cmd_justifyleft": {
          "guessedname": "cmd_justifyleft",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('justifyleft') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "cmd_justifycenter": {
          "guessedname": "cmd_justifycenter",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('justifycenter') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_hasUndoLevel": {
          "private": "",
          "guessedname": "_hasUndoLevel",
          "guessedtype": "function",
          "description": "Checks to see if we have an undo level available",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Initializes all of the configuration attributes used to create \nthe editor.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the editor."
            }
          ]
        },
        "closeWindow": {
          "guessedname": "closeWindow",
          "guessedtype": "function",
          "description": "Close the currently open EditorWindow."
        }
      },
      "name": "YAHOO.widget.Editor",
      "extends": "YAHOO.widget.SimpleEditor",
      "guessedname": "Editor",
      "module": "editor",
      "namespace": "YAHOO.widget",
      "events": {
        "windowCMDOpen": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Dynamic event fired when an <a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a> is opened.. The dynamic event is based on the name of the window. Example Window: createlink, opening this window would fire the windowcreatelinkOpen event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "win",
              "type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>",
              "description": " The EditorWindow object"
            },
            {
              "name": "panel",
              "type": "Overlay",
              "description": " The Overlay object that is used to create the window."
            }
          ]
        },
        "beforeHiddencssChange": {
          "name": "beforeHiddencssChange",
          "description": "Fires before the value for the configuration attribute 'hiddencss' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "windowInsertImageRender": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fired when the pre render of the Insert Image window has finished.",
          "params": [
            {
              "name": "panel",
              "type": "Overlay",
              "description": " The Overlay object that is used to create the window."
            },
            {
              "name": "body",
              "type": "HTMLElement",
              "description": " The HTML element used as the body of the window.."
            },
            {
              "name": "toolbar",
              "type": "Toolbar",
              "description": " A reference to the toolbar object used inside this window."
            }
          ]
        },
        "hiddencssChange": {
          "name": "hiddencssChange",
          "description": "Fires when the value for the configuration attribute 'hiddencss' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "afterOpenWindow": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fires after an Editor Window is opened. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "win",
              "type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>",
              "description": " The EditorWindow object"
            },
            {
              "name": "panel",
              "type": "Overlay",
              "description": " The Overlay object that is used to create the window."
            }
          ]
        },
        "beforeLocalFileWarningChange": {
          "name": "beforeLocalFileWarningChange",
          "description": "Fires before the value for the configuration attribute 'localFileWarning' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "windowCMDClose": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Dynamic event fired when an <a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a> is closed.. The dynamic event is based on the name of the window. Example Window: createlink, opening this window would fire the windowcreatelinkClose event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "win",
              "type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>",
              "description": " The EditorWindow object"
            },
            {
              "name": "panel",
              "type": "Overlay",
              "description": " The Overlay object that is used to create the window."
            }
          ]
        },
        "beforeOpenWindow": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fires before an Editor Window is opened. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "win",
              "type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>",
              "description": " The EditorWindow object"
            },
            {
              "name": "panel",
              "type": "Overlay",
              "description": " The Overlay object that is used to create the window."
            }
          ]
        },
        "windowRender": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fired when the initial Overlay is rendered. Can be used to manipulate the content of the panel.",
          "params": [
            {
              "name": "win",
              "type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>",
              "description": " The EditorWindow object"
            },
            {
              "name": "panel",
              "type": "Overlay",
              "description": " The Overlay object that is used to create the window."
            }
          ]
        },
        "localFileWarningChange": {
          "name": "localFileWarningChange",
          "description": "Fires when the value for the configuration attribute 'localFileWarning' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "closeWindow": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fires after an Editor Window is closed. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "win",
              "type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow</a>",
              "description": " The EditorWindow object"
            }
          ]
        },
        "windowCreateLinkRender": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fired when the pre render of the Create Link window has finished.",
          "params": [
            {
              "name": "panel",
              "type": "Overlay",
              "description": " The Overlay object that is used to create the window."
            },
            {
              "name": "body",
              "type": "HTMLElement",
              "description": " The HTML element used as the body of the window.."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.",
          "params": [
            {
              "name": "el",
              "type": "String/HTMLElement",
              "description": " The textarea element to turn into an editor."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": " Object liternal containing configuration parameters."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.",
      "file": "editor.js",
      "configs": {
        "localFileWarning": {
          "default": "true",
          "type": "Boolean",
          "description": "Should we throw the warning if we detect a file that is local to their machine?"
        },
        "hiddencss": {
          "default": "<code><pre>\n.yui-hidden font, .yui-hidden strong, .yui-hidden b, .yui-hidden em, .yui-hidden i, .yui-hidden u,\n.yui-hidden div, .yui-hidden p, .yui-hidden span, .yui-hidden img, .yui-hidden ul, .yui-hidden ol,\n.yui-hidden li, .yui-hidden table {\nborder: 1px dotted #ccc;\n}\n.yui-hidden .yui-non {\nborder: none;\n}\n.yui-hidden img {\npadding: 2px;\n}</pre></code>",
          "type": "String",
          "description": "The CSS used to show/hide hidden elements on the page, these rules must be prefixed with the class provided in <code>this.CLASS_HIDDEN</code>"
        }
      },
      "properties": {
        "STR_IMAGE_PADDING": {
          "guessedname": "STR_IMAGE_PADDING",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the image padding."
        },
        "STR_IMAGE_ORIG_SIZE": {
          "guessedname": "STR_IMAGE_ORIG_SIZE",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for Original Image Size"
        },
        "STR_IMAGE_COPY": {
          "guessedname": "STR_IMAGE_COPY",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the image copy and paste message for Opera and Safari"
        },
        "STR_IMAGE_SIZE": {
          "guessedname": "STR_IMAGE_SIZE",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for Image Size"
        },
        "STR_CLOSE_WINDOW_NOTE": {
          "guessedname": "STR_CLOSE_WINDOW_NOTE",
          "type": "String",
          "guessedtype": "property",
          "description": "A note appearing in the Editor Window to tell the user that the Escape key will close the window"
        },
        "CLASS_LOCAL_FILE": {
          "guessedname": "CLASS_LOCAL_FILE",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "CSS class applied to an element when it's found to have a local url."
        },
        "STR_LINK_TITLE": {
          "guessedname": "STR_LINK_TITLE",
          "type": "String",
          "guessedtype": "property",
          "description": "The string for the link description."
        },
        "_undoLevel": {
          "private": "",
          "guessedname": "_undoLevel",
          "type": "Number",
          "guessedtype": "property",
          "description": "The index of the current undo state."
        },
        "STR_IMAGE_TEXTFLOW": {
          "guessedname": "STR_IMAGE_TEXTFLOW",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the image text flow."
        },
        "STR_IMAGE_PROP_TITLE": {
          "guessedname": "STR_IMAGE_PROP_TITLE",
          "type": "String",
          "guessedtype": "property",
          "description": "The title for the Image Property Editor Window"
        },
        "STR_IMAGE_BORDER_TYPE": {
          "guessedname": "STR_IMAGE_BORDER_TYPE",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the image border type."
        },
        "STR_IMAGE_BORDER_SIZE": {
          "guessedname": "STR_IMAGE_BORDER_SIZE",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the image border size."
        },
        "STR_IMAGE_TITLE": {
          "guessedname": "STR_IMAGE_TITLE",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for Image Description"
        },
        "_disabled": {
          "private": "",
          "guessedname": "_disabled",
          "type": "Array",
          "guessedtype": "property",
          "description": "The Toolbar items that should be disabled if there is no selection present in the editor."
        },
        "STR_CLOSE_WINDOW": {
          "guessedname": "STR_CLOSE_WINDOW",
          "type": "String",
          "guessedtype": "property",
          "description": "The Title of the close button in the Editor Window"
        },
        "STR_LOCAL_FILE_WARNING": {
          "guessedname": "STR_LOCAL_FILE_WARNING",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the local file warning."
        },
        "EDITOR_PANEL_ID": {
          "guessedname": "EDITOR_PANEL_ID",
          "type": "String",
          "guessedtype": "property",
          "description": "HTML id to give the properties window in the DOM."
        },
        "STR_LINK_PROP_TITLE": {
          "guessedname": "STR_LINK_PROP_TITLE",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the Link Property Editor Window."
        },
        "STR_LINK_PROP_REMOVE": {
          "guessedname": "STR_LINK_PROP_REMOVE",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the Remove link from text link inside the property editor."
        },
        "STR_BEFORE_EDITOR": {
          "guessedname": "STR_BEFORE_EDITOR",
          "type": "String",
          "guessedtype": "property",
          "description": "The accessibility string for the element before the iFrame"
        },
        "_undoCache": {
          "private": "",
          "guessedname": "_undoCache",
          "type": "Array",
          "guessedtype": "property",
          "description": "An Array hash of the Undo Levels."
        },
        "_alwaysEnabled": {
          "private": "",
          "guessedname": "_alwaysEnabled",
          "type": "Object",
          "guessedtype": "property",
          "description": "The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor."
        },
        "STR_IMAGE_BORDER": {
          "guessedname": "STR_IMAGE_BORDER",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the image border."
        },
        "STR_LINK_NEW_WINDOW": {
          "guessedname": "STR_LINK_NEW_WINDOW",
          "type": "String",
          "guessedtype": "property",
          "description": "The string for the open in a new window label."
        },
        "CLASS_HIDDEN": {
          "guessedname": "CLASS_HIDDEN",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "CSS class applied to the body when the hiddenelements button is pressed."
        },
        "STR_NONE": {
          "guessedname": "STR_NONE",
          "type": "String",
          "guessedtype": "property",
          "description": "The string for the word none."
        },
        "_alwaysDisabled": {
          "private": "",
          "guessedname": "_alwaysDisabled",
          "type": "Object",
          "guessedtype": "property",
          "description": "The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor."
        }
      }
    },
    "YAHOO.widget.Calendar2up": {
      "shortname": "Calendar2up",
      "superclass": "YAHOO.widget.CalendarGroup",
      "name": "YAHOO.widget.Calendar2up",
      "extends": "YAHOO.widget.CalendarGroup",
      "guessedname": "Calendar2up",
      "module": "calendar",
      "namespace": "YAHOO.widget",
      "guessedtype": "function",
      "file": "CalendarGroup.js",
      "deprecated": "The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.",
      "properties": {
        "Cal2up": {
          "guessedname": "Cal2up",
          "guessedtype": "property",
          "deprecated": "The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default."
        }
      }
    },
    "YAHOO.widget.Node": {
      "shortname": "Node",
      "methods": {
        "collapseAll": {
          "guessedname": "collapseAll",
          "guessedtype": "function",
          "description": "Recursively collapses all of this node's children."
        },
        "getHoverStyle": {
          "guessedname": "getHoverStyle",
          "guessedtype": "function",
          "description": "Returns the hover style for the icon",
          "return": {
            "type": "string",
            "description": "the css class hover state"
          }
        },
        "isChildOf": {
          "guessedname": "isChildOf",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "parentNode",
              "type": "Node",
              "description": "  the Node to check"
            }
          ],
          "description": "Returns true if the Node is a child of supplied Node",
          "return": {
            "type": "boolean",
            "description": "The node index if this Node is a child of \nsupplied Node, else -1."
          }
        },
        "_canHaveFocus": {
          "private": "",
          "guessedname": "_canHaveFocus",
          "guessedtype": "function",
          "description": "Returns true if there are any elements in the node that can \naccept the real actual browser focus",
          "return": {
            "type": "boolean",
            "description": "success"
          }
        },
        "getEl": {
          "guessedname": "getEl",
          "guessedtype": "function",
          "description": "Returns this node's container html element",
          "return": {
            "type": "HTMLElement",
            "description": "the container html element"
          }
        },
        "saveEditorValue": {
          "guessedname": "saveEditorValue",
          "guessedtype": "function",
          "description": "Saves the value entered into the editor.",
          "params": [
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ],
          "return": {
            "type": "false or none",
            "description": "a return of exactly false will prevent the editor from closing"
          }
        },
        "toggle": {
          "guessedname": "toggle",
          "guessedtype": "function",
          "description": "Expands if node is collapsed, collapses otherwise."
        },
        "getChildrenElId": {
          "guessedname": "getChildrenElId",
          "guessedtype": "function",
          "description": "Returns the id for this node's children div",
          "return": {
            "type": "string",
            "description": "the element id for this node's children div"
          }
        },
        "getHtml": {
          "guessedname": "getHtml",
          "guessedtype": "function",
          "description": "Returns the markup for this node and its children.",
          "return": {
            "type": "string",
            "description": "the markup for this node and its expanded children."
          }
        },
        "getEditorValue": {
          "guessedname": "getEditorValue",
          "guessedtype": "function",
          "description": "Returns the value(s) from the input element(s) .\nShould be overridden by each node type.",
          "params": [
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ],
          "return": {
            "type": "any",
            "description": "value entered"
          }
        },
        "_childrenHighlighted": {
          "guessedname": "_childrenHighlighted",
          "private": "",
          "guessedtype": "function",
          "description": "Checks whether all or part of the children of a node are highlighted and\nsets the node highlight to full, none or partial highlight.\nIf set to propagate it will further call the parent"
        },
        "highlight": {
          "guessedname": "highlight",
          "guessedtype": "function",
          "description": "Turns highlighting on node.",
          "params": [
            {
              "name": "_silent",
              "type": "boolean",
              "description": "  optional, don't fire the highlightEvent"
            }
          ]
        },
        "getNodeDefinition": {
          "guessedname": "getNodeDefinition",
          "guessedtype": "function",
          "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nIt will return false if the node or any children loads dynamically, regardless of whether it is loaded or not.",
          "return": {
            "type": "Object | false",
            "description": "definition of the tree or false if the node or any children is defined as dynamic"
          }
        },
        "getChildrenHtml": {
          "private": "",
          "guessedname": "getChildrenHtml",
          "guessedtype": "function",
          "description": "Called when first rendering the tree.  We always build the div that will\ncontain this nodes children, but we don't render the children themselves\nunless this node is expanded.",
          "return": {
            "type": "string",
            "description": "the children container div html and any expanded children"
          }
        },
        "getAncestor": {
          "guessedname": "getAncestor",
          "guessedtype": "function",
          "description": "Returns this node's ancestor at the specified depth.",
          "params": [
            {
              "name": "depth",
              "type": "int",
              "description": " the depth of the ancestor."
            }
          ],
          "return": {
            "type": "Node",
            "description": "the ancestor"
          }
        },
        "toggleHighlight": {
          "guessedname": "toggleHighlight",
          "guessedtype": "function",
          "description": "Toggles the highlighted state of a Node"
        },
        "setNodesProperty": {
          "guessedname": "setNodesProperty",
          "guessedtype": "function",
          "description": "Sets the value of property for this node and all loaded descendants.  \nOnly public and defined properties can be set, not methods.  \nValues for unknown properties will be assigned to the refNode.data object",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "  Name of the property to be set"
            },
            {
              "name": "value",
              "type": "any",
              "description": "  value to be set"
            },
            {
              "name": "refresh",
              "type": "boolean",
              "description": "  if present and true, it does a refresh"
            }
          ]
        },
        "getToggleElId": {
          "guessedname": "getToggleElId",
          "guessedtype": "function",
          "description": "Returns the id for this node's toggle element",
          "return": {
            "type": "string",
            "description": "the toggel element id"
          }
        },
        "isRoot": {
          "guessedname": "isRoot",
          "guessedtype": "function",
          "description": "Evaluates if this node is the root node of the tree",
          "return": {
            "type": "boolean",
            "description": "true if this is the root node"
          }
        },
        "getNodeHtml": {
          "guessedname": "getNodeHtml",
          "guessedtype": "function",
          "description": "Get the markup for the node.  This may be overrided so that we can\nsupport different types of nodes.",
          "return": {
            "type": "string",
            "description": "The HTML that will render this node."
          }
        },
        "getStyle": {
          "guessedname": "getStyle",
          "guessedtype": "function",
          "description": "Returns the css style name for the toggle",
          "return": {
            "type": "string",
            "description": "the css class for this node's toggle"
          }
        },
        "getContentHtml": {
          "guessedname": "getContentHtml",
          "guessedtype": "function",
          "description": "Get the markup for the contents of the node.  This is designed to be overrided so that we can\nsupport different types of nodes.",
          "return": {
            "type": "string",
            "description": "The HTML that will render the content of this node."
          }
        },
        "editNode": {
          "guessedname": "editNode",
          "guessedtype": "function",
          "description": "pops up the contents editor, if there is one and the node is declared editable"
        },
        "getNodeCount": {
          "guessedname": "getNodeCount",
          "guessedtype": "function",
          "description": "Count of nodes in a branch",
          "return": {
            "type": "int",
            "description": "number of nodes in the branch"
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Node toString",
          "return": {
            "type": "string",
            "description": "string representation of the node"
          }
        },
        "setDynamicLoad": {
          "guessedname": "setDynamicLoad",
          "guessedtype": "function",
          "description": "Configures this node for dynamically obtaining the child data\nwhen the node is first expanded.  Calling it without the callback\nwill turn off dynamic load for the node.",
          "params": [
            {
              "name": "fmDataLoader",
              "type": "function",
              "description": "  the function that will be used to get the data."
            },
            {
              "name": "iconMode",
              "type": "int",
              "description": "  configures the icon that is displayed when a dynamic\nload node is expanded the first time without children.  By default, the \n\"collapse\" icon will be used.  If set to 1, the leaf node icon will be\ndisplayed."
            }
          ]
        },
        "applyParent": {
          "guessedname": "applyParent",
          "guessedtype": "function",
          "description": "Certain properties for the node cannot be set until the parent\nis known. This is called after the node is inserted into a tree.\nthe parent is also applied to this node's children in order to\nmake it possible to move a branch from one tree to another.",
          "params": [
            {
              "name": "parentNode",
              "type": "Node",
              "description": " this node's parent node"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if the application was successful"
          }
        },
        "completeRender": {
          "guessedname": "completeRender",
          "guessedtype": "function",
          "description": "Called when we know we have all the child data.",
          "return": {
            "type": "string",
            "description": "children html"
          }
        },
        "getElId": {
          "guessedname": "getElId",
          "guessedtype": "function",
          "description": "Returns the id for this node's container div",
          "return": {
            "type": "string",
            "description": "the element id"
          }
        },
        "expand": {
          "guessedname": "expand",
          "guessedtype": "function",
          "description": "Shows this nodes children (creating them if necessary), changes the\ntoggle style, and collapses its siblings if multiExpand is not set."
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Sets the focus on the node element.\nIt will only be able to set the focus on nodes that have anchor elements in it.  \nToggle or branch icons have anchors and can be focused on.  \nIf will fail in nodes that have no anchor",
          "return": {
            "type": "boolean",
            "description": "success"
          }
        },
        "getDepthStyle": {
          "guessedname": "getDepthStyle",
          "guessedtype": "function",
          "description": "Returns the css class for the spacer at the specified depth for\nthis node.  If this node's ancestor at the specified depth\nhas a next sibling the presentation is different than if it\ndoes not have a next sibling",
          "params": [
            {
              "name": "depth",
              "type": "int",
              "description": " the depth of the ancestor."
            }
          ],
          "return": {
            "type": "string",
            "description": "the css class for the spacer"
          }
        },
        "insertBefore": {
          "guessedname": "insertBefore",
          "guessedtype": "function",
          "description": "Inserts this node before this supplied node",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "  the node to insert this node before"
            }
          ],
          "return": {
            "type": "Node",
            "description": "the inserted node"
          }
        },
        "appendChild": {
          "guessedname": "appendChild",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "childNode",
              "type": "Node",
              "description": "  the new node"
            }
          ],
          "description": "Appends a node to the child collection.",
          "return": {
            "type": "Node",
            "description": "the child node"
          }
        },
        "refresh": {
          "guessedname": "refresh",
          "guessedtype": "function",
          "description": "Regenerates the html for this node and its children.  To be used when the\nnode is expanded and new children have been added."
        },
        "destroyEditorContents": {
          "guessedname": "destroyEditorContents",
          "guessedtype": "function",
          "description": "Node-specific destroy function to empty the contents of the inline editor panel.\nThis function is the worst case alternative that will purge all possible events and remove the editor contents.\nMethod Event.purgeElement is somewhat costly so if it can be replaced by specifc Event.removeListeners, it is better to do so.",
          "params": [
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ]
        },
        "hideChildren": {
          "guessedname": "hideChildren",
          "guessedtype": "function",
          "description": "Hides this node's children"
        },
        "hasChildren": {
          "guessedname": "hasChildren",
          "guessedtype": "function",
          "description": "Checks if this node has children.  If this node is lazy-loading and the\nchildren have not been rendered, we do not know whether or not there\nare actual children.  In most cases, we need to assume that there are\nchildren (for instance, the toggle needs to show the expandable \npresentation state).  In other times we want to know if there are rendered\nchildren.  For the latter, \"checkForLazyLoad\" should be false.",
          "params": [
            {
              "name": "checkForLazyLoad",
              "type": "boolean",
              "description": "  should we check for unloaded children?"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if this has children or if it might and we are\nchecking for this condition."
          }
        },
        "_removeFocus": {
          "guessedname": "_removeFocus",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the focus of previously selected Node"
        },
        "collapse": {
          "guessedname": "collapse",
          "guessedtype": "function",
          "description": "Hides this nodes children (creating them if necessary), changes the toggle style."
        },
        "getToggleLink": {
          "guessedname": "getToggleLink",
          "guessedtype": "function",
          "description": "Generates the link that will invoke this node's toggle method",
          "return": {
            "type": "string",
            "description": "the javascript url for toggling this node"
          }
        },
        "getIconMode": {
          "guessedname": "getIconMode",
          "guessedtype": "function",
          "description": "Returns the current icon mode.  This refers to the way childless dynamic\nload nodes appear (this comes into play only after the initial dynamic\nload request produced no children).",
          "return": {
            "type": "int",
            "description": "0 for collapse style, 1 for leaf node style"
          }
        },
        "getSiblings": {
          "guessedname": "getSiblings",
          "guessedtype": "function",
          "description": "Returns a node array of this node's siblings, null if none.",
          "return": {
            "type": "",
            "description": "Node[]"
          }
        },
        "insertAfter": {
          "guessedname": "insertAfter",
          "guessedtype": "function",
          "description": "Inserts this node after the supplied node",
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "  the node to insert after"
            }
          ],
          "return": {
            "type": "Node",
            "description": "the inserted node"
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Initializes this node, gets some of the properties from the parent",
          "params": [
            {
              "name": "oData",
              "type": "object",
              "description": "  a string or object containing the data that will\nbe used to render this node"
            },
            {
              "name": "oParent",
              "type": "Node",
              "description": "  this node's parent node"
            },
            {
              "name": "expanded",
              "type": "boolean",
              "description": "  the initial expanded/collapsed state"
            }
          ]
        },
        "fillEditorContainer": {
          "guessedname": "fillEditorContainer",
          "guessedtype": "property",
          "description": "Placeholder for a function that should provide the inline node label editor.\nLeaving it set to null will indicate that this node type is not editable.\nIt should be overridden by nodes that provide inline editing.\nThe Node-specific editing element (input box, textarea or whatever) should be inserted into editorData.inputContainer.",
          "params": [
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "displayEditedValue": {
          "guessedname": "displayEditedValue",
          "guessedtype": "function",
          "description": "Finally displays the newly edited value(s) in the tree.\nShould be overridden by each node type.",
          "params": [
            {
              "name": "value",
              "type": "any",
              "description": "  value to be displayed and stored in the node"
            },
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ]
        },
        "showChildren": {
          "guessedname": "showChildren",
          "guessedtype": "function",
          "description": "Shows this node's children"
        },
        "getToggleEl": {
          "guessedname": "getToggleEl",
          "guessedtype": "function",
          "description": "Returns the element that is being used for this node's toggle.",
          "return": {
            "type": "HTMLElement",
            "description": "this node's toggle html element"
          }
        },
        "loadComplete": {
          "guessedname": "loadComplete",
          "guessedtype": "function",
          "description": "Load complete is the callback function we pass to the data provider\nin dynamic load situations."
        },
        "_setHighlightClassName": {
          "guessedname": "_setHighlightClassName",
          "private": "",
          "guessedtype": "function",
          "description": "Changes the classNames on the toggle and content containers to reflect the current highlighting"
        },
        "expandAll": {
          "guessedname": "expandAll",
          "guessedtype": "function",
          "description": "Recursively expands all of this node's children."
        },
        "unhighlight": {
          "guessedname": "unhighlight",
          "guessedtype": "function",
          "description": "Turns highlighting off a node.",
          "params": [
            {
              "name": "_silent",
              "type": "boolean",
              "description": "  optional, don't fire the highlightEvent"
            }
          ]
        },
        "renderChildren": {
          "private": "",
          "guessedname": "renderChildren",
          "guessedtype": "function",
          "description": "Generates the markup for the child nodes.  This is not done until the node\nis expanded.",
          "return": {
            "type": "string",
            "description": "the html for this node's children"
          }
        },
        "getContentEl": {
          "guessedname": "getContentEl",
          "guessedtype": "function",
          "description": "Returns the outer html element for this node's content",
          "return": {
            "type": "HTMLElement",
            "description": "the element"
          }
        },
        "appendTo": {
          "guessedname": "appendTo",
          "guessedtype": "function",
          "description": "Appends this node to the supplied node's child collection",
          "params": [
            {
              "name": "parentNode",
              "type": "Node",
              "description": "  the node to append to."
            }
          ],
          "return": {
            "type": "Node",
            "description": "The appended node"
          }
        },
        "isDynamic": {
          "guessedname": "isDynamic",
          "guessedtype": "function",
          "description": "Evaluates if this node's children should be loaded dynamically.  Looks for\nthe property both in this instance and the root node.  If the tree is\ndefined to load all children dynamically, the data callback function is\ndefined in the root node",
          "return": {
            "type": "boolean",
            "description": "true if this node's children are to be loaded dynamically"
          }
        },
        "getChildrenEl": {
          "guessedname": "getChildrenEl",
          "guessedtype": "function",
          "description": "Returns the div that was generated for this node's children",
          "return": {
            "type": "HTMLElement",
            "description": "this node's children div"
          }
        }
      },
      "name": "YAHOO.widget.Node",
      "guessedname": "Node",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "events": {
        "parentChange": {
          "type": "CustomEvent",
          "description": "The parentChange event is fired when a parent element is applied\nto the node.  This is useful if you need to apply tree-level\nproperties to a tree that need to happen if a node is moved from\none tree to another."
        }
      },
      "constructors": [
        {
          "description": "The base class for all tree nodes.  The node's presentation and behavior in\nresponse to mouse events is handled in Node subclasses.",
          "params": [
            {
              "name": "oData",
              "type": "object",
              "description": "  a string or object containing the data that will\nbe used to render this node, and any custom attributes that should be\nstored with the node (which is available in noderef.data).\nAll values in oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private or functions,\nthe rest of the values will be stored in noderef.data"
            },
            {
              "name": "oParent",
              "type": "Node",
              "description": "  this node's parent node"
            },
            {
              "name": "expanded",
              "type": "boolean",
              "description": "  the initial expanded/collapsed state (deprecated, use oData.expanded)"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The base class for all tree nodes.  The node's presentation and behavior in\nresponse to mouse events is handled in Node subclasses.",
      "file": "Node.js",
      "properties": {
        "previousSibling": {
          "guessedname": "previousSibling",
          "type": "Node",
          "guessedtype": "property",
          "description": "This node's previous sibling"
        },
        "renderHidden": {
          "guessedname": "renderHidden",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Should we render children for a collapsed node?  It is possible that the\nimplementer will want to render the hidden data...  @todo verify that we \nneed this, and implement it if we do."
        },
        "childrenRendered": {
          "guessedname": "childrenRendered",
          "type": "boolean",
          "guessedtype": "property",
          "description": "This flag is set to true when the html is generated for this node's\nchildren, and set to false when new children are added."
        },
        "data": {
          "guessedname": "data",
          "type": "object",
          "guessedtype": "property",
          "description": "The data linked to this node.  This can be any object or primitive\nvalue, and the data can be used in getNodeHtml()."
        },
        "parent": {
          "guessedname": "parent",
          "type": "Node",
          "guessedtype": "property",
          "description": "Parent node"
        },
        "multiExpand": {
          "guessedname": "multiExpand",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Can multiple children be expanded at once?"
        },
        "contentStyle": {
          "guessedname": "contentStyle",
          "type": "string",
          "guessedtype": "property",
          "description": "The CSS class for the html content container.  Defaults to ygtvhtml, but \ncan be overridden to provide a custom presentation for a specific node."
        },
        "depth": {
          "guessedname": "depth",
          "type": "int",
          "guessedtype": "property",
          "description": "The depth of this node.  We start at -1 for the root node."
        },
        "_dynLoad": {
          "private": "",
          "guessedname": "_dynLoad",
          "type": "boolean",
          "guessedtype": "property",
          "description": "We can set the node up to call an external method to get the child\ndata dynamically."
        },
        "nowrap": {
          "guessedname": "nowrap",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Specifies whether or not the content area of the node should be allowed\nto wrap."
        },
        "_focusedItem": {
          "private": "",
          "guessedname": "_focusedItem",
          "type": "DOM element",
          "guessedtype": "property",
          "description": "DOM element that actually got the browser focus"
        },
        "expanded": {
          "guessedname": "expanded",
          "type": "boolean",
          "guessedtype": "property",
          "description": "The node's expanded/collapsed state"
        },
        "_type": {
          "guessedname": "_type",
          "private": "",
          "default": "\"Node\"",
          "type": "string",
          "guessedtype": "property",
          "description": "The node type"
        },
        "className": {
          "guessedname": "className",
          "default": "null",
          "type": "string",
          "guessedtype": "property",
          "description": "User-defined className to be added to the Node"
        },
        "enableHighlight": {
          "guessedname": "enableHighlight",
          "default": "true",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Enables node highlighting.  If true, the node can be highlighted and/or propagate highlighting"
        },
        "editable": {
          "guessedname": "editable",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Signals if the label is editable.  (Ignored on TextNodes with href set.)"
        },
        "propagateHighlightDown": {
          "guessedname": "propagateHighlightDown",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Tells whether highlighting will be propagated down to the children of the clicked node"
        },
        "nextSibling": {
          "guessedname": "nextSibling",
          "type": "Node",
          "guessedtype": "property",
          "description": "This node's next sibling"
        },
        "contentElId": {
          "guessedname": "contentElId",
          "type": "string",
          "guessedtype": "property",
          "description": "The generated id that will contain the data passed in by the implementer."
        },
        "dataLoader": {
          "guessedname": "dataLoader",
          "type": "function",
          "guessedtype": "property",
          "description": "Function to execute when we need to get this node's child data."
        },
        "index": {
          "guessedname": "index",
          "type": "int",
          "guessedtype": "property",
          "description": "The index for this instance obtained from global counter in YAHOO.widget.TreeView."
        },
        "isLoading": {
          "guessedname": "isLoading",
          "type": "boolean",
          "guessedtype": "property",
          "description": "This is true for dynamically loading nodes while waiting for the\ncallback to return."
        },
        "_focusHighlightedItems": {
          "private": "",
          "guessedname": "_focusHighlightedItems",
          "type": "Array of DOM elements",
          "guessedtype": "property",
          "description": "array of items that had the focus set on them\nso that they can be cleaned when focus is lost"
        },
        "iconMode": {
          "guessedname": "iconMode",
          "type": "int",
          "guessedtype": "property",
          "description": "Used to configure what happens when a dynamic load node is expanded\nand we discover that it does not have children.  By default, it is\ntreated as if it still could have children (plus/minus icon).  Set\niconMode to have it display like a leaf node instead."
        },
        "highlightState": {
          "guessedname": "highlightState",
          "default": "0",
          "type": "integer",
          "guessedtype": "property",
          "description": "Stores the highlight state.  Can be any of:\n<ul>\n<li>0 - not highlighted</li>\n<li>1 - highlighted</li>\n<li>2 - some children highlighted</li>\n</ul>"
        },
        "children": {
          "guessedname": "children",
          "type": "Node[]",
          "guessedtype": "property",
          "description": "This node's child node collection."
        },
        "tree": {
          "guessedname": "tree",
          "type": "TreeView",
          "guessedtype": "property",
          "description": "Tree instance this node is part of"
        },
        "hasIcon": {
          "guessedname": "hasIcon",
          "type": "boolean",
          "guessedtype": "property",
          "description": "The toggle/branch icon will not show if this is set to false.  This\ncould be useful if the implementer wants to have the child contain\nextra info about the parent, rather than an actual node."
        },
        "isLeaf": {
          "guessedname": "isLeaf",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "If true, the node will alway be rendered as a leaf node.  This can be\nused to override the presentation when dynamically loading the entire\ntree.  Setting this to true also disables the dynamic load call for the\nnode."
        },
        "dynamicLoadComplete": {
          "guessedname": "dynamicLoadComplete",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Dynamically loaded nodes only fetch the data the first time they are\nexpanded.  This flag is set to true once the data has been fetched."
        },
        "propagateHighlightUp": {
          "guessedname": "propagateHighlightUp",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Tells whether highlighting will be propagated up to the parents of the clicked node"
        }
      },
      "uses": [
        "YAHOO.util.EventProvider"
      ]
    },
    "YAHOO.widget.ProgressBar": {
      "shortname": "ProgressBar",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "_fixEdges": {
          "private": "",
          "guessedname": "_fixEdges",
          "guessedtype": "function",
          "description": "Due to rounding differences, some browsers fail to cover the whole area \nwith the mask quadrants when the width or height is odd.  This method\nstretches the lower and/or right quadrants to make the difference.",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "redraw": {
          "guessedname": "redraw",
          "guessedtype": "function",
          "description": "Recalculates the bar size and position and redraws it",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Destroys the ProgressBar, related objects and unsubscribes from all events",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_heightChange": {
          "guessedname": "_heightChange",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "value",
              "type": "int or string",
              "description": " New height, in pixels if int or string including units"
            }
          ],
          "description": "Method called when the height attribute is changed",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_valueChange": {
          "private": "",
          "guessedname": "_valueChange",
          "guessedtype": "function",
          "description": "Called in response to a change in the <a href=\"#config_value\">value</a> attribute.\nMoves the bar to reflect the new value",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "render": {
          "guessedname": "render",
          "chainable": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTML Element",
              "description": "   HTML element that will contain the ProgressBar"
            },
            {
              "name": "before",
              "type": "HTML Element",
              "description": "   (optional) If present, the ProgressBar will be inserted before this element."
            }
          ],
          "description": "Renders the ProgressBar into the given container.  \nIf the container has other content, the ProgressBar will be appended to it.\nIf the second argument is provided, the ProgressBar will be inserted before the given child.\nThe method is chainable since it returns a reference to this instance.",
          "return": {
            "type": "YAHOO.widget.ProgressBar",
            "description": ""
          }
        },
        "_widthChange": {
          "guessedname": "_widthChange",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "value",
              "type": "int or string",
              "description": " New width, in pixels if int or string including units"
            }
          ],
          "description": "Method called when the height attribute is changed",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_setAriaText": {
          "private": "",
          "guessedname": "_setAriaText",
          "guessedtype": "function",
          "description": "Utility method to set the ARIA value attributes",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_animSetter": {
          "private": "",
          "guessedname": "_animSetter",
          "guessedtype": "function",
          "description": "Called in response to a change in the <a href=\"#config_anim\">anim</a> attribute.\nIt creates and sets up or destroys the instance of the animation utility that will move the bar",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "_recalculateConstants": {
          "private": "",
          "guessedname": "_recalculateConstants",
          "guessedtype": "function",
          "description": "Calculates some auxiliary values to make the rendering faster",
          "return": {
            "type": "",
            "description": "void"
          }
        },
        "initAttributes": {
          "private": "",
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Implementation of Element's abstract method. Sets up config values.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal definition of configuration values."
            }
          ]
        },
        "_init": {
          "guessedname": "_init",
          "guessedtype": "function",
          "protected": "",
          "description": "Initialization code for the widget, separate from the constructor to allow for overriding/patching.\nIt is called after <a href=\"#method_initAttributes\">initAttributes</a>",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal definition of configuration values."
            }
          ]
        }
      },
      "name": "YAHOO.widget.ProgressBar",
      "extends": "YAHOO.util.Element",
      "guessedname": "Prog",
      "module": "progressbar",
      "namespace": "YAHOO.widget",
      "events": {
        "widthChange": {
          "name": "widthChange",
          "description": "Fires when the value for the configuration attribute 'width' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "ariaTextTemplateChange": {
          "name": "ariaTextTemplateChange",
          "description": "Fires when the value for the configuration attribute 'ariaTextTemplate' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "animChange": {
          "name": "animChange",
          "description": "Fires when the value for the configuration attribute 'anim' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "heightChange": {
          "name": "heightChange",
          "description": "Fires when the value for the configuration attribute 'height' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHeightChange": {
          "name": "beforeHeightChange",
          "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMinValueChange": {
          "name": "beforeMinValueChange",
          "description": "Fires before the value for the configuration attribute 'minValue' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeValueChange": {
          "name": "beforeValueChange",
          "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMaskElChange": {
          "name": "beforeMaskElChange",
          "description": "Fires before the value for the configuration attribute 'maskEl' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "progress": {
          "type": "CustomEvent",
          "description": "If animation is active, it will trigger several times during the animation providing intermediate values\nIf animation is not active, it will fire only once providing the end value",
          "params": [
            {
              "name": "value",
              "type": "Number",
              "description": " the current, changing value"
            }
          ]
        },
        "beforeAnimChange": {
          "name": "beforeAnimChange",
          "description": "Fires before the value for the configuration attribute 'anim' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAriaTextTemplateChange": {
          "name": "beforeAriaTextTemplateChange",
          "description": "Fires before the value for the configuration attribute 'ariaTextTemplate' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "valueChange": {
          "name": "valueChange",
          "description": "Fires when the value for the configuration attribute 'value' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "directionChange": {
          "name": "directionChange",
          "description": "Fires when the value for the configuration attribute 'direction' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "start": {
          "type": "CustomEvent",
          "description": "Fires when the value is about to change.  It reports the starting value",
          "params": [
            {
              "name": "value",
              "type": "Number",
              "description": "  the current (initial) value"
            }
          ]
        },
        "minValueChange": {
          "name": "minValueChange",
          "description": "Fires when the value for the configuration attribute 'minValue' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "maskElChange": {
          "name": "maskElChange",
          "description": "Fires when the value for the configuration attribute 'maskEl' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "complete": {
          "type": "CustomEvent",
          "description": "Fires at the end of the animation or immediately upon changing values if animation is not loaded",
          "params": [
            {
              "name": "value",
              "type": "Number",
              "description": "  the current (final)  value"
            }
          ]
        },
        "beforeMaxValueChange": {
          "name": "beforeMaxValueChange",
          "description": "Fires before the value for the configuration attribute 'maxValue' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDirectionChange": {
          "name": "beforeDirectionChange",
          "description": "Fires before the value for the configuration attribute 'direction' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "maxValueChange": {
          "name": "maxValueChange",
          "description": "Fires when the value for the configuration attribute 'maxValue' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeBarElChange": {
          "name": "beforeBarElChange",
          "description": "Fires before the value for the configuration attribute 'barEl' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeWidthChange": {
          "name": "beforeWidthChange",
          "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "barElChange": {
          "name": "barElChange",
          "description": "Fires when the value for the configuration attribute 'barEl' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The ProgressBar widget provides an easy way to draw a bar depicting progress of an operation,\na level meter, rating or any such simple linear measure.\nIt allows for highly customized styles including animation, vertical or horizontal and forward or reverse.",
          "params": [
            {
              "name": "oConfigs",
              "type": "object",
              "description": "  An object containing any configuration attributes to be set"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The ProgressBar widget provides an easy way to draw a bar depicting progress of an operation,\na level meter, rating or any such simple linear measure.\nIt allows for highly customized styles including animation, vertical or horizontal and forward or reverse.",
      "file": "ProgressBar.js",
      "configs": {
        "minValue": {
          "default": "0",
          "type": "Number",
          "description": "Represents the lowest value for the bar. \nThe bar will be totally collapsed when reaching this value.  \nValues lower than this will be ignored."
        },
        "maxValue": {
          "default": "100",
          "type": "Number",
          "description": "Represents the top value for the bar. \nThe bar will be fully extended when reaching this value.  \nValues higher than this will be ignored."
        },
        "value": {
          "default": "0",
          "type": "Number",
          "description": "The value for the bar.  \nValid values are in between the minValue and maxValue attributes."
        },
        "height": {
          "default": "\"20px\"",
          "type": "Number or String",
          "description": "Height of the ProgressBar.\nIf a number, it will be assumed to be in pixels.  \nIf a string it should be a valid setting for the CSS height attribute.  \nIt will always be returned as a string including units."
        },
        "ariaTextTemplate": {
          "default": "\"{value}\"",
          "type": "String",
          "description": "Text to be voiced by screen readers.\nThe text is processed by <a href=\"YAHOO.lang.html#method_substitute\">YAHOO.lang.substitute</a>.  \nIt can use the placeholders {value}, {minValue} and {maxValue}"
        },
        "barEl": {
          "readonly": "",
          "type": "HTMLElement (div)",
          "description": "Reference to the HTML object that makes the moving bar (read-only)"
        },
        "direction": {
          "default": "'ltr'",
          "type": "String (any of \"ltr\", \"rtl\", \"ttb\" or \"btt\")",
          "description": "Direction of movement of the bar.  \nIt can be any of 'ltr' (left to right), 'rtl' (the reverse) , 'ttb' (top to bottom) or 'btt'.\nCan only be set once and only before rendering."
        },
        "maskEl": {
          "readonly": "",
          "type": "HTMLElement (table)",
          "description": "Reference to the HTML object that overlays the bar providing the mask. (read-only)"
        },
        "width": {
          "default": "\"200px\"",
          "type": "Number or String",
          "description": "Width of the ProgressBar.\nIf a number, it will be assumed to be in pixels.  \nIf a string it should be a valid setting for the CSS width attribute.  \nIt will always be returned as a string including units."
        },
        "anim": {
          "default": "null",
          "type": "{boolean} or {instance of YAHOO.util.Anim}",
          "description": "it accepts either a boolean (recommended) or an instance of <a href=\"YAHOO.util.Anim.html\">YAHOO.util.Anim</a>.\nIf a boolean, it will enable/disable animation creating its own instance of the animation utility.  \nIf given an instance of <a href=\"YAHOO.util.Anim.html\">YAHOO.util.Anim</a> it will use that instance.\nThe <a href=\"YAHOO.util.Anim.html\">animation</a> utility needs to be loaded.\nWhen read, it returns the instance of the animation utility in use or null if none.  \nIt can be used to set the animation parameters such as easing methods or duration."
        }
      },
      "properties": {
        "_barSizeFunction": {
          "guessedname": "_barSizeFunction",
          "private": "",
          "default": "null",
          "type": "{function}",
          "guessedtype": "property",
          "description": "Function to be used to calculate bar size.  \nIt is picked from <a href=\"#property_barSizeFunctions\">_barSizeFunctions</a>\ndepending on direction and whether animation is active."
        },
        "_barSizeFunctions": {
          "private": "",
          "guessedname": "b",
          "type": "{collection of functions}",
          "guessedtype": "property",
          "description": "Collection of functions used by to calculate the size of the bar.\nOne of this will be used depending on direction and whether animation is active."
        },
        "_barSpace": {
          "guessedname": "_barSpace",
          "private": "",
          "default": "100",
          "type": "Number",
          "guessedtype": "property",
          "description": "The actual space (in pixels) available for the bar within the mask (excludes margins)"
        },
        "_rendered": {
          "guessedname": "_rendered",
          "private": "",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "A flag to signal that rendering has already happened"
        },
        "_previousValue": {
          "guessedname": "_previousValue",
          "private": "",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "The previous value setting for the bar.  Used mostly as information to event listeners"
        },
        "ProgressBar.MARKUP": {
          "final": "",
          "guessedname": "MARKUP",
          "default": "(too long)",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "String containing the HTML string which is the basis for the Progress Bar."
        }
      }
    },
    "YAHOO.widget.Paginator.ui.PageLinks": {
      "shortname": "PageLinks",
      "methods": {
        "onClick": {
          "guessedname": "onClick",
          "guessedtype": "function",
          "description": "Listener for the container's onclick event.  Looks for qualifying link\nclicks, and pulls the page number from the link's page attribute.\nSends link's page attribute to the Paginator's setPage method.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": "  The click event"
            }
          ]
        },
        "calculateRange": {
          "guessedname": "calculateRange",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "currentPage",
              "type": "int",
              "description": "  The current page"
            },
            {
              "name": "totalPages",
              "type": "int",
              "description": "   (optional) Maximum number of pages"
            },
            {
              "name": "numPages",
              "type": "int",
              "description": "     (optional) Preferred number of pages in range"
            }
          ],
          "description": "Calculates start and end page numbers given a current page, attempting\nto keep the current page in the middle",
          "return": {
            "type": "Array",
            "description": "[start_page_number, end_page_number]"
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the page links container node and clears event listeners"
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Generate the nodes and return the container node containing page links\nappropriate to the current pagination state.",
          "params": [
            {
              "name": "id_base",
              "type": "string",
              "description": "  used to create unique ids for generated nodes"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "init": {
          "guessedname": "init",
          "static": "",
          "guessedtype": "function",
          "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.",
          "params": [
            {
              "name": "p",
              "type": "Paginator",
              "description": "  Paginator instance to decorate"
            }
          ]
        },
        "rebuild": {
          "guessedname": "rebuild",
          "guessedtype": "function",
          "description": "Force a rebuild of the page links.",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  The calling change event"
            }
          ]
        },
        "update": {
          "guessedname": "update",
          "guessedtype": "function",
          "description": "Update the links if appropriate",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  The calling change event"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Paginator.ui.PageLinks",
      "guessedname": "PageLinks",
      "module": "paginator",
      "namespace": "YAHOO.widget.Paginator.ui",
      "events": {
        "beforePageLinkClassChange": {
          "name": "beforePageLinkClassChange",
          "description": "Fires before the value for the configuration attribute 'pageLinkClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCurrentPageClassChange": {
          "name": "beforeCurrentPageClassChange",
          "description": "Fires before the value for the configuration attribute 'currentPageClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "currentPageClassChange": {
          "name": "currentPageClassChange",
          "description": "Fires when the value for the configuration attribute 'currentPageClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pageLinksContainerClassChange": {
          "name": "pageLinksContainerClassChange",
          "description": "Fires when the value for the configuration attribute 'pageLinksContainerClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pageLinksChange": {
          "name": "pageLinksChange",
          "description": "Fires when the value for the configuration attribute 'pageLinks' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePageLabelBuilderChange": {
          "name": "beforePageLabelBuilderChange",
          "description": "Fires before the value for the configuration attribute 'pageLabelBuilder' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePageLinksChange": {
          "name": "beforePageLinksChange",
          "description": "Fires before the value for the configuration attribute 'pageLinks' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pageLabelBuilderChange": {
          "name": "pageLabelBuilderChange",
          "description": "Fires when the value for the configuration attribute 'pageLabelBuilder' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pageLinkClassChange": {
          "name": "pageLinkClassChange",
          "description": "Fires when the value for the configuration attribute 'pageLinkClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePageLinksContainerClassChange": {
          "name": "beforePageLinksContainerClassChange",
          "description": "Fires before the value for the configuration attribute 'pageLinksContainerClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "ui Component to generate the page links",
          "params": [
            {
              "name": "p",
              "type": "Pagintor",
              "description": "  Paginator instance to attach to"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ui Component to generate the page links",
      "configs": {
        "pageLabelBuilder": {
          "default": "function (page, paginator) { return page; }",
          "description": "Function used generate the innerHTML for each page link/span.  The\nfunction receives as parameters the page number and a reference to the\npaginator object."
        },
        "pageLinks": {
          "default": "10",
          "description": "Maximum number of page links to display at one time."
        },
        "pageLinksContainerClass": {
          "default": "'yui-pg-pages'",
          "description": "CSS class assigned to the span containing the page links."
        },
        "pageLinkClass": {
          "default": "'yui-pg-page'",
          "description": "CSS class assigned to each page link/span."
        },
        "currentPageClass": {
          "default": "'yui-pg-current-page'",
          "description": "CSS class assigned to the current page span."
        }
      },
      "file": "PageLinks.js",
      "innerClasses": [
        "YAHOO.widget.Paginator"
      ],
      "for": "YAHOO.widget.Paginator",
      "properties": {
        "container": {
          "private": "",
          "guessedname": "container",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Span node containing the page links"
        },
        "current": {
          "private": "",
          "guessedname": "current",
          "type": "number",
          "guessedtype": "property",
          "description": "Current page"
        }
      }
    },
    "YAHOO.widget.ContextMenu": {
      "shortname": "ContextMenu",
      "superclass": "YAHOO.widget.Menu",
      "methods": {
        "_onTriggerContextMenu": {
          "private": "",
          "guessedname": "_onTriggerContextMenu",
          "guessedtype": "function",
          "description": "\"contextmenu\" event handler (\"mousedown\" for Opera) for the HTML \nelement(s) that trigger the display of the context menu.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object passed back \nby the event utility (YAHOO.util.Event)."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.ContextMenu",
              "description": " Object representing the context \nmenu that is handling the event."
            }
          ]
        },
        "position": {
          "private": "",
          "description": "\"beforeShow\" event handler used to position the contextmenu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_aPos",
              "type": "Array",
              "description": " Array representing the xy position for the context menu."
            }
          ]
        },
        "configTrigger": {
          "guessedname": "configTrigger",
          "guessedtype": "function",
          "description": "Event handler for when the value of the \"trigger\" configuration \nproperty changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.ContextMenu",
              "description": " Object representing the context \nmenu that fired the event."
            }
          ]
        },
        "_removeEventHandlers": {
          "guessedname": "_removeEventHandlers",
          "private": "",
          "guessedtype": "function",
          "description": "Removes all of the DOM event handlers from the HTML element(s) \nwhose \"context menu\" event (\"click\" for Opera) trigger the display of \nthe context menu."
        },
        "cancel": {
          "guessedname": "cancel",
          "guessedtype": "function",
          "description": "Cancels the display of the context menu."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the context menu.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the context menu's <code>&#60;div&#62;</code> element \n(and accompanying child nodes) from the document."
        },
        "_onTriggerClick": {
          "private": "",
          "guessedname": "_onTriggerClick",
          "guessedtype": "function",
          "description": "\"click\" event handler for the HTML element(s) identified as the \n\"trigger\" for the context menu.  Used to cancel default behaviors in Opera.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object passed back \nby the event utility (YAHOO.util.Event)."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.ContextMenu",
              "description": " Object representing the context \nmenu that is handling the event."
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The ContextMenu class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the context menu."
            },
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source for \nthe context menu."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-22445964\">HTMLDivElement</a>",
              "description": " Object specifying the \n<code>&#60;div&#62;</code> element of the context menu."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-94282980\">HTMLSelectElement</a>",
              "description": " Object specifying \nthe <code>&#60;select&#62;</code> element to be used as the data source for \nthe context menu."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the context menu. See configuration class documentation \nfor more details."
            }
          ]
        },
        "initEvents": {
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initializes the custom events for the context menu."
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the class's configurable properties which can be \nchanged using the context menu's Config object (\"cfg\")."
        }
      },
      "name": "YAHOO.widget.ContextMenu",
      "extends": "YAHOO.widget.Menu",
      "guessedname": "ContextMenu",
      "module": "menu",
      "namespace": "YAHOO.widget",
      "events": {
        "triggerContextMenuEvent": {
          "guessedname": "triggerContextMenuEvent",
          "guessedtype": "property",
          "description": "Custom Event wrapper for the \"contextmenu\" DOM event \n(\"mousedown\" for Opera) fired by the element(s) that trigger the display of \nthe context menu."
        }
      },
      "constructors": [
        {
          "description": "Creates a list of options or commands which are made visible in response to \nan HTML element's \"contextmenu\" event (\"mousedown\" for Opera).",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the context menu."
            },
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source for the \ncontext menu."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-22445964\">HTMLDivElement</a>",
              "description": " Object specifying the \n<code>&#60;div&#62;</code> element of the context menu."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-94282980\">HTMLSelectElement</a>",
              "description": " Object specifying \nthe <code>&#60;select&#62;</code> element to be used as the data source for \nthe context menu."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the context menu. See configuration class documentation \nfor more details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Creates a list of options or commands which are made visible in response to \nan HTML element's \"contextmenu\" event (\"mousedown\" for Opera).",
      "file": "contextmenu.js",
      "configs": {
        "trigger": {
          "default": "null",
          "type": "String|<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|Array",
          "description": "The HTML element(s) whose \"contextmenu\" event (\"mousedown\" \nfor Opera) trigger the display of the context menu.  Can be a string \nrepresenting the id attribute of the HTML element, an object reference \nfor the HTML element, or an array of strings or HTML element references."
        }
      },
      "properties": {
        "_oTrigger": {
          "guessedname": "_oTrigger",
          "private": "",
          "default": "null",
          "type": "String|<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/leve\nl-one-html.html#ID-58190037\">HTMLElement</a>|Array",
          "guessedtype": "property",
          "description": "Object reference to the current value of the \"trigger\" \nconfiguration property."
        },
        "EVENT_TYPES": {
          "final": "",
          "guessedname": "EVENT_TYPES",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the name of the ContextMenu's events"
        },
        "_bCancelled": {
          "guessedname": "_bCancelled",
          "private": "",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Boolean indicating if the display of the context menu should \nbe cancelled."
        },
        "DEFAULT_CONFIG": {
          "final": "",
          "guessedname": "TRIGGER_CONFIG",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the ContextMenu's configuration properties"
        },
        "contextEventTarget": {
          "guessedname": "contextEventTarget",
          "default": "null",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-\nhtml.html#ID-58190037\">HTMLElement</a>",
          "guessedtype": "property",
          "description": "Object reference for the HTML element that was the target of the\n\"contextmenu\" DOM event (\"mousedown\" for Opera) that triggered the display of \nthe context menu."
        }
      }
    },
    "YAHOO.tool.Profiler": {
      "shortname": "Profiler",
      "methods": {
        "getAverage": {
          "guessedname": "getAverage",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."
            }
          ],
          "description": "Returns the average amount of time (in milliseconds) that the function\nwith the given name takes to execute.",
          "return": {
            "type": "float",
            "description": "The average time it takes the function to execute."
          }
        },
        "unregisterFunction": {
          "guessedname": "unregisterConstructor",
          "param": "{String} name The full name of the function including namespacing. This\nis the name of the function that is stored in the report.",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."
            }
          ],
          "description": "Removes a constructor function from profiling. Reverses the registerConstructor() method.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "stop": {
          "guessedname": "stop",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the data point."
            }
          ],
          "description": "Stops profiling information for a given name.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "clear": {
          "guessedname": "clear",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " (Optional) The name of the report to clear. If\nomitted, then all report data is cleared."
            }
          ],
          "description": "Removes all report data from the profiler.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "pause": {
          "guessedname": "pause",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the data point."
            }
          ],
          "description": "Pauses profiling information for a given name.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "registerConstructor": {
          "guessedname": "registerConstructor",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": " The fully-qualified name of the function including namespace information."
            },
            {
              "name": "owner",
              "type": "Object",
              "description": " (Optional) The object that owns the function (namespace or containing object)."
            }
          ],
          "description": "Sets up a constructor for profiling, including all properties and methods on the prototype.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getReport": {
          "guessedname": "getReport",
          "static": "",
          "guessedtype": "function",
          "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).",
          "return": {
            "type": "Object",
            "description": "An object containing profile data for a given function."
          }
        },
        "registerObject": {
          "guessedname": "registerObject",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the object to profile (shows up in report)."
            },
            {
              "name": "owner",
              "type": "Object",
              "description": " (Optional) The object represented by the name."
            },
            {
              "name": "recurse",
              "type": "Boolean",
              "description": " (Optional) Determines if subobject methods are also profiled."
            }
          ],
          "description": "Sets up an object for profiling. It takes the object and looks for functions.\nWhen a function is found, registerMethod() is called on it. If set to recrusive\nmode, it will also setup objects found inside of this object for profiling, \nusing the same methodology.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getFunctionReport": {
          "guessedname": "getFunctionReport",
          "static": "",
          "guessedtype": "function",
          "deprecated": "Use getReport() instead.",
          "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).",
          "return": {
            "type": "Object",
            "description": "An object containing profile data for a given function."
          }
        },
        "getCallCount": {
          "guessedname": "getCallCount",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function whose data should be returned."
            }
          ],
          "description": "Returns the number of times that the given function has been called.",
          "return": {
            "type": "int",
            "description": "The number of times the function was called."
          }
        },
        "getFullReport": {
          "guessedname": "getFullReport",
          "static": "",
          "guessedtype": "function",
          "description": "Returns an object containing profiling data for all of the functions \nthat were profiled. The object has an entry for each function and \nreturns all information (min, max, average, calls, etc.) for each\nfunction.",
          "return": {
            "type": "Object",
            "description": "An object containing all profile data."
          }
        },
        "start": {
          "guessedname": "start",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the data point."
            }
          ],
          "description": "Start profiling information for a given name. The name cannot be the name\nof a registered function or object. This is used to start timing for a\nparticular block of code rather than instrumenting the entire function.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getMax": {
          "guessedname": "getMax",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."
            }
          ],
          "description": "Returns the maximum amount of time (in milliseconds) that the function\nwith the given name takes to execute.",
          "return": {
            "type": "float",
            "description": "The maximum time it takes the function to execute."
          }
        },
        "createReport": {
          "private": "",
          "description": "Creates a report object with the given name.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name to store for the report object."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "unregisterObject": {
          "guessedname": "unregisterObject",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the object to unregister."
            },
            {
              "name": "recurse",
              "type": "Boolean",
              "description": " (Optional) Determines if subobject methods should also be\nunregistered."
            }
          ],
          "description": "Unregisters an object for profiling. It takes the object and looks for functions.\nWhen a function is found, unregisterMethod() is called on it. If set to recrusive\nmode, it will also unregister objects found inside of this object, \nusing the same methodology.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getOriginal": {
          "guessedname": "getOriginal",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function/object to retrieve."
            }
          ],
          "description": "Returns the uninstrumented version of a function/object.",
          "return": {
            "type": "Function|Object",
            "description": "The uninstrumented version of a function/object."
          }
        },
        "instrument": {
          "guessedname": "instrument",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the report for the function."
            },
            {
              "name": "method",
              "type": "Function",
              "description": " The function to instrument."
            }
          ],
          "description": "Instruments a method to have profiling calls.",
          "return": {
            "type": "Function",
            "description": "An instrumented version of the function."
          }
        },
        "registerFunction": {
          "guessedname": "registerFunction",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."
            },
            {
              "name": "owner",
              "type": "Object",
              "description": " (Optional) The object that owns the function. If the function\nisn't global then this argument is required. This could be the namespace that\nthe function belongs to, such as YAHOO.util.Dom, or the object on which it's\na method."
            },
            {
              "name": "registerPrototype",
              "type": "Boolean",
              "description": " (Optional) Indicates that the prototype should\nalso be instrumented. Setting to true has the same effect as calling\nregisterConstructor()."
            }
          ],
          "description": "Sets up a function for profiling. It essentially overwrites the function with one\nthat has instrumentation data. This method also creates an entry for the function\nin the profile report. The original function is stored on the container object.",
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "saveDataPoint": {
          "private": "",
          "static": "",
          "description": "Called when a method ends execution. Marks the start and end time of the \nmethod so it can calculate how long the function took to execute. Also \nupdates min/max/avg calculations for the function.",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function to mark as stopped."
            },
            {
              "name": "duration",
              "type": "int",
              "description": " The number of milliseconds it took the function to\nexecute."
            }
          ],
          "return": {
            "type": "Void",
            "description": ""
          }
        },
        "getMin": {
          "guessedname": "getMin",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."
            }
          ],
          "description": "Returns the minimum amount of time (in milliseconds) that the function\nwith the given name takes to execute.",
          "return": {
            "type": "float",
            "description": "The minimum time it takes the function to execute."
          }
        }
      },
      "name": "YAHOO.tool.Profiler",
      "guessedname": "Profiler",
      "module": "profiler",
      "namespace": "YAHOO.tool",
      "static": "",
      "guessedtype": "function",
      "description": "Profiles functions in JavaScript.",
      "file": "Profiler.js"
    },
    "YAHOO.util.DateLocale": {
      "shortname": "DateLocale",
      "name": "YAHOO.util.DateLocale",
      "guessedname": "DateLocale",
      "module": "datasource",
      "namespace": "YAHOO.util",
      "requires": "yahoo",
      "guessedtype": "property",
      "description": "The DateLocale class is a container and base class for all\nlocalised date strings used by YAHOO.util.Date. It is used\ninternally, but may be extended to provide new date localisations.\nTo create your own DateLocale, follow these steps:\n<ol>\n<li>Find an existing locale that matches closely with your needs</li>\n<li>Use this as your base class.  Use YAHOO.util.DateLocale if nothing\nmatches.</li>\n<li>Create your own class as an extension of the base class using\nYAHOO.lang.merge, and add your own localisations where needed.</li>\n</ol>\nSee the YAHOO.util.DateLocale['en-US'] and YAHOO.util.DateLocale['en-GB']\nclasses which extend YAHOO.util.DateLocale['en'].\nFor example, to implement locales for French french and Canadian french,\nwe would do the following:\n<ol>\n<li>For French french, we have no existing similar locale, so use\nYAHOO.util.DateLocale as the base, and extend it:\n<pre>\nYAHOO.util.DateLocale['fr'] = YAHOO.lang.merge(YAHOO.util.DateLocale, {\na: ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'],\nA: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'],\nb: ['jan', 'f&eacute;v', 'mar', 'avr', 'mai', 'jun', 'jui', 'ao&ucirc;', 'sep', 'oct', 'nov', 'd&eacute;c'],\nB: ['janvier', 'f&eacute;vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao&ucirc;t', 'septembre', 'octobre', 'novembre', 'd&eacute;cembre'],\nc: '%a %d %b %Y %T %Z',\np: ['', ''],\nP: ['', ''],\nx: '%d.%m.%Y',\nX: '%T'\n});\n</pre>\n</li>\n<li>For Canadian french, we start with French french and change the meaning of \\%x:\n<pre>\nYAHOO.util.DateLocale['fr-CA'] = YAHOO.lang.merge(YAHOO.util.DateLocale['fr'], {\nx: '%Y-%m-%d'\n});\n</pre>\n</li>\n</ol>\nWith that, you can use your new locales:\n<pre>\nvar d = new Date(\"2008/04/22\");\nYAHOO.util.Date.format(d, {format: \"%A, %d %B == %x\"}, \"fr\");\n</pre>\nwill return:\n<pre>\nmardi, 22 avril == 22.04.2008\n</pre>\nAnd\n<pre>\nYAHOO.util.Date.format(d, {format: \"%A, %d %B == %x\"}, \"fr-CA\");\n</pre>\nWill return:\n<pre>\nmardi, 22 avril == 2008-04-22\n</pre>",
      "file": "Type.js"
    },
    "YAHOO.util.ComparisonFailure": {
      "shortname": "ComparisonFailure",
      "superclass": "YAHOO.util.AssertionError",
      "methods": {
        "toString": {
          "guessedname": "getMessage",
          "guessedtype": "function",
          "description": "Returns a fully formatted error for an assertion failure. This message\nprovides information about the expected and actual values.",
          "return": {
            "type": "String",
            "description": "A string describing the error."
          }
        }
      },
      "name": "YAHOO.util.ComparisonFailure",
      "extends": "YAHOO.util.AssertionError",
      "guessedname": "ComparisonFailure",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "ComparisonFailure is subclass of AssertionError that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value.",
          "params": [
            {
              "name": "message",
              "type": "String",
              "description": " The message to display when the error occurs."
            },
            {
              "name": "expected",
              "type": "Object",
              "description": " The expected value."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " The actual value that caused the assertion to fail."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ComparisonFailure is subclass of AssertionError that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value.",
      "file": "Assert.js",
      "properties": {
        "name": {
          "type": "String",
          "description": "The name of the error that occurred."
        },
        "expected": {
          "type": "Object",
          "description": "The expected value."
        },
        "actual": {
          "type": "Object",
          "description": "The actual value."
        }
      }
    },
    "YAHOO.widget.DateNode": {
      "shortname": "DateNode",
      "superclass": "YAHOO.widget.TextNode",
      "methods": {
        "getEditorValue": {
          "guessedname": "getEditorValue",
          "guessedtype": "function",
          "description": "Returns the value from the input element.\nOverrides Node.getEditorValue.",
          "params": [
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ],
          "return": {
            "type": "string",
            "description": "date entered"
          }
        },
        "getNodeDefinition": {
          "guessedname": "getNodeDefinition",
          "guessedtype": "function",
          "description": "Returns an object which could be used to build a tree out of this node and its children.\nIt can be passed to the tree constructor to reproduce this node as a tree.\nIt will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not.",
          "return": {
            "type": "Object | false",
            "description": "definition of the node or false if this node or any descendant is defined as dynamic"
          }
        },
        "displayEditedValue": {
          "guessedname": "displayEditedValue",
          "guessedtype": "function",
          "description": "Finally displays the newly entered date in the tree.\nOverrides Node.displayEditedValue.",
          "params": [
            {
              "name": "value",
              "type": "string",
              "description": "  date to be displayed and stored in the node"
            },
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ]
        },
        "fillEditorContainer": {
          "guessedname": "fillEditorContainer",
          "guessedtype": "function",
          "description": "If YAHOO.widget.Calendar is available, it will pop up a Calendar to enter a new date.  Otherwise, it falls back to a plain &lt;input&gt;  textbox",
          "params": [
            {
              "name": "editorData",
              "type": "YAHOO.widget.TreeView.editorData",
              "description": "   a shortcut to the static object holding editing information"
            }
          ],
          "return": {
            "type": "",
            "description": "void"
          }
        }
      },
      "name": "YAHOO.widget.DateNode",
      "extends": "YAHOO.widget.TextNode",
      "guessedname": "DateNode",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "A Date-specific implementation that differs from TextNode in that it uses \nYAHOO.widget.Calendar as an in-line editor, if available\nIf Calendar is not available, it behaves as a plain TextNode.",
          "params": [
            {
              "name": "oData",
              "type": "object",
              "description": "  a string or object containing the data that will\nbe used to render this node.\nProviding a string is the same as providing an object with a single property named label.\nAll values in the oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private nor functions.\nAll attributes are made available in noderef.data, which\ncan be used to store custom attributes.  TreeView.getNode(s)ByProperty\ncan be used to retrieve a node by one of the attributes."
            },
            {
              "name": "oParent",
              "type": "YAHOO.widget.Node",
              "description": "  this node's parent node"
            },
            {
              "name": "expanded",
              "type": "boolean",
              "description": "  the initial expanded/collapsed state (deprecated; use oData.expanded)"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A Date-specific implementation that differs from TextNode in that it uses \nYAHOO.widget.Calendar as an in-line editor, if available\nIf Calendar is not available, it behaves as a plain TextNode.",
      "file": "DateNode.js",
      "properties": {
        "calendarConfig": {
          "guessedname": "calendarConfig",
          "guessedtype": "property",
          "description": "Configuration object for the Calendar editor, if used.\nSee <a href=\"http://developer.yahoo.com/yui/calendar/#internationalization\">http://developer.yahoo.com/yui/calendar/#internationalization</a>"
        },
        "_type": {
          "guessedname": "_type",
          "private": "",
          "default": "\"DateNode\"",
          "type": "string",
          "guessedtype": "property",
          "description": "The node type"
        }
      }
    },
    "YAHOO.widget.StackedColumnSeries": {
      "shortname": "StackedColumnSeries",
      "name": "YAHOO.widget.StackedColumnSeries",
      "guessedname": "StackedColumnSeries",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "StackedColumnSeries class for the YUI Charts widget."
        }
      ],
      "guessedtype": "function",
      "description": "StackedColumnSeries class for the YUI Charts widget.",
      "file": "Series.js",
      "uses": [
        "YAHOO.widget.CartesianSeries"
      ]
    },
    "YAHOO.util.Date": {
      "shortname": "Date",
      "methods": {
        "format": {
          "sa": "YAHOO.util.DateLocale",
          "guessedname": "format",
          "guessedtype": "function",
          "params": [
            {
              "name": "oDate",
              "type": "Date",
              "description": "  Date."
            },
            {
              "name": "oConfig",
              "type": "Object",
              "description": "  (Optional) Object literal of configuration values:\n<dl>\n<dt>format &lt;String&gt;</dt>\n<dd>\n<p>\nAny strftime string is supported, such as \"%I:%M:%S %p\". strftime has several format specifiers defined by the Open group at \n<a href=\"http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html\">http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html</a>\n</p>\n<p>   \nPHP added a few of its own, defined at <a href=\"http://www.php.net/strftime\">http://www.php.net/strftime</a>\n</p>\n<p>\nThis javascript implementation supports all the PHP specifiers and a few more.  The full list is below:\n</p>\n<dl>\n<dt>%a</dt> <dd>abbreviated weekday name according to the current locale</dd>\n<dt>%A</dt> <dd>full weekday name according to the current locale</dd>\n<dt>%b</dt> <dd>abbreviated month name according to the current locale</dd>\n<dt>%B</dt> <dd>full month name according to the current locale</dd>\n<dt>%c</dt> <dd>preferred date and time representation for the current locale</dd>\n<dt>%C</dt> <dd>century number (the year divided by 100 and truncated to an integer, range 00 to 99)</dd>\n<dt>%d</dt> <dd>day of the month as a decimal number (range 01 to 31)</dd>\n<dt>%D</dt> <dd>same as %m/%d/%y</dd>\n<dt>%e</dt> <dd>day of the month as a decimal number, a single digit is preceded by a space (range ' 1' to '31')</dd>\n<dt>%F</dt> <dd>same as %Y-%m-%d (ISO 8601 date format)</dd>\n<dt>%g</dt> <dd>like %G, but without the century</dd>\n<dt>%G</dt> <dd>The 4-digit year corresponding to the ISO week number</dd>\n<dt>%h</dt> <dd>same as %b</dd>\n<dt>%H</dt> <dd>hour as a decimal number using a 24-hour clock (range 00 to 23)</dd>\n<dt>%I</dt> <dd>hour as a decimal number using a 12-hour clock (range 01 to 12)</dd>\n<dt>%j</dt> <dd>day of the year as a decimal number (range 001 to 366)</dd>\n<dt>%k</dt> <dd>hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)</dd>\n<dt>%l</dt> <dd>hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) </dd>\n<dt>%m</dt> <dd>month as a decimal number (range 01 to 12)</dd>\n<dt>%M</dt> <dd>minute as a decimal number</dd>\n<dt>%n</dt> <dd>newline character</dd>\n<dt>%p</dt> <dd>either `AM' or `PM' according to the given time value, or the corresponding strings for the current locale</dd>\n<dt>%P</dt> <dd>like %p, but lower case</dd>\n<dt>%r</dt> <dd>time in a.m. and p.m. notation equal to %I:%M:%S %p</dd>\n<dt>%R</dt> <dd>time in 24 hour notation equal to %H:%M</dd>\n<dt>%s</dt> <dd>number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC</dd>\n<dt>%S</dt> <dd>second as a decimal number</dd>\n<dt>%t</dt> <dd>tab character</dd>\n<dt>%T</dt> <dd>current time, equal to %H:%M:%S</dd>\n<dt>%u</dt> <dd>weekday as a decimal number [1,7], with 1 representing Monday</dd>\n<dt>%U</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Sunday as the first day of the first week</dd>\n<dt>%V</dt> <dd>The ISO 8601:1988 week number of the current year as a decimal number,\nrange 01 to 53, where week 1 is the first week that has at least 4 days\nin the current year, and with Monday as the first day of the week.</dd>\n<dt>%w</dt> <dd>day of the week as a decimal, Sunday being 0</dd>\n<dt>%W</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Monday as the first day of the first week</dd>\n<dt>%x</dt> <dd>preferred date representation for the current locale without the time</dd>\n<dt>%X</dt> <dd>preferred time representation for the current locale without the date</dd>\n<dt>%y</dt> <dd>year as a decimal number without a century (range 00 to 99)</dd>\n<dt>%Y</dt> <dd>year as a decimal number including the century</dd>\n<dt>%z</dt> <dd>numerical time zone representation</dd>\n<dt>%Z</dt> <dd>time zone name or abbreviation</dd>\n<dt>%%</dt> <dd>a literal `%' character</dd>\n</dl>\n</dd>\n</dl>"
            },
            {
              "name": "sLocale",
              "type": "String",
              "description": "  (Optional) The locale to use when displaying days of week,\nmonths of the year, and other locale specific strings.  The following locales are\nbuilt in:\n<dl>\n<dt>en</dt>\n<dd>English</dd>\n<dt>en-US</dt>\n<dd>US English</dd>\n<dt>en-GB</dt>\n<dd>British English</dd>\n<dt>en-AU</dt>\n<dd>Australian English (identical to British English)</dd>\n</dl>\nMore locales may be added by subclassing of YAHOO.util.DateLocale.\nSee YAHOO.util.DateLocale for more information."
            }
          ],
          "description": "Takes a native JavaScript Date and formats to string for display to user.",
          "return": {
            "type": "String",
            "description": "Formatted date for display."
          }
        }
      },
      "name": "YAHOO.util.Date",
      "guessedname": "Dt",
      "module": "datasource",
      "namespace": "YAHOO.util",
      "requires": "yahoo",
      "static": "",
      "guessedtype": "property",
      "description": "The static Date class provides helper functions to deal with data of type Date.",
      "file": "Type.js"
    },
    "YAHOO.widget.Paginator.ui.FirstPageLink": {
      "shortname": "FirstPageLink",
      "methods": {
        "onClick": {
          "guessedname": "onClick",
          "guessedtype": "function",
          "description": "Listener for the link's onclick event.  Pass new value to setPage method.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": "  The click event"
            }
          ]
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Generate the nodes and return the appropriate node given the current\npagination state.",
          "params": [
            {
              "name": "id_base",
              "type": "string",
              "description": "  used to create unique ids for generated nodes"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the link/span node and clears event listeners\nremoval."
        },
        "init": {
          "guessedname": "init",
          "static": "",
          "guessedtype": "function",
          "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.",
          "params": [
            {
              "name": "p",
              "type": "Paginator",
              "description": "  Paginator instance to decorate"
            }
          ]
        },
        "update": {
          "guessedname": "update",
          "guessedtype": "function",
          "description": "Swap the link and span nodes if appropriate.",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  The calling change event"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Paginator.ui.FirstPageLink",
      "guessedname": "FirstPageLink",
      "module": "paginator",
      "namespace": "YAHOO.widget.Paginator.ui",
      "events": {
        "beforeFirstPageLinkLabelChange": {
          "name": "beforeFirstPageLinkLabelChange",
          "description": "Fires before the value for the configuration attribute 'firstPageLinkLabel' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "firstPageLinkLabelChange": {
          "name": "firstPageLinkLabelChange",
          "description": "Fires when the value for the configuration attribute 'firstPageLinkLabel' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeFirstPageLinkClassChange": {
          "name": "beforeFirstPageLinkClassChange",
          "description": "Fires before the value for the configuration attribute 'firstPageLinkClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "firstPageLinkClassChange": {
          "name": "firstPageLinkClassChange",
          "description": "Fires when the value for the configuration attribute 'firstPageLinkClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "ui Component to generate the link to jump to the first page.",
          "params": [
            {
              "name": "p",
              "type": "Pagintor",
              "description": "  Paginator instance to attach to"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ui Component to generate the link to jump to the first page.",
      "configs": {
        "firstPageLinkLabel": {
          "default": "'&lt;&lt; first'",
          "description": "Used as innerHTML for the first page link/span."
        },
        "firstPageLinkClass": {
          "default": "'yui-pg-first'",
          "description": "CSS class assigned to the link/span"
        }
      },
      "file": "FirstPageLink.js",
      "innerClasses": [
        "YAHOO.widget.Paginator"
      ],
      "for": "YAHOO.widget.Paginator",
      "properties": {
        "current": {
          "private": "",
          "guessedname": "current",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The currently placed HTMLElement node"
        },
        "link": {
          "private": "",
          "guessedname": "link",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Link node"
        },
        "span": {
          "private": "",
          "guessedname": "span",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Span node (inactive link)"
        }
      }
    },
    "YAHOO.util.DragDrop": {
      "shortname": "DragDrop",
      "methods": {
        "isLocked": {
          "guessedname": "isLocked",
          "guessedtype": "function",
          "description": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
          "return": {
            "type": "boolean",
            "description": "true if this obj or all drag/drop is locked, else \nfalse"
          }
        },
        "setYTicks": {
          "guessedname": "setYTicks",
          "private": "",
          "guessedtype": "function",
          "description": "Create the array of vertical tick marks if an interval was specified in \nsetYConstraint()."
        },
        "getEl": {
          "guessedname": "getEl",
          "guessedtype": "function",
          "description": "Returns a reference to the linked element",
          "return": {
            "type": "HTMLElement",
            "description": "the html element"
          }
        },
        "clearTicks": {
          "guessedname": "clearTicks",
          "guessedtype": "function",
          "description": "Clears any tick interval defined for this instance"
        },
        "startDrag": {
          "guessedname": "startDrag",
          "guessedtype": "function",
          "description": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
          "params": [
            {
              "name": "X",
              "type": "int",
              "description": " click location"
            },
            {
              "name": "Y",
              "type": "int",
              "description": " click location"
            }
          ]
        },
        "b4MouseDown": {
          "private": "",
          "guessedname": "b4MouseDown",
          "guessedtype": "function",
          "description": "Code executed immediately before the onMouseDown event",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mousedown event"
            }
          ]
        },
        "setHandleElId": {
          "guessedname": "setHandleElId",
          "guessedtype": "function",
          "description": "Allows you to specify a child of the linked element that should be \nused to initiate the drag operation.  An example of this would be if \nyou have a content div with text and links.  Clicking anywhere in the \ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element \nthat starts the drag operation.",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the element that will be used to \ninitiate the drag."
            }
          ]
        },
        "removeInvalidHandleType": {
          "guessedname": "removeInvalidHandleType",
          "guessedtype": "function",
          "description": "Unsets an excluded tag name set by addInvalidHandleType",
          "params": [
            {
              "name": "tagName",
              "type": "string",
              "description": " the type of element to unexclude"
            }
          ]
        },
        "clickValidator": {
          "guessedname": "clickValidator",
          "guessedtype": "function",
          "description": "Method validates that the clicked element\nwas indeed the handle or a valid child of the handle",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": ""
            }
          ]
        },
        "setXTicks": {
          "guessedname": "setXTicks",
          "private": "",
          "guessedtype": "function",
          "description": "Create the array of horizontal tick marks if an interval was specified\nin setXConstraint()."
        },
        "handleOnAvailable": {
          "guessedname": "handleOnAvailable",
          "private": "",
          "guessedtype": "function",
          "description": "Executed when the linked element is available"
        },
        "setInitialPosition": {
          "private": "",
          "guessedname": "setInitPosition",
          "guessedtype": "function",
          "description": "Stores the initial placement of the linked element.",
          "params": [
            {
              "name": "diffX",
              "type": "int",
              "description": "   the X offset, default 0"
            },
            {
              "name": "diffY",
              "type": "int",
              "description": "   the Y offset, default 0"
            }
          ]
        },
        "handleMouseDown": {
          "private": "",
          "guessedname": "handleMouseDown",
          "guessedtype": "function",
          "description": "Fired when this object is clicked",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": ""
            },
            {
              "name": "oDD",
              "type": "YAHOO.util.DragDrop",
              "description": " the clicked dd object (this dd obj)"
            }
          ]
        },
        "addInvalidHandleId": {
          "guessedname": "addInvalidHandleId",
          "guessedtype": "function",
          "description": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": " the element id of the element you wish to ignore"
            }
          ]
        },
        "initTarget": {
          "guessedname": "initTarget",
          "guessedtype": "function",
          "description": "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
          "params": [
            {
              "name": "id",
              "type": "",
              "description": " the id of the linked element"
            },
            {
              "name": "sGroup",
              "type": "String",
              "description": " the group of related items"
            },
            {
              "name": "config",
              "type": "object",
              "description": " configuration attributes"
            }
          ]
        },
        "b4DragDrop": {
          "guessedname": "b4DragDrop",
          "private": "",
          "guessedtype": "function",
          "description": "Code that executes immediately before the onDragDrop event"
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "toString method",
          "return": {
            "type": "string",
            "description": "string representation of the dd obj"
          }
        },
        "addToGroup": {
          "guessedname": "addToGroup",
          "guessedtype": "function",
          "description": "Add this instance to a group of related drag/drop objects.  All \ninstances belong to at least one group, and can belong to as many \ngroups as needed.",
          "params": [
            {
              "name": "sGroup",
              "type": "string",
              "description": "  the name of the group"
            }
          ]
        },
        "setPadding": {
          "guessedname": "setPadding",
          "guessedtype": "function",
          "description": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.  \nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
          "params": [
            {
              "name": "iTop",
              "type": "int",
              "description": "    Top pad"
            },
            {
              "name": "iRight",
              "type": "int",
              "description": "  Right pad"
            },
            {
              "name": "iBot",
              "type": "int",
              "description": "    Bot pad"
            },
            {
              "name": "iLeft",
              "type": "int",
              "description": "   Left pad"
            }
          ]
        },
        "endDrag": {
          "guessedname": "endDrag",
          "guessedtype": "function",
          "description": "Fired when we are done dragging the object",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mouseup event"
            }
          ]
        },
        "removeInvalidHandleId": {
          "guessedname": "removeInvalidHandleId",
          "guessedtype": "function",
          "description": "Unsets an invalid handle id",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": " the id of the element to re-enable"
            }
          ]
        },
        "onDragDrop": {
          "guessedname": "onDragDrop",
          "guessedtype": "function",
          "description": "Abstract method called when this item is dropped on another DragDrop \nobj",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mouseup event"
            },
            {
              "name": "id",
              "type": "String|DragDrop[]",
              "description": " In POINT mode, the element\nid this was dropped on.  In INTERSECT mode, an array of dd items this \nwas dropped on."
            }
          ]
        },
        "addInvalidHandleType": {
          "guessedname": "addInvalidHandleType",
          "guessedtype": "function",
          "description": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
          "params": [
            {
              "name": "tagName",
              "type": "string",
              "description": " the type of element to exclude"
            }
          ]
        },
        "unlock": {
          "guessedname": "unlock",
          "guessedtype": "function",
          "description": "Unlock this instace"
        },
        "b4StartDrag": {
          "guessedname": "b4StartDrag",
          "private": "",
          "guessedtype": "function",
          "description": "Code that executes immediately before the startDrag event"
        },
        "lock": {
          "guessedname": "lock",
          "guessedtype": "function",
          "description": "Lock this instance"
        },
        "isValidHandleChild": {
          "guessedname": "isValidHandleChild",
          "guessedtype": "function",
          "description": "Checks the tag exclusion list to see if this click should be ignored",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " the HTMLElement to evaluate"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if this is a valid tag type, false if not"
          }
        },
        "onMouseUp": {
          "guessedname": "onMouseUp",
          "guessedtype": "function",
          "description": "Event handler that fires when a drag/drop obj gets a mouseup",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mouseup event"
            }
          ]
        },
        "setOuterHandleElId": {
          "guessedname": "setOuterHandleElId",
          "guessedtype": "function",
          "description": "Allows you to set an element outside of the linked element as a drag \nhandle",
          "params": [
            {
              "name": "id",
              "type": "",
              "description": " the id of the element that will be used to initiate the drag"
            }
          ]
        },
        "addInvalidHandleClass": {
          "guessedname": "addInvalidHandleClass",
          "guessedtype": "function",
          "description": "Lets you specify a css class of elements that will not initiate a drag",
          "params": [
            {
              "name": "cssClass",
              "type": "string",
              "description": " the class of the elements you wish to ignore"
            }
          ]
        },
        "setDragElId": {
          "guessedname": "setDragElId",
          "guessedtype": "function",
          "description": "Allows you to specify that an element other than the linked element \nwill be moved with the cursor during a drag",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the element that will be used to initiate the drag"
            }
          ]
        },
        "unreg": {
          "guessedname": "unreg",
          "guessedtype": "function",
          "description": "Remove all drag and drop hooks for this element"
        },
        "applyConfig": {
          "guessedname": "applyConfig",
          "guessedtype": "function",
          "description": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and \nDragDrop in order to get all of the parameters that are available in\neach object."
        },
        "getTargetCoord": {
          "guessedname": "getTargetCoord",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "iPageX",
              "type": "int",
              "description": " the X coordinate of the click"
            },
            {
              "name": "iPageY",
              "type": "int",
              "description": " the Y coordinate of the click"
            }
          ],
          "description": "Finds the location the element should be placed if we want to move\nit to where the mouse location less the click offset would place us.",
          "return": {
            "type": "",
            "description": "an object that contains the coordinates (Object.x and Object.y)"
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Sets up the DragDrop object.  Must be called in the constructor of any\nYAHOO.util.DragDrop subclass",
          "params": [
            {
              "name": "id",
              "type": "",
              "description": " the id of the linked element"
            },
            {
              "name": "sGroup",
              "type": "String",
              "description": " the group of related items"
            },
            {
              "name": "config",
              "type": "object",
              "description": " configuration attributes"
            }
          ]
        },
        "b4DragOver": {
          "guessedname": "b4DragOver",
          "private": "",
          "guessedtype": "function",
          "description": "Code that executes immediately before the onDragOver event"
        },
        "getDragEl": {
          "guessedname": "getDragEl",
          "guessedtype": "function",
          "description": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another \nelement. An example of this can be found in YAHOO.util.DDProxy",
          "return": {
            "type": "HTMLElement",
            "description": "the html element"
          }
        },
        "removeFromGroup": {
          "guessedname": "removeFromGroup",
          "guessedtype": "function",
          "description": "Remove's this instance from the supplied interaction group",
          "params": [
            {
              "name": "sGroup",
              "type": "string",
              "description": "  The group to drop"
            }
          ]
        },
        "getTick": {
          "guessedname": "getTick",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "val",
              "type": "int",
              "description": " where we want to place the object"
            },
            {
              "name": "tickArray",
              "type": "int[]",
              "description": " sorted array of valid points"
            }
          ],
          "description": "Normally the drag element is moved pixel by pixel, but we can specify \nthat it move a number of pixels at a time.  This method resolves the \nlocation when we have it set up like this.",
          "return": {
            "type": "int",
            "description": "the closest tick"
          }
        },
        "onMouseDown": {
          "guessedname": "onMouseDown",
          "guessedtype": "function",
          "description": "Event handler that fires when a drag/drop obj gets a mousedown",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mousedown event"
            }
          ]
        },
        "setYConstraint": {
          "guessedname": "setYConstraint",
          "guessedtype": "function",
          "description": "By default, the element can be dragged any place on the screen.  Set \nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
          "params": [
            {
              "name": "iUp",
              "type": "int",
              "description": " the number of pixels the element can move up"
            },
            {
              "name": "iDown",
              "type": "int",
              "description": " the number of pixels the element can move down"
            },
            {
              "name": "iTickSize",
              "type": "int",
              "description": " optional parameter for specifying that the \nelement should move iTickSize pixels at a time."
            }
          ]
        },
        "on": {
          "guessedname": "on",
          "guessedtype": "function",
          "description": "Shortcut for EventProvider.subscribe, see <a href=\"YAHOO.util.EventProvider.html#subscribe\">YAHOO.util.EventProvider.subscribe</a>"
        },
        "b4EndDrag": {
          "guessedname": "b4EndDrag",
          "private": "",
          "guessedtype": "function",
          "description": "Code that executes immediately before the endDrag event"
        },
        "removeInvalidHandleClass": {
          "guessedname": "removeInvalidHandleClass",
          "guessedtype": "function",
          "description": "Unsets an invalid css class",
          "params": [
            {
              "name": "cssClass",
              "type": "string",
              "description": " the class of the element(s) you wish to \nre-enable"
            }
          ]
        },
        "onInvalidDrop": {
          "guessedname": "onInvalidDrop",
          "guessedtype": "function",
          "description": "Abstract method called when this item is dropped on an area with no\ndrop target",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mouseup event"
            }
          ]
        },
        "onDragOut": {
          "guessedname": "onDragOut",
          "guessedtype": "function",
          "description": "Abstract method called when we are no longer hovering over an element",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mousemove event"
            },
            {
              "name": "id",
              "type": "String|DragDrop[]",
              "description": " In POINT mode, the element\nid this was hovering over.  In INTERSECT mode, an array of dd items \nthat the mouse is no longer over."
            }
          ]
        },
        "clearConstraints": {
          "guessedname": "clearConstraints",
          "guessedtype": "function",
          "description": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time."
        },
        "onDragOver": {
          "guessedname": "onDragOver",
          "guessedtype": "function",
          "description": "Abstract method called when this element is hovering over another \nDragDrop obj",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mousemove event"
            },
            {
              "name": "id",
              "type": "String|DragDrop[]",
              "description": " In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of dd items \nbeing hovered over."
            }
          ]
        },
        "resetConstraints": {
          "guessedname": "resetConstraints",
          "guessedtype": "function",
          "description": "resetConstraints must be called if you manually reposition a dd element."
        },
        "setStartPosition": {
          "private": "",
          "guessedname": "setStartPosition",
          "guessedtype": "function",
          "description": "Sets the start position of the element.  This is set when the obj\nis initialized, the reset when a drag is started.",
          "params": [
            {
              "name": "pos",
              "type": "",
              "description": " current position (from previous lookup)"
            }
          ]
        },
        "onDragEnter": {
          "guessedname": "onDragEnter",
          "guessedtype": "function",
          "description": "Abstract method called when this element fist begins hovering over \nanother DragDrop obj",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mousemove event"
            },
            {
              "name": "id",
              "type": "String|DragDrop[]",
              "description": " In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of one or more \ndragdrop items being hovered over."
            }
          ]
        },
        "b4DragOut": {
          "guessedname": "b4DragOut",
          "private": "",
          "guessedtype": "function",
          "description": "Code that executes immediately before the onDragOut event"
        },
        "onDrag": {
          "guessedname": "onDrag",
          "guessedtype": "function",
          "description": "Abstract method called during the onMouseMove event while dragging an \nobject.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mousemove event"
            }
          ]
        },
        "onAvailable": {
          "guessedname": "onAvailable",
          "guessedtype": "function",
          "description": "Override the onAvailable method to do what is needed after the initial\nposition was determined."
        },
        "setXConstraint": {
          "guessedname": "setXConstraint",
          "guessedtype": "function",
          "description": "By default, the element can be dragged any place on the screen.  Use \nthis method to limit the horizontal travel of the element.  Pass in \n0,0 for the parameters if you want to lock the drag to the y axis.",
          "params": [
            {
              "name": "iLeft",
              "type": "int",
              "description": " the number of pixels the element can move to the left"
            },
            {
              "name": "iRight",
              "type": "int",
              "description": " the number of pixels the element can move to the \nright"
            },
            {
              "name": "iTickSize",
              "type": "int",
              "description": " optional parameter for specifying that the \nelement\nshould move iTickSize pixels at a time."
            }
          ]
        },
        "b4Drag": {
          "guessedname": "b4Drag",
          "private": "",
          "guessedtype": "function",
          "description": "Code that executes immediately before the onDrag event"
        }
      },
      "name": "YAHOO.util.DragDrop",
      "guessedname": "DragDrop",
      "module": "dragdrop",
      "namespace": "YAHOO.util",
      "events": {
        "b4DragOverEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragOverEvent."
        },
        "endDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires on the mouseup event after a drag has been initiated (startDrag fired)."
        },
        "b4DragOutEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragOutEvent"
        },
        "b4StartDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the startDragEvent, returning false will cancel the startDrag Event."
        },
        "b4EndDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the endDragEvent. Returning false will cancel."
        },
        "dragOutEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires when a dragged object is no longer over an object that had the onDragEnter fire."
        },
        "dragDropEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires when the dragged objects is dropped on another."
        },
        "dragEnterEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Occurs when the dragged object first interacts with another targettable drag and drop object."
        },
        "mouseUpEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fired from inside DragDropMgr when the drag operation is finished."
        },
        "dragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Occurs every mousemove event while dragging."
        },
        "b4MouseDownEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Provides access to the mousedown event, before the mouseDownEvent gets fired. Returning false will cancel the drag."
        },
        "startDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Occurs after a mouse down and the drag threshold has been met. The drag threshold default is either 3 pixels of mouse movement or 1 full second of holding the mousedown."
        },
        "invalidDropEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires when the dragged objects is dropped in a location that contains no drop targets."
        },
        "b4DragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragEvent."
        },
        "b4DragDropEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragDropEvent"
        },
        "dragOverEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires every mousemove event while over a drag and drop object."
        },
        "mouseDownEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Provides access to the mousedown event. The mousedown does not always result in a drag operation."
        }
      },
      "constructors": [
        {
          "description": "Defines the interface and base operation of items that that can be \ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver, onDragOut.\nUp to three html elements can be associated with a DragDrop instance:\n<ul>\n<li>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with \nother DragDrop objects.</li>\n<li>handle element(s): The drag operation only occurs if the element that \nwas clicked matches a handle element.  By default this is the linked \nelement, but there are times that you will want only a portion of the \nlinked element to initiate the drag operation, and the setHandleElId() \nmethod provides a way to define this.</li>\n<li>drag element: this represents an the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define\na separate element that would be moved, as in {@link YAHOO.util.DDProxy}\n</li>\n</ul>\nThis class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any \nother DragDrop obj in the \"group1\" group:\n<pre>\ndd = new YAHOO.util.DragDrop(\"div1\", \"group1\");\n</pre>\nSince none of the event handlers have been implemented, nothing would \nactually happen if you were to run the code above.  Normally you would \noverride this class or one of the default implementations, but you can \nalso override the methods you want on an instance of the class...\n<pre>\ndd.onDragDrop = function(e, id) {\n&nbsp;&nbsp;alert(\"dd was dropped on \" + id);\n}\n</pre>",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " of the element that is linked to this instance"
            },
            {
              "name": "sGroup",
              "type": "String",
              "description": " the group of related DragDrop objects"
            },
            {
              "name": "config",
              "type": "object",
              "description": " an object containing configurable attributes\nValid properties for DragDrop: \npadding, isTarget, maintainOffset, primaryButtonOnly,"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Defines the interface and base operation of items that that can be \ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver, onDragOut.\nUp to three html elements can be associated with a DragDrop instance:\n<ul>\n<li>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with \nother DragDrop objects.</li>\n<li>handle element(s): The drag operation only occurs if the element that \nwas clicked matches a handle element.  By default this is the linked \nelement, but there are times that you will want only a portion of the \nlinked element to initiate the drag operation, and the setHandleElId() \nmethod provides a way to define this.</li>\n<li>drag element: this represents an the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define\na separate element that would be moved, as in {@link YAHOO.util.DDProxy}\n</li>\n</ul>\nThis class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any \nother DragDrop obj in the \"group1\" group:\n<pre>\ndd = new YAHOO.util.DragDrop(\"div1\", \"group1\");\n</pre>\nSince none of the event handlers have been implemented, nothing would \nactually happen if you were to run the code above.  Normally you would \noverride this class or one of the default implementations, but you can \nalso override the methods you want on an instance of the class...\n<pre>\ndd.onDragDrop = function(e, id) {\n&nbsp;&nbsp;alert(\"dd was dropped on \" + id);\n}\n</pre>",
      "file": "DragDrop.js",
      "properties": {
        "groups": {
          "guessedname": "groups",
          "type": "{string: string}",
          "guessedtype": "property",
          "description": "The group defines a logical collection of DragDrop objects that are \nrelated.  Instances only get events when interacting with other \nDragDrop object in the same group.  This lets us define multiple \ngroups using a single DragDrop subclass if we want."
        },
        "cursorIsOver": {
          "guessedname": "cursorIsOver",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Property that is assigned to a drag and drop object when testing to\nsee if it is being targeted by another dd object.  This property\ncan be used in intersect mode to help determine the focus of\nthe mouse interaction.  DDM.getBestMatch uses this property first to\ndetermine the closest match in INTERSECT mode when multiple targets\nare part of the same interaction."
        },
        "overlap": {
          "guessedname": "overlap",
          "type": "YAHOO.util.Region",
          "guessedtype": "property",
          "description": "Property that is assigned to a drag and drop object when testing to\nsee if it is being targeted by another dd object.  This is a region\nthat represents the area the draggable element overlaps this target.\nDDM.getBestMatch uses this property to compare the size of the overlap\nto that of other targets in order to determine the closest match in\nINTERSECT mode when multiple targets are part of the same interaction."
        },
        "xTicks": {
          "guessedname": "xTicks",
          "type": "int[]",
          "guessedtype": "property",
          "description": "Array of pixel locations the element will snap to if we specified a \nhorizontal graduation/interval.  This array is generated automatically\nwhen you define a tick interval."
        },
        "handleElId": {
          "private": "",
          "guessedname": "handleElId",
          "type": "String",
          "guessedtype": "property",
          "description": "the id of the element that initiates the drag operation.  By default \nthis is the linked element, but could be changed to be a child of this\nelement.  This lets us do things like only starting the drag when the \nheader element within the linked html element is clicked."
        },
        "hasOuterHandles": {
          "guessedname": "hasOuterHandles",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "By default, drags can only be initiated if the mousedown occurs in the\nregion the linked element is.  This is done in part to work around a\nbug in some browsers that mis-report the mousedown if the previous\nmouseup happened outside of the window.  This property is set to true\nif outer handles are defined."
        },
        "dragOnly": {
          "guessedname": "dragOnly",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If this flag is true, do not fire drop events. The element is a drag only element (for movement not dropping)"
        },
        "available": {
          "guessedname": "available",
          "type": "boolean",
          "guessedtype": "property",
          "description": "The availabe property is false until the linked dom element is accessible."
        },
        "dragElId": {
          "private": "",
          "guessedname": "dragElId",
          "type": "String",
          "guessedtype": "property",
          "description": "The id of the element that will be dragged.  By default this is same \nas the linked element , but could be changed to another element. Ex: \nYAHOO.util.DDProxy"
        },
        "config": {
          "guessedname": "config",
          "type": "object",
          "guessedtype": "property",
          "description": "Configuration attributes passed into the constructor"
        },
        "deltaX": {
          "private": "",
          "guessedname": "deltaX",
          "type": "int",
          "guessedtype": "property",
          "description": "The difference between the click position and the source element's location"
        },
        "maxX": {
          "private": "",
          "guessedname": "maxX",
          "type": "int",
          "guessedtype": "property",
          "description": "The right constraint"
        },
        "constrainX": {
          "private": "",
          "guessedname": "constrainX",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Set to true when horizontal contraints are applied"
        },
        "deltaY": {
          "private": "",
          "guessedname": "deltaY",
          "type": "int",
          "guessedtype": "property",
          "description": "The difference between the click position and the source element's location"
        },
        "maxY": {
          "private": "",
          "guessedname": "maxY",
          "type": "int",
          "guessedtype": "property",
          "description": "The down constraint"
        },
        "primaryButtonOnly": {
          "guessedname": "primaryButtonOnly",
          "type": "boolean",
          "guessedtype": "property",
          "description": "By default the drag and drop instance will only respond to the primary\nbutton click (left button for a right-handed mouse).  Set to true to\nallow drag and drop to start with any mouse click that is propogated\nby the browser"
        },
        "useShim": {
          "guessedname": "useShim",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "If this flag is true, a shim will be placed over the screen/viewable area to track mouse events. Should help with dragging elements over iframes and other controls."
        },
        "constrainY": {
          "private": "",
          "guessedname": "constrainY",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Set to true when vertical contraints are applied"
        },
        "invalidHandleTypes": {
          "guessedname": "invalidHandleTypes",
          "type": "{string: string}",
          "guessedtype": "property",
          "description": "An associative array of HTML tags that will be ignored if clicked."
        },
        "events": {
          "guessedname": "events",
          "type": "object",
          "guessedtype": "property",
          "description": "An Object Literal containing the events that we will be using: mouseDown, b4MouseDown, mouseUp, b4StartDrag, startDrag, b4EndDrag, endDrag, mouseUp, drag, b4Drag, invalidDrop, b4DragOut, dragOut, dragEnter, b4DragOver, dragOver, b4DragDrop, dragDrop\nBy setting any of these to false, then event will not be fired."
        },
        "isTarget": {
          "guessedname": "isTarget",
          "type": "boolean",
          "guessedtype": "property",
          "description": "By default, all instances can be a drop target.  This can be disabled by\nsetting isTarget to false."
        },
        "id": {
          "guessedname": "id",
          "type": "String",
          "guessedtype": "property",
          "description": "The id of the element associated with this object.  This is what we \nrefer to as the \"linked element\" because the size and position of \nthis element is used to determine when the drag and drop objects have \ninteracted."
        },
        "padding": {
          "guessedname": "padding",
          "type": "int[]",
          "guessedtype": "property",
          "description": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object."
        },
        "minX": {
          "private": "",
          "guessedname": "minX",
          "type": "int",
          "guessedtype": "property",
          "description": "The left constraint"
        },
        "invalidHandleIds": {
          "guessedname": "invalidHandleIds",
          "type": "{string: string}",
          "guessedtype": "property",
          "description": "An associative array of ids for elements that will be ignored if clicked"
        },
        "minY": {
          "private": "",
          "guessedname": "minY",
          "type": "int",
          "guessedtype": "property",
          "description": "The up constraint"
        },
        "yTicks": {
          "guessedname": "yTicks",
          "type": "int[]",
          "guessedtype": "property",
          "description": "Array of pixel locations the element will snap to if we specified a \nvertical graduation/interval.  This array is generated automatically \nwhen you define a tick interval."
        },
        "_domRef": {
          "guessedname": "_domRef",
          "private": "",
          "guessedtype": "property",
          "description": "Cached reference to the linked element"
        },
        "__ygDragDrop": {
          "guessedname": "__ygDragDrop",
          "private": "",
          "guessedtype": "property",
          "description": "Internal typeof flag"
        },
        "startPageX": {
          "private": "",
          "guessedname": "startPageX",
          "type": "int",
          "guessedtype": "property",
          "description": "The linked element's absolute X position at the time the drag was \nstarted"
        },
        "invalidHandleClasses": {
          "guessedname": "invalidHandleClasses",
          "type": "string[]",
          "guessedtype": "property",
          "description": "An indexted array of css class names for elements that will be ignored\nif clicked."
        },
        "locked": {
          "private": "",
          "guessedname": "locked",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Individual drag/drop instances can be locked.  This will prevent \nonmousedown start drag."
        },
        "maintainOffset": {
          "guessedname": "maintainOffset",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Maintain offsets when we resetconstraints.  Set to true when you want\nthe position of the element relative to its parent to stay the same\nwhen the page changes"
        },
        "startPageY": {
          "private": "",
          "guessedname": "startPageY",
          "type": "int",
          "guessedtype": "property",
          "description": "The linked element's absolute X position at the time the drag was \nstarted"
        }
      }
    },
    "YAHOO.util.LocalDataSource": {
      "shortname": "LocalDataSource",
      "superclass": "YAHOO.util.DataSourceBase",
      "name": "YAHOO.util.LocalDataSource",
      "extends": "YAHOO.util.DataSourceBase",
      "guessedname": "LocalDataSource",
      "module": "datasource",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "LocalDataSource class for in-memory data structs including JavaScript arrays,\nJavaScript object literals (JSON), XML documents, and HTML tables.",
          "params": [
            {
              "name": "oLiveData",
              "type": "HTMLElement",
              "description": "   Pointer to live data."
            },
            {
              "name": "oConfigs",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "LocalDataSource class for in-memory data structs including JavaScript arrays,\nJavaScript object literals (JSON), XML documents, and HTML tables.",
      "file": "DataSource.js"
    },
    "YAHOO.widget.ColumnSeries": {
      "shortname": "ColumnSeries",
      "name": "YAHOO.widget.ColumnSeries",
      "guessedname": "ColumnSeries",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "ColumnSeries class for the YUI Charts widget."
        }
      ],
      "guessedtype": "function",
      "description": "ColumnSeries class for the YUI Charts widget.",
      "file": "Series.js",
      "uses": [
        "YAHOO.widget.CartesianSeries"
      ]
    },
    "YAHOO.util.Anim": {
      "shortname": "Anim",
      "methods": {
        "getEl": {
          "guessedname": "getEl",
          "guessedtype": "function",
          "description": "Returns a reference to the animated element.",
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "getDefaultUnit": {
          "guessedname": "getDefaultUnit",
          "guessedtype": "function",
          "description": "Returns the unit to use when none is supplied.",
          "params": [
            {
              "name": "attr",
              "type": "attr",
              "description": " The name of the attribute."
            }
          ],
          "return": {
            "type": "String",
            "description": "The default unit to be used."
          }
        },
        "stop": {
          "guessedname": "stop",
          "guessedtype": "function",
          "description": "Stops the animation.  Normally called by AnimMgr when animation completes.",
          "params": [
            {
              "name": "finish",
              "type": "Boolean",
              "description": " (optional) If true, animation will jump to final frame."
            }
          ]
        },
        "animate": {
          "guessedname": "animate",
          "guessedtype": "function",
          "description": "Starts the animation by registering it with the animation manager."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Provides a readable name for the Anim instance.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "doMethod": {
          "guessedname": "doMethod",
          "guessedtype": "function",
          "description": "Returns the value computed by the animation's \"method\".",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The name of the attribute."
            },
            {
              "name": "start",
              "type": "Number",
              "description": " The value this attribute should start from for this animation."
            },
            {
              "name": "end",
              "type": "Number",
              "description": "  The value this attribute should end at for this animation."
            }
          ],
          "return": {
            "type": "Number",
            "description": "The Value to be applied to the attribute."
          }
        },
        "setAttribute": {
          "guessedname": "setAttribute",
          "guessedtype": "function",
          "description": "Applies a value to an attribute.",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The name of the attribute."
            },
            {
              "name": "val",
              "type": "Number",
              "description": " The value to be applied to the attribute."
            },
            {
              "name": "unit",
              "type": "String",
              "description": " The unit ('px', '%', etc.) of the value."
            }
          ]
        },
        "getStartTime": {
          "guessedname": "getStartTime",
          "guessedtype": "function",
          "description": "Returns the animation start time.",
          "return": {
            "type": "Date",
            "description": "current value of startTime."
          }
        },
        "isAnimated": {
          "guessedname": "isAnimated",
          "guessedtype": "function",
          "description": "Checks whether the element is currently animated.",
          "return": {
            "type": "Boolean",
            "description": "current value of isAnimated."
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Constructor for Anim instance.",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement",
              "description": " Reference to the element that will be animated"
            },
            {
              "name": "attributes",
              "type": "Object",
              "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."
            },
            {
              "name": "duration",
              "type": "Number",
              "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"
            }
          ]
        },
        "onTween": {
          "guessedname": "onTween",
          "private": "",
          "guessedtype": "function",
          "description": "Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s)."
        },
        "setRuntimeAttribute": {
          "private": "",
          "guessedname": "setRuntimeAttribute",
          "guessedtype": "function",
          "description": "Sets the actual values to be used during the animation.  Should only be needed for subclass use.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " The attribute object"
            }
          ]
        },
        "getAttribute": {
          "guessedname": "getAttribute",
          "guessedtype": "function",
          "description": "Returns current value of the attribute.",
          "params": [
            {
              "name": "attr",
              "type": "String",
              "description": " The name of the attribute."
            }
          ],
          "return": {
            "type": "Number",
            "description": "val The current value of the attribute."
          }
        },
        "setEl": {
          "guessedname": "setEl",
          "guessedtype": "function",
          "description": "Changes the animated element"
        }
      },
      "name": "YAHOO.util.Anim",
      "guessedname": "Anim",
      "module": "animation",
      "namespace": "YAHOO.util",
      "requires": "YAHOO.util.AnimMgr",
      "events": {
        "onComplete": {
          "guessedname": "onComplete",
          "guessedtype": "property",
          "description": "Custom event that fires when animation ends\nListen via subscribe method (e.g. myAnim.onComplete.subscribe(someFunction)"
        },
        "onStart": {
          "guessedname": "onStart",
          "guessedtype": "property",
          "description": "Custom event that fires when animation begins\nListen via subscribe method (e.g. myAnim.onStart.subscribe(someFunction)"
        },
        "onTween": {
          "guessedname": "onTween",
          "guessedtype": "property",
          "description": "Custom event that fires between each frame\nListen via subscribe method (e.g. myAnim.onTween.subscribe(someFunction)"
        }
      },
      "constructors": [
        {
          "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);</p>",
          "params": [
            {
              "name": "el",
              "type": "String | HTMLElement",
              "description": " Reference to the element that will be animated"
            },
            {
              "name": "attributes",
              "type": "Object",
              "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."
            },
            {
              "name": "duration",
              "type": "Number",
              "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);</p>",
      "file": "Anim.js",
      "properties": {
        "duration": {
          "guessedname": "duration",
          "type": "Number",
          "guessedtype": "property",
          "description": "The length of the animation.  Defaults to \"1\" (second)."
        },
        "_onComplete": {
          "guessedname": "_onComplete",
          "private": "",
          "guessedtype": "property",
          "description": "Custom event that fires after onComplete"
        },
        "totalFrames": {
          "guessedname": "totalFrames",
          "type": "Int",
          "guessedtype": "property",
          "description": "The total number of frames to be executed.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time."
        },
        "currentFrame": {
          "guessedname": "currentFrame",
          "type": "Int",
          "guessedtype": "property",
          "description": "The location of the current animation on the timeline.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time."
        },
        "useSeconds": {
          "guessedname": "useSeconds",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the duration should be treated as seconds.\nDefaults to true."
        },
        "actualFrames": {
          "private": "",
          "guessedname": "actualFrames",
          "type": "Int",
          "guessedtype": "property",
          "description": "The number of frames this animation was able to execute."
        },
        "_onTween": {
          "guessedname": "_onTween",
          "private": "",
          "guessedtype": "property",
          "description": "Custom event that fires after onTween"
        },
        "method": {
          "guessedname": "method",
          "type": "Function",
          "guessedtype": "property",
          "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"YAHOO.util.Easing.easeNone\"."
        },
        "attributes": {
          "guessedname": "attributes",
          "type": "Object",
          "guessedtype": "property",
          "description": "The collection of attributes to be animated.  \nEach attribute must have at least a \"to\" or \"by\" defined in order to animate.  \nIf \"to\" is supplied, the animation will end with the attribute at that value.  \nIf \"by\" is supplied, the animation will end at that value plus its starting value. \nIf both are supplied, \"to\" is used, and \"by\" is ignored. \nOptional additional member include \"from\" (the value the attribute should start animating from, defaults to current value), and \"unit\" (the units to apply to the values)."
        },
        "_onStart": {
          "guessedname": "_onStart",
          "private": "",
          "guessedtype": "property",
          "description": "Custom event that fires after onStart, useful in subclassing"
        },
        "isAnimated": {
          "private": "",
          "guessedname": "isAnimated",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not the animation is running."
        },
        "el": {
          "private": "",
          "guessedname": "el",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The element to be animated."
        },
        "startTime": {
          "private": "",
          "guessedname": "startTime",
          "type": "Date",
          "guessedtype": "property",
          "description": "A Date object that is created when the animation begins."
        }
      }
    },
    "YAHOO.util.ColumnDD": {
      "shortname": "ColumnDD",
      "superclass": "YAHOO.util.DDProxy",
      "name": "YAHOO.util.ColumnDD",
      "extends": "YAHOO.util.DDProxy",
      "guessedname": "ColumnDD",
      "module": "datatable",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "ColumnDD subclasses DragDrop to support rearrangeable Columns.",
          "params": [
            {
              "name": "oDataTable",
              "type": "YAHOO.widget.DataTable",
              "description": "  DataTable instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "elTh",
              "type": "HTMLElement",
              "description": "  TH element reference."
            },
            {
              "name": "elTarget",
              "type": "HTMLElement",
              "description": "  Drag target element."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ColumnDD subclasses DragDrop to support rearrangeable Columns.",
      "file": "ColumnSet.js"
    },
    "YAHOO.util.AnimMgr": {
      "shortname": "AnimMgr",
      "methods": {
        "run": {
          "guessedname": "run",
          "guessedtype": "function",
          "description": "Called per Interval to handle each animation frame."
        },
        "stop": {
          "guessedname": "stop",
          "guessedtype": "function",
          "description": "Stops the animation thread or a specific animation instance.",
          "params": [
            {
              "name": "tween",
              "type": "object",
              "description": " A specific Anim instance to stop (optional)\nIf no instance given, Manager stops thread and all animations."
            }
          ]
        },
        "correctFrame": {
          "private": "",
          "guessedname": "correctFrame",
          "guessedtype": "function",
          "description": "On the fly frame correction to keep animation on time.",
          "params": [
            {
              "name": "tween",
              "type": "Object",
              "description": " The Anim instance being corrected."
            }
          ]
        },
        "registerElement": {
          "guessedname": "registerElement",
          "guessedtype": "function",
          "description": "Adds an animation instance to the animation queue.\nAll animation instances must be registered in order to animate.",
          "params": [
            {
              "name": "tween",
              "type": "object",
              "description": " The Anim instance to be be registered"
            }
          ]
        },
        "start": {
          "guessedname": "start",
          "guessedtype": "function",
          "description": "Starts the animation thread.\nOnly one thread can run at a time."
        },
        "unRegister": {
          "private": "",
          "guessedname": "unRegister",
          "guessedtype": "function",
          "description": "removes an animation instance from the animation queue.\nAll animation instances must be registered in order to animate.",
          "params": [
            {
              "name": "tween",
              "type": "object",
              "description": " The Anim instance to be be registered"
            },
            {
              "name": "index",
              "type": "Int",
              "description": " The index of the Anim instance"
            }
          ]
        }
      },
      "name": "YAHOO.util.AnimMgr",
      "guessedname": "AnimMgr",
      "module": "animation",
      "namespace": "YAHOO.util",
      "guessedtype": "function",
      "description": "Handles animation queueing and threading.\nUsed by Anim and subclasses.",
      "file": "AnimMgr.js",
      "properties": {
        "thread": {
          "private": "",
          "guessedname": "thread",
          "type": "Int",
          "guessedtype": "property",
          "description": "Reference to the animation Interval."
        },
        "delay": {
          "guessedname": "delay",
          "type": "Int",
          "guessedtype": "property",
          "description": "Interval delay in milliseconds, defaults to fastest possible."
        },
        "tweenCount": {
          "private": "",
          "guessedname": "tweenCount",
          "type": "Int",
          "guessedtype": "property",
          "description": "The number of active animations."
        },
        "queue": {
          "private": "",
          "guessedname": "queue",
          "type": "Array",
          "guessedtype": "property",
          "description": "The current queue of registered animation objects."
        },
        "fps": {
          "guessedname": "fps",
          "type": "Int",
          "guessedtype": "property",
          "description": "Base frame rate (frames per second). \nArbitrarily high for better x-browser calibration (slower browsers drop more frames)."
        }
      }
    },
    "YAHOO.widget.Calendar": {
      "shortname": "Calendar",
      "methods": {
        "doNextMonthNav": {
          "guessedname": "doNextMonthNav",
          "guessedtype": "function",
          "description": "The default event handler for clicks on the \"Next Month\" navigation UI",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The DOM event"
            },
            {
              "name": "cal",
              "type": "Calendar",
              "description": " A reference to the calendar"
            }
          ]
        },
        "styleCellDefault": {
          "guessedname": "styleCellDefault",
          "guessedtype": "function",
          "description": "Styles a selectable cell.",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ]
        },
        "renderCellStyleHighlight1": {
          "guessedname": "renderCellStyleHighlight1",
          "guessedtype": "function",
          "description": "Renders a single standard calendar cell using the CSS hightlight1 style",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ]
        },
        "hide": {
          "guessedname": "hide",
          "guessedtype": "function",
          "description": "Hides the Calendar's outer container from view."
        },
        "configStrings": {
          "guessedname": "configStrings",
          "guessedtype": "function",
          "description": "The default handler for the \"strings\" property"
        },
        "show": {
          "guessedname": "show",
          "guessedtype": "function",
          "description": "Shows the Calendar's outer container."
        },
        "resetRenderers": {
          "guessedname": "resetRenderers",
          "guessedtype": "function",
          "description": "Resets the render stack of the current calendar to its original pre-render value."
        },
        "buildMonthLabel": {
          "guessedname": "buildMonthLabel",
          "guessedtype": "function",
          "description": "Builds the date label that will be displayed in the calendar header or\nfooter, depending on configuration.",
          "return": {
            "type": "String",
            "description": "The formatted calendar month label"
          }
        },
        "nextMonth": {
          "guessedname": "nextMonth",
          "guessedtype": "function",
          "description": "Navigates to the next month page in the calendar widget."
        },
        "renderCellStyleHighlight2": {
          "guessedname": "renderCellStyleHighlight2",
          "guessedtype": "function",
          "description": "Renders a single standard calendar cell using the CSS hightlight2 style",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ]
        },
        "buildDayLabel": {
          "guessedname": "buildDayLabel",
          "guessedtype": "function",
          "description": "Builds the date digit that will be displayed in calendar cells",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": " The current working date"
            }
          ],
          "return": {
            "type": "String",
            "description": "The formatted day label"
          }
        },
        "initEvents": {
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initializes Calendar's built-in CustomEvents"
        },
        "addRenderer": {
          "guessedname": "addRenderer",
          "guessedtype": "function",
          "description": "Adds a renderer to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the conditions specified in the date string for this renderer.",
          "params": [
            {
              "name": "sDates",
              "type": "String",
              "description": "  A date string to associate with the specified renderer. Valid formats\ninclude date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)"
            },
            {
              "name": "fnRender",
              "type": "Function",
              "description": " The function executed to render cells that match the render rules for this renderer."
            }
          ]
        },
        "renderCellStyleHighlight3": {
          "guessedname": "renderCellStyleHighlight3",
          "guessedtype": "function",
          "description": "Renders a single standard calendar cell using the CSS hightlight3 style",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ]
        },
        "doCellMouseOver": {
          "guessedname": "doCellMouseOver",
          "guessedtype": "function",
          "description": "The event that is executed when the user hovers over a cell",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The event"
            },
            {
              "name": "cal",
              "type": "Calendar",
              "description": " A reference to the calendar passed by the Event utility"
            }
          ]
        },
        "doSelectCell": {
          "guessedname": "doSelectCell",
          "guessedtype": "function",
          "description": "The default event handler for date cell selection. Currently attached to \nthe Calendar's bounding box, referenced by it's <a href=\"#property_oDomContainer\">oDomContainer</a> property.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The DOM event"
            },
            {
              "name": "cal",
              "type": "Calendar",
              "description": " A reference to the calendar"
            }
          ]
        },
        "_toFieldArray": {
          "guessedname": "_toFieldArray",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "date",
              "type": "String/Date/Date[]",
              "description": " The date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."
            }
          ],
          "description": "Converts a date (either a JavaScript Date object, or a date string) to the internal data structure\nused to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]].",
          "return": {
            "type": "Array[](Number[])",
            "description": "Array of date field arrays"
          }
        },
        "renderBodyCellRestricted": {
          "guessedname": "renderBodyCellRestricted",
          "guessedtype": "function",
          "description": "Renders the current calendar cell as a non-selectable \"black-out\" date using the default\nrestricted style.",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ],
          "return": {
            "type": "String",
            "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"
          }
        },
        "clearAllBodyCellStyles": {
          "guessedname": "clearAllBodyCellStyles",
          "guessedtype": "function",
          "description": "Removes all styles from all body cells in the current calendar table.",
          "params": [
            {
              "name": "style",
              "type": "style",
              "description": " The CSS class name to remove from all calendar body cells"
            }
          ]
        },
        "renderCellStyleHighlight4": {
          "guessedname": "renderCellStyleHighlight4",
          "guessedtype": "function",
          "description": "Renders a single standard calendar cell using the CSS hightlight4 style",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ]
        },
        "getIndexFromId": {
          "guessedname": "getIndexFromId",
          "guessedtype": "function",
          "description": "Given the id used to mark each Calendar cell, this method\nextracts the index number from the id.",
          "params": [
            {
              "name": "strId",
              "type": "String",
              "description": " The cell id"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The index of the cell, or -1 if id does not contain an index number"
          }
        },
        "isDateOOB": {
          "guessedname": "isDateOOB",
          "guessedtype": "function",
          "description": "Determines whether a given date is OOB (out of bounds - less than the mindate or more than the maxdate).",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript Date object for which to check the OOB status"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true if the date is OOB"
          }
        },
        "setYear": {
          "guessedname": "setYear",
          "guessedtype": "function",
          "description": "Sets the calendar's year explicitly.",
          "params": [
            {
              "name": "year",
              "type": "Number",
              "description": "  The numeric 4-digit year"
            }
          ]
        },
        "validate": {
          "guessedname": "validate",
          "type": "Boolean",
          "guessedtype": "function",
          "description": "Validates the calendar widget. This method has no default implementation\nand must be extended by subclassing the widget.",
          "return": {
            "type": "",
            "description": "Should return true if the widget validates, and false if\nit doesn't."
          }
        },
        "doPreviousMonthNav": {
          "guessedname": "doPreviousMonthNav",
          "guessedtype": "function",
          "description": "The default event handler for clicks on the \"Previous Month\" navigation UI",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The DOM event"
            },
            {
              "name": "cal",
              "type": "Calendar",
              "description": " A reference to the calendar"
            }
          ]
        },
        "onChangePage": {
          "guessedname": "onChangePage",
          "guessedtype": "function",
          "description": "Event executed when the user navigates to a different calendar page.",
          "deprecated": "Event handlers for this event should be susbcribed to changePageEvent."
        },
        "onBeforeDeselect": {
          "guessedname": "onBeforeDeselect",
          "guessedtype": "function",
          "description": "Event executed before a date is deselected in the calendar widget.",
          "deprecated": "Event handlers for this event should be susbcribed to beforeDeselectEvent."
        },
        "previousMonth": {
          "guessedname": "previousMonth",
          "guessedtype": "function",
          "description": "Navigates to the previous month page in the calendar widget."
        },
        "_buildMonthLabel": {
          "guessedname": "_buildMonthLabel",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": ""
            }
          ],
          "description": "Helper method, to format a Month Year string, given a JavaScript Date, based on the \nCalendar localization settings",
          "return": {
            "type": "String",
            "description": "Formated month, year string"
          }
        },
        "renderCellStyleToday": {
          "guessedname": "renderCellStyleToday",
          "guessedtype": "function",
          "description": "Applies the default style used for rendering today's date to the current calendar cell",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ]
        },
        "clear": {
          "guessedname": "clear",
          "guessedtype": "function",
          "description": "Clears the selected dates in the current calendar widget and sets the calendar\nto the current month and year."
        },
        "_parseDate": {
          "guessedname": "_parseDate",
          "private": "",
          "type": "Array[](Number[])",
          "guessedtype": "function",
          "params": [
            {
              "name": "sDate",
              "type": "String",
              "description": "   Date string. Valid formats are mm/dd and mm/dd/yyyy."
            }
          ],
          "description": "Converts a date string to a date field array",
          "return": {
            "type": "",
            "description": "A date field array representing the string passed to the method"
          }
        },
        "configClose": {
          "guessedname": "configClose",
          "guessedtype": "function",
          "description": "Default handler for the \"close\" property"
        },
        "renderOutOfBoundsDate": {
          "guessedname": "renderOutOfBoundsDate",
          "guessedtype": "function",
          "description": "Renders a cell that falls before the minimum date or after the maximum date.\nwidget class.",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ],
          "return": {
            "type": "String",
            "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"
          }
        },
        "removeRenderers": {
          "guessedname": "removeRenderers",
          "guessedtype": "function",
          "description": "Removes all custom renderers added to the Calendar through the addRenderer, addMonthRenderer and \naddWeekdayRenderer methods. Calendar's render method needs to be called after removing renderers \nto re-render the Calendar without custom renderers applied."
        },
        "previousYear": {
          "guessedname": "previousYear",
          "guessedtype": "function",
          "description": "Navigates to the previous year in the currently selected month in the calendar widget."
        },
        "deselect": {
          "guessedname": "deselect",
          "guessedtype": "function",
          "description": "Deselects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once deselection has completed, render must be \ncalled for the changes to be reflected visually.\nThe method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable) \nand the array of deselected dates passed to the deselectEvent will not contain any OOB dates.\nIf all dates are OOB, beforeDeselect and deselect events will not be fired.",
          "params": [
            {
              "name": "date",
              "type": "String/Date/Date[]",
              "description": " The date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."
            }
          ],
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."
          }
        },
        "selectCell": {
          "guessedname": "selectCell",
          "guessedtype": "function",
          "description": "Selects a date on the current calendar by referencing the index of the cell that should be selected.\nThis method is used to easily select a single cell (usually with a mouse click) without having to do\na full render. The selected style is applied to the cell directly.\nIf the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month \nor out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired.",
          "params": [
            {
              "name": "cellIndex",
              "type": "Number",
              "description": " The index of the cell to select in the current calendar."
            }
          ],
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Destroys the Calendar instance. The method will remove references\nto HTML elements, remove any event listeners added by the Calendar,\nand destroy the Config and CalendarNavigator instances it has created."
        },
        "renderCellDefault": {
          "guessedname": "renderCellDefault",
          "guessedtype": "function",
          "description": "Renders a single standard calendar cell in the calendar widget table.\nAll logic for determining how a standard default cell will be rendered is \nencapsulated in this method, and must be accounted for when extending the\nwidget class.",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ]
        },
        "onRender": {
          "guessedname": "onRender",
          "guessedtype": "function",
          "description": "Event executed when the calendar widget is rendered.",
          "deprecated": "Event handlers for this event should be susbcribed to renderEvent."
        },
        "setMonth": {
          "guessedname": "setMonth",
          "guessedtype": "function",
          "description": "Sets the calendar's month explicitly",
          "params": [
            {
              "name": "month",
              "type": "Number",
              "description": "  The numeric month, from 0 (January) to 11 (December)"
            }
          ]
        },
        "onDeselect": {
          "guessedname": "onDeselect",
          "guessedtype": "function",
          "description": "Event executed when a date is deselected in the calendar widget.",
          "params": [
            {
              "name": "selected",
              "type": "Array",
              "description": " An array of date field arrays representing which date or dates were deselected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]"
            }
          ],
          "deprecated": "Event handlers for this event should be susbcribed to deselectEvent."
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Renders the calendar after it has been configured. The render() method has a specific call chain that will execute\nwhen the method is called: renderHeader, renderBody, renderFooter.\nRefer to the documentation for those methods for information on \nindividual render tasks."
        },
        "addYears": {
          "guessedname": "addYears",
          "guessedtype": "function",
          "description": "Adds the designated number of years to the current calendar, and sets the current\ncalendar page date to the new month.",
          "params": [
            {
              "name": "count",
              "type": "Number",
              "description": " The number of years to add to the current calendar"
            }
          ]
        },
        "configIframe": {
          "guessedname": "configIframe",
          "guessedtype": "function",
          "description": "Default Config listener for the iframe property. If the iframe config property is set to true, \nrenders the built-in IFRAME shim if the container is relatively or absolutely positioned."
        },
        "toDate": {
          "guessedname": "toDate",
          "guessedtype": "function",
          "description": "Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array\nis the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners.",
          "params": [
            {
              "name": "dateFieldArray",
              "type": "Number[]",
              "description": " The date field array to convert to a JavaScript Date."
            }
          ],
          "return": {
            "type": "Date",
            "description": "JavaScript Date object representing the date field array."
          }
        },
        "renderRowHeader": {
          "guessedname": "renderRowHeader",
          "guessedtype": "function",
          "description": "Renders the row header for a week.",
          "params": [
            {
              "name": "weekNum",
              "type": "Number",
              "description": " The week number of the current row"
            },
            {
              "name": "cell",
              "type": "Array",
              "description": " The current working HTML array"
            }
          ]
        },
        "deselectCell": {
          "guessedname": "deselectCell",
          "guessedtype": "function",
          "description": "Deselects a date on the current calendar by referencing the index of the cell that should be deselected.\nThis method is used to easily deselect a single cell (usually with a mouse click) without having to do\na full render. The selected style is removed from the cell directly.\nIf the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month \nor out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and \ndeselect events will not be fired.",
          "params": [
            {
              "name": "cellIndex",
              "type": "Number",
              "description": " The index of the cell to deselect in the current calendar."
            }
          ],
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."
          }
        },
        "getDateByCellId": {
          "guessedname": "getDateByCellId",
          "guessedtype": "function",
          "description": "Retrieves the Date object for the specified Calendar cell",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " The id of the cell"
            }
          ],
          "return": {
            "type": "Date",
            "description": "The Date object for the specified Calendar cell"
          }
        },
        "configMinDate": {
          "guessedname": "configMinDate",
          "guessedtype": "function",
          "description": "The default handler for the \"mindate\" property"
        },
        "subtractMonths": {
          "guessedname": "subtractMonths",
          "guessedtype": "function",
          "description": "Subtracts the designated number of months from the current calendar month, and sets the current\ncalendar page date to the new month.",
          "params": [
            {
              "name": "count",
              "type": "Number",
              "description": " The number of months to subtract from the current calendar"
            }
          ]
        },
        "clearElement": {
          "guessedname": "clearElement",
          "guessedtype": "function",
          "description": "Clears the inner HTML, CSS class and style information from the specified cell.",
          "params": [
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": " The cell to clear"
            }
          ]
        },
        "configToday": {
          "guessedname": "configToday",
          "guessedtype": "function",
          "description": "The default handler for the \"today\" property"
        },
        "deselectAll": {
          "guessedname": "deselectAll",
          "guessedtype": "function",
          "description": "Deselects all dates on the current calendar.",
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected.\nAssuming that this function executes properly, the return value should be an empty array.\nHowever, the empty array is returned for the sake of being able to check the selection status\nof the calendar."
          }
        },
        "onReset": {
          "guessedname": "onReset",
          "guessedtype": "function",
          "description": "Event executed when the calendar widget is reset to its original state.",
          "deprecated": "Event handlers for this event should be susbcribed to resetEvemt."
        },
        "nextYear": {
          "guessedname": "nextYear",
          "guessedtype": "function",
          "description": "Navigates to the next year in the currently selected month in the calendar widget."
        },
        "addMonthRenderer": {
          "guessedname": "addMonthRenderer",
          "guessedtype": "function",
          "description": "Adds a month to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the month passed to this method.",
          "params": [
            {
              "name": "month",
              "type": "Number",
              "description": "  The month (1-12) to associate with this renderer"
            },
            {
              "name": "fnRender",
              "type": "Function",
              "description": " The function executed to render cells that match the render rules for this renderer."
            }
          ]
        },
        "applyListeners": {
          "guessedname": "applyListeners",
          "guessedtype": "function",
          "description": "Applies the Calendar's DOM listeners to applicable elements."
        },
        "configPageDate": {
          "guessedname": "configPageDate",
          "guessedtype": "function",
          "description": "The default handler for the \"pagedate\" property"
        },
        "reset": {
          "guessedname": "reset",
          "guessedtype": "function",
          "description": "Resets the calendar widget to the originally selected month and year, and \nsets the calendar to the initial selection(s)."
        },
        "renderCellNotThisMonth": {
          "guessedname": "renderCellNotThisMonth",
          "guessedtype": "function",
          "description": "Applies the default style used for rendering dates that are not a part of the current\nmonth (preceding or trailing the cells for the current month)",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ],
          "return": {
            "type": "String",
            "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"
          }
        },
        "configMaxDate": {
          "guessedname": "configMaxDate",
          "guessedtype": "function",
          "description": "The default handler for the \"maxdate\" property"
        },
        "getCellIndex": {
          "guessedname": "getCellIndex",
          "guessedtype": "function",
          "description": "Find the Calendar's cell index for a given date.\nIf the date is not found, the method returns -1.\n<p>\nThe returned index can be used to lookup the cell HTMLElement  \nusing the Calendar's cells array or passed to selectCell to select \ncells by index. \n</p>\nSee <a href=\"#cells\">cells</a>, <a href=\"#selectCell\">selectCell</a>.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " JavaScript Date object, for which to find a cell index."
            }
          ],
          "return": {
            "type": "Number",
            "description": "The index of the date in Calendars cellDates/cells arrays, or -1 if the date \nis not on the curently rendered Calendar page."
          }
        },
        "_parseDates": {
          "guessedname": "_parseDates",
          "private": "",
          "type": "Array[](Number[])",
          "guessedtype": "function",
          "params": [
            {
              "name": "sDates",
              "type": "String",
              "description": "  Date string with one or more comma-delimited dates. Valid formats are mm/dd, mm/dd/yyyy, mm/dd/yyyy-mm/dd/yyyy"
            }
          ],
          "description": "Converts a multi or single-date string to an array of date field arrays",
          "return": {
            "type": "",
            "description": "An array of date field arrays"
          }
        },
        "getDateFieldsByCellId": {
          "guessedname": "getDateFieldsByCellId",
          "guessedtype": "function",
          "description": "Retrieves the Date object for the specified Calendar cell",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " The id of the cell"
            }
          ],
          "return": {
            "type": "Array",
            "description": "The array of Date fields for the specified Calendar cell"
          }
        },
        "renderHeader": {
          "guessedname": "renderHeader",
          "guessedtype": "function",
          "description": "Renders the calendar header.",
          "params": [
            {
              "name": "html",
              "type": "Array",
              "description": " The current working HTML array"
            }
          ],
          "return": {
            "type": "Array",
            "description": "The current working HTML array"
          }
        },
        "subtractYears": {
          "guessedname": "subtractYears",
          "guessedtype": "function",
          "description": "Subtcats the designated number of years from the current calendar, and sets the current\ncalendar page date to the new month.",
          "params": [
            {
              "name": "count",
              "type": "Number",
              "description": " The number of years to subtract from the current calendar"
            }
          ]
        },
        "_fieldArraysAreEqual": {
          "guessedname": "_fieldArraysAreEqual",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "array1",
              "type": "Number[]",
              "description": " The first date field array to compare"
            },
            {
              "name": "array2",
              "type": "Number[]",
              "description": " The first date field array to compare"
            }
          ],
          "description": "Determines if 2 field arrays are equal.",
          "return": {
            "type": "Boolean",
            "description": "The boolean that represents the equality of the two arrays"
          }
        },
        "refreshLocale": {
          "guessedname": "refreshLocale",
          "private": "",
          "guessedtype": "function",
          "description": "Refreshes the locale values used to build the Calendar."
        },
        "removeTitleBar": {
          "guessedname": "removeTitleBar",
          "guessedtype": "function",
          "description": "Removes the title bar element from the DOM"
        },
        "renderRowFooter": {
          "guessedname": "renderRowFooter",
          "guessedtype": "function",
          "description": "Renders the row footer for a week.",
          "params": [
            {
              "name": "weekNum",
              "type": "Number",
              "description": " The week number of the current row"
            },
            {
              "name": "cell",
              "type": "Array",
              "description": " The current working HTML array"
            }
          ]
        },
        "buildWeekdays": {
          "guessedname": "buildWeekdays",
          "guessedtype": "function",
          "description": "Renders the Calendar's weekday headers.",
          "params": [
            {
              "name": "html",
              "type": "Array",
              "description": " The current working HTML array"
            }
          ],
          "return": {
            "type": "Array",
            "description": "The current working HTML array"
          }
        },
        "doCellMouseOut": {
          "guessedname": "doCellMouseOut",
          "guessedtype": "function",
          "description": "The event that is executed when the user moves the mouse out of a cell",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": " The event"
            },
            {
              "name": "cal",
              "type": "Calendar",
              "description": " A reference to the calendar passed by the Event utility"
            }
          ]
        },
        "configLocaleValues": {
          "guessedname": "configLocaleValues",
          "guessedtype": "function",
          "description": "The default handler for all configuration locale field length properties"
        },
        "addMonths": {
          "guessedname": "addMonths",
          "guessedtype": "function",
          "description": "Adds the designated number of months to the current calendar month, and sets the current\ncalendar page date to the new month.",
          "params": [
            {
              "name": "count",
              "type": "Number",
              "description": " The number of months to add to the current calendar"
            }
          ]
        },
        "renderCellStyleSelected": {
          "guessedname": "renderCellStyleSelected",
          "guessedtype": "function",
          "description": "Applies the default style used for rendering selected dates to the current calendar cell",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": "  The current working Date object being used to generate the calendar"
            },
            {
              "name": "cell",
              "type": "HTMLTableCellElement",
              "description": "   The current working cell in the calendar"
            }
          ],
          "return": {
            "type": "String",
            "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"
          }
        },
        "onBeforeSelect": {
          "guessedname": "onBeforeSelect",
          "guessedtype": "function",
          "description": "Event executed before a date is selected in the calendar widget.",
          "deprecated": "Event handlers for this event should be susbcribed to beforeSelectEvent."
        },
        "_addRenderer": {
          "private": "",
          "guessedname": "_addRenderer",
          "guessedtype": "function",
          "description": "The private method used for adding cell renderers to the local render stack.\nThis method is called by other methods that set the renderer type prior to the method call.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "  The type string that indicates the type of date renderer being added.\nValues are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,\nYAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH"
            },
            {
              "name": "aDates",
              "type": "Array",
              "description": "  An array of dates used to construct the renderer. The format varies based\non the renderer type"
            },
            {
              "name": "fnRender",
              "type": "Function",
              "description": " The function executed to render cells that match the render rules for this renderer."
            }
          ]
        },
        "_parseRange": {
          "guessedname": "_parseRange",
          "private": "",
          "type": "Array[](Number[])",
          "guessedtype": "function",
          "params": [
            {
              "name": "startDate",
              "type": "Number[]",
              "description": " Date field array representing the first date in the range"
            },
            {
              "name": "endDate",
              "type": "Number[]",
              "description": "  Date field array representing the last date in the range"
            }
          ],
          "description": "Converts a date range to the full list of included dates",
          "return": {
            "type": "",
            "description": "An array of date field arrays"
          }
        },
        "_toDate": {
          "guessedname": "_toDate",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "dateFieldArray",
              "type": "Number[]",
              "description": " The date field array to convert to a JavaScript Date."
            }
          ],
          "deprecated": "Made public, toDate",
          "description": "Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.",
          "return": {
            "type": "Date",
            "description": "JavaScript Date object representing the date field array"
          }
        },
        "renderFooter": {
          "guessedname": "renderFooter",
          "guessedtype": "function",
          "description": "Renders the calendar footer. In the default implementation, there is\nno footer.",
          "params": [
            {
              "name": "html",
              "type": "Array",
              "description": " The current working HTML array"
            }
          ],
          "return": {
            "type": "Array",
            "description": "The current working HTML array"
          }
        },
        "configOptions": {
          "guessedname": "configOptions",
          "guessedtype": "function",
          "description": "The default handler for all configuration options properties"
        },
        "onClear": {
          "guessedname": "onClear",
          "guessedtype": "function",
          "description": "Event executed when the calendar widget is completely cleared to the current month with no selections.",
          "deprecated": "Event handlers for this event should be susbcribed to clearEvent."
        },
        "onSelect": {
          "guessedname": "onSelect",
          "guessedtype": "function",
          "description": "Event executed when a date is selected in the calendar widget.",
          "params": [
            {
              "name": "selected",
              "type": "Array",
              "description": " An array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]"
            }
          ],
          "deprecated": "Event handlers for this event should be susbcribed to selectEvent."
        },
        "select": {
          "guessedname": "select",
          "guessedtype": "function",
          "description": "Selects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once selection has completed, render must be \ncalled for the changes to be reflected visually.\nAny dates which are OOB (out of bounds, not selectable) will not be selected and the array of \nselected dates passed to the selectEvent will not contain OOB dates.\nIf all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired.",
          "params": [
            {
              "name": "date",
              "type": "String/Date/Date[]",
              "description": " The date string of dates to select in the current calendar. Valid formats are\nindividual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).\nMultiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."
            }
          ],
          "return": {
            "type": "Date[]",
            "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."
          }
        },
        "renderBody": {
          "guessedname": "renderBody",
          "guessedtype": "function",
          "description": "Renders the calendar body.",
          "params": [
            {
              "name": "workingDate",
              "type": "Date",
              "description": " The current working Date being used for the render process"
            },
            {
              "name": "html",
              "type": "Array",
              "description": " The current working HTML array"
            }
          ],
          "return": {
            "type": "Array",
            "description": "The current working HTML array"
          }
        },
        "isDateOOM": {
          "guessedname": "isDateOOM",
          "guessedtype": "function",
          "description": "Determines whether a given date is OOM (out of month).",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript Date object for which to check the OOM status"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true if the date is OOM"
          }
        },
        "configSelected": {
          "guessedname": "configSelected",
          "guessedtype": "function",
          "description": "The default handler for the \"selected\" property"
        },
        "configTitle": {
          "guessedname": "configTitle",
          "guessedtype": "function",
          "description": "Default handler for the \"title\" property"
        },
        "initStyles": {
          "guessedname": "initStyles",
          "guessedtype": "function",
          "description": "Defines the style constants for the Calendar"
        },
        "removeCloseButton": {
          "guessedname": "removeCloseButton",
          "guessedtype": "function",
          "description": "Removes the close button HTML element from the DOM"
        },
        "configNavigator": {
          "guessedname": "configNavigator",
          "guessedtype": "function",
          "description": "The default handler for the \"navigator\" property"
        },
        "addWeekdayRenderer": {
          "guessedname": "addWeekdayRenderer",
          "guessedtype": "function",
          "description": "Adds a weekday to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the weekday passed to this method.",
          "params": [
            {
              "name": "weekday",
              "type": "Number",
              "description": "  The weekday (Sunday = 1, Monday = 2 ... Saturday = 7) to associate with this renderer"
            },
            {
              "name": "fnRender",
              "type": "Function",
              "description": " The function executed to render cells that match the render rules for this renderer."
            }
          ]
        },
        "createCloseButton": {
          "guessedname": "createCloseButton",
          "guessedtype": "function",
          "description": "Creates the close button HTML element and adds it to Calendar container DIV",
          "return": {
            "type": "",
            "description": "The close HTML element created"
          }
        },
        "_parsePageDate": {
          "guessedname": "_parsePageDate",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "date",
              "type": "Date|String",
              "description": " Pagedate value which needs to be parsed"
            }
          ],
          "description": "Parses a pagedate configuration property value. The value can either be specified as a string of form \"mm/yyyy\" or a Date object \nand is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today's date are used to create the Date object",
          "return": {
            "type": "Date",
            "description": "The Date object representing the pagedate"
          }
        },
        "_indexOfSelectedFieldArray": {
          "guessedname": "_indexOfSelectedFieldArray",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "find",
              "type": "Number[]",
              "description": " The date field array to search for"
            }
          ],
          "description": "Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates.",
          "return": {
            "type": "Number",
            "description": "The index of the date field array within the collection of selected dates.\n-1 will be returned if the date is not found."
          }
        },
        "createTitleBar": {
          "guessedname": "createTitleBar",
          "guessedtype": "function",
          "description": "Creates the title bar element and adds it to Calendar container DIV",
          "params": [
            {
              "name": "strTitle",
              "type": "String",
              "description": " The title to display in the title bar"
            }
          ],
          "return": {
            "type": "",
            "description": "The title bar element"
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the object.",
          "return": {
            "type": "String",
            "description": "A string representation of the Calendar object."
          }
        },
        "getSelectedDates": {
          "guessedname": "getSelectedDates",
          "guessedtype": "function",
          "description": "Gets the list of currently selected dates from the calendar.",
          "return": {
            "type": "Date[]",
            "description": "An array of currently selected JavaScript Date objects."
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Initializes the Calendar widget.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional."
            },
            {
              "name": "container",
              "type": "String | HTMLElement",
              "description": " The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document."
            },
            {
              "name": "config",
              "type": "Object",
              "description": " optional The configuration object containing the initial configuration values for the Calendar."
            }
          ]
        },
        "configLocale": {
          "guessedname": "configLocale",
          "guessedtype": "function",
          "description": "The default handler for all configuration locale properties"
        },
        "_parseArgs": {
          "guessedname": "_parseArgs",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "Function",
              "type": "Array",
              "description": " \"arguments\" array"
            }
          ],
          "description": "Protected helper used to parse Calendar constructor/init arguments.\nAs of 2.4.0, Calendar supports a simpler constructor \nsignature. This method reconciles arguments\nreceived in the pre 2.4.0 and 2.4.0 formats.",
          "return": {
            "type": "Object",
            "description": "Object with id, container, config properties containing\nthe reconciled argument values."
          }
        }
      },
      "name": "YAHOO.widget.Calendar",
      "module": "calendar",
      "namespace": "YAHOO.widget",
      "events": {
        "resetEvent": {
          "guessedname": "resetEvent",
          "guessedtype": "property",
          "description": "Fired when the Calendar is reset"
        },
        "beforeDestroyEvent": {
          "guessedname": "beforeDestroyEvent",
          "guessedtype": "property",
          "description": "Fired just before the Calendar is to be destroyed"
        },
        "beforeSelectEvent": {
          "guessedname": "beforeSelectEvent",
          "guessedtype": "property",
          "description": "Fired before a date selection is made"
        },
        "showNavEvent": {
          "guessedname": "showNavEvent",
          "guessedtype": "property",
          "description": "Fired after the CalendarNavigator is shown"
        },
        "hideEvent": {
          "guessedname": "hideEvent",
          "guessedtype": "property",
          "description": "Fired after the Calendar is hidden"
        },
        "beforeRenderNavEvent": {
          "guessedname": "beforeRenderNavEvent",
          "guessedtype": "property",
          "description": "Fired just before the CalendarNavigator is to be rendered"
        },
        "destroyEvent": {
          "guessedname": "destroyEvent",
          "guessedtype": "property",
          "description": "Fired after the Calendar is destroyed. This event should be used\nfor notification only. When this event is fired, important Calendar instance\nproperties, dom references and event listeners have already been \nremoved/dereferenced, and hence the Calendar instance is not in a usable \nstate."
        },
        "renderNavEvent": {
          "guessedname": "renderNavEvent",
          "guessedtype": "property",
          "description": "Fired after the CalendarNavigator is rendered"
        },
        "beforeHideNavEvent": {
          "guessedname": "beforeHideNavEvent",
          "guessedtype": "property",
          "description": "Fired just before the CalendarNavigator is to be hidden"
        },
        "beforeHideEvent": {
          "guessedname": "beforeHideEvent",
          "guessedtype": "property",
          "description": "Fired just before the Calendar is to be hidden"
        },
        "clearEvent": {
          "guessedname": "clearEvent",
          "guessedtype": "property",
          "description": "Fired when the Calendar is cleared"
        },
        "renderEvent": {
          "guessedname": "renderEvent",
          "guessedtype": "property",
          "description": "Fired when the Calendar is rendered"
        },
        "showEvent": {
          "guessedname": "showEvent",
          "guessedtype": "property",
          "description": "Fired after the Calendar is shown"
        },
        "changePageEvent": {
          "guessedname": "changePageEvent",
          "guessedtype": "property",
          "description": "Fired when the Calendar page is changed",
          "params": [
            {
              "name": "prevDate",
              "type": "Date",
              "description": " The date before the page was changed"
            },
            {
              "name": "newDate",
              "type": "Date",
              "description": " The date after the page was changed"
            }
          ]
        },
        "hideNavEvent": {
          "guessedname": "hideNavEvent",
          "guessedtype": "property",
          "description": "Fired after the CalendarNavigator is hidden"
        },
        "deselectEvent": {
          "guessedname": "deselectEvent",
          "guessedtype": "property",
          "description": "Fired when a date or set of dates is deselected",
          "params": [
            {
              "name": "Array",
              "type": "Array",
              "description": " of Date field arrays in the format [YYYY, MM, DD]."
            }
          ]
        },
        "beforeRenderEvent": {
          "guessedname": "beforeRenderEvent",
          "guessedtype": "property",
          "description": "Fired before the Calendar is rendered"
        },
        "beforeShowNavEvent": {
          "guessedname": "beforeShowNavEvent",
          "guessedtype": "property",
          "description": "Fired just before the CalendarNavigator is to be shown"
        },
        "selectEvent": {
          "guessedname": "selectEvent",
          "guessedtype": "property",
          "description": "Fired when a date selection is made",
          "params": [
            {
              "name": "Array",
              "type": "Array",
              "description": " of Date field arrays in the format [YYYY, MM, DD]."
            }
          ]
        },
        "beforeShowEvent": {
          "guessedname": "beforeShowEvent",
          "guessedtype": "property",
          "description": "Fired just before the Calendar is to be shown"
        },
        "beforeDeselectEvent": {
          "guessedname": "beforeDeselectEvent",
          "guessedtype": "property",
          "description": "Fired before a date or set of dates is deselected"
        }
      },
      "constructors": [
        {
          "description": "Calendar is the base class for the Calendar widget. In its most basic\nimplementation, it has the ability to render a calendar widget on the page\nthat can be manipulated to select a single date, move back and forth between\nmonths and years.\n<p>To construct the placeholder for the calendar widget, the code is as\nfollows:\n<xmp>\n<div id=\"calContainer\"></div>\n</xmp>\n</p>\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>\nThe Calendar can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.Calendar(\"calContainer\", configOptions);\n</xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.Calendar(containerDiv, configOptions);\n</xmp>\n</p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the Calendar's ID will be set to \"calContainer_t\".\n</p>",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional."
            },
            {
              "name": "container",
              "type": "String | HTMLElement",
              "description": " The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document."
            },
            {
              "name": "config",
              "type": "Object",
              "description": " optional The configuration object containing the initial configuration values for the Calendar."
            }
          ]
        }
      ],
      "description": "Calendar is the base class for the Calendar widget. In its most basic\nimplementation, it has the ability to render a calendar widget on the page\nthat can be manipulated to select a single date, move back and forth between\nmonths and years.\n<p>To construct the placeholder for the calendar widget, the code is as\nfollows:\n<xmp>\n<div id=\"calContainer\"></div>\n</xmp>\n</p>\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>\nThe Calendar can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.Calendar(\"calContainer\", configOptions);\n</xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.Calendar(containerDiv, configOptions);\n</xmp>\n</p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the Calendar's ID will be set to \"calContainer_t\".\n</p>",
      "file": "Calendar.js",
      "configs": {
        "START_WEEKDAY": {
          "guessedname": "value",
          "default": "0",
          "type": "number",
          "guessedtype": "property",
          "description": "The weekday the week begins on. Default is 0 (Sunday = 0, Monday = 1 ... Saturday = 6)."
        },
        "maxdate": {
          "guessedname": "value",
          "default": "null",
          "type": "String | Date",
          "guessedtype": "property",
          "description": "The maximum selectable date in the current Calendar (mm/dd/yyyy)"
        },
        "MDY_DAY_POSITION": {
          "guessedname": "value",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the day in a month/day/year date string"
        },
        "WEEKDAYS_SHORT": {
          "guessedname": "value",
          "default": "[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The short weekday labels for the current locale."
        },
        "today": {
          "guessedname": "value",
          "default": "The client side date (new Date()) when the Calendar is instantiated.",
          "type": "Date",
          "guessedtype": "property",
          "description": "The date to use to represent \"Today\"."
        },
        "title": {
          "guessedname": "value",
          "default": "\"\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The title to display above the Calendar's month header"
        },
        "SHOW_WEEK_HEADER": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should show week row headers. False by default."
        },
        "DATE_RANGE_DELIMITER": {
          "guessedname": "value",
          "default": "\"-\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The value used to delimit date ranges in a date string passed to various Calendar functions."
        },
        "WEEKDAYS_MEDIUM": {
          "guessedname": "value",
          "default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The medium weekday labels for the current locale."
        },
        "close": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not a close button should be displayed for this Calendar"
        },
        "MY_YEAR_POSITION": {
          "guessedname": "value",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the year in a month/year date string"
        },
        "HIDE_BLANK_WEEKS": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should suppress weeks that are not a part of the current month. False by default."
        },
        "MY_MONTH_POSITION": {
          "guessedname": "value",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the month in a month/year date string"
        },
        "iframe": {
          "guessedname": "value",
          "default": "true for IE6 and below, false for all other browsers",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.\nThis property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be \nenabled if required."
        },
        "LOCALE_MONTHS": {
          "guessedname": "value",
          "default": "\"long\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\"."
        },
        "DATE_DELIMITER": {
          "guessedname": "value",
          "default": "\",\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The value used to delimit individual dates in a date string passed to various Calendar functions."
        },
        "mindate": {
          "guessedname": "value",
          "default": "null",
          "type": "String | Date",
          "guessedtype": "property",
          "description": "The minimum selectable date in the current Calendar (mm/dd/yyyy)"
        },
        "MULTI_SELECT": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should allow multiple selections. False by default."
        },
        "MY_LABEL_MONTH_SUFFIX": {
          "guessedname": "value",
          "default": "\" \"",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix used after the month when rendering the Calendar header"
        },
        "MDY_MONTH_POSITION": {
          "guessedname": "value",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the month in a month/day/year date string"
        },
        "selected": {
          "guessedname": "value",
          "default": "[]",
          "type": "String",
          "guessedtype": "property",
          "description": "The date or range of dates representing the current Calendar selection"
        },
        "strings": {
          "default": "An object with the properties shown below:\n<dl>\n<dt>previousMonth</dt><dd><em>String</em> : The string to use for the \"Previous Month\" navigation UI. Defaults to \"Previous Month\".</dd>\n<dt>nextMonth</dt><dd><em>String</em> : The string to use for the \"Next Month\" navigation UI. Defaults to \"Next Month\".</dd>\n<dt>close</dt><dd><em>String</em> : The string to use for the close button label. Defaults to \"Close\".</dd>\n</dl>",
          "type": "{Object}",
          "description": "The map of UI strings which the Calendar UI uses."
        },
        "SHOW_WEEK_FOOTER": {
          "guessedname": "value",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should show week row footers. False by default."
        },
        "SHOW_WEEKDAYS": {
          "guessedname": "value",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "True if the Calendar should show weekday labels. True by default."
        },
        "MY_LABEL_YEAR_POSITION": {
          "guessedname": "value",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the year in the month year label string used as the Calendar header"
        },
        "NAV_ARROW_LEFT": {
          "guessedname": "value",
          "default": "null",
          "type": "String",
          "guessedtype": "property",
          "deprecated": "You can customize the image by overriding the default CSS class for the left arrow - \"calnavleft\"",
          "description": "The image that should be used for the left navigation arrow."
        },
        "MDY_YEAR_POSITION": {
          "guessedname": "value",
          "default": "3",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the year in a month/day/year date string"
        },
        "LOCALE_WEEKDAYS": {
          "guessedname": "value",
          "default": "\"short\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\"."
        },
        "MONTHS_SHORT": {
          "guessedname": "value",
          "default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The short month labels for the current locale."
        },
        "WEEKDAYS_1CHAR": {
          "guessedname": "value",
          "default": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The 1-character weekday labels for the current locale."
        },
        "MY_LABEL_MONTH_POSITION": {
          "guessedname": "value",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the month in the month year label string used as the Calendar header"
        },
        "MONTHS_LONG": {
          "guessedname": "value",
          "default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The long month labels for the current locale."
        },
        "DATE_FIELD_DELIMITER": {
          "guessedname": "value",
          "default": "\"/\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The value used to delimit date fields in a date string passed to various Calendar functions."
        },
        "MD_MONTH_POSITION": {
          "guessedname": "value",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the month in a month/day date string"
        },
        "MD_DAY_POSITION": {
          "guessedname": "value",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "The position of the day in a month/year date string"
        },
        "pagedate": {
          "guessedname": "value",
          "default": "Today's date",
          "type": "String | Date",
          "guessedtype": "property",
          "description": "The month/year representing the current visible Calendar date (mm/yyyy)"
        },
        "WEEKDAYS_LONG": {
          "guessedname": "value",
          "default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "The long weekday labels for the current locale."
        },
        "NAV_ARROW_RIGHT": {
          "guessedname": "value",
          "default": "null",
          "type": "String",
          "guessedtype": "property",
          "deprecated": "You can customize the image by overriding the default CSS class for the right arrow - \"calnavright\"",
          "description": "The image that should be used for the right navigation arrow."
        },
        "navigator": {
          "guessedname": "value",
          "default": "null",
          "type": "{Object|Boolean}",
          "guessedtype": "property",
          "description": "Configuration for the Month/Year CalendarNavigator UI which allows the user to jump directly to a \nspecific Month/Year without having to scroll sequentially through months.\n<p>\nSetting this property to null (default value) or false, will disable the CalendarNavigator UI.\n</p>\n<p>\nSetting this property to true will enable the CalendarNavigatior UI with the default CalendarNavigator configuration values.\n</p>\n<p>\nThis property can also be set to an object literal containing configuration properties for the CalendarNavigator UI.\nThe configuration object expects the the following case-sensitive properties, with the \"strings\" property being a nested object.\nAny properties which are not provided will use the default values (defined in the CalendarNavigator class).\n</p>\n<dl>\n<dt>strings</dt>\n<dd><em>Object</em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI\n<dl>\n<dt>month</dt><dd><em>String</em> : The string to use for the month label. Defaults to \"Month\".</dd>\n<dt>year</dt><dd><em>String</em> : The string to use for the year label. Defaults to \"Year\".</dd>\n<dt>submit</dt><dd><em>String</em> : The string to use for the submit button label. Defaults to \"Okay\".</dd>\n<dt>cancel</dt><dd><em>String</em> : The string to use for the cancel button label. Defaults to \"Cancel\".</dd>\n<dt>invalidYear</dt><dd><em>String</em> : The string to use for invalid year values. Defaults to \"Year needs to be a number\".</dd>\n</dl>\n</dd>\n<dt>monthFormat</dt><dd><em>String</em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG</dd>\n<dt>initialFocus</dt><dd><em>String</em> : Either \"year\" or \"month\" specifying which input control should get initial focus. Defaults to \"year\"</dd>\n</dl>\n<p>E.g.</p>\n<pre>\nvar navConfig = {\nstrings: {\nmonth:\"Calendar Month\",\nyear:\"Calendar Year\",\nsubmit: \"Submit\",\ncancel: \"Cancel\",\ninvalidYear: \"Please enter a valid year\"\n},\nmonthFormat: YAHOO.widget.Calendar.SHORT,\ninitialFocus: \"month\"\n}\n</pre>"
        },
        "YEAR_OFFSET": {
          "guessedname": "value",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "The positive or negative year offset from the Gregorian calendar year (assuming a January 1st rollover) to \nbe used when displaying and parsing dates. NOTE: All JS Date objects returned by methods, or expected as input by\nmethods will always represent the Gregorian year, in order to maintain date/month/week values."
        },
        "MY_LABEL_YEAR_SUFFIX": {
          "guessedname": "value",
          "default": "\"\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The suffix used after the year when rendering the Calendar header"
        }
      },
      "properties": {
        "Style.CSS_CELL_OOM": {
          "guessedname": "CSS_CELL_OOM",
          "guessedtype": "property"
        },
        "Locale": {
          "guessedname": "Locale",
          "type": "Object",
          "guessedtype": "property",
          "description": "The local object which contains the Calendar's locale settings"
        },
        "YAHOO.widget.Calendar.ONE_CHAR": {
          "final": "",
          "guessedname": "ONE_CHAR",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to represent single character date field string formats (e.g. M, T, W)"
        },
        "YAHOO.widget.Calendar.RANGE": {
          "final": "",
          "guessedname": "RANGE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)"
        },
        "YAHOO.widget.Calendar.SHORT": {
          "final": "",
          "guessedname": "SHORT",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to represent short date field string formats (e.g. Tu or Feb)"
        },
        "cfg": {
          "guessedname": "cfg",
          "type": "YAHOO.util.Config",
          "guessedtype": "property",
          "description": "The Config object used to hold the configuration variables for the Calendar"
        },
        "oDomContainer": {
          "guessedname": "oDomContainer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The DOM element reference that points to this calendar's container element. The calendar will be inserted into this element when the shell is rendered."
        },
        "Style.CSS_CELL_SELECTED": {
          "guessedname": "CSS_CELL_SELECTED",
          "guessedtype": "property"
        },
        "Style.CSS_CELL_SELECTABLE": {
          "guessedname": "CSS_CELL_SELECTABLE",
          "guessedtype": "property"
        },
        "YAHOO.widget.Calendar.DATE": {
          "final": "",
          "guessedname": "DATE",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Type constant used for renderers to represent an individual date (M/D/Y)"
        },
        "Style.CSS_CELL": {
          "guessedname": "CSS_CELL",
          "guessedtype": "property"
        },
        "Style.CSS_WEEKDAY_CELL": {
          "guessedname": "CSS_WEEKDAY_CELL",
          "guessedtype": "property"
        },
        "Style.CSS_CELL_RIGHT": {
          "guessedname": "CSS_CELL_RIGHT",
          "guessedtype": "property"
        },
        "cells": {
          "guessedname": "cells",
          "type": "HTMLTableCellElement[]",
          "guessedtype": "property",
          "description": "The collection of calendar table cells"
        },
        "YAHOO.widget.Calendar.LONG": {
          "final": "",
          "guessedname": "LONG",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to represent long date field string formats (e.g. Monday or February)"
        },
        "YAHOO.widget.Calendar.DISPLAY_DAYS": {
          "final": "",
          "guessedname": "DISPLAY_DAYS",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Constant that represents the total number of date cells that are displayed in a given month"
        },
        "YAHOO.widget.Calendar.DEFAULT_CONFIG": {
          "guessedname": "DEFAULT_CONFIG",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "The set of default Config property keys and values for the Calendar.\n<p>\nNOTE: This property is made public in order to allow users to change \nthe default values of configuration properties. Users should not \nmodify the key string, unless they are overriding the Calendar implementation\n</p>\n<p>\nThe property is an object with key/value pairs, the key being the \nuppercase configuration property name and the value being an object \nliteral with a key string property, and a value property, specifying the \ndefault value of the property. To override a default value, you can set\nthe value property, for example, <code>YAHOO.widget.Calendar.DEFAULT_CONFIG.MULTI_SELECT.value = true;</code>"
        },
        "YAHOO.widget.Calendar._EVENT_TYPES": {
          "final": "",
          "guessedname": "_EVENT_TYPES",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "The set of Custom Event types supported by the Calendar"
        },
        "domEventMap": {
          "guessedname": "domEventMap",
          "type": "Object",
          "guessedtype": "property",
          "description": "A map of DOM event handlers to attach to cells associated with specific CSS class names"
        },
        "Style.CSS_CELL_LEFT": {
          "guessedname": "CSS_CELL_LEFT",
          "guessedtype": "property"
        },
        "YAHOO.widget.Calendar._DEFAULT_CONFIG": {
          "final": "",
          "guessedname": "_DEFAULT_CONFIG",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "deprecated": "Made public. See the public DEFAULT_CONFIG property for details",
          "description": "The set of default Config property keys and values for the Calendar"
        },
        "Style.CSS_NAV": {
          "guessedname": "CSS_NAV",
          "guessedtype": "property"
        },
        "Style.CSS_BODY": {
          "guessedname": "CSS_BODY",
          "guessedtype": "property"
        },
        "Style.CSS_CELL_OOB": {
          "guessedname": "CSS_CELL_OOB",
          "guessedtype": "property"
        },
        "YAHOO.widget.Calendar.IMG_ROOT": {
          "guessedname": "IMG_ROOT",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "deprecated": "You can now customize images by overriding the calclose, calnavleft and calnavright default CSS classes for the close icon, left arrow and right arrow respectively",
          "description": "The path to be used for images loaded for the Calendar"
        },
        "Style.CSS_SINGLE": {
          "guessedname": "CSS_SINGLE",
          "guessedtype": "property"
        },
        "Style.CSS_HEADER": {
          "guessedname": "CSS_HEADER",
          "guessedtype": "property"
        },
        "Style.CSS_CELL_TOP": {
          "guessedname": "CSS_CELL_TOP",
          "guessedtype": "property"
        },
        "oNavigator": {
          "guessedname": "oNavigator",
          "type": "CalendarNavigator",
          "guessedtype": "property",
          "description": "A reference to the CalendarNavigator instance created for this Calendar.\nWill be null if the \"navigator\" configuration property has not been set"
        },
        "parent": {
          "guessedname": "parent",
          "type": "CalendarGroup",
          "guessedtype": "property",
          "description": "The parent CalendarGroup, only to be set explicitly by the parent group"
        },
        "Style.CSS_WEEKDAY_ROW": {
          "guessedname": "CSS_WEEKDAY_ROW",
          "guessedtype": "property"
        },
        "_renderStack": {
          "private": "",
          "guessedname": "_renderStack",
          "type": "Array",
          "guessedtype": "property",
          "description": "A copy of the initial render functions created before rendering."
        },
        "Style.CSS_CELL_HIGHLIGHT1": {
          "guessedname": "CSS_CELL_HIGHLIGHT1",
          "guessedtype": "property"
        },
        "Style.CSS_WITH_TITLE": {
          "guessedname": "CSS_WITH_TITLE",
          "guessedtype": "property"
        },
        "Style.CSS_CLOSE": {
          "guessedname": "CSS_CLOSE",
          "guessedtype": "property"
        },
        "Style.CSS_FIXED_SIZE": {
          "guessedname": "CSS_FIXED_SIZE",
          "guessedtype": "property"
        },
        "Style.CSS_CALENDAR": {
          "guessedname": "CSS_CALENDAR",
          "guessedtype": "property"
        },
        "cellDates": {
          "guessedname": "cellDates",
          "type": "Array[](Number[])",
          "guessedtype": "property",
          "description": "The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D]."
        },
        "Style.CSS_CELL_HIGHLIGHT2": {
          "guessedname": "CSS_CELL_HIGHLIGHT2",
          "guessedtype": "property"
        },
        "Style.CSS_ROW_HEADER": {
          "guessedname": "CSS_ROW_HEADER",
          "guessedtype": "property"
        },
        "Options": {
          "guessedname": "Options",
          "type": "Object",
          "guessedtype": "property",
          "description": "The local object which contains the Calendar's options"
        },
        "Style.CSS_CELL_BOTTOM": {
          "guessedname": "CSS_CELL_BOTTOM",
          "guessedtype": "property"
        },
        "containerId": {
          "guessedname": "containerId",
          "type": "String",
          "guessedtype": "property",
          "description": "The unique id associated with the Calendar's container"
        },
        "YAHOO.widget.Calendar.MONTH": {
          "final": "",
          "guessedname": "MONTH",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Type constant used for renderers to represent a month across any year"
        },
        "Style.CSS_CELL_HIGHLIGHT3": {
          "guessedname": "CSS_CELL_HIGHLIGHT3",
          "guessedtype": "property"
        },
        "YAHOO.widget.Calendar.STOP_RENDER": {
          "final": "",
          "guessedname": "STOP_RENDER",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used for halting the execution of the remainder of the render stack"
        },
        "YAHOO.widget.Calendar.WEEKDAY": {
          "final": "",
          "guessedname": "WEEKDAY",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Type constant used for renderers to represent a weekday"
        },
        "Style.CSS_CELL_HIGHLIGHT4": {
          "guessedname": "CSS_CELL_HIGHLIGHT4",
          "guessedtype": "property"
        },
        "Style.CSS_CELL_HOVER": {
          "guessedname": "CSS_CELL_HOVER",
          "guessedtype": "property"
        },
        "Style.CSS_CONTAINER": {
          "guessedname": "CSS_CONTAINER",
          "guessedtype": "property"
        },
        "Style.CSS_ROW_FOOTER": {
          "guessedname": "CSS_ROW_FOOTER",
          "guessedtype": "property"
        },
        "Style.CSS_CELL_SELECTOR": {
          "guessedname": "CSS_CELL_SELECTOR",
          "guessedtype": "property"
        },
        "_selectedDates": {
          "private": "",
          "guessedname": "_selectedDates",
          "type": "Array",
          "guessedtype": "property",
          "description": "The private list of initially selected dates."
        },
        "YAHOO.widget.Calendar.MEDIUM": {
          "final": "",
          "guessedname": "MEDIUM",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant used to represent medium date field string formats (e.g. Mon)"
        },
        "Style.CSS_FOOTER": {
          "guessedname": "CSS_FOOTER",
          "guessedtype": "property"
        },
        "Style.CSS_NAV_LEFT": {
          "guessedname": "CSS_NAV_LEFT",
          "guessedtype": "property"
        },
        "index": {
          "guessedname": "index",
          "type": "Number",
          "guessedtype": "property",
          "description": "The index of this item in the parent group"
        },
        "Style.CSS_LINK_CLOSE": {
          "guessedname": "CSS_LINK_CLOSE",
          "guessedtype": "property"
        },
        "Style.CSS_NAV_RIGHT": {
          "guessedname": "CSS_NAV_RIGHT",
          "guessedtype": "property"
        },
        "Config": {
          "guessedname": "Config",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "deprecated": "Configuration properties should be set by calling Calendar.cfg.setProperty.",
          "description": "The configuration object used to set up the calendars various locale and style options."
        },
        "today": {
          "guessedname": "today",
          "type": "Date",
          "guessedtype": "property",
          "description": "A Date object representing today's date.",
          "deprecated": "Use the \"today\" configuration property"
        },
        "YAHOO.widget.Calendar._STYLES": {
          "final": "",
          "guessedname": "_STYLES",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "deprecated": "Made public. See the public STYLES property for details",
          "description": "The set of default style constants for the Calendar"
        },
        "Style.CSS_HEADER_TEXT": {
          "guessedname": "CSS_HEADER_TEXT",
          "guessedtype": "property"
        },
        "Style.CSS_CELL_TODAY": {
          "guessedname": "CSS_CELL_TODAY",
          "guessedtype": "property"
        },
        "YAHOO.widget.Calendar.MONTH_DAY": {
          "final": "",
          "guessedname": "MONTH_DAY",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Type constant used for renderers to represent an individual date across any year (M/D)"
        },
        "YAHOO.widget.Calendar.STYLES": {
          "guessedname": "STYLES",
          "static": "",
          "type": "Object An object with name/value pairs for the class name identifier/value.",
          "guessedtype": "property",
          "description": "The set of default style constants for the Calendar"
        },
        "Style.CSS_CELL_RESTRICTED": {
          "guessedname": "CSS_CELL_RESTRICTED",
          "guessedtype": "property"
        },
        "renderStack": {
          "guessedname": "renderStack",
          "type": "Array[]",
          "guessedtype": "property",
          "description": "The list of render functions, along with required parameters, used to render cells."
        },
        "browser": {
          "guessedname": "browser",
          "type": "String",
          "guessedtype": "function",
          "see": "YAHOO.env.ua",
          "deprecated": "As of 2.3.0, environment information is available in YAHOO.env.ua",
          "description": "Returns a string representing the current browser."
        },
        "id": {
          "guessedname": "id",
          "type": "String",
          "guessedtype": "property",
          "description": "The id that uniquely identifies this Calendar."
        }
      }
    },
    "YAHOO.widget.Layout": {
      "shortname": "Layout",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "getUnitById": {
          "guessedname": "getUnitById",
          "guessedtype": "function",
          "description": "Get the LayoutUnit by it's HTML id",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " The HTML element id of the unit"
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>",
            "description": "The LayoutUnit instance"
          }
        },
        "resize": {
          "guessedname": "resize",
          "guessedtype": "function",
          "description": "Starts the chain of resize routines that will resize all the units.",
          "params": [
            {
              "name": "Boolean/Event",
              "type": "",
              "description": " set If set to false, it will NOT set the size, just perform the calculations (used for collapsing units). This can also have an attribute event passed to it."
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.Layout.html\">YAHOO.widget.Layout</a>",
            "description": "The Layout instance"
          }
        },
        "_setupBodyElements": {
          "guessedname": "_setupBodyElements",
          "private": "",
          "guessedtype": "function",
          "description": "Sets up the main doc element when using the body as the main element."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the Layout.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "_setupElements": {
          "guessedname": "_setupElements",
          "private": "",
          "guessedtype": "function",
          "description": "Sets up the main doc element when not using the body as the main element."
        },
        "getSizes": {
          "guessedname": "getSizes",
          "guessedtype": "function",
          "description": "Get a reference to the internal Layout Unit sizes object used to build the layout wireframe",
          "return": {
            "type": "Object",
            "description": "An object of the layout unit sizes"
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes this layout from the page and destroys all units that it contains. This will destroy all data inside the layout and it's children."
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "This method starts the render process, applying classnames and creating elements",
          "return": {
            "type": "<a href=\"YAHOO.widget.Layout.html\">YAHOO.widget.Layout</a>",
            "description": "The Layout instance"
          }
        },
        "_stamp": {
          "guessedname": "_stamp",
          "private": "",
          "guessedtype": "function",
          "description": "Stamps the root node with a secure classname for ease of use. Also sets the this.browser.standardsMode variable."
        },
        "_setSides": {
          "private": "",
          "guessedname": "_setSides",
          "guessedtype": "function",
          "description": "Used to set the size and position of the left, right, top and bottom units",
          "params": [
            {
              "name": "set",
              "type": "Boolean",
              "description": " If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)"
            }
          ]
        },
        "addUnit": {
          "guessedname": "addUnit",
          "guessedtype": "function",
          "description": "Add a unit to this layout and if the layout is rendered, resize the layout.",
          "params": [
            {
              "name": "cfg",
              "type": "Object",
              "description": " The config for the LayoutUnit that you want to add"
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>",
            "description": "The LayoutUnit instance"
          }
        },
        "_setCenter": {
          "private": "",
          "guessedname": "_setCenter",
          "guessedtype": "function",
          "description": "Used to set the size and position of the center unit",
          "params": [
            {
              "name": "set",
              "type": "Boolean",
              "description": " If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)"
            }
          ]
        },
        "getUnitByPosition": {
          "guessedname": "getUnitByPosition",
          "guessedtype": "function",
          "description": "Get the LayoutUnit by it's position in this layout",
          "params": [
            {
              "name": "pos",
              "type": "String",
              "description": " The position of the unit in this layout"
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>",
            "description": "The LayoutUnit instance"
          }
        },
        "init": {
          "guessedname": "init",
          "private": "",
          "guessedtype": "function",
          "description": "The Layout class' initialization method"
        },
        "_setBodySize": {
          "private": "",
          "guessedname": "_setBodySize",
          "guessedtype": "function",
          "description": "Used to set the body size of the layout, sets the height and width of the parent container",
          "params": [
            {
              "name": "set",
              "type": "Boolean",
              "description": " If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)"
            }
          ]
        },
        "removeUnit": {
          "guessedname": "removeUnit",
          "guessedtype": "function",
          "description": "Remove the unit from this layout and resize the layout.",
          "params": [
            {
              "name": "unit",
              "type": "Object",
              "description": " The LayoutUnit that you want to remove"
            }
          ]
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "private": "",
          "guessedtype": "function",
          "description": "Processes the config"
        },
        "_createUnits": {
          "guessedname": "_createUnits",
          "private": "",
          "guessedtype": "function",
          "description": "Private method to create units from the config that was passed in."
        },
        "getLayoutById": {
          "guessedname": "getLayoutById",
          "static": "",
          "guessedtype": "function",
          "description": "Get's a layout object by the HTML id of the element associated with the Layout object.",
          "return": {
            "type": "Object",
            "description": "The Layout Object"
          }
        }
      },
      "name": "YAHOO.widget.Layout",
      "extends": "YAHOO.util.Element",
      "guessedname": "Layout",
      "module": "layout",
      "namespace": "YAHOO.widget",
      "events": {
        "widthChange": {
          "name": "widthChange",
          "description": "Fires when the value for the configuration attribute 'width' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "startResize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when the Resize Utility for a Unit fires it's startResize Event."
        },
        "minHeightChange": {
          "name": "minHeightChange",
          "description": "Fires when the value for the configuration attribute 'minHeight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeResize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires at the beginning of the resize method. If you return false, the resize is cancelled."
        },
        "heightChange": {
          "name": "heightChange",
          "description": "Fires when the value for the configuration attribute 'height' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeUnitsChange": {
          "name": "beforeUnitsChange",
          "description": "Fires before the value for the configuration attribute 'units' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHeightChange": {
          "name": "beforeHeightChange",
          "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "resize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when this.resize is called"
        },
        "parentChange": {
          "name": "parentChange",
          "description": "Fires when the value for the configuration attribute 'parent' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "render": {
          "guessedname": "Layout",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fired after the render method completes."
        },
        "beforeMinWidthChange": {
          "name": "beforeMinWidthChange",
          "description": "Fires before the value for the configuration attribute 'minWidth' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "minWidthChange": {
          "name": "minWidthChange",
          "description": "Fires when the value for the configuration attribute 'minWidth' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeParentChange": {
          "name": "beforeParentChange",
          "description": "Fires before the value for the configuration attribute 'parent' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "unitsChange": {
          "name": "unitsChange",
          "description": "Fires when the value for the configuration attribute 'units' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeWidthChange": {
          "name": "beforeWidthChange",
          "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMinHeightChange": {
          "name": "beforeMinHeightChange",
          "description": "Fires before the value for the configuration attribute 'minHeight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "<p>Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</p>",
          "params": [
            {
              "name": "el",
              "type": "String/HTMLElement",
              "description": " The element to make contain a layout."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": " Object liternal containing configuration parameters."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "<p>Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</p>",
      "file": "layout.js",
      "configs": {
        "parent": {
          "type": "Object YAHOO.widget.Layout",
          "description": "If this layout is to be used as a child of another Layout instance, this config will bind the resize events together."
        },
        "minHeight": {
          "type": "Number",
          "description": "The minimum height in pixels"
        },
        "units": {
          "type": "Array",
          "description": "An array of config definitions for the LayoutUnits to add to this layout"
        },
        "height": {
          "type": "Number",
          "description": "The height in pixels"
        },
        "minWidth": {
          "type": "Number",
          "description": "The minimum width in pixels"
        },
        "width": {
          "type": "Number",
          "description": "The width in pixels"
        }
      },
      "properties": {
        "_instances": {
          "guessedname": "_instances",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Internal hash table for all layout instances"
        },
        "_isBody": {
          "private": "",
          "guessedname": "_isBody",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to determine if we are using the body as the root element."
        },
        "_zIndex": {
          "private": "",
          "guessedname": "_zIndex",
          "type": "Number",
          "guessedtype": "property",
          "description": "The zIndex to set all LayoutUnits to"
        },
        "_doc": {
          "private": "",
          "guessedname": "_doc",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Reference to the root element"
        },
        "_units": {
          "private": "",
          "guessedname": "_units",
          "type": "Object",
          "guessedtype": "property",
          "description": "An object literal that contains a list of units in the layout"
        },
        "browser": {
          "guessedname": "browser",
          "type": "Object",
          "guessedtype": "function",
          "description": "A modified version of the YAHOO.env.ua object"
        },
        "_sizes": {
          "private": "",
          "guessedname": "_sizes",
          "type": "Object",
          "guessedtype": "property",
          "description": "A collection of the current sizes of all usable LayoutUnits to be used for calculations"
        },
        "_rendered": {
          "private": "",
          "guessedname": "_rendered",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Set to true when the layout is rendered"
        }
      }
    },
    "YAHOO.util.Dom.IEStyle": {
      "shortname": "IEStyle",
      "methods": {
        "get": {
          "guessedname": "get",
          "returns": "{String} The computed style",
          "guessedtype": "function",
          "description": "Method used by DOM to get style information for IE",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "property",
              "type": "String",
              "description": " The property to check"
            }
          ]
        },
        "getOffset": {
          "guessedname": "getOffset",
          "guessedtype": "function",
          "description": "Determine the offset of an element",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "prop",
              "type": "String",
              "description": " The property to check."
            }
          ],
          "return": {
            "type": "String",
            "description": "The offset"
          }
        },
        "getBorderColor": {
          "guessedname": "getBorderColor",
          "guessedtype": "function",
          "description": "Get the bordercolor of an element",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "att",
              "type": "String",
              "description": " The attribute to check"
            }
          ],
          "return": {
            "type": "String",
            "description": "The value"
          }
        },
        "getColor": {
          "guessedname": "getColor",
          "guessedtype": "function",
          "description": "Get the color of an element",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "att",
              "type": "String",
              "description": " The attribute to check"
            }
          ],
          "return": {
            "type": "String",
            "description": "The value"
          }
        },
        "getMargin": {
          "guessedname": "getMargin",
          "guessedtype": "function",
          "description": "Get the margin value from a style property",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "att",
              "type": "String",
              "description": " The attribute to check"
            }
          ],
          "return": {
            "type": "String",
            "description": "The margin value"
          }
        },
        "getBorderWidth": {
          "guessedname": "getBorderWidth",
          "guessedtype": "function",
          "description": "Try to determine the width of an elements border",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "property",
              "type": "String",
              "description": " The property to check"
            }
          ],
          "return": {
            "type": "String",
            "description": "The elements border width"
          }
        },
        "getPixel": {
          "guessedname": "getPixel",
          "guessedtype": "function",
          "description": "Get the pixel value from a style property",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "att",
              "type": "String",
              "description": " The attribute to check"
            }
          ],
          "return": {
            "type": "String",
            "description": "The pixel value"
          }
        },
        "getVisibility": {
          "guessedname": "getVisibility",
          "guessedtype": "function",
          "description": "Get the visibility of an element",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "att",
              "type": "String",
              "description": " The attribute to check"
            }
          ],
          "return": {
            "type": "String",
            "description": "The value"
          }
        }
      },
      "name": "YAHOO.util.Dom.IEStyle",
      "guessedname": "Y",
      "module": "dom",
      "namespace": "YAHOO.util.Dom",
      "guessedtype": "property",
      "description": "Internal methods used to add style management functionality to DOM.",
      "file": "IEStyle.js"
    },
    "YAHOO.widget.SliderThumb": {
      "shortname": "SliderThumb",
      "superclass": "YAHOO.util.DD",
      "methods": {
        "clearTicks": {
          "guessedname": "clearTicks",
          "guessedtype": "function",
          "description": "Clear's the slider's ticks"
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Thumb toString",
          "return": {
            "type": "string",
            "description": "string representation of the instance"
          }
        },
        "initSlider": {
          "guessedname": "initSlider",
          "guessedtype": "function",
          "description": "Set up the slider, must be called in the constructor of all subclasses",
          "params": [
            {
              "name": "iLeft",
              "type": "int",
              "description": " the number of pixels the element can move left"
            },
            {
              "name": "iRight",
              "type": "int",
              "description": " the number of pixels the element can move right"
            },
            {
              "name": "iUp",
              "type": "int",
              "description": " the number of pixels the element can move up"
            },
            {
              "name": "iDown",
              "type": "int",
              "description": " the number of pixels the element can move down"
            },
            {
              "name": "iTickSize",
              "type": "int",
              "description": " the width of the tick interval."
            }
          ]
        },
        "getYValue": {
          "guessedname": "getYValue",
          "guessedtype": "function",
          "description": "Gets the current Y offset from the element's start position in\npixels.",
          "return": {
            "type": "int",
            "description": "the number of pixels (positive or negative) the\nslider has moved vertically from the start position."
          }
        },
        "getXValue": {
          "guessedname": "getXValue",
          "guessedtype": "function",
          "description": "Gets the current X offset from the element's start position in\npixels.",
          "return": {
            "type": "int",
            "description": "the number of pixels (positive or negative) the\nslider has moved horizontally from the start position."
          }
        },
        "onChange": {
          "guessedname": "onChange",
          "private": "",
          "guessedtype": "function",
          "description": "The onchange event for the handle/thumb is delegated to the YAHOO.widget.Slider\ninstance it belongs to."
        },
        "getOffsetFromParent": {
          "guessedname": "getOffsetFromParent0",
          "type": "[int, int]",
          "guessedtype": "function",
          "description": "Returns the difference between the location of the thumb and its parent.",
          "params": [
            {
              "name": "parentPos",
              "type": "[int, int]",
              "description": " Optionally accepts the position of the parent"
            }
          ]
        },
        "getValue": {
          "guessedname": "getValue",
          "guessedtype": "function",
          "description": "Gets the current offset from the element's start position in\npixels.",
          "return": {
            "type": "int",
            "description": "the number of pixels (positive or negative) the\nslider has moved from the start position."
          }
        }
      },
      "name": "YAHOO.widget.SliderThumb",
      "extends": "YAHOO.util.DD",
      "guessedname": "SliderThumb",
      "module": "slider",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "A drag and drop implementation to be used as the thumb of a slider.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id of the slider html element"
            },
            {
              "name": "sGroup",
              "type": "String",
              "description": " the group of related DragDrop items"
            },
            {
              "name": "iLeft",
              "type": "int",
              "description": " the number of pixels the element can move left"
            },
            {
              "name": "iRight",
              "type": "int",
              "description": " the number of pixels the element can move right"
            },
            {
              "name": "iUp",
              "type": "int",
              "description": " the number of pixels the element can move up"
            },
            {
              "name": "iDown",
              "type": "int",
              "description": " the number of pixels the element can move down"
            },
            {
              "name": "iTickSize",
              "type": "int",
              "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A drag and drop implementation to be used as the thumb of a slider.",
      "file": "SliderThumb.js",
      "properties": {
        "tickSize": {
          "private": "",
          "guessedname": "tickSize",
          "type": "int",
          "guessedtype": "property",
          "description": "The tick size for this slider"
        },
        "_isHoriz": {
          "private": "",
          "guessedname": "_isHoriz",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag used to figure out if this is a horizontal or vertical slider"
        },
        "scroll": {
          "guessedname": "scroll",
          "private": "",
          "guessedtype": "property",
          "description": "Turns off the autoscroll feature in drag and drop"
        },
        "dragOnly": {
          "guessedname": "dragOnly",
          "default": "true",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Override the default setting of dragOnly to true."
        },
        "_prevVal": {
          "private": "",
          "guessedname": "_prevVal",
          "type": "int",
          "guessedtype": "property",
          "description": "Cache the last value so we can check for change"
        },
        "startOffset": {
          "guessedname": "startOffset",
          "type": "[int, int]",
          "guessedtype": "property",
          "description": "The (X and Y) difference between the thumb location and its parent \n(the slider background) when the control is instantiated."
        },
        "parentElId": {
          "guessedname": "parentElId",
          "type": "string",
          "guessedtype": "property",
          "description": "The id of the thumbs parent HTML element (the slider background \nelement)."
        },
        "_graduated": {
          "private": "",
          "guessedname": "_graduated",
          "type": "boolean",
          "guessedtype": "property",
          "description": "The slider is _graduated if there is a tick interval defined"
        },
        "isTarget": {
          "guessedname": "isTarget",
          "private": "",
          "guessedtype": "property",
          "description": "Overrides the isTarget property in YAHOO.util.DragDrop"
        },
        "maintainOffset": {
          "private": "",
          "guessedname": "maintainOffset",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Informs the drag and drop util that the offsets should remain when\nresetting the constraints.  This preserves the slider value when\nthe constraints are reset"
        }
      }
    },
    "YAHOO.util.Get": {
      "shortname": "Get",
      "methods": {
        "script": {
          "guessedname": "script",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "url",
              "type": "string|string[]",
              "description": "  the url or urls to the script(s)"
            },
            {
              "name": "opts",
              "type": "object",
              "description": "  Options: \n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onFailure</dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted successfully</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onTimeout</dt>\n<dd>\ncallback to execute when a timeout occurs.\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>scope</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>autopurge</dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge \nthe script once loaded\n</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n</dd>\n<dt>varName</dt>\n<dd>\nvariable that should be available when a script is finished\nloading.  Used to help Safari 2.x and below with script load \ndetection.  The type of this property should match what was\npassed into the url parameter: if loading a single url, a\nstring can be supplied.  If loading multiple scripts, you\nmust supply an array that contains the variable name for\neach script.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling</dd>\n</dl>\n<dt>charset</dt>\n<dd>Node charset, deprecated, use 'attributes'</dd>\n<dt>attributes</dt>\n<dd>A hash of attributes to apply to dynamic nodes.</dd>\n<dt>timeout</dt>\n<dd>Number of milliseconds to wait before aborting and firing the timeout event</dd>\n<pre>\n// assumes yahoo, dom, and event are already on the page\n&nbsp;&nbsp;YAHOO.util.Get.script(\n&nbsp;&nbsp;[\"http://yui.yahooapis.com/2.7.0/build/dragdrop/dragdrop-min.js\",\n&nbsp;&nbsp;&nbsp;\"http://yui.yahooapis.com/2.7.0/build/animation/animation-min.js\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YAHOO.log(o.data); // foo\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new YAHOO.util.DDProxy(\"dd1\"); // also new o.reference(\"dd1\"); would work\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because YAHOO is the scope\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(o.nodes.length === 2) // true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// o.purge(); // optionally remove the script nodes immediately\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YAHOO.log(\"transaction failed\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",\n&nbsp;&nbsp;&nbsp;&nbsp;timeout: 10000, // 10 second timeout\n&nbsp;&nbsp;&nbsp;&nbsp;scope: YAHOO,\n&nbsp;&nbsp;&nbsp;&nbsp;// win: otherframe // target another window/frame\n&nbsp;&nbsp;&nbsp;&nbsp;autopurge: true // allow the utility to choose when to remove the nodes\n&nbsp;&nbsp;&#125;);\n</pre>"
            }
          ],
          "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.",
          "return": {
            "type": "tId: string",
            "description": "an object containing info about the transaction"
          }
        },
        "_timeout": {
          "private": "",
          "guessedname": "_timeout",
          "guessedtype": "function",
          "description": "Timeout detected",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the request"
            }
          ]
        },
        "css": {
          "guessedname": "css",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "  the url or urls to the css file(s)"
            },
            {
              "name": "opts",
              "type": "",
              "description": " Options: \n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win</dl>\n<dd>the window the link nodes(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>scope</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling</dd>\n<dt>charset</dt>\n<dd>Node charset, deprecated, use 'attributes'</dd>\n<dt>attributes</dt>\n<dd>A hash of attributes to apply to dynamic nodes.</dd>\n</dl>\n<pre>\nYAHOO.util.Get.css(\"http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css\");\n</pre>\n<pre>\nYAHOO.util.Get.css([\"http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css\",\n\"http://yui.yahooapis.com/2.7.0/build/logger/assets/skins/sam/logger.css\"]);\n</pre>"
            }
          ],
          "description": "Fetches and inserts one or more css link nodes into the \nhead of the current document or the document in a specified\nwindow.",
          "return": {
            "type": "tId: string",
            "description": "an object containing info about the transaction"
          }
        },
        "_node": {
          "guessedname": "_node",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type of element"
            },
            {
              "name": "attr",
              "type": "string",
              "description": "  the attributes"
            },
            {
              "name": "win",
              "type": "Window",
              "description": "  optional window to create the element in"
            }
          ],
          "description": "Generates an HTML element, this is not appended to a document",
          "return": {
            "type": "HTMLElement",
            "description": "the generated node"
          }
        },
        "_scriptNode": {
          "guessedname": "_scriptNode",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "  the url for the script file"
            },
            {
              "name": "win",
              "type": "Window",
              "description": "  optional window to create the node in"
            }
          ],
          "description": "Generates a script node",
          "return": {
            "type": "HTMLElement",
            "description": "the generated node"
          }
        },
        "_purge": {
          "guessedname": "_purge",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the nodes for the specified queue"
        },
        "_track": {
          "private": "",
          "guessedname": "_track",
          "guessedtype": "function",
          "description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type of node to track"
            },
            {
              "name": "n",
              "type": "HTMLElement",
              "description": "  the node to track"
            },
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the request"
            },
            {
              "name": "url",
              "type": "string",
              "description": "  the url that is being loaded"
            },
            {
              "name": "win",
              "type": "Window",
              "description": "  the targeted window"
            },
            {
              "name": "qlength",
              "type": "",
              "description": " the number of remaining items in the queue,\nincluding this one"
            },
            {
              "name": "trackfn",
              "type": "Function",
              "description": "  function to execute when finished\nthe default is _next"
            }
          ]
        },
        "_returnData": {
          "guessedname": "_returnData",
          "private": "",
          "guessedtype": "function",
          "description": "Returns the data payload for callback functions"
        },
        "_linkNode": {
          "guessedname": "_linkNode",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "  the url for the css file"
            },
            {
              "name": "win",
              "type": "Window",
              "description": "  optional window to create the node in"
            }
          ],
          "description": "Generates a link node",
          "return": {
            "type": "HTMLElement",
            "description": "the generated node"
          }
        },
        "queue": {
          "private": "",
          "guessedname": "_queue",
          "guessedtype": "function",
          "description": "Saves the state for the request and begins loading\nthe requested urls",
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "  the type of node to insert"
            },
            {
              "name": "url",
              "type": "string",
              "description": "  the url to load"
            },
            {
              "name": "opts",
              "type": "",
              "description": " the hash of options for this request"
            }
          ]
        },
        "_next": {
          "private": "",
          "guessedname": "_next",
          "guessedtype": "function",
          "description": "Loads the next item for a given request",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the request"
            },
            {
              "name": "loaded",
              "type": "string",
              "description": "  the url that was just loaded, if any"
            }
          ]
        },
        "abort": {
          "guessedname": "abort",
          "guessedtype": "function",
          "description": "Abort a transaction",
          "params": [
            {
              "name": "either",
              "type": "string|object",
              "description": " the tId or the object returned from\nscript() or css()"
            }
          ]
        },
        "_finish": {
          "private": "",
          "guessedname": "_finish",
          "guessedtype": "function",
          "description": "The request is complete, so executing the requester's callback",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the id of the request"
            }
          ]
        },
        "_autoPurge": {
          "guessedname": "_autoPurge",
          "private": "",
          "guessedtype": "function",
          "description": "Removes processed queues and corresponding nodes"
        },
        "_finalize": {
          "private": "",
          "guessedname": "_finalize",
          "guessedtype": "function",
          "description": "Called by the the helper for detecting script load in Safari",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the transaction id"
            }
          ]
        }
      },
      "name": "YAHOO.util.Get",
      "guessedname": "Get",
      "module": "get",
      "namespace": "YAHOO.util",
      "guessedtype": "function",
      "description": "Fetches and inserts one or more script or link nodes into the document",
      "file": "Get.js",
      "properties": {
        "TIMEOUT": {
          "guessedname": "TIMEOUT",
          "default": "2000",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The length time to poll for varName when loading a script in\nSafari 2.x before the transaction fails.\nproperty TIMEOUT"
        },
        "qidx": {
          "private": "",
          "guessedname": "qidx",
          "type": "int",
          "guessedtype": "property",
          "description": "queue index used to generate transaction ids"
        },
        "nidx": {
          "private": "",
          "guessedname": "nidx",
          "type": "int",
          "guessedtype": "property",
          "description": "node index used to generate unique node ids"
        },
        "queues": {
          "guessedname": "queues",
          "private": "",
          "guessedtype": "property",
          "description": "hash of queues to manage multiple requests"
        },
        "POLL_FREQ": {
          "guessedname": "POLL_FREQ",
          "default": "10",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The default poll freqency in ms, when needed"
        },
        "PURGE_THRESH": {
          "guessedname": "PURGE_THRESH",
          "default": "20",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The number of request required before an automatic purge.\nproperty PURGE_THRESH"
        },
        "purging": {
          "private": "",
          "guessedname": "purging",
          "type": "boolean",
          "guessedtype": "property",
          "description": "interal property used to prevent multiple simultaneous purge \nprocesses"
        }
      }
    },
    "LogMsg": {
      "shortname": "LogMsg",
      "name": "LogMsg",
      "guessedname": "LogMsg",
      "module": "logger",
      "namespace": "",
      "constructors": [
        {
          "description": "The LogMsg class defines a single log message.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  Object literal of configuration params."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The LogMsg class defines a single log message.",
      "file": "LogMsg.js",
      "properties": {
        "category": {
          "guessedname": "category",
          "type": "String",
          "guessedtype": "property",
          "description": "Log category."
        },
        "msg": {
          "guessedname": "msg",
          "type": "String",
          "guessedtype": "property",
          "description": "Log message."
        },
        "time": {
          "guessedname": "time",
          "type": "Date",
          "guessedtype": "property",
          "description": "Log timestamp."
        },
        "sourceDetail": {
          "guessedname": "sourceDetail",
          "type": "String",
          "guessedtype": "property",
          "description": "Log source detail. The remainder of the string passed in as the source argument, not\nincluding the first word (if any)."
        },
        "source": {
          "guessedname": "source",
          "type": "String",
          "guessedtype": "property",
          "description": "Log source. The first word passed in as the source argument."
        }
      }
    },
    "YAHOO.tool.TestCase.Wait": {
      "shortname": "Wait",
      "name": "YAHOO.tool.TestCase.Wait",
      "guessedname": "Wait",
      "module": "yuitest",
      "namespace": "YAHOO.tool.TestCase",
      "constructors": [
        {
          "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing.",
          "params": [
            {
              "name": "segment",
              "type": "Function",
              "description": " A function to run when the wait is over."
            },
            {
              "name": "delay",
              "type": "int",
              "description": " The number of milliseconds to wait before running the code."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing.",
      "file": "TestCase.js",
      "properties": {
        "delay": {
          "type": "int",
          "description": "The delay before running the segment of code."
        },
        "segment": {
          "type": "Function",
          "description": "The segment of code to run when the wait is over."
        }
      }
    },
    "YAHOO.util.ColorAnim": {
      "shortname": "ColorAnim",
      "superclass": "YAHOO.util.Anim",
      "methods": {
        "parseColor": {
          "guessedname": "parseColor",
          "guessedtype": "function",
          "description": "Attempts to parse the given string and return a 3-tuple.",
          "params": [
            {
              "name": "s",
              "type": "String",
              "description": " The string to parse."
            }
          ],
          "return": {
            "type": "Array",
            "description": "The 3-tuple of rgb values."
          }
        }
      },
      "name": "YAHOO.util.ColorAnim",
      "extends": "YAHOO.util.Anim",
      "guessedname": "ColorAnim",
      "module": "animation",
      "namespace": "YAHOO.util",
      "requires": "YAHOO.util.Anim",
      "constructors": [
        {
          "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);</code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)</p>",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement | String",
              "description": " Reference to the element that will be animated"
            },
            {
              "name": "attributes",
              "type": "Object",
              "description": " The attribute(s) to be animated.\nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.\nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").\nAll attribute names use camelCase."
            },
            {
              "name": "duration",
              "type": "Number",
              "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"
            },
            {
              "name": "method",
              "type": "Function",
              "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);</code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)</p>",
      "file": "ColorAnim.js"
    },
    "YAHOO.util.AttributeProvider": {
      "shortname": "AttributeProvider",
      "methods": {
        "get": {
          "guessedname": "get",
          "guessedtype": "function",
          "description": "Returns the current value of the attribute.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The attribute whose value will be returned."
            }
          ],
          "return": {
            "type": "Any",
            "description": "The current value of the attribute."
          }
        },
        "fireBeforeChangeEvent": {
          "guessedname": "fireBeforeChangeEvent",
          "guessedtype": "function",
          "description": "Fires the attribute's beforeChange event.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The attribute's name."
            },
            {
              "name": "e",
              "type": "Obj",
              "description": " The event object to pass to handlers."
            }
          ]
        },
        "configureAttribute": {
          "guessedname": "configureAttribute",
          "guessedtype": "function",
          "description": "Sets or updates an Attribute instance's properties.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The attribute's name."
            },
            {
              "name": "map",
              "type": "Object",
              "description": " A key-value map of attribute properties"
            },
            {
              "name": "init",
              "type": "Boolean",
              "description": " Whether or not this should become the intial config."
            }
          ],
          "deprecated": "Use setAttributeConfig"
        },
        "set": {
          "guessedname": "set",
          "guessedtype": "function",
          "description": "Sets the value of a config.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The name of the attribute"
            },
            {
              "name": "value",
              "type": "Any",
              "description": " The value to apply to the attribute"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": " Whether or not to suppress change events"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the value was set."
          }
        },
        "setAttributes": {
          "guessedname": "setAttributes",
          "guessedtype": "function",
          "description": "Sets multiple attribute values.",
          "params": [
            {
              "name": "map",
              "type": "Object",
              "description": "  A key-value map of attributes"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": " Whether or not to suppress change events"
            }
          ]
        },
        "register": {
          "guessedname": "register",
          "guessedtype": "function",
          "description": "Adds an Attribute to the AttributeProvider instance.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The attribute's name"
            },
            {
              "name": "map",
              "type": "Object",
              "description": " A key-value map containing the\nattribute's properties."
            }
          ],
          "deprecated": "Use setAttributeConfig"
        },
        "resetValue": {
          "guessedname": "resetValue",
          "guessedtype": "function",
          "description": "Resets the specified attribute's value to its initial value.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The name of the attribute"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": " Whether or not to suppress change events"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the value was set"
          }
        },
        "refresh": {
          "guessedname": "refresh",
          "guessedtype": "function",
          "description": "Sets the attribute's value to its current value.",
          "params": [
            {
              "name": "key",
              "type": "String | Array",
              "description": " The attribute(s) to refresh"
            },
            {
              "name": "silent",
              "type": "Boolean",
              "description": " Whether or not to suppress change events"
            }
          ]
        },
        "getAttributeKeys": {
          "guessedname": "getAttributeKeys",
          "guessedtype": "function",
          "description": "Returns an array of attribute names.",
          "return": {
            "type": "Array",
            "description": "An array of attribute names."
          }
        },
        "resetAttributeConfig": {
          "private": "",
          "guessedname": "resetAttributeConfig",
          "guessedtype": "function",
          "description": "Resets an attribute to its intial configuration.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The attribute's name."
            }
          ]
        },
        "setAttributeConfig": {
          "guessedname": "setAttributeConfig",
          "guessedtype": "function",
          "description": "Sets or updates an Attribute instance's properties.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The attribute's name."
            },
            {
              "name": "map",
              "type": "Object",
              "description": " A key-value map of attribute properties"
            },
            {
              "name": "init",
              "type": "Boolean",
              "description": " Whether or not this should become the intial config."
            }
          ]
        },
        "fireChangeEvent": {
          "guessedname": "fireChangeEvent",
          "guessedtype": "function",
          "description": "Fires the attribute's change event.",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The attribute's name."
            },
            {
              "name": "e",
              "type": "Obj",
              "description": " The event object to pass to the handlers."
            }
          ]
        },
        "getAttributeConfig": {
          "guessedname": "getAttributeConfig",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": " The attribute's name"
            }
          ],
          "description": "Returns the attribute's properties.",
          "return": {
            "type": "object",
            "description": "A key-value map containing all of the\nattribute's properties."
          }
        }
      },
      "name": "YAHOO.util.AttributeProvider",
      "guessedname": "AttributeProvider",
      "module": "element",
      "namespace": "YAHOO.util",
      "guessedtype": "function",
      "description": "Provides and manages YAHOO.util.Attribute instances",
      "file": "AttributeProvider.js",
      "properties": {
        "_configs": {
          "guessedname": "_configs",
          "private": "",
          "type": "{Object}",
          "guessedtype": "property",
          "protected": "",
          "description": "A key-value map of Attribute configurations"
        }
      },
      "uses": [
        "YAHOO.util.EventProvider"
      ]
    },
    "YAHOO.widget.MenuNode": {
      "shortname": "MenuNode",
      "superclass": "YAHOO.widget.TextNode",
      "name": "YAHOO.widget.MenuNode",
      "extends": "YAHOO.widget.TextNode",
      "guessedname": "MenuNode",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "A menu-specific implementation that differs from TextNode in that only \none sibling can be expanded at a time.",
          "params": [
            {
              "name": "oData",
              "type": "object",
              "description": "  a string or object containing the data that will\nbe used to render this node.\nProviding a string is the same as providing an object with a single property named label.\nAll values in the oData will be used to set equally named properties in the node\nas long as the node does have such properties, they are not undefined, private or functions.\nAll attributes are made available in noderef.data, which\ncan be used to store custom attributes.  TreeView.getNode(s)ByProperty\ncan be used to retrieve a node by one of the attributes."
            },
            {
              "name": "oParent",
              "type": "YAHOO.widget.Node",
              "description": "  this node's parent node"
            },
            {
              "name": "expanded",
              "type": "boolean",
              "description": "  the initial expanded/collapsed state (deprecated; use oData.expanded)"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A menu-specific implementation that differs from TextNode in that only \none sibling can be expanded at a time.",
      "file": "MenuNode.js",
      "properties": {
        "_type": {
          "private": "",
          "guessedname": "_type",
          "default": "\"MenuNode\"",
          "guessedtype": "property",
          "description": "The node type"
        }
      }
    },
    "YAHOO.widget.Button": {
      "shortname": "Button",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "_onDocumentMouseUp": {
          "guessedname": "_onDocumentMouseUp",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseup\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "initConfig": {
          "private": "",
          "description": "Initializes the set of configuration attributes that are \nused to instantiate the button.",
          "params": [
            {
              "name": "Object",
              "type": "Object",
              "description": " representing the button's set of \nconfiguration attributes."
            }
          ]
        },
        "_onMenuClick": {
          "private": "",
          "guessedname": "_onMenuClick",
          "guessedtype": "function",
          "description": "\"click\" event handler for the button's menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            }
          ]
        },
        "createHiddenFields": {
          "guessedname": "createHiddenFields",
          "guessedtype": "function",
          "description": "Creates the button's hidden form field and appends it \nto its parent form.",
          "return": {
            "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|Array",
            "description": ""
          }
        },
        "_hideMenu": {
          "guessedname": "_hideMenu",
          "guessedtype": "function",
          "protected": "",
          "description": "Hides the button's menu."
        },
        "_setDisabled": {
          "guessedname": "_setDisabled",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"disabled\" attribute.",
          "params": [
            {
              "name": "p_bDisabled",
              "type": "Boolean",
              "description": " Boolean indicating the value for \nthe button's \"disabled\" attribute."
            }
          ]
        },
        "_isActivationKey": {
          "guessedname": "_isActivationKey",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "p_nKeyCode",
              "type": "Number",
              "description": " Number representing the keycode to \nbe evaluated."
            }
          ],
          "description": "Determines if the specified keycode is one that toggles  \nthe button's \"active\" state.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_setTitle": {
          "guessedname": "_setTitle",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"title\" attribute.",
          "params": [
            {
              "name": "p_nTabIndex",
              "type": "String",
              "description": " Number indicating the value for \nthe button's \"title\" attribute."
            }
          ]
        },
        "_onOption": {
          "guessedname": "_onOption",
          "guessedtype": "function",
          "protected": "",
          "description": "\"option\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_setTarget": {
          "guessedname": "_setTarget",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"target\" attribute.",
          "params": [
            {
              "name": "p_sTarget",
              "type": "String",
              "description": " String indicating the value for the button's \n\"target\" attribute."
            }
          ]
        },
        "setFormElementProperties": {
          "private": "",
          "description": "Gets the value of the attributes from the form element  \nand sets them into the collection of configuration attributes used to \nconfigure the button."
        },
        "_onMouseDown": {
          "guessedname": "_onMouseDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mousedown\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_setTabIndex": {
          "guessedname": "_setTabIndex",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"tabindex\" attribute.",
          "params": [
            {
              "name": "p_nTabIndex",
              "type": "Number",
              "description": " Number indicating the value for the \nbutton's \"tabindex\" attribute."
            }
          ]
        },
        "_onFormReset": {
          "guessedname": "_onFormReset",
          "guessedtype": "function",
          "protected": "",
          "description": "\"reset\" event handler for the button's form.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event \nobject passed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_onDocumentMouseDown": {
          "guessedname": "_onDocumentMouseDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mousedown\" event handler for the document.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the button.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "getMenu": {
          "guessedname": "getMenu",
          "guessedtype": "function",
          "description": "Returns a reference to the button's menu.",
          "return": {
            "type": "<a href=\"YAHOO.widget.Overlay.html\">\nYAHOO.widget.Overlay</a>|<a \nhref=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu</a>",
            "description": ""
          }
        },
        "_onDocumentKeyUp": {
          "guessedname": "_onDocumentKeyUp",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keyup\" event handler for the document.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_onMenuKeyDown": {
          "private": "",
          "guessedname": "_onMenuKeyDown",
          "guessedtype": "function",
          "description": "\"keydown\" event handler for the button's menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            }
          ]
        },
        "_onMouseMove": {
          "guessedname": "_onMouseMove",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mousemove\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Causes the button to receive the focus and fires the \nbutton's \"focus\" event."
        },
        "_onMenuShow": {
          "private": "",
          "guessedname": "_onMenuShow",
          "guessedtype": "function",
          "description": "\"show\" event handler for the button's menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            }
          ]
        },
        "_setMenu": {
          "guessedname": "_setMenu",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"menu\" attribute.",
          "params": [
            {
              "name": "p_oMenu",
              "type": "Object",
              "description": " Object indicating the value for the button's \n\"menu\" attribute."
            }
          ]
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the button's element from its parent element and \nremoves all event handlers."
        },
        "_onMouseUp": {
          "guessedname": "_onMouseUp",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseup\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_onKeyDown": {
          "guessedname": "_onKeyDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keydown\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "setAttributesFromSrcElement": {
          "private": "",
          "description": "Gets the values for all the attributes of the source element \n(either <code>&#60;input&#62;</code> or <code>&#60;a&#62;</code>) that \nmap to Button configuration attributes and sets them into a collection \nthat is passed to the Button constructor.",
          "params": [
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-6043025\">HTMLInputElement</a>|<a href=\"http://www.w3.org/\nTR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-\n48250443\">HTMLAnchorElement</a>",
              "description": " Object reference to the HTML \nelement (either <code>&#60;input&#62;</code> or <code>&#60;span&#62;\n</code>) used to create the button."
            },
            {
              "name": "p_oAttributes",
              "type": "Object",
              "description": " Object reference for the collection of \nconfiguration attributes used to create the button."
            }
          ]
        },
        "_setHref": {
          "guessedname": "_setHref",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"href\" attribute.",
          "params": [
            {
              "name": "p_sHref",
              "type": "String",
              "description": " String indicating the value for the button's \n\"href\" attribute."
            }
          ]
        },
        "getHiddenFields": {
          "guessedname": "getHiddenFields",
          "guessedtype": "function",
          "description": "Returns an <code>&#60;input&#62;</code> element or \narray of form elements used to represent the button when its parent \nform is submitted.",
          "return": {
            "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|Array",
            "description": ""
          }
        },
        "_onClick": {
          "guessedname": "_onClick",
          "guessedtype": "function",
          "protected": "",
          "description": "\"click\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "createButtonElement": {
          "guessedname": "createButtonElement",
          "guessedtype": "function",
          "description": "Creates the button's HTML elements.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String indicating the type of element \nto create."
            }
          ],
          "return": {
            "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>",
            "description": ""
          }
        },
        "_setLabel": {
          "guessedname": "_setLabel",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"label\" attribute.",
          "params": [
            {
              "name": "p_sLabel",
              "type": "String",
              "description": " String indicating the value for the button's \n\"label\" attribute."
            }
          ]
        },
        "_setOnClick": {
          "guessedname": "_setOnClick",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"onclick\" attribute.",
          "params": [
            {
              "name": "p_oObject",
              "type": "Object",
              "description": " Object indicating the value for the button's \n\"onclick\" attribute."
            }
          ]
        },
        "_onFormSubmit": {
          "guessedname": "_onFormSubmit",
          "guessedtype": "function",
          "protected": "",
          "description": "\"submit\" event handler for the button's form.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event \nobject passed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_onDblClick": {
          "guessedname": "_onDblClick",
          "guessedtype": "function",
          "protected": "",
          "description": "\"dblclick\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "getForm": {
          "guessedname": "getForm",
          "guessedtype": "function",
          "description": "Returns a reference to the button's parent form.",
          "return": {
            "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-\n20000929/level-one-html.html#ID-40002357\">HTMLFormElement</a>",
            "description": ""
          }
        },
        "_onBlur": {
          "guessedname": "_onBlur",
          "guessedtype": "function",
          "protected": "",
          "description": "\"blur\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "removeHiddenFields": {
          "guessedname": "removeHiddenFields",
          "guessedtype": "function",
          "description": "Removes the button's hidden form field(s) from its \nparent form."
        },
        "isActive": {
          "guessedname": "isActive",
          "guessedtype": "function",
          "description": "Returns a boolean indicating whether or not the button \nis active.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "blur": {
          "guessedname": "blur",
          "guessedtype": "function",
          "description": "Causes the button to lose focus and fires the button's\n\"blur\" event."
        },
        "_isSplitButtonOptionKey": {
          "guessedname": "_isSplitButtonOptionKey",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ],
          "description": "Determines if the specified keycode is one that toggles  \nthe display of the split button's menu.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_onLabelClick": {
          "guessedname": "_onLabelClick",
          "guessedtype": "function",
          "description": "\"click\" event handler for the Button's\n<code>&#60;label&#62;</code> element.",
          "params": [
            {
              "name": "event",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Button class's initialization method.",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>,\n<code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to \nbe used to create the button."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|<a href=\"http://\nwww.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html\n#ID-34812697\">HTMLButtonElement</a>|<a href=\"http://www.w3.org/TR\n/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-33759296\">\nHTMLElement</a>",
              "description": " Object reference for the \n<code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>, \n<code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to be \nused to create the button."
            },
            {
              "name": "p_oElement",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the button."
            },
            {
              "name": "p_oAttributes",
              "type": "Object",
              "description": " Optional. Object literal specifying a \nset of configuration attributes used to create the button."
            }
          ]
        },
        "YAHOO.widget.Button.addHiddenFieldsToForm": {
          "guessedname": "addHiddenFieldsToForm",
          "guessedtype": "function",
          "description": "Searches the specified form and adds hidden fields for  \ninstances of YAHOO.widget.Button that are of type \"radio,\" \"checkbox,\" \n\"menu,\" and \"split.\"",
          "params": [
            {
              "name": "p_oForm",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-40002357\">HTMLFormElement</a>",
              "description": " Object reference \nfor the form to search."
            }
          ]
        },
        "YAHOO.widget.Button.onFormKeyPress": {
          "guessedname": "onFormKeyPress",
          "guessedtype": "function",
          "description": "\"keypress\" event handler for the button's form.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_onSelectedMenuItemChange": {
          "guessedname": "_onSelectedMenuItemChange",
          "guessedtype": "function",
          "description": "\"selectedMenuItemChange\" event handler for the Button's\n\"selectedMenuItem\" attribute.",
          "params": [
            {
              "name": "event",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "createInputElement": {
          "private": "",
          "description": "Creates an <code>&#60;input&#62;</code> element of the \nspecified type.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String specifying the type of \n<code>&#60;input&#62;</code> element to create."
            },
            {
              "name": "p_sName",
              "type": "String",
              "description": " String specifying the name of \n<code>&#60;input&#62;</code> element to create."
            },
            {
              "name": "p_sValue",
              "type": "String",
              "description": " String specifying the value of \n<code>&#60;input&#62;</code> element to create."
            },
            {
              "name": "p_bChecked",
              "type": "String",
              "description": " Boolean specifying if the  \n<code>&#60;input&#62;</code> element is to be checked."
            }
          ],
          "return": {
            "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-6043025\">HTMLInputElement</a>",
            "description": ""
          }
        },
        "addStateCSSClasses": {
          "guessedname": "addStateCSSClasses",
          "guessedtype": "function",
          "description": "Appends state-specific CSS classes to the button's root \nDOM element."
        },
        "_onFocus": {
          "guessedname": "_onFocus",
          "guessedtype": "function",
          "protected": "",
          "description": "\"focus\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_onKeyUp": {
          "guessedname": "_onKeyUp",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keyup\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_setChecked": {
          "guessedname": "_setChecked",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"target\" attribute.",
          "params": [
            {
              "name": "p_bChecked",
              "type": "Boolean",
              "description": " Boolean indicating the value for  \nthe button's \"checked\" attribute."
            }
          ]
        },
        "_addListenersToForm": {
          "guessedname": "_addListenersToForm",
          "guessedtype": "function",
          "protected": "",
          "description": "Adds event handlers to the button's form."
        },
        "submitForm": {
          "guessedname": "submitForm",
          "guessedtype": "function",
          "protected": "",
          "description": "Submits the form to which the button belongs.  Returns  \ntrue if the form was submitted successfully, false if the submission \nwas cancelled.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_onMouseOut": {
          "guessedname": "_onMouseOut",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseout\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_onMouseOver": {
          "guessedname": "_onMouseOver",
          "guessedtype": "function",
          "protected": "",
          "description": "\"mouseover\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "_setType": {
          "guessedname": "_setType",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button's \"type\" attribute.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String indicating the value for the button's \n\"type\" attribute."
            }
          ]
        },
        "_onMenuHide": {
          "private": "",
          "guessedname": "_onMenuHide",
          "guessedtype": "function",
          "description": "\"hide\" event handler for the button's menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            }
          ]
        },
        "removeStateCSSClasses": {
          "guessedname": "removeStateCSSClasses",
          "guessedtype": "function",
          "description": "Removes state-specific CSS classes to the button's root \nDOM element."
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Initializes all of the configuration attributes used to  \ncreate the button.",
          "params": [
            {
              "name": "p_oAttributes",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the button."
            }
          ]
        },
        "_showMenu": {
          "guessedname": "_showMenu",
          "guessedtype": "function",
          "protected": "",
          "description": "Shows the button's menu.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object \npassed back by the event utility (YAHOO.util.Event) that triggered \nthe display of the menu."
            }
          ]
        },
        "setAttributeFromDOMAttribute": {
          "private": "",
          "description": "Gets the value of the specified DOM attribute and sets it \ninto the collection of configuration attributes used to configure \nthe button.",
          "params": [
            {
              "name": "p_sAttribute",
              "type": "String",
              "description": " String representing the name of the \nattribute to retrieve from the DOM element."
            }
          ]
        },
        "_onMenuRender": {
          "private": "",
          "guessedname": "_onMenuRender",
          "guessedtype": "function",
          "description": "\"render\" event handler for the button's menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the  \nevent thatwas fired."
            }
          ]
        },
        "_onAppendTo": {
          "guessedname": "_onAppendTo",
          "guessedtype": "function",
          "protected": "",
          "description": "\"appendTo\" event handler for the button.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "YAHOO.widget.Button.getButton": {
          "guessedname": "getButton",
          "guessedtype": "function",
          "description": "Returns a button with the specified id.",
          "params": [
            {
              "name": "p_sId",
              "type": "String",
              "description": " String specifying the id of the root node of the \nHTML element representing the button to be retrieved."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Button",
            "description": ""
          }
        },
        "hasFocus": {
          "guessedname": "hasFocus",
          "guessedtype": "function",
          "description": "Returns a boolean indicating whether or not the button \nhas focus.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        }
      },
      "name": "YAHOO.widget.Button",
      "extends": "YAHOO.util.Element",
      "module": "button",
      "namespace": "YAHOO.widget",
      "events": {
        "lazyloadmenuChange": {
          "name": "lazyloadmenuChange",
          "description": "Fires when the value for the configuration attribute 'lazyloadmenu' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTargetChange": {
          "name": "beforeTargetChange",
          "description": "Fires before the value for the configuration attribute 'target' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "focusmenuChange": {
          "name": "focusmenuChange",
          "description": "Fires when the value for the configuration attribute 'focusmenu' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLazyloadmenuChange": {
          "name": "beforeLazyloadmenuChange",
          "description": "Fires before the value for the configuration attribute 'lazyloadmenu' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTabindexChange": {
          "name": "beforeTabindexChange",
          "description": "Fires before the value for the configuration attribute 'tabindex' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "menuminscrollheightChange": {
          "name": "menuminscrollheightChange",
          "description": "Fires when the value for the configuration attribute 'menuminscrollheight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "option": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the user invokes the button's option.  Passes \nback a single object representing the original DOM event (either \n\"mousedown\" or \"keydown\") that caused the \"option\" event to fire.  See \n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> \nfor more information on listening for this event."
        },
        "beforeMenuclassnameChange": {
          "name": "beforeMenuclassnameChange",
          "description": "Fires before the value for the configuration attribute 'menuclassname' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCheckedChange": {
          "name": "beforeCheckedChange",
          "description": "Fires before the value for the configuration attribute 'checked' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "menualignmentChange": {
          "name": "menualignmentChange",
          "description": "Fires when the value for the configuration attribute 'menualignment' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "tabindexChange": {
          "name": "tabindexChange",
          "description": "Fires when the value for the configuration attribute 'tabindex' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTypeChange": {
          "name": "beforeTypeChange",
          "description": "Fires before the value for the configuration attribute 'type' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTitleChange": {
          "name": "beforeTitleChange",
          "description": "Fires before the value for the configuration attribute 'title' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "disabledChange": {
          "name": "disabledChange",
          "description": "Fires when the value for the configuration attribute 'disabled' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "targetChange": {
          "name": "targetChange",
          "description": "Fires when the value for the configuration attribute 'target' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "onclickChange": {
          "name": "onclickChange",
          "description": "Fires when the value for the configuration attribute 'onclick' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeValueChange": {
          "name": "beforeValueChange",
          "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "labelChange": {
          "name": "labelChange",
          "description": "Fires when the value for the configuration attribute 'label' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMenuminscrollheightChange": {
          "name": "beforeMenuminscrollheightChange",
          "description": "Fires before the value for the configuration attribute 'menuminscrollheight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "focus": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the menu item receives focus.  Passes back a  \nsingle object representing the original DOM event object passed back by \nthe event utility (YAHOO.util.Event) when the event was fired.  See \n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> \nfor more information on listening for this event."
        },
        "checkedChange": {
          "name": "checkedChange",
          "description": "Fires when the value for the configuration attribute 'checked' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "valueChange": {
          "name": "valueChange",
          "description": "Fires when the value for the configuration attribute 'value' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMenuChange": {
          "name": "beforeMenuChange",
          "description": "Fires before the value for the configuration attribute 'menu' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeOnclickChange": {
          "name": "beforeOnclickChange",
          "description": "Fires before the value for the configuration attribute 'onclick' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeReplaceLabelChange": {
          "name": "beforeReplaceLabelChange",
          "description": "Fires before the value for the configuration attribute 'replaceLabel' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSrcelementChange": {
          "name": "beforeSrcelementChange",
          "description": "Fires before the value for the configuration attribute 'srcelement' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "nameChange": {
          "name": "nameChange",
          "description": "Fires when the value for the configuration attribute 'name' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLabelChange": {
          "name": "beforeLabelChange",
          "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "blur": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the menu item loses the input focus.  Passes back  \na single object representing the original DOM event object passed back by \nthe event utility (YAHOO.util.Event) when the event was fired.  See \n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for  \nmore information on listening for this event."
        },
        "beforeSelectedMenuItemChange": {
          "name": "beforeSelectedMenuItemChange",
          "description": "Fires before the value for the configuration attribute 'selectedMenuItem' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "menumaxheightChange": {
          "name": "menumaxheightChange",
          "description": "Fires when the value for the configuration attribute 'menumaxheight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "menuChange": {
          "name": "menuChange",
          "description": "Fires when the value for the configuration attribute 'menu' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeNameChange": {
          "name": "beforeNameChange",
          "description": "Fires before the value for the configuration attribute 'name' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "selectedMenuItemChange": {
          "name": "selectedMenuItemChange",
          "description": "Fires when the value for the configuration attribute 'selectedMenuItem' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMenumaxheightChange": {
          "name": "beforeMenumaxheightChange",
          "description": "Fires before the value for the configuration attribute 'menumaxheight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "menuclassnameChange": {
          "name": "menuclassnameChange",
          "description": "Fires when the value for the configuration attribute 'menuclassname' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeContainerChange": {
          "name": "beforeContainerChange",
          "description": "Fires before the value for the configuration attribute 'container' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "replaceLabelChange": {
          "name": "replaceLabelChange",
          "description": "Fires when the value for the configuration attribute 'replaceLabel' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "hrefChange": {
          "name": "hrefChange",
          "description": "Fires when the value for the configuration attribute 'href' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDisabledChange": {
          "name": "beforeDisabledChange",
          "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "titleChange": {
          "name": "titleChange",
          "description": "Fires when the value for the configuration attribute 'title' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "srcelementChange": {
          "name": "srcelementChange",
          "description": "Fires when the value for the configuration attribute 'srcelement' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeFocusmenuChange": {
          "name": "beforeFocusmenuChange",
          "description": "Fires before the value for the configuration attribute 'focusmenu' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMenualignmentChange": {
          "name": "beforeMenualignmentChange",
          "description": "Fires before the value for the configuration attribute 'menualignment' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "typeChange": {
          "name": "typeChange",
          "description": "Fires when the value for the configuration attribute 'type' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "containerChange": {
          "name": "containerChange",
          "description": "Fires when the value for the configuration attribute 'container' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHrefChange": {
          "name": "beforeHrefChange",
          "description": "Fires before the value for the configuration attribute 'href' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The Button class creates a rich, graphical button.",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>,\n<code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to \nbe used to create the button."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-6043025\">HTMLInputElement</a>|<a href=\"http://www.w3.org\n/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-34812697\">\nHTMLButtonElement</a>|<a href=\"\nhttp://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#\nID-33759296\">HTMLElement</a>",
              "description": " Object reference for the \n<code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>, \n<code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to be \nused to create the button."
            },
            {
              "name": "p_oElement",
              "type": "Object",
              "description": " Object literal specifying a set of   \nconfiguration attributes used to create the button."
            },
            {
              "name": "p_oAttributes",
              "type": "Object",
              "description": " Optional. Object literal specifying a set  \nof configuration attributes used to create the button."
            }
          ]
        }
      ],
      "description": "The Button class creates a rich, graphical button.",
      "file": "button.js",
      "configs": {
        "name": {
          "default": "null",
          "type": "String",
          "description": "String specifying the name for the button."
        },
        "label": {
          "default": "null",
          "type": "String",
          "description": "String specifying the button's text label \nor innerHTML."
        },
        "checked": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the button is checked. \nApplies only to buttons of type \"radio\" and \"checkbox.\""
        },
        "href": {
          "type": "String",
          "description": "String specifying the href for the button.  Applies\nonly to buttons of type \"link.\""
        },
        "selectedMenuItem": {
          "default": "null",
          "type": "YAHOO.widget.MenuItem",
          "description": "Object representing the item in the button's menu \nthat is currently selected."
        },
        "title": {
          "default": "null",
          "type": "String",
          "description": "String specifying the title for the button."
        },
        "replaceLabel": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating whether or not the text of the \nbutton's <code>&#60;label&#62;</code> element should be used as\nthe source for the button's label configuration attribute and \nremoved from the DOM."
        },
        "focusmenu": {
          "default": "true",
          "type": "Boolean",
          "description": "Boolean indicating whether or not the button's menu \nshould be focused when it is made visible."
        },
        "menumaxheight": {
          "default": "0",
          "type": "Number",
          "description": "Number defining the maximum height (in pixels) for a menu's \nbody element (<code>&#60;div class=\"bd\"&#60;</code>).  Once a menu's body \nexceeds this height, the contents of the body are scrolled to maintain \nthis value.  This value cannot be set lower than the value of the \n\"minscrollheight\" configuration property."
        },
        "container": {
          "default": "null",
          "writeonce": "",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|String",
          "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the button's markup should be \nrendered into."
        },
        "menualignment": {
          "default": "[\"tl\", \"bl\"]",
          "type": "Array",
          "description": "Array defining how the Button's Menu is aligned to the Button.  \nThe default value of [\"tl\", \"bl\"] aligns the Menu's top left corner to the Button's \nbottom left corner."
        },
        "srcelement": {
          "default": "null",
          "writeonce": "",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|String",
          "description": "Object reference to the HTML element (either \n<code>&#60;input&#62;</code> or <code>&#60;span&#62;</code>) \nused to create the button."
        },
        "lazyloadmenu": {
          "default": "true",
          "writeonce": "",
          "type": "Boolean",
          "description": "Boolean indicating the value to set for the \n<a href=\"YAHOO.widget.Menu.html#lazyLoad\">\"lazyload\"</a>\nconfiguration property of the button's menu.  Setting \n\"lazyloadmenu\" to <code>true </code> will defer rendering of \nthe button's menu until the first time it is made visible.  \nIf \"lazyloadmenu\" is set to <code>false</code>, the button's \nmenu will be rendered immediately if the button is in the \ndocument, or in response to the button's \"appendTo\" event if \nthe button is not yet in the document.  In either case, the \nmenu is rendered into the button's parent HTML element.  \n<em>This attribute does not apply if a \n<a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu</a> or \n<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a> \ninstance is passed as the value of the button's \"menu\" \nconfiguration attribute. <a href=\"YAHOO.widget.Menu.html\">\nYAHOO.widget.Menu</a> or <a href=\"YAHOO.widget.Overlay.html\">\nYAHOO.widget.Overlay</a> instances should be rendered before \nbeing set as the value for the \"menu\" configuration \nattribute.</em>"
        },
        "value": {
          "default": "null",
          "type": "Object",
          "description": "Object specifying the value for the button."
        },
        "menuclassname": {
          "default": "\"yui-button-menu\"",
          "writeonce": "",
          "type": "String",
          "description": "String representing the CSS class name to be \napplied to the root element of the button's menu."
        },
        "type": {
          "default": "\"push\"",
          "writeonce": "",
          "type": "String",
          "description": "String specifying the button's type.  Possible \nvalues are: \"push,\" \"link,\" \"submit,\" \"reset,\" \"checkbox,\" \n\"radio,\" \"menu,\" and \"split.\""
        },
        "menuminscrollheight": {
          "default": "90",
          "type": "Number",
          "description": "Number defining the minimum threshold for the \"menumaxheight\" \nconfiguration attribute.  When set this attribute is automatically applied \nto all submenus."
        },
        "onclick": {
          "default": "null",
          "type": "Object",
          "description": "Object literal representing the code to be executed  \nwhen the button is clicked.  Format:<br> <code> {<br> \n<strong>fn:</strong> Function,   &#47;&#47; The handler to call \nwhen the event fires.<br> <strong>obj:</strong> Object, \n&#47;&#47; An object to pass back to the handler.<br> \n<strong>scope:</strong> Object &#47;&#47;  The object to use \nfor the scope of the handler.<br> } </code>"
        },
        "target": {
          "type": "String",
          "description": "String specifying the target for the button.  \nApplies only to buttons of type \"link.\""
        },
        "disabled": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the button should be disabled.  \n(Disabled buttons are dimmed and will not respond to user input \nor fire events.  Does not apply to button's of type \"link.\")"
        },
        "tabindex": {
          "default": "null",
          "type": "Number",
          "description": "Number specifying the tabindex for the button."
        },
        "menu": {
          "default": "null",
          "writeonce": "",
          "type": "<a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu</a>|<a \nhref=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>|<a \nhref=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-58190037\">HTMLElement</a>|String|Array",
          "description": "Object specifying the menu for the button.  \nThe value can be one of the following:\n<ul>\n<li>Object specifying a rendered <a href=\"YAHOO.widget.Menu.html\">\nYAHOO.widget.Menu</a> instance.</li>\n<li>Object specifying a rendered <a href=\"YAHOO.widget.Overlay.html\">\nYAHOO.widget.Overlay</a> instance.</li>\n<li>String specifying the id attribute of the <code>&#60;div&#62;\n</code> element used to create the menu.  By default the menu \nwill be created as an instance of \n<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>.  \nIf the <a href=\"YAHOO.widget.Menu.html#CSS_CLASS_NAME\">\ndefault CSS class name for YAHOO.widget.Menu</a> is applied to \nthe <code>&#60;div&#62;</code> element, it will be created as an\ninstance of <a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu\n</a>.</li><li>String specifying the id attribute of the \n<code>&#60;select&#62;</code> element used to create the menu.\n</li><li>Object specifying the <code>&#60;div&#62;</code> element\nused to create the menu.</li>\n<li>Object specifying the <code>&#60;select&#62;</code> element\nused to create the menu.</li>\n<li>Array of object literals, each representing a set of \n<a href=\"YAHOO.widget.MenuItem.html\">YAHOO.widget.MenuItem</a> \nconfiguration attributes.</li>\n<li>Array of strings representing the text labels for each menu \nitem in the menu.</li>\n</ul>"
        }
      },
      "properties": {
        "_hasKeyEventHandlers": {
          "guessedname": "_hasKeyEventHandlers",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Boolean indicating if the button's \"blur\", \"keydown\" and \n\"keyup\" event handlers are assigned"
        },
        "_onclickAttributeValue": {
          "guessedname": "_onclickAttributeValue",
          "default": "null",
          "type": "Object",
          "guessedtype": "property",
          "protected": "",
          "description": "Object reference to the button's current value for the \n\"onclick\" configuration attribute."
        },
        "CSS_CLASS_NAME": {
          "final": "",
          "guessedname": "CSS_CLASS_NAME",
          "default": "\"button\"",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the CSS class(es) to be applied to  \nthe button's root element."
        },
        "_activationKeyPressed": {
          "guessedname": "_activationKeyPressed",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Boolean indicating if the key(s) that toggle the button's \n\"active\" state have been pressed."
        },
        "_nOptionRegionX": {
          "guessedname": "_nOptionRegionX",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "protected": "",
          "description": "Number representing the X coordinate of the leftmost edge of the Button's \noption region.  Applies only to Buttons of type \"split\"."
        },
        "_hasMouseEventHandlers": {
          "guessedname": "_hasMouseEventHandlers",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Boolean indicating if the button's \"mouseout,\" \n\"mousedown,\" and \"mouseup\" event handlers are assigned"
        },
        "_hiddenFields": {
          "guessedname": "_hiddenFields",
          "default": "null",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|Array",
          "guessedtype": "property",
          "protected": "",
          "description": "Object reference to the <code>&#60;input&#62;</code>  \nelement, or array of HTML form elements used to represent the button\nwhen its parent form is submitted."
        },
        "_activationButtonPressed": {
          "guessedname": "_activationButtonPressed",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Boolean indicating if the mouse button that toggles \nthe button's \"active\" state has been pressed."
        },
        "_button": {
          "guessedname": "_button",
          "default": "null",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-48250443\">HTMLAnchorElement</a>|<a href=\"\nhttp://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html\n#ID-34812697\">HTMLButtonElement</a>",
          "guessedtype": "property",
          "protected": "",
          "description": "Object reference to the button's internal \n<code>&#60;a&#62;</code> or <code>&#60;button&#62;</code> element."
        },
        "CHECK_ACTIVATION_KEYS": {
          "final": "",
          "guessedname": "CHECK_ACTIVATION_KEYS",
          "default": "[32]",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of numbers representing keys that (when pressed) \ntoggle the button's \"checked\" attribute."
        },
        "NODE_NAME": {
          "final": "",
          "guessedname": "NODE_NAME",
          "default": "\"SPAN\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the node to be used for the button's \nroot element."
        },
        "_menu": {
          "guessedname": "_menu",
          "default": "null",
          "type": "{<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay</a>|\n<a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu</a>}",
          "guessedtype": "property",
          "protected": "",
          "description": "Object reference to the button's menu."
        },
        "ACTIVATION_KEYS": {
          "final": "",
          "guessedname": "ACTIVATION_KEYS",
          "default": "[13, 32]",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of numbers representing keys that (when presed) \ntoggle the button's \"active\" state."
        },
        "CLASS_NAME_PREFIX": {
          "final": "",
          "guessedname": "CLASS_NAME_PREFIX",
          "default": "\"yui-\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Prefix used for all class names applied to a Button."
        },
        "OPTION_AREA_WIDTH": {
          "final": "",
          "guessedname": "OPTION_AREA_WIDTH",
          "default": "20",
          "type": "Number",
          "guessedtype": "property",
          "description": "Width (in pixels) of the area of a split button that  \nwhen pressed will display a menu."
        }
      }
    },
    "YAHOO.util.ColumnResizer": {
      "shortname": "ColumnResizer",
      "superclass": "YAHOO.util.DDProxy",
      "methods": {
        "startDrag": {
          "guessedname": "startDrag",
          "guessedtype": "function",
          "description": "Handles start drag on the Column resizer.",
          "params": [
            {
              "name": "e",
              "type": "string",
              "description": "  The drag event"
            }
          ]
        },
        "clickValidator": {
          "private": "",
          "guessedname": "clickValidator",
          "guessedtype": "function",
          "description": "Custom clickValidator to ensure Column is not in hidden state.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": ""
            }
          ]
        },
        "resetResizerEl": {
          "guessedname": "resetResizerEl",
          "guessedtype": "function",
          "description": "Resets resizer element."
        },
        "onMouseUp": {
          "guessedname": "onMouseUp",
          "guessedtype": "function",
          "description": "Handles mouseup events on the Column resizer.",
          "params": [
            {
              "name": "e",
              "type": "string",
              "description": "  The mouseup event"
            }
          ]
        },
        "onMouseDown": {
          "guessedname": "onMouseDown",
          "guessedtype": "function",
          "description": "Handles mousedown events on the Column resizer.",
          "params": [
            {
              "name": "e",
              "type": "string",
              "description": "  The mousedown event"
            }
          ]
        },
        "onDrag": {
          "guessedname": "onDrag",
          "guessedtype": "function",
          "description": "Handles drag events on the Column resizer.",
          "params": [
            {
              "name": "e",
              "type": "string",
              "description": "  The drag event"
            }
          ]
        }
      },
      "name": "YAHOO.util.ColumnResizer",
      "extends": "YAHOO.util.DDProxy",
      "guessedname": "ColumnResizer",
      "module": "datatable",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "ColumnResizer subclasses DragDrop to support resizeable Columns.",
          "params": [
            {
              "name": "oDataTable",
              "type": "YAHOO.widget.DataTable",
              "description": "  DataTable instance."
            },
            {
              "name": "oColumn",
              "type": "YAHOO.widget.Column",
              "description": "  Column instance."
            },
            {
              "name": "elTh",
              "type": "HTMLElement",
              "description": "  TH element reference."
            },
            {
              "name": "sHandleElId",
              "type": "String",
              "description": "  DOM ID of the handle element that causes the resize."
            },
            {
              "name": "elProxy",
              "type": "HTMLElement",
              "description": "  Resizer proxy element."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ColumnResizer subclasses DragDrop to support resizeable Columns.",
      "file": "ColumnSet.js",
      "properties": {
        "editorOptions": {
          "deprecated": "Pass configs directly to CellEditor constructor."
        }
      }
    },
    "YAHOO.util.SWFStore": {
      "shortname": "SWFStore",
      "methods": {
        "getValueOf": {
          "guessedname": "getValueOf",
          "guessedtype": "function",
          "description": "Returns the value of the item in storage, if any.",
          "params": [
            {
              "name": "location",
              "type": "String",
              "description": "  The name of the \"cookie\" or store"
            }
          ],
          "return": {
            "type": "Object",
            "description": "The data"
          }
        },
        "setShareData": {
          "guessedname": "setShareData",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the SWFStore instance.",
          "params": [
            {
              "name": "Whether",
              "type": "Boolean",
              "description": " or not to share among browsers"
            }
          ]
        },
        "calculateCurrentSize": {
          "guessedname": "calculateCurrentSize",
          "guessedtype": "function",
          "description": "Gets the current size, in KB, of the amount of space taken by the current store.\nNote that this is calculated, and may take time depending on the number of items stored",
          "return": {
            "type": "Number",
            "description": "The size of the store in KB"
          }
        },
        "removeItem": {
          "guessedname": "removeItem",
          "param": "index {Number} The index of the \"cookie\" or store",
          "guessedtype": "function",
          "description": "Removes the item in storage, if any.",
          "params": [
            {
              "name": "location",
              "type": "String",
              "description": "  The name of the \"cookie\" or store"
            }
          ]
        },
        "clear": {
          "guessedname": "clear",
          "guessedtype": "function",
          "description": "Removes all data in local storage for this domain.\n<p>Be careful when using this method, as it may \nremove stored information that is used by other applications\nin this domain </p>"
        },
        "setSize": {
          "guessedname": "setSize",
          "guessedtype": "function",
          "description": "This method requests more storage (if the amount is above 100KB or the current setting).\nThe request dialog has to be displayed within the Flash player itself\nso the SWF it is called from must be visible and at least 215px x 138px (w x h) in size.",
          "params": [
            {
              "name": "value",
              "type": "Number",
              "description": "  The size, in KB"
            }
          ],
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the SWFStore instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the SWFStore instance."
          }
        },
        "getItems": {
          "public": "",
          "guessedname": "getItems",
          "guessedtype": "function",
          "description": "Returns the items in storage as an array.",
          "return": {
            "type": "Object",
            "description": "The data."
          }
        },
        "getModificationDate": {
          "guessedname": "getModificationDate",
          "guessedtype": "function",
          "description": "Gets the timestamp of the last store. This value is automatically set when \ndata is stored.",
          "return": {
            "type": "Date",
            "description": "A Date object"
          }
        },
        "getTypeAt": {
          "guessedname": "getTypeAt",
          "guessedtype": "function",
          "description": "Returns the data type of of the storage.\n<p>May be one of the following types:\n<ul>\n<li>boolean</li>\n<li>function</li>\n<li>number</li>\n<li>object</li>\n<li>string</li>\n<li>number</li>\n<li>xml</li>\n</ul>\n</p>",
          "params": [
            {
              "name": "location",
              "type": "Number",
              "description": "  The index of the \"cookie\" or store"
            }
          ],
          "return": {
            "type": "String",
            "description": "The type"
          }
        },
        "setUseCompression": {
          "guessedname": "setUseCompression",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the SWFStore instance.",
          "params": [
            {
              "name": "Whether",
              "type": "Boolean",
              "description": " or to compress stored data"
            }
          ]
        },
        "getValueAt": {
          "guessedname": "getValueAt",
          "guessedtype": "function",
          "description": "Returns the value of the store at the specified index, if any.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  The index of the stored item"
            }
          ],
          "return": {
            "type": "Object",
            "description": "The value of the store at that index"
          }
        },
        "getShareData": {
          "guessedname": "getShareData",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the SWFStore instance.",
          "return": {
            "type": "Boolean",
            "description": "Whether or not data is being shared among browsers"
          }
        },
        "getTypeOf": {
          "guessedname": "getTypeOf",
          "guessedtype": "function",
          "description": "Returns the data type of of the storage.\n<p>May be one of the following types:\n<ul>\n<li>boolean</li>\n<li>function</li>\n<li>number</li>\n<li>object</li>\n<li>string</li>\n<li>number</li>\n<li>xml</li>\n</ul>\n</p>",
          "params": [
            {
              "name": "location",
              "type": "String",
              "description": "  The name of the \"cookie\" or store"
            }
          ],
          "return": {
            "type": "String",
            "description": "The type"
          }
        },
        "displaySettings": {
          "guessedname": "displaySettings",
          "guessedtype": "function",
          "description": "Displays the settings dialog to allow the user to configure\nstorage settings manually. If the SWF height and width are smaller than\nwhat is allowable to display the local settings panel,\nan openExternalDialog message will be sent to JavaScript."
        },
        "on": {
          "guessedname": "on",
          "guessedtype": "function",
          "description": "Method to attach listeners to events",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "  The tyep of event to listen for"
            },
            {
              "name": "listener",
              "type": "String",
              "description": "  The function to call"
            }
          ]
        },
        "getUseCompression": {
          "guessedname": "getUseCompression",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the SWFStore instance.",
          "return": {
            "type": "Boolean",
            "description": "Whether or compression is being used"
          }
        },
        "setItem": {
          "guessedname": "setItem",
          "param": "index {Number} The index of the \"cookie\" or store",
          "guessedtype": "function",
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "  The data to store"
            },
            {
              "name": "location",
              "type": "String",
              "description": "  The name of the \"cookie\" or store"
            }
          ],
          "description": "Saves data to local storage. It returns a String that can\nbe one of three values: \"true\" if the storage succeeded; \"false\" if the user\nhas denied storage on their machine or storage space allotted is not sufficient.\n<p>The size limit for the passed parameters is ~40Kb.</p>",
          "return": {
            "type": "Boolean",
            "description": "Whether or not the save was successful"
          }
        },
        "getLength": {
          "guessedname": "getLength",
          "guessedtype": "function",
          "description": "Returns the number of items in storage, if any.",
          "return": {
            "type": "Number",
            "description": "The number of items"
          }
        },
        "hasAdequateDimensions": {
          "guessedname": "hasAdequateDimensions",
          "guessedtype": "function",
          "description": "Determines if SWF's visible area is large enough to fit the settings panel",
          "return": {
            "type": "Boolean",
            "description": "Whether or not to share among browsers"
          }
        },
        "addListener": {
          "guessedname": "addListener",
          "guessedtype": "function",
          "description": "Method to attach listeners to events",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "  The tyep of event to listen for"
            },
            {
              "name": "listener",
              "type": "String",
              "description": "  The function to call"
            }
          ]
        }
      },
      "name": "YAHOO.util.SWFStore",
      "guessedname": "SWFStore",
      "module": "swfstore",
      "namespace": "YAHOO.util",
      "events": {
        "clear": {
          "description": "Fires when a store is successfully cleared",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        },
        "openingDialog": {
          "description": "Fires as the settings dialog displays",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        },
        "save": {
          "description": "Fires when a store is saved successfully",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        },
        "quotaExceededError": {
          "description": "Fires when there is not enough space available to store the data",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.message",
              "type": "String",
              "description": "  The data"
            }
          ]
        },
        "error": {
          "param": "event.type {String} The event type",
          "description": "Fires when an error occurs",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.message",
              "type": "String",
              "description": "  The data"
            }
          ]
        },
        "securityError": {
          "description": "Fires when the url matching for the security whitelist is invalid.\nIf no whitelist is used, fires when page's url does not match the embedded swf's url",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            },
            {
              "name": "event.message",
              "type": "String",
              "description": "  The data"
            }
          ]
        },
        "inadequateDimensions": {
          "description": "Fires when a settings dialog is not able to be displayed due to \nthe SWF not being large enough to show it. In this case, the developer\nneeds to resize the SWF to width of 215px and height of 138px or above, \nor display an external settings page.",
          "params": [
            {
              "name": "event.type",
              "type": "String",
              "description": "  The event type"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Class for the YUI SWFStore util.",
          "params": [
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "shareData",
              "type": "Boolean",
              "description": "  Whether or not data should be shared across browsers"
            },
            {
              "name": "useCompression",
              "type": "Boolean",
              "description": "  Container element for the Flash Player instance."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Class for the YUI SWFStore util.",
      "file": "swfstore.js",
      "uses": [
        "YAHOO.util.AttributeProvider"
      ]
    },
    "YAHOO.lang.JSON": {
      "shortname": "JSON",
      "methods": {
        "_revive": {
          "private": "",
          "description": "Traverses nested objects, applying a filter or reviver function to\neach value.  The value returned from the function will replace the\noriginal value in the key:value pair.  If the value returned is\nundefined, the key will be omitted from the returned object.",
          "params": [
            {
              "name": "data",
              "type": "MIXED",
              "description": "  Any JavaScript data"
            },
            {
              "name": "reviver",
              "type": "Function",
              "description": "  filter or mutation function"
            }
          ],
          "return": {
            "type": "MIXED",
            "description": "The results of the filtered/mutated data structure"
          }
        },
        "stringify": {
          "guessedname": "stringify",
          "throws": "Error",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "MIXED",
              "description": "  any arbitrary object to convert to JSON string"
            },
            {
              "name": "w",
              "type": "Array|Function",
              "description": "  (optional) whitelist of acceptable object keys\nto include OR a function(value,key) to alter values\nbefore serialization"
            },
            {
              "name": "space",
              "type": "Number|String",
              "description": "  (optional) indentation character(s) or\ndepthy of spaces to format the output"
            }
          ],
          "description": "<p>Converts an arbitrary value to a JSON string representation.</p>\n<p>Objects with cyclical references will trigger an exception.</p>\n<p>If a whitelist is provided, only matching object keys will be\nincluded.  Alternately, a replacer function may be passed as the\nsecond parameter.  This function is executed on every value in the\ninput, and its return value will be used in place of the original value.\nThis is useful to serialize specialized objects or class instances.</p>\n<p>If a positive integer or non-empty string is passed as the third\nparameter, the output will be formatted with carriage returns and\nindentation for readability.  If a String is passed (such as \"\\t\") it\nwill be used once for each indentation level.  If a number is passed,\nthat number of spaces will be used.</p>\n<p>When lang.JSON.useNativeStringify is true, this will defer to the\nnative JSON.stringify if the browser has a native implementation.\nOtherwise, a JavaScript implementation is used.</p>",
          "return": {
            "type": "string",
            "description": "JSON string representation of the input"
          }
        },
        "isSafe": {
          "guessedname": "isSafe",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": "  JSON string to be tested"
            }
          ],
          "description": "Four step determination whether a string is safe to eval. In three steps,\nescape sequences, safe values, and properly placed open square brackets\nare replaced with placeholders or removed.  Then in the final step, the\nresult of all these replacements is checked for invalid characters.",
          "return": {
            "type": "boolean",
            "description": "is the string safe for eval?"
          }
        },
        "stringToDate": {
          "guessedname": "stringToDate",
          "guessedtype": "function",
          "description": "Reconstitute Date instances from the default JSON UTC serialization.\nReference this from a reviver function to rebuild Dates during the\nparse operation.",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": "  String serialization of a Date"
            }
          ],
          "return": {
            "type": "Date",
            "description": ""
          }
        },
        "dateToString": {
          "guessedname": "dateToString",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "d",
              "type": "Date",
              "description": "  The Date to serialize"
            }
          ],
          "description": "Serializes a Date instance as a UTC date string.  Used internally by\nthe JavaScript implementation of stringify.  If you need a different\nDate serialization format, override this method.  If you change this,\nyou should also set useNativeStringify to false, since native JSON\nimplementations serialize Dates per the ECMAScript 5 spec.  You've been\nwarned.",
          "return": {
            "type": "String",
            "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"
          }
        },
        "isValid": {
          "guessedname": "isValid",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": "  JSON string to be tested"
            }
          ],
          "deprecated": "use isSafe",
          "description": "<p>Four step determination whether a string is safe to eval. In three steps,\nescape sequences, safe values, and properly placed open square brackets\nare replaced with placeholders or removed.  Then in the final step, the\nresult of all these replacements is checked for invalid characters.</p>\n<p>This is an alias for isSafe.</p>",
          "return": {
            "type": "boolean",
            "description": "is the string safe for eval?"
          }
        },
        "parse": {
          "guessedname": "parse",
          "throws": "SyntaxError",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "s",
              "type": "string",
              "description": "  JSON string data"
            },
            {
              "name": "reviver",
              "type": "function",
              "description": "  (optional) function(k,v) passed each key:value\npair of object literals, allowing pruning or altering values"
            }
          ],
          "description": "<p>Parse a JSON string, returning the native JavaScript\nrepresentation.</p>\n<p>When lang.JSON.useNativeParse is true, this will defer to the native\nJSON.parse if the browser has a native implementation.  Otherwise, a\nJavaScript implementation based on http://www.json.org/json2.js\nis used.</p>",
          "return": {
            "type": "MIXED",
            "description": "the native JavaScript representation of the JSON string"
          }
        },
        "_prepare": {
          "private": "",
          "description": "Replace certain Unicode characters that may be handled incorrectly by\nsome browser implementations.",
          "params": [
            {
              "name": "s",
              "type": "String",
              "description": "  parse input"
            }
          ],
          "return": {
            "type": "String",
            "description": "sanitized JSON string ready to be validated/parsed"
          }
        }
      },
      "name": "YAHOO.lang.JSON",
      "module": "json",
      "namespace": "YAHOO.lang",
      "static": "",
      "description": "Provides methods to parse JSON strings and convert objects to JSON strings.",
      "file": "JSON.js",
      "properties": {
        "_VALUES": {
          "guessedname": "_VALUES",
          "private": "",
          "static": "",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "Second step in the safety evaluation.  Regex used to replace all simple\nvalues with ']' characters."
        },
        "useNativeParse": {
          "guessedname": "useNativeParse",
          "default": "true",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Leverage native JSON parse if the browser has a native implementation.\nIn general, this is a good idea.  See the Known Issues section in the\nJSON user guide for caveats.  The default value is true for browsers with\nnative JSON support."
        },
        "_SPECIAL_CHARS": {
          "guessedname": "_SPECIAL_CHARS",
          "private": "",
          "static": "",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "Regex used to replace special characters in strings for JSON\nstringification."
        },
        "useNativeStringify": {
          "guessedname": "useNativeStringify",
          "default": "true",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Leverage native JSON stringify if the browser has a native\nimplementation.  In general, this is a good idea.  See the Known Issues\nsection in the JSON user guide for caveats.  The default value is true\nfor browsers with native JSON support."
        },
        "_UNSAFE": {
          "guessedname": "_UNSAFE",
          "private": "",
          "static": "",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "Final step in the safety evaluation.  Regex used to test the string left\nafter all previous replacements for invalid characters."
        },
        "_ESCAPES": {
          "guessedname": "_ESCAPES",
          "private": "",
          "static": "",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "First step in the safety evaluation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character)."
        },
        "_CHARS": {
          "guessedname": "_CHARS",
          "private": "",
          "static": "",
          "type": "{Object}",
          "guessedtype": "property",
          "description": "Character substitution map for common escapes and special characters."
        },
        "_UNICODE_EXCEPTIONS": {
          "private": "",
          "guessedname": "_UNICODE_EXCEPTIONS",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "Replace certain Unicode characters that JavaScript may handle incorrectly\nduring eval--either by deleting them or treating them as line\nendings--with escape sequences.\nIMPORTANT NOTE: This regex will be used to modify the input if a match is\nfound."
        },
        "_BRACKETS": {
          "guessedname": "_BRACKETS",
          "private": "",
          "static": "",
          "type": "{RegExp}",
          "guessedtype": "property",
          "description": "Third step in the safety evaluation.  Regex used to remove all open\nsquare brackets following a colon, comma, or at the beginning of the\nstring."
        }
      }
    },
    "YAHOO.widget.TextboxCellEditor": {
      "shortname": "TextboxCellEditor",
      "superclass": "YAHOO.widget.BaseCellEditor",
      "methods": {
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Sets focus in TextboxCellEditor."
        },
        "move": {
          "guessedname": "move",
          "guessedtype": "function",
          "description": "Moves TextboxCellEditor UI to a cell."
        },
        "getInputValue": {
          "guessedname": "getInputValue",
          "guessedtype": "function",
          "description": "Returns new value for TextboxCellEditor."
        },
        "resetForm": {
          "guessedname": "resetForm",
          "guessedtype": "function",
          "description": "Resets TextboxCellEditor UI to initial state."
        },
        "renderForm": {
          "guessedname": "renderForm",
          "guessedtype": "function",
          "description": "Render a form with input type=text."
        }
      },
      "name": "YAHOO.widget.TextboxCellEditor",
      "extends": "YAHOO.widget.BaseCellEditor",
      "guessedname": "TextboxCellEditor",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The TextboxCellEditor class provides functionality for inline editing\nDataTable cell data with an INPUT TYPE=TEXT element.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal of configs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The TextboxCellEditor class provides functionality for inline editing\nDataTable cell data with an INPUT TYPE=TEXT element.",
      "file": "CellEditor.js",
      "properties": {
        "textbox": {
          "guessedname": "textbox",
          "guessedtype": "property",
          "description": "Reference to the textbox element."
        },
        "DataTable.Editors": {
          "guessedname": "Editors",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "CellEditor subclasses."
        }
      }
    },
    "YAHOO.widget.BarChart": {
      "shortname": "BarChart",
      "name": "YAHOO.widget.BarChart",
      "guessedname": "BarChart",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "BarChart class for the YUI Charts widget.",
          "params": [
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "dataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "attributes",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "BarChart class for the YUI Charts widget.",
      "file": "ChartTypes.js",
      "uses": [
        "YAHOO.widget.CartesianChart"
      ]
    },
    "YAHOO.widget.DualSlider": {
      "shortname": "DualSlider",
      "methods": {
        "_oneTimeCallback": {
          "private": "",
          "guessedname": "_oneTimeCallback",
          "guessedtype": "function",
          "description": "Schedule an event callback that will execute once, then unsubscribe\nitself.",
          "params": [
            {
              "name": "o",
              "type": "EventProvider",
              "description": "  Object to attach the event to"
            },
            {
              "name": "evt",
              "type": "string",
              "description": "  Name of the event"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "  function to execute once"
            }
          ]
        },
        "_handleKeyPress": {
          "guessedname": "_handleKeyPress",
          "guessedtype": "function",
          "protected": "",
          "description": "Delegate event handling to the active Slider.  See Slider.handleKeyPress.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the mousedown DOM event"
            }
          ]
        },
        "_handleMouseDown": {
          "guessedname": "_handleMouseDown",
          "guessedtype": "function",
          "protected": "",
          "description": "Delegates the onMouseDown to the appropriate Slider",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  mouseup event"
            }
          ]
        },
        "selectActiveSlider": {
          "private": "",
          "guessedname": "selectActiveSlider",
          "guessedtype": "function",
          "description": "A background click will move the slider thumb nearest to the click.\nOverride if you need different behavior.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the mousedown event"
            }
          ]
        },
        "_handleMouseUp": {
          "guessedname": "_handleMouseUp",
          "guessedtype": "function",
          "protected": "",
          "description": "Delegates the onMouseUp to the active Slider",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  mouseup event"
            }
          ]
        },
        "setMinValue": {
          "guessedname": "setMinValue",
          "guessedtype": "function",
          "description": "Set the min thumb position to a new value.",
          "params": [
            {
              "name": "min",
              "type": "int",
              "description": "  Pixel offset for min thumb"
            },
            {
              "name": "skipAnim",
              "type": "boolean",
              "description": "  (optional) Set to true to skip thumb animation.\nDefault false"
            },
            {
              "name": "force",
              "type": "boolean",
              "description": "  (optional) ignore the locked setting and set\nvalue anyway. Default false"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": "  (optional) Set to true to skip firing change\nevents.  Default false"
            }
          ]
        },
        "_handleMaxChange": {
          "guessedname": "_handleMaxChange",
          "private": "",
          "guessedtype": "function",
          "description": "Executed when the max slider fires the change event"
        },
        "setValues": {
          "guessedname": "setValues",
          "guessedtype": "function",
          "description": "Sets the min and max thumbs to new values.",
          "params": [
            {
              "name": "min",
              "type": "int",
              "description": "  Pixel offset to assign to the min thumb"
            },
            {
              "name": "max",
              "type": "int",
              "description": "  Pixel offset to assign to the max thumb"
            },
            {
              "name": "skipAnim",
              "type": "boolean",
              "description": "  (optional) Set to true to skip thumb animation.\nDefault false"
            },
            {
              "name": "force",
              "type": "boolean",
              "description": "  (optional) ignore the locked setting and set\nvalue anyway. Default false"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": "  (optional) Set to true to skip firing change\nevents.  Default false"
            }
          ]
        },
        "_handleKeyDown": {
          "guessedname": "_handleKeyDown",
          "guessedtype": "function",
          "protected": "",
          "description": "Delegate event handling to the active Slider.  See Slider.handleKeyDown.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the mousedown DOM event"
            }
          ]
        },
        "_handleSlideEnd": {
          "guessedname": "_handleSlideEnd",
          "private": "",
          "guessedtype": "function",
          "description": "Executed when one of the sliders fires the slideEnd event"
        },
        "_handleSlideStart": {
          "guessedname": "_handleSlideStart",
          "private": "",
          "guessedtype": "function",
          "description": "Executed when one of the sliders fires the slideStart event"
        },
        "_handleMinChange": {
          "guessedname": "_handleMinChange",
          "private": "",
          "guessedtype": "function",
          "description": "Executed when the min slider fires the change event"
        },
        "_cleanEvent": {
          "private": "",
          "guessedname": "_cleanEvent",
          "guessedtype": "function",
          "description": "Clean up the slideEnd event subscribers array, since each one-time\ncallback will be replaced in the event's subscribers property with\nnull.  This will cause memory bloat and loss of performance.",
          "params": [
            {
              "name": "o",
              "type": "EventProvider",
              "description": "  object housing the CustomEvent"
            },
            {
              "name": "evt",
              "type": "string",
              "description": "  name of the CustomEvent"
            }
          ]
        },
        "_handleDrag": {
          "guessedname": "_handleDrag",
          "private": "",
          "guessedtype": "function",
          "description": "Overrides the onDrag method for both sliders"
        },
        "updateValue": {
          "private": "",
          "guessedname": "updateValue",
          "guessedtype": "function",
          "description": "Executed when one of the sliders is moved",
          "params": [
            {
              "name": "silent",
              "type": "boolean",
              "description": "  (optional) Set to true to skip firing change\nevents.  Default false"
            }
          ]
        },
        "setMaxValue": {
          "guessedname": "setMaxValue",
          "guessedtype": "function",
          "description": "Set the max thumb position to a new value.",
          "params": [
            {
              "name": "max",
              "type": "int",
              "description": "  Pixel offset for max thumb"
            },
            {
              "name": "skipAnim",
              "type": "boolean",
              "description": "  (optional) Set to true to skip thumb animation.\nDefault false"
            },
            {
              "name": "force",
              "type": "boolean",
              "description": "  (optional) ignore the locked setting and set\nvalue anyway. Default false"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": "  (optional) Set to true to skip firing change\nevents.  Default false"
            }
          ]
        },
        "_bindKeyEvents": {
          "guessedname": "_bindKeyEvents",
          "guessedtype": "function",
          "protected": "",
          "description": "Set up the listeners for the keydown and keypress events."
        }
      },
      "name": "YAHOO.widget.DualSlider",
      "module": "slider",
      "namespace": "YAHOO.widget",
      "events": {
        "slideEnd": {
          "description": "Event that fires when one of the thumbs finishes moving",
          "params": [
            {
              "name": "activeSlider",
              "type": "Slider",
              "description": " the moving slider"
            }
          ]
        },
        "change": {
          "description": "Event that fires when either the min or max value changes",
          "params": [
            {
              "name": "dualslider",
              "type": "DualSlider",
              "description": " the DualSlider instance"
            }
          ]
        },
        "ready": {
          "description": "Event that fires when the slider is finished setting up",
          "params": [
            {
              "name": "dualslider",
              "type": "DualSlider",
              "description": " the DualSlider instance"
            }
          ]
        },
        "slideStart": {
          "description": "Event that fires when one of the thumbs begins to move",
          "params": [
            {
              "name": "activeSlider",
              "type": "Slider",
              "description": " the moving slider"
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "A slider with two thumbs, one that represents the min value and \nthe other the max.  Actually a composition of two sliders, both with\nthe same background.  The constraints for each slider are adjusted\ndynamically so that the min value of the max slider is equal or greater\nto the current value of the min slider, and the max value of the min\nslider is the current value of the max slider.\nConstructor assumes both thumbs are positioned absolutely at the 0 mark on\nthe background.",
          "params": [
            {
              "name": "minSlider",
              "type": "Slider",
              "description": " The Slider instance used for the min value thumb"
            },
            {
              "name": "maxSlider",
              "type": "Slider",
              "description": " The Slider instance used for the max value thumb"
            },
            {
              "name": "range",
              "type": "int",
              "description": " The number of pixels the thumbs may move within"
            },
            {
              "name": "initVals",
              "type": "Array",
              "description": " (optional) [min,max] Initial thumb placement"
            }
          ]
        }
      ],
      "description": "A slider with two thumbs, one that represents the min value and \nthe other the max.  Actually a composition of two sliders, both with\nthe same background.  The constraints for each slider are adjusted\ndynamically so that the min value of the max slider is equal or greater\nto the current value of the min slider, and the max value of the min\nslider is the current value of the max slider.\nConstructor assumes both thumbs are positioned absolutely at the 0 mark on\nthe background.",
      "file": "DualSlider.js",
      "properties": {
        "minSlider": {
          "guessedname": "minSlider",
          "type": "Slider",
          "guessedtype": "property",
          "description": "A slider instance that keeps track of the lower value of the range.\n<strong>read only</strong>"
        },
        "minRange": {
          "guessedname": "minRange",
          "default": "0",
          "type": "int",
          "guessedtype": "property",
          "description": "Pixel distance to maintain between thumbs."
        },
        "maxSlider": {
          "guessedname": "maxSlider",
          "type": "Slider",
          "guessedtype": "property",
          "description": "A slider instance that keeps track of the upper value of the range.\n<strong>read only</strong>"
        },
        "minVal": {
          "guessedname": "minVal",
          "type": "int",
          "guessedtype": "property",
          "description": "The current value of the min thumb. <strong>read only</strong>."
        },
        "maxVal": {
          "guessedname": "maxVal",
          "type": "int",
          "guessedtype": "property",
          "description": "The current value of the max thumb. <strong>read only</strong>."
        },
        "activeSlider": {
          "guessedname": "activeSlider",
          "type": "Slider",
          "guessedtype": "property",
          "description": "The currently active slider (min or max). <strong>read only</strong>"
        },
        "isHoriz": {
          "guessedname": "isHoriz",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Is the DualSlider oriented horizontally or vertically?\n<strong>read only</strong>"
        }
      },
      "uses": [
        "YAHOO.util.EventProvider"
      ]
    },
    "YAHOO.widget.LineSeries": {
      "shortname": "LineSeries",
      "name": "YAHOO.widget.LineSeries",
      "guessedname": "LineSeries",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "LineSeries class for the YUI Charts widget."
        }
      ],
      "guessedtype": "function",
      "description": "LineSeries class for the YUI Charts widget.",
      "file": "Series.js",
      "uses": [
        "YAHOO.widget.CartesianSeries"
      ]
    },
    "YAHOO.widget.CartesianChart": {
      "shortname": "CartesianChart",
      "methods": {
        "_removeAxisFunctions": {
          "guessedname": "_removeAxisFunctions",
          "private": "",
          "guessedtype": "function",
          "description": "Removes axis functions contained in an array"
        },
        "_getClonedAxis": {
          "guessedname": "_getClonedAxis",
          "private": "",
          "guessedtype": "function",
          "description": "Receives an axis object, creates a proxy function for \nthe labelFunction and returns the updated object."
        },
        "_setXAxis": {
          "guessedname": "_setXAxis",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the xAxis attribute."
        },
        "_setXField": {
          "guessedname": "_setXField",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the xField attribute."
        },
        "_getYField": {
          "guessedname": "_getYField",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for the yField attribute."
        },
        "setSeriesStylesByIndex": {
          "guessedname": "setSeriesStylesByIndex",
          "guessedtype": "function",
          "description": "Sets the style object for a single series based on its index",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  The position within the series definition to apply the style"
            },
            {
              "name": "style",
              "type": "object",
              "description": "  Style object to be applied to the selected series"
            }
          ]
        },
        "_getXField": {
          "guessedname": "_getXField",
          "private": "",
          "guessedtype": "function",
          "description": "Getter for the xField attribute."
        },
        "_setYAxis": {
          "guessedname": "_setYAxis",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the yAxis attribute."
        },
        "_setYField": {
          "guessedname": "_setYField",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the yField attribute."
        },
        "_initAttributes": {
          "guessedname": "_initAttributes",
          "private": "",
          "guessedtype": "function",
          "description": "Initializes the attributes."
        },
        "_setConstrainViewport": {
          "guessedname": "_setConstrainViewport",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the constrainViewport attribute"
        },
        "_setXAxes": {
          "guessedname": "_setXAxes",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the xAxes attribute"
        },
        "_setYAxes": {
          "guessedname": "_setYAxes",
          "private": "",
          "guessedtype": "function",
          "description": "Setter for the yAxes attribute."
        }
      },
      "name": "YAHOO.widget.CartesianChart",
      "guessedname": "CartesianChart",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "events": {
        "xFieldChange": {
          "name": "xFieldChange",
          "description": "Fires when the value for the configuration attribute 'xField' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "xAxisChange": {
          "name": "xAxisChange",
          "description": "Fires when the value for the configuration attribute 'xAxis' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeYAxisChange": {
          "name": "beforeYAxisChange",
          "description": "Fires before the value for the configuration attribute 'yAxis' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "constrainViewportChange": {
          "name": "constrainViewportChange",
          "description": "Fires when the value for the configuration attribute 'constrainViewport' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "yAxisChange": {
          "name": "yAxisChange",
          "description": "Fires when the value for the configuration attribute 'yAxis' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeXAxisChange": {
          "name": "beforeXAxisChange",
          "description": "Fires before the value for the configuration attribute 'xAxis' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeXAxesChange": {
          "name": "beforeXAxesChange",
          "description": "Fires before the value for the configuration attribute 'xAxes' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeConstrainViewportChange": {
          "name": "beforeConstrainViewportChange",
          "description": "Fires before the value for the configuration attribute 'constrainViewport' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "yAxesChange": {
          "name": "yAxesChange",
          "description": "Fires when the value for the configuration attribute 'yAxes' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeYAxesChange": {
          "name": "beforeYAxesChange",
          "description": "Fires before the value for the configuration attribute 'yAxes' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "xAxesChange": {
          "name": "xAxesChange",
          "description": "Fires when the value for the configuration attribute 'xAxes' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeYFieldChange": {
          "name": "beforeYFieldChange",
          "description": "Fires before the value for the configuration attribute 'yField' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeXFieldChange": {
          "name": "beforeXFieldChange",
          "description": "Fires before the value for the configuration attribute 'xField' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "yFieldChange": {
          "name": "yFieldChange",
          "description": "Fires when the value for the configuration attribute 'yField' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "CartesianChart class for the YUI Charts widget.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "  The char type. May be \"line\", \"column\", or \"bar\""
            },
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "dataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "attributes",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "CartesianChart class for the YUI Charts widget.",
      "file": "CartesianChart.js",
      "configs": {
        "xAxes": {
          "type": "Array",
          "description": "Custom configurations for the horizontal x axes."
        },
        "yField": {
          "type": "String",
          "description": "The field in each item that corresponds to a value on the x axis."
        },
        "xField": {
          "type": "String",
          "description": "The field in each item that corresponds to a value on the x axis."
        },
        "yAxis": {
          "type": "Axis",
          "description": "A custom configuration for the vertical y axis."
        },
        "xAxis": {
          "type": "Axis",
          "description": "A custom configuration for the horizontal x axis."
        },
        "yAxes": {
          "type": "Array",
          "description": "Custom configurations for the vertical y axes."
        },
        "constrainViewport": {
          "type": "Boolean",
          "description": "Determines whether the viewport is constrained to prevent series data from overflow."
        }
      },
      "properties": {
        "_yAxisLabelFunctions": {
          "private": "",
          "guessedname": "_yAxisLabelFunctions",
          "type": "Array",
          "guessedtype": "property",
          "description": "Stores a reference to the yAxis labelFunctions created by\nYAHOO.widget.Chart.createProxyFunction()"
        },
        "_xAxisLabelFunctions": {
          "private": "",
          "guessedname": "_xAxisLabelFunctions",
          "type": "String",
          "guessedtype": "property",
          "description": "Stores a reference to the xAxis labelFunction created by\nYAHOO.widget.Chart.createProxyFunction()"
        }
      },
      "uses": [
        "YAHOO.widget.Chart"
      ]
    },
    "YAHOO.util.DataSourceBase": {
      "shortname": "DataSourceBase",
      "methods": {
        "handleResponse": {
          "guessedname": "handleResponse",
          "guessedtype": "function",
          "description": "Receives raw data response and type converts to XML, JSON, etc as necessary.\nForwards oFullResponse to appropriate parsing function to get turned into\noParsedResponse. Calls doBeforeCallback() and adds oParsedResponse to \nthe cache when appropriate before calling issueCallback().\nThe oParsedResponse object literal has the following properties:\n<dl>\n<dd><dt>tId {Number}</dt> Unique transaction ID</dd>\n<dd><dt>results {Array}</dt> Array of parsed data results</dd>\n<dd><dt>meta {Object}</dt> Object literal of meta values</dd> \n<dd><dt>error {Boolean}</dt> (optional) True if there was an error</dd>\n<dd><dt>cached {Boolean}</dt> (optional) True if response was cached</dd>\n</dl>",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object"
            },
            {
              "name": "oRawResponse",
              "type": "Object",
              "description": "  The raw response from the live database."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  Callback object literal."
            },
            {
              "name": "oCaller",
              "type": "Object",
              "description": "  (deprecated) Use oCallback.scope."
            },
            {
              "name": "tId",
              "type": "Number",
              "description": "  Transaction ID."
            }
          ]
        },
        "parseData": {
          "guessedname": "parseData",
          "guessedtype": "function",
          "description": "Overridable method parses data of generic RESPONSE_TYPE into a response object.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oFullResponse",
              "type": "Object",
              "description": "  The full Array from the live database."
            }
          ],
          "return": {
            "type": "Object} Parsed response object with the following properties:<br>\n- results {Array} Array of parsed data results<br>\n- meta {Object} Object literal of meta values<br>\n- error {Boolean",
            "description": "(optional) True if there was an error<br>"
          }
        },
        "DataSourceBase.parseString": {
          "guessedname": "parseString",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oData",
              "type": "String | Number | Boolean | Date | Array | Object",
              "description": "  Data to parse.\nThe special values null and undefined will return null."
            }
          ],
          "description": "Converts data to type String.",
          "return": {
            "type": "String",
            "description": "A string, or null."
          }
        },
        "makeConnection": {
          "guessedname": "makeConnection",
          "guessedtype": "function",
          "description": "Overridable default method generates a unique transaction ID and passes \nthe live data reference directly to the  handleResponse function. This\nmethod should be implemented by subclasses to achieve more complex behavior\nor to access remote data.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  Callback object literal."
            },
            {
              "name": "oCaller",
              "type": "Object",
              "description": "  (deprecated) Use oCallback.scope."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Transaction ID."
          }
        },
        "parseXMLResult": {
          "guessedname": "parseXMLResult",
          "guessedtype": "function",
          "description": "Overridable method parses XML data for one result into an object literal.",
          "params": [
            {
              "name": "result",
              "type": "XML",
              "description": "  XML for one result."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Object literal of data for one result."
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the DataSource instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the DataSource instance."
          }
        },
        "parseTextData": {
          "guessedname": "parseTextData",
          "guessedtype": "function",
          "description": "Overridable method parses plain text data into a response object.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oFullResponse",
              "type": "Object",
              "description": "  The full text response from the live database."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Parsed response object with the following properties:<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"
          }
        },
        "clearAllIntervals": {
          "guessedname": "clearAllIntervals",
          "guessedtype": "function",
          "description": "Disables all known polling intervals."
        },
        "DataSourceBase.parseNumber": {
          "guessedname": "parseNumber",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oData",
              "type": "String | Number | Boolean",
              "description": "  Data to convert. Note, the following\nvalues return as null: null, undefined, NaN, \"\"."
            }
          ],
          "description": "Converts data to type Number.",
          "return": {
            "type": "Number",
            "description": "A number, or null."
          }
        },
        "isCacheHit": {
          "guessedname": "isCacheHit",
          "guessedtype": "function",
          "description": "Default overridable method matches given request to given cached request.\nReturns true if is a hit, returns false otherwise.  Implementers should\noverride this method to customize the cache-matching algorithm.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oCachedRequest",
              "type": "Object",
              "description": "  Cached request object."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "True if given request matches cached request, false otherwise."
          }
        },
        "parseXMLData": {
          "guessedname": "parseXMLData",
          "guessedtype": "function",
          "description": "Overridable method parses XML data into a response object.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oFullResponse",
              "type": "Object",
              "description": "  The full XML response from the live database."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Parsed response object with the following properties<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"
          }
        },
        "parseArrayData": {
          "guessedname": "parseArrayData",
          "guessedtype": "function",
          "description": "Overridable method parses Array data into a response object.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oFullResponse",
              "type": "Object",
              "description": "  The full Array from the live database."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Parsed response object with the following properties:<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"
          }
        },
        "doBeforeCallback": {
          "guessedname": "doBeforeCallback",
          "guessedtype": "function",
          "description": "Overridable method gives implementers access to the original full response and\nthe parsed response (parsed against the given schema) before the data\nis added to the cache (if applicable) and then sent back to callback function.\nThis is your chance to access the raw response and/or populate the parsed\nresponse with any custom data.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oFullResponse",
              "type": "Object",
              "description": "  The full response from the live database."
            },
            {
              "name": "oParsedResponse",
              "type": "Object",
              "description": "  The parsed response to return to calling object."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  The callback object."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Parsed response object."
          }
        },
        "parseHTMLTableData": {
          "guessedname": "parseHTMLTableData",
          "guessedtype": "function",
          "description": "Overridable method parses an HTML TABLE element reference into a response object.\nData is parsed out of TR elements from all TBODY elements.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oFullResponse",
              "type": "Object",
              "description": "  The full HTML element reference from the live database."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Parsed response object with the following properties<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"
          }
        },
        "setInterval": {
          "guessedname": "setInterval",
          "guessedtype": "function",
          "description": "Sets up a polling mechanism to send requests at set intervals and forward\nresponses to given callback.",
          "params": [
            {
              "name": "nMsec",
              "type": "Number",
              "description": "  Length of interval in milliseconds."
            },
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oCallback",
              "type": "Function",
              "description": "  Handler function to receive the response."
            },
            {
              "name": "oCaller",
              "type": "Object",
              "description": "  (deprecated) Use oCallback.scope."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Interval ID."
          }
        },
        "parseJSONData": {
          "guessedname": "parseJSONData",
          "guessedtype": "function",
          "description": "Overridable method parses JSON data into a response object.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oFullResponse",
              "type": "Object",
              "description": "  The full JSON from the live database."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Parsed response object with the following properties<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"
          }
        },
        "getCachedResponse": {
          "guessedname": "getCachedResponse",
          "guessedtype": "function",
          "description": "Overridable method passes request to cache and returns cached response if any,\nrefreshing the hit in the cache as the newest item. Returns null if there is\nno cache hit.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  Callback object."
            },
            {
              "name": "oCaller",
              "type": "Object",
              "description": "  (deprecated) Use callback object."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Cached response object or null."
          }
        },
        "issueCallback": {
          "guessedname": "issueCallback",
          "static": "",
          "guessedtype": "function",
          "description": "Executes a configured callback.  For object literal callbacks, the third\nparam determines whether to execute the success handler or failure handler.",
          "params": [
            {
              "name": "callback",
              "type": "Function|Object",
              "description": "  the callback to execute"
            },
            {
              "name": "params",
              "type": "Array",
              "description": "  params to be passed to the callback method"
            },
            {
              "name": "error",
              "type": "Boolean",
              "description": "  whether an error occurred"
            },
            {
              "name": "scope",
              "type": "Object",
              "description": "  the scope from which to execute the callback\n(deprecated - use an object literal callback)"
            }
          ]
        },
        "flushCache": {
          "guessedname": "flushCache",
          "guessedtype": "function",
          "description": "Flushes cache."
        },
        "_getLocationValue": {
          "guessedname": "_getLocationValue",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "field",
              "type": "String | Object",
              "description": "  Field definition."
            },
            {
              "name": "context",
              "type": "Object",
              "description": "  XML node or document to search within."
            }
          ],
          "description": "Get an XPath-specified value for a given field from an XML node or document.",
          "return": {
            "type": "Object",
            "description": "Data value or null."
          }
        },
        "DataSourceBase.parseDate": {
          "guessedname": "parseDate",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oData",
              "type": "Date | String | Number",
              "description": "  Data to convert."
            }
          ],
          "description": "Converts data to type Date.",
          "return": {
            "type": "Date",
            "description": "A Date instance."
          }
        },
        "clearInterval": {
          "guessedname": "clearInterval",
          "guessedtype": "function",
          "description": "Disables polling mechanism associated with the given interval ID.",
          "params": [
            {
              "name": "nId",
              "type": "Number",
              "description": "  Interval ID."
            }
          ]
        },
        "sendRequest": {
          "guessedname": "sendRequest",
          "guessedtype": "function",
          "description": "First looks for cached response, then sends request to live data. The\nfollowing arguments are passed to the callback function:\n<dl>\n<dt><code>oRequest</code></dt>\n<dd>The same value that was passed in as the first argument to sendRequest.</dd>\n<dt><code>oParsedResponse</code></dt>\n<dd>An object literal containing the following properties:\n<dl>\n<dt><code>tId</code></dt>\n<dd>Unique transaction ID number.</dd>\n<dt><code>results</code></dt>\n<dd>Schema-parsed data results.</dd>\n<dt><code>error</code></dt>\n<dd>True in cases of data error.</dd>\n<dt><code>cached</code></dt>\n<dd>True when response is returned from DataSource cache.</dd> \n<dt><code>meta</code></dt>\n<dd>Schema-parsed meta data.</dd>\n</dl>\n<dt><code>oPayload</code></dt>\n<dd>The same value as was passed in as <code>argument</code> in the oCallback object literal.</dd>\n</dl>",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>scope</code></dt>\n<dd>The object to serve as the scope for the success and failure handlers.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data that will be passed back to the success and failure handlers.</dd>\n</dl>"
            },
            {
              "name": "oCaller",
              "type": "Object",
              "description": "  (deprecated) Use oCallback.scope."
            }
          ],
          "return": {
            "type": "Number",
            "description": "Transaction ID, or null if response found in cache."
          }
        },
        "doBeforeParseData": {
          "guessedname": "doBeforeParseData",
          "guessedtype": "function",
          "description": "Overridable method gives implementers access to the original full response\nbefore the data gets parsed. Implementers should take care not to return an\nunparsable or otherwise invalid response.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oFullResponse",
              "type": "Object",
              "description": "  The full response from the live database."
            },
            {
              "name": "oCallback",
              "type": "Object",
              "description": "  The callback object."
            }
          ],
          "return": {
            "type": "Object",
            "description": "Full response for parsing."
          }
        },
        "addToCache": {
          "guessedname": "addToCache",
          "guessedtype": "function",
          "description": "Adds a new item to the cache. If cache is full, evicts the stalest item\nbefore adding the new item.",
          "params": [
            {
              "name": "oRequest",
              "type": "Object",
              "description": "  Request object."
            },
            {
              "name": "oResponse",
              "type": "Object",
              "description": "  Response object to cache."
            }
          ]
        }
      },
      "name": "YAHOO.util.DataSourceBase",
      "guessedname": "DataSourceBase",
      "module": "datasource",
      "namespace": "YAHOO.util",
      "events": {
        "requestEvent": {
          "description": "Fired when a request is sent to the live data source.",
          "params": [
            {
              "name": "oArgs.request",
              "type": "Object",
              "description": "  The request object."
            },
            {
              "name": "oArgs.callback",
              "type": "Object",
              "description": "  The callback object."
            },
            {
              "name": "oArgs.tId",
              "type": "Number",
              "description": "  Transaction ID."
            },
            {
              "name": "oArgs.caller",
              "type": "Object",
              "description": "  (deprecated) Use callback.scope."
            }
          ]
        },
        "cacheResponseEvent": {
          "description": "Fired when data is retrieved from the local cache.",
          "params": [
            {
              "name": "oArgs.request",
              "type": "Object",
              "description": "  The request object."
            },
            {
              "name": "oArgs.response",
              "type": "Object",
              "description": "  The response object."
            },
            {
              "name": "oArgs.callback",
              "type": "Object",
              "description": "  The callback object."
            },
            {
              "name": "oArgs.caller",
              "type": "Object",
              "description": "  (deprecated) Use callback.scope."
            }
          ]
        },
        "cacheRequestEvent": {
          "description": "Fired when a request is made to the local cache.",
          "params": [
            {
              "name": "oArgs.request",
              "type": "Object",
              "description": "  The request object."
            },
            {
              "name": "oArgs.callback",
              "type": "Object",
              "description": "  The callback object."
            },
            {
              "name": "oArgs.caller",
              "type": "Object",
              "description": "  (deprecated) Use callback.scope."
            }
          ]
        },
        "responseEvent": {
          "description": "Fired when live data source sends response.",
          "params": [
            {
              "name": "oArgs.request",
              "type": "Object",
              "description": "  The request object."
            },
            {
              "name": "oArgs.response",
              "type": "Object",
              "description": "  The raw response object."
            },
            {
              "name": "oArgs.callback",
              "type": "Object",
              "description": "  The callback object."
            },
            {
              "name": "oArgs.tId",
              "type": "Number",
              "description": "  Transaction ID."
            },
            {
              "name": "oArgs.caller",
              "type": "Object",
              "description": "  (deprecated) Use callback.scope."
            }
          ]
        },
        "cacheFlushEvent": {
          "description": "Fired when the local cache is flushed."
        },
        "dataErrorEvent": {
          "description": "Fired when an error is encountered with the live data source.",
          "params": [
            {
              "name": "oArgs.request",
              "type": "Object",
              "description": "  The request object."
            },
            {
              "name": "oArgs.response",
              "type": "String",
              "description": "  The response object (if available)."
            },
            {
              "name": "oArgs.callback",
              "type": "Object",
              "description": "  The callback object."
            },
            {
              "name": "oArgs.caller",
              "type": "Object",
              "description": "  (deprecated) Use callback.scope."
            },
            {
              "name": "oArgs.message",
              "type": "String",
              "description": "  The error message."
            }
          ]
        },
        "responseCacheEvent": {
          "description": "Fired when response is cached.",
          "params": [
            {
              "name": "oArgs.request",
              "type": "Object",
              "description": "  The request object."
            },
            {
              "name": "oArgs.response",
              "type": "Object",
              "description": "  The parsed response object."
            },
            {
              "name": "oArgs.callback",
              "type": "Object",
              "description": "  The callback object."
            },
            {
              "name": "oArgs.caller",
              "type": "Object",
              "description": "  (deprecated) Use callback.scope."
            }
          ]
        },
        "responseParseEvent": {
          "description": "Fired when response is parsed.",
          "params": [
            {
              "name": "oArgs.request",
              "type": "Object",
              "description": "  The request object."
            },
            {
              "name": "oArgs.response",
              "type": "Object",
              "description": "  The parsed response object."
            },
            {
              "name": "oArgs.callback",
              "type": "Object",
              "description": "  The callback object."
            },
            {
              "name": "oArgs.caller",
              "type": "Object",
              "description": "  (deprecated) Use callback.scope."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Base class for the YUI DataSource utility.",
          "params": [
            {
              "name": "oLiveData",
              "type": "HTMLElement",
              "description": "   Pointer to live data."
            },
            {
              "name": "oConfigs",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Base class for the YUI DataSource utility.",
      "file": "DataSource.js",
      "properties": {
        "TYPE_JSARRAY": {
          "final": "",
          "guessedname": "TYPE_JSARRAY",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is a JavaScript Array."
        },
        "liveData": {
          "guessedname": "liveData",
          "type": "Object",
          "guessedtype": "property",
          "description": "Pointer to live database."
        },
        "DataSourceBase._nIndex": {
          "guessedname": "_nIndex",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class variable to index multiple DataSource instances."
        },
        "_aIntervals": {
          "private": "",
          "guessedname": "_aIntervals",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of polling interval IDs that have been enabled, needed to clear all intervals."
        },
        "ERROR_DATANULL": {
          "final": "",
          "guessedname": "ERROR_DATANULL",
          "default": "\"Null data\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Error message for null data responses."
        },
        "_oQueue": {
          "private": "",
          "guessedname": "_oQueue",
          "type": "Object",
          "guessedtype": "property",
          "description": "Local queue of request connections, enabled if queue needs to be managed."
        },
        "parseJSONArgs": {
          "type": "{MIXED|Array} If an Array, contents are used as individual arguments.\nOtherwise, value is used as an additional argument.",
          "description": "Additional arguments passed to the JSON parse routine.  The JSON string\nis the assumed first argument (where applicable).  This property is not\nset by default, but the parse methods will use it if present."
        },
        "_aCache": {
          "private": "",
          "guessedname": "_aCache",
          "type": "Object[]",
          "guessedtype": "property",
          "description": "Local cache of data result object literals indexed chronologically."
        },
        "useXPath": {
          "guessedname": "useXPath",
          "default": "false",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "When working with XML data, setting this property to true enables support for\nXPath-syntaxed locators in schema definitions."
        },
        "responseSchema": {
          "guessedname": "responseSchema",
          "type": "Object",
          "guessedtype": "property",
          "description": "Response schema object literal takes a combination of the following properties:\n<dl>\n<dt>resultsList</dt> <dd>Pointer to array of tabular data</dd>\n<dt>resultNode</dt> <dd>Pointer to node name of row data (XML data only)</dd>\n<dt>recordDelim</dt> <dd>Record delimiter (text data only)</dd>\n<dt>fieldDelim</dt> <dd>Field delimiter (text data only)</dd>\n<dt>fields</dt> <dd>Array of field names (aka keys), or array of object literals\nsuch as: {key:\"fieldname\",parser:YAHOO.util.DataSourceBase.parseDate}</dd>\n<dt>metaFields</dt> <dd>Object literal of keys to include in the oParsedResponse.meta collection</dd>\n<dt>metaNode</dt> <dd>Name of the node under which to search for meta information in XML response data</dd>\n</dl>"
        },
        "ERROR_DATAINVALID": {
          "final": "",
          "guessedname": "ERROR_DATAINVALID",
          "default": "\"Invalid data\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Error message for invalid dataresponses."
        },
        "dataType": {
          "guessedname": "dataType",
          "default": "YAHOO.util.DataSourceBase.TYPE_UNKNOWN",
          "type": "Number",
          "guessedtype": "property",
          "description": "Where the live data is held:\n<dl>  \n<dt>TYPE_UNKNOWN</dt>\n<dt>TYPE_LOCAL</dt>\n<dt>TYPE_XHR</dt>\n<dt>TYPE_SCRIPTNODE</dt>\n<dt>TYPE_JSFUNCTION</dt>\n</dl>"
        },
        "TYPE_JSON": {
          "final": "",
          "guessedname": "TYPE_JSON",
          "default": "3",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is JSON."
        },
        "TYPE_LOCAL": {
          "final": "",
          "guessedname": "TYPE_LOCAL",
          "default": "8",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is local."
        },
        "TYPE_JSFUNCTION": {
          "final": "",
          "guessedname": "TYPE_JSFUNCTION",
          "default": "1",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is a JavaScript Function."
        },
        "responseType": {
          "guessedname": "responseType",
          "default": "YAHOO.util.DataSourceBase.TYPE_UNKNOWN",
          "type": "Number",
          "guessedtype": "property",
          "description": "Format of response:\n<dl>  \n<dt>TYPE_UNKNOWN</dt>\n<dt>TYPE_JSARRAY</dt>\n<dt>TYPE_JSON</dt>\n<dt>TYPE_XML</dt>\n<dt>TYPE_TEXT</dt>\n<dt>TYPE_HTMLTABLE</dt> \n</dl>"
        },
        "TYPE_XML": {
          "final": "",
          "guessedname": "TYPE_XML",
          "default": "4",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is XML."
        },
        "TYPE_UNKNOWN": {
          "final": "",
          "guessedname": "TYPE_UNKNOWN",
          "default": "-1",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is unknown."
        },
        "TYPE_XHR": {
          "final": "",
          "guessedname": "TYPE_XHR",
          "default": "2",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is hosted on a server via an XHR connection."
        },
        "DataSourceBase._nTransactionId": {
          "guessedname": "_nTransactionId",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class variable to assign unique transaction IDs."
        },
        "_sName": {
          "private": "",
          "guessedname": "_sName",
          "type": "String",
          "guessedtype": "property",
          "description": "Name of DataSource instance."
        },
        "TYPE_TEXT": {
          "final": "",
          "guessedname": "TYPE_TEXT",
          "default": "5",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is plain text."
        },
        "TYPE_SCRIPTNODE": {
          "final": "",
          "guessedname": "TYPE_SCRIPTNODE",
          "default": "7",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is hosted on a server via a dynamic script node."
        },
        "maxCacheEntries": {
          "guessedname": "maxCacheEntries",
          "default": "0",
          "type": "Number",
          "guessedtype": "property",
          "description": "Max size of the local cache.  Set to 0 to turn off caching.  Caching is\nuseful to reduce the number of server connections.  Recommended only for data\nsources that return comprehensive results for queries or when stale data is\nnot an issue."
        },
        "DataSource.Parser": {
          "guessedname": "Parser",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Data parsing functions."
        },
        "TYPE_HTMLTABLE": {
          "final": "",
          "guessedname": "TYPE_HTMLTABLE",
          "default": "6",
          "type": "Number",
          "guessedtype": "property",
          "description": "Type is an HTML TABLE element. Data is parsed out of TR elements from all TBODY elements."
        }
      }
    },
    "YAHOO.widget.ColumnSet": {
      "shortname": "ColumnSet",
      "methods": {
        "getDescendants": {
          "parem": "{YAHOO.widget.Column} Column instance.",
          "guessedname": "getDescendants",
          "guessedtype": "function",
          "description": "Public accessor returns array of given Column's desendants (if any), including itself.",
          "return": {
            "type": "Array",
            "description": "Array including the Column itself and all descendants (if any)."
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "ColumnSet instance name, for logging.",
          "return": {
            "type": "String",
            "description": "Unique name of the ColumnSet instance."
          }
        },
        "getColumn": {
          "guessedname": "getColumn",
          "guessedtype": "function",
          "description": "Returns Column instance with given key or ColumnSet key index.",
          "params": [
            {
              "name": "column",
              "type": "String | Number",
              "description": "  Column key or ColumnSet key index."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "Column instance."
          }
        },
        "getColumnById": {
          "guessedname": "getColumnById",
          "guessedtype": "function",
          "description": "Returns Column instance with given ID.",
          "params": [
            {
              "name": "column",
              "type": "String",
              "description": "  Column ID."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Column",
            "description": "Column instance."
          }
        },
        "getId": {
          "guessedname": "getId",
          "guessedtype": "function",
          "description": "Returns unique name of the ColumnSet instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the ColumnSet instance."
          }
        },
        "_init": {
          "private": "",
          "guessedname": "_init",
          "guessedtype": "function",
          "description": "Initializes ColumnSet instance with data from Column definitions.",
          "params": [
            {
              "name": "aDefinitions",
              "type": "Object[]",
              "description": "  Array of object literals that define cells in\nthe THEAD ."
            }
          ]
        },
        "getDefinitions": {
          "guessedname": "getDefinitions",
          "guessedtype": "function",
          "description": "Public accessor to the definitions array.",
          "return": {
            "type": "Object[]",
            "description": "Array of object literal Column definitions."
          }
        }
      },
      "name": "YAHOO.widget.ColumnSet",
      "guessedname": "ColumnSet",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The ColumnSet class defines and manages a DataTable's Columns,\nincluding nested hierarchies and access to individual Column instances.",
          "params": [
            {
              "name": "aDefinitions",
              "type": "Object[]",
              "description": "  Array of object literals that define cells in\nthe THEAD."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The ColumnSet class defines and manages a DataTable's Columns,\nincluding nested hierarchies and access to individual Column instances.",
      "file": "ColumnSet.js",
      "properties": {
        "keys": {
          "guessedname": "keys",
          "default": "[]",
          "type": "YAHOO.widget.Column[]",
          "guessedtype": "property",
          "description": "Array of Columns that map one-to-one to a table column."
        },
        "_sId": {
          "private": "",
          "guessedname": "_sId",
          "type": "String",
          "guessedtype": "property",
          "description": "Unique instance name."
        },
        "flat": {
          "guessedname": "flat",
          "default": "[]",
          "type": "YAHOO.widget.Column[]",
          "guessedtype": "property",
          "description": "Flattened representation of all Columns."
        },
        "headers": {
          "guessedname": "headers",
          "default": "[]",
          "type": "String[]",
          "guessedtype": "property",
          "description": "ID index of nested parent hierarchies for HEADERS accessibility attribute."
        },
        "ColumnSet._nCount": {
          "guessedname": "_nCount",
          "private": "",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal class variable to index multiple ColumnSet instances."
        },
        "tree": {
          "guessedname": "tree",
          "type": "YAHOO.widget.Column[]",
          "guessedtype": "property",
          "description": "Top-down tree representation of Column hierarchy."
        },
        "_aDefinitions": {
          "private": "",
          "guessedname": "_aDefinitions",
          "type": "Object[]",
          "guessedtype": "property",
          "description": "Array of object literal Column definitions passed to the constructor."
        }
      },
      "uses": [
        "YAHOO.util.EventProvider"
      ]
    },
    "YAHOO.widget.ContextMenuItem": {
      "shortname": "ContextMenuItem",
      "superclass": "YAHOO.widget.MenuItem",
      "name": "YAHOO.widget.ContextMenuItem",
      "extends": "YAHOO.widget.MenuItem",
      "guessedname": "ContextMenuItem",
      "module": "menu",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "Creates an item for a context menu.",
          "params": [
            {
              "name": "p_oObject",
              "type": "String",
              "description": " String specifying the text of the context menu item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>",
              "description": " Object specifying the \n<code>&#60;li&#62;</code> element of the context menu item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>",
              "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the context \nmenu item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>",
              "description": " Object specifying \nthe <code>&#60;option&#62;</code> element of the context menu item."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the context menu item. See configuration class \ndocumentation for more details."
            }
          ]
        }
      ],
      "guessedtype": "property",
      "description": "Creates an item for a context menu.",
      "file": "contextmenuitem.js",
      "deprecated": "As of version 2.4.0 items for YAHOO.widget.ContextMenu instances\nare of type YAHOO.widget.MenuItem."
    },
    "YAHOO.widget.MenuBarItem": {
      "shortname": "MenuBarItem",
      "superclass": "YAHOO.widget.MenuItem",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the menu bar item.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The MenuBarItem class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.",
          "params": [
            {
              "name": "p_oObject",
              "type": "String",
              "description": " String specifying the text of the menu bar item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>",
              "description": " Object specifying the \n<code>&#60;li&#62;</code> element of the menu bar item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>",
              "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the menu bar item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>",
              "description": " Object specifying \nthe <code>&#60;option&#62;</code> element of the menu bar item."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the menu bar item. See configuration class documentation \nfor more details."
            }
          ]
        }
      },
      "name": "YAHOO.widget.MenuBarItem",
      "extends": "YAHOO.widget.MenuItem",
      "guessedname": "MenuBarItem",
      "module": "menu",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "Creates an item for a menu bar.",
          "params": [
            {
              "name": "p_oObject",
              "type": "String",
              "description": " String specifying the text of the menu bar item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-74680021\">HTMLLIElement</a>",
              "description": " Object specifying the \n<code>&#60;li&#62;</code> element of the menu bar item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-38450247\">HTMLOptGroupElement</a>",
              "description": " Object \nspecifying the <code>&#60;optgroup&#62;</code> element of the menu bar item."
            },
            {
              "name": "p_oObject",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-70901257\">HTMLOptionElement</a>",
              "description": " Object specifying \nthe <code>&#60;option&#62;</code> element of the menu bar item."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the menu bar item. See configuration class documentation \nfor more details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Creates an item for a menu bar.",
      "file": "menubaritem.js",
      "properties": {
        "CSS_CLASS_NAME": {
          "final": "",
          "guessedname": "CSS_CLASS_NAME",
          "default": "\"yuimenubaritem\"",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the CSS class(es) to be applied to the \n<code>&#60;li&#62;</code> element of the menu bar item."
        },
        "CSS_LABEL_CLASS_NAME": {
          "final": "",
          "guessedname": "CSS_LABEL_CLASS_NAME",
          "default": "\"yuimenubaritemlabel\"",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the CSS class(es) to be applied to the \nmenu bar item's <code>&#60;a&#62;</code> element."
        }
      }
    },
    "YAHOO.widget.TVFadeOut": {
      "shortname": "TVFadeOut",
      "methods": {
        "onComplete": {
          "guessedname": "onComplete",
          "guessedtype": "function",
          "description": "Clean up and invoke callback"
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "toString",
          "return": {
            "type": "string",
            "description": "the string representation of the instance"
          }
        },
        "animate": {
          "guessedname": "animate",
          "guessedtype": "function",
          "description": "Performs the animation"
        }
      },
      "name": "YAHOO.widget.TVFadeOut",
      "guessedname": "TVFadeOut",
      "module": "treeview",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "A 1/2 second fade out animation.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  the element to animate"
            },
            {
              "name": "callback",
              "type": "Function",
              "description": "  function to invoke when the animation is finished"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A 1/2 second fade out animation.",
      "file": "TVFadeOut.js",
      "properties": {
        "callback": {
          "guessedname": "callback",
          "type": "function",
          "guessedtype": "property",
          "description": "the callback to invoke when the animation is complete"
        },
        "el": {
          "guessedname": "el",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The element to animate"
        }
      }
    },
    "LogWriter": {
      "shortname": "LogWriter",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Public accessor to the unique name of the LogWriter instance.",
          "return": {
            "type": "String",
            "description": "Unique name of the LogWriter instance."
          }
        },
        "log": {
          "guessedname": "log",
          "guessedtype": "function",
          "description": "Logs a message attached to the source of the LogWriter.",
          "params": [
            {
              "name": "sMsg",
              "type": "String",
              "description": "  The log message."
            },
            {
              "name": "sCategory",
              "type": "String",
              "description": "  Category name."
            }
          ]
        },
        "getSource": {
          "guessedname": "getSource",
          "guessedtype": "function",
          "description": "Public accessor to get the source name.",
          "return": {
            "type": "String",
            "description": "The LogWriter source."
          }
        },
        "setSource": {
          "guessedname": "setSource",
          "guessedtype": "function",
          "description": "Public accessor to set the source name.",
          "params": [
            {
              "name": "sSource",
              "type": "String",
              "description": "  Source of LogWriter instance."
            }
          ]
        }
      },
      "name": "LogWriter",
      "guessedname": "LogWriter",
      "module": "logger",
      "namespace": "",
      "constructors": [
        {
          "description": "The LogWriter class provides a mechanism to log messages through\nYAHOO.widget.Logger from a named source.",
          "params": [
            {
              "name": "sSource",
              "type": "String",
              "description": "  Source of LogWriter instance."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The LogWriter class provides a mechanism to log messages through\nYAHOO.widget.Logger from a named source.",
      "file": "LogWriter.js",
      "properties": {
        "_source": {
          "private": "",
          "guessedname": "_source",
          "type": "String",
          "guessedtype": "property",
          "description": "Source of the LogWriter instance."
        }
      }
    },
    "YAHOO.util.YUILoader": {
      "shortname": "YUILoader",
      "methods": {
        "formatSkin": {
          "guessedname": "formatSkin",
          "guessedtype": "function",
          "description": "Returns the skin module name for the specified skin name.  If a\nmodule name is supplied, the returned skin module name is \nspecific to the module passed in.",
          "params": [
            {
              "name": "skin",
              "type": "string",
              "description": "  the name of the skin"
            },
            {
              "name": "mod",
              "type": "string",
              "description": "  optional: the name of a module to skin"
            }
          ],
          "return": {
            "type": "string",
            "description": "the full skin module name"
          }
        },
        "_filter": {
          "private": "",
          "guessedname": "_filter",
          "guessedtype": "function",
          "description": "Applies filter\nmethod _filter",
          "return": {
            "type": "string",
            "description": "the filtered string"
          }
        },
        "onFailure": {
          "guessedname": "onFailure",
          "type": "function",
          "guessedtype": "property",
          "description": "Callback that will be executed if there is a failure"
        },
        "_url": {
          "guessedname": "_url",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "  the path fragment"
            }
          ],
          "description": "Generates the full url for a module\nmethod _url",
          "return": {
            "type": "string",
            "description": "the full url"
          }
        },
        "_rollup": {
          "guessedname": "_rollup",
          "private": "",
          "guessedtype": "function",
          "description": "Look for rollup packages to determine if all of the modules a\nrollup supersedes are required.  If so, include the rollup to\nhelp reduce the total number of connections required.  Called\nby calculate()"
        },
        "onTimeout": {
          "guessedname": "onTimeout",
          "type": "function",
          "guessedtype": "property",
          "description": "Callback that will be executed if a timeout occurs"
        },
        "insert": {
          "guessedname": "insert",
          "guessedtype": "function",
          "description": "inserts the requested modules and their dependencies.  \n<code>type</code> can be \"js\" or \"css\".  Both script and \ncss are inserted if type is not provided.",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " optional options object"
            },
            {
              "name": "type",
              "type": "string",
              "description": "  the type of dependency to insert"
            }
          ]
        },
        "onProgress": {
          "guessedname": "onProgress",
          "type": "function",
          "guessedtype": "property",
          "description": "Callback that will be executed each time a new module is loaded"
        },
        "onSuccess": {
          "guessedname": "onSuccess",
          "type": "function",
          "guessedtype": "property",
          "description": "Callback that will be executed when the loader is finished\nwith an insert"
        },
        "addModule": {
          "guessedname": "addModule",
          "guessedtype": "function",
          "description": "Add a new module to the component metadata.         \n<dl>\n<dt>name:</dt>       <dd>required, the component name</dd>\n<dt>type:</dt>       <dd>required, the component type (js or css)</dd>\n<dt>path:</dt>       <dd>required, the path to the script from \"base\"</dd>\n<dt>requires:</dt>   <dd>array of modules required by this component</dd>\n<dt>optional:</dt>   <dd>array of optional modules for this component</dd>\n<dt>supersedes:</dt> <dd>array of the modules this component replaces</dd>\n<dt>after:</dt>      <dd>array of modules the components which, if present, should be sorted above this one</dd>\n<dt>rollup:</dt>     <dd>the number of superseded modules required for automatic rollup</dd>\n<dt>fullpath:</dt>   <dd>If fullpath is specified, this is used instead of the configured base + path</dd>\n<dt>skinnable:</dt>  <dd>flag to determine if skin assets should automatically be pulled in</dd>\n</dl>",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " An object containing the module data"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "true if the module was added, false if \nthe object passed in did not provide all required attributes"
          }
        },
        "_explode": {
          "guessedname": "_explode",
          "private": "",
          "guessedtype": "function",
          "description": "Inspects the required modules list looking for additional \ndependencies.  Expands the required list to include all \nrequired modules.  Called by calculate()"
        },
        "calculate": {
          "guessedname": "calculate",
          "guessedtype": "function",
          "description": "Calculates the dependency tree, the result is stored in the sorted \nproperty",
          "params": [
            {
              "name": "o",
              "type": "",
              "description": " optional options object"
            }
          ]
        },
        "sandbox": {
          "guessedname": "sandbox",
          "guessedtype": "function",
          "description": "Interns the script for the requested modules.  The callback is\nprovided a reference to the sandboxed YAHOO object.  This only\napplies to the script: css can not be sandboxed; css will be\nloaded into the page normally if specified.",
          "params": [
            {
              "name": "callback",
              "type": "Function",
              "description": "  the callback to exectued when the load is\ncomplete."
            }
          ]
        },
        "require": {
          "guessedname": "require",
          "guessedtype": "function",
          "description": "Add a requirement for one or more module",
          "params": [
            {
              "name": "what",
              "type": "string[] | string*",
              "description": "  the modules to load"
            }
          ]
        },
        "loadNext": {
          "guessedname": "loadNext",
          "guessedtype": "function",
          "description": "Executed every time a module is loaded, and if we are in a load\ncycle, we attempt to load the next script.  Public so that it\nis possible to call this if using a method other than\nYAHOO.register to determine when scripts are fully loaded",
          "params": [
            {
              "name": "mname",
              "type": "string",
              "description": "  optional the name of the module that has\nbeen loaded (which is usually why it is time to load the next\none)"
            }
          ]
        },
        "parseSkin": {
          "guessedname": "parseSkin",
          "guessedtype": "function",
          "description": "Reverses <code>formatSkin</code>, providing the skin name and\nmodule name if the string matches the pattern for skins.",
          "params": [
            {
              "name": "mod",
              "type": "string",
              "description": "  the module name to parse"
            }
          ],
          "return": {
            "type": "skin: string, module: string",
            "description": "the parsed skin name \nand module name, or null if the supplied string does not match\nthe skin pattern"
          }
        },
        "_reduce": {
          "guessedname": "_reduce",
          "private": "",
          "guessedtype": "function",
          "description": "Remove superceded modules and loaded modules.  Called by\ncalculate() after we have the mega list of all dependencies"
        },
        "getRequires": {
          "guessedname": "getRequires",
          "guessedtype": "function",
          "description": "Returns an object containing properties for all modules required\nin order to load the requested module",
          "params": [
            {
              "name": "mod",
              "type": "",
              "description": " The module definition from moduleInfo"
            }
          ]
        },
        "_sort": {
          "guessedname": "_sort",
          "private": "",
          "guessedtype": "function",
          "description": "Sorts the dependency tree.  The last step of calculate()"
        },
        "_addSkin": {
          "guessedname": "_addSkin",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "skin",
              "type": "string",
              "description": "  the name of the skin"
            },
            {
              "name": "mod",
              "type": "string",
              "description": "  the name of the module"
            }
          ],
          "description": "Adds the skin def to the module info",
          "return": {
            "type": "string",
            "description": "the module name for the skin"
          }
        },
        "_pushEvents": {
          "private": "",
          "guessedname": "_pushEvents",
          "guessedtype": "function",
          "description": "In IE, the onAvailable/onDOMReady events need help when Event is\nloaded dynamically",
          "params": [
            {
              "name": "optional",
              "type": "Function",
              "description": " function reference"
            }
          ]
        },
        "_setup": {
          "guessedname": "_setup",
          "private": "",
          "guessedtype": "function",
          "description": "Investigates the current YUI configuration on the page.  By default,\nmodules already detected will not be loaded again unless a force\noption is encountered.  Called by calculate()"
        },
        "getProvides": {
          "guessedname": "getProvides",
          "guessedtype": "function",
          "description": "Returns an object literal of the modules the supplied module satisfies",
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": " The name of the module"
            },
            {
              "name": "notMe",
              "type": "string",
              "description": "  don't add this module name, only include superseded modules"
            }
          ],
          "return": {
            "type": "",
            "description": "what this module provides"
          }
        }
      },
      "name": "YAHOO.util.YUILoader",
      "module": "yuiloader",
      "namespace": "YAHOO.util",
      "description": "YUILoader provides dynamic loading for YUI.",
      "todo": "version management, automatic sandboxing",
      "file": "yuiloader.js",
      "properties": {
        "dirty": {
          "guessedname": "dirty",
          "default": "true",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag to indicate the dependency tree needs to be recomputed\nif insert is called again."
        },
        "required": {
          "guessedname": "required",
          "type": "{string: boolean}",
          "guessedtype": "property",
          "description": "The list of requested modules"
        },
        "comboBase": {
          "guessedname": "comboBase",
          "default": "http://yui.yahooapis.com/combo?",
          "type": "string",
          "guessedtype": "property",
          "description": "Base path for the combo service"
        },
        "scope": {
          "guessedname": "scope",
          "default": "this",
          "guessedtype": "property",
          "description": "The execution scope for all callbacks"
        },
        "combine": {
          "default": "false",
          "type": "boolean",
          "description": "If configured, YUI will use the the combo handler on the\nYahoo! CDN to pontentially reduce the number of http requests\nrequired."
        },
        "data": {
          "guessedname": "data",
          "guessedtype": "property",
          "description": "Data that is passed to all callbacks"
        },
        "force": {
          "guessedname": "force",
          "type": "string[]",
          "guessedtype": "property",
          "description": "A list of modules that should always be loaded, even\nif they have already been inserted into the page."
        },
        "timeout": {
          "guessedname": "timeout",
          "type": "int",
          "guessedtype": "property",
          "description": "Timeout value in milliseconds.  If set, this value will be used by\nthe get utility.  the timeout event will fire if\na timeout occurs."
        },
        "_useYahooListener": {
          "guessedname": "_useYahooListener",
          "private": "",
          "guessedtype": "property",
          "description": "Use the YAHOO environment listener to detect script load.  This\nis only switched on for Safari 2.x and below."
        },
        "allowRollup": {
          "guessedname": "allowRollup",
          "default": "true",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Should we allow rollups"
        },
        "rollups": {
          "guessedname": "rollups",
          "guessedtype": "property",
          "description": "List of rollup files found in the library metadata"
        },
        "insertBefore": {
          "guessedname": "insertBefore",
          "type": "string|HTMLElement",
          "guessedtype": "property",
          "description": "Node reference or id where new nodes should be inserted before"
        },
        "filter": {
          "guessedname": "filter",
          "type": "string|{searchExp: string, replaceStr: string}",
          "guessedtype": "property",
          "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).\n</dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n</pre>"
        },
        "inserted": {
          "guessedname": "inserted",
          "type": "{string: boolean}",
          "guessedtype": "property",
          "description": "List of modules inserted by the utility"
        },
        "_internalCallback": {
          "guessedname": "_internalCallback",
          "private": "",
          "guessedtype": "property",
          "description": "Internal callback to handle multiple internal insert() calls\nso that css is inserted prior to js"
        },
        "root": {
          "guessedname": "root",
          "default": "[YUI VERSION]/build/",
          "type": "string",
          "guessedtype": "property",
          "description": "Root path to prepend to module path for the combo\nservice"
        },
        "moduleInfo": {
          "guessedname": "moduleInfo",
          "guessedtype": "property",
          "description": "The library metadata"
        },
        "charset": {
          "guessedname": "charset",
          "default": "utf-8",
          "type": "string",
          "guessedtype": "property",
          "description": "The charset attribute for inserted nodes"
        },
        "loaded": {
          "propery": "loaded",
          "guessedname": "loaded",
          "type": "{string: boolean}",
          "guessedtype": "property",
          "description": "Set when beginning to compute the dependency tree. \nComposed of what YAHOO reports to be loaded combined\nwith what has been loaded by the tool"
        },
        "skin": {
          "guessedname": "self",
          "guessedtype": "property",
          "description": "Provides the information used to skin the skinnable components.\nThe following skin definition would result in 'skin1' and 'skin2'\nbeing loaded for calendar (if calendar was requested), and\n'sam' for all other skinnable components:\n<code>\nskin: {\n// The default skin, which is automatically applied if not\n// overriden by a component-specific skin definition.\n// Change this in to apply a different skin globally\ndefaultSkin: 'sam', \n// This is combined with the loader base property to get\n// the default root directory for a skin. ex:\n// http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/\nbase: 'assets/skins/',\n// The name of the rollup css file for the skin\npath: 'skin.css',\n// The number of skinnable components requested that are\n// required before using the rollup file rather than the\n// individual component css files\nrollup: 3,\n// Any component-specific overrides can be specified here,\n// making it possible to load different skins for different\n// components.  It is possible to load more than one skin\n// for a given component as well.\noverrides: {\ncalendar: ['skin1', 'skin2']\n}\n}\n</code>"
        },
        "ignore": {
          "guessedname": "ignore",
          "type": "string[]",
          "guessedtype": "property",
          "description": "A list of modules that should not be loaded, even if\nthey turn up in the dependency tree"
        },
        "sorted": {
          "guessedname": "sorted",
          "type": "string[]",
          "guessedtype": "property",
          "description": "All of the derived dependencies in sorted order, which\nwill be populated when either calculate() or insert()\nis called"
        },
        "varName": {
          "guessedname": "Name",
          "type": "string",
          "guessedtype": "property",
          "description": "The name of the variable in a sandbox or script node \n(for external script support in Safari 2.x and earlier)\nto reference when the load is complete.  If this variable \nis not available in the specified scripts, the operation will \nfail."
        },
        "base": {
          "guessedname": "base",
          "default": "http://yui.yahooapis.com/[YUI VERSION]/build/",
          "type": "string",
          "guessedtype": "property",
          "description": "The base directory."
        },
        "loadOptional": {
          "guessedname": "loadOptional",
          "default": "false",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Whether or not to load optional dependencies for \nthe requested modules"
        }
      }
    },
    "YAHOO.util.DDProxy": {
      "shortname": "DDProxy",
      "superclass": "YAHOO.util.DD",
      "methods": {
        "_resizeProxy": {
          "guessedname": "_resizeProxy",
          "private": "",
          "guessedtype": "function",
          "description": "The proxy is automatically resized to the dimensions of the linked\nelement when a drag is initiated, unless resizeFrame is set to false"
        },
        "showFrame": {
          "private": "",
          "guessedname": "showFrame",
          "guessedtype": "function",
          "description": "Resizes the drag frame to the dimensions of the clicked object, positions \nit over the object, and finally displays it",
          "params": [
            {
              "name": "iPageX",
              "type": "int",
              "description": " X click position"
            },
            {
              "name": "iPageY",
              "type": "int",
              "description": " Y click position"
            }
          ]
        },
        "initFrame": {
          "guessedname": "initFrame",
          "guessedtype": "function",
          "description": "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses"
        },
        "createFrame": {
          "guessedname": "createFrame",
          "guessedtype": "function",
          "description": "Creates the proxy element if it does not yet exist"
        }
      },
      "name": "YAHOO.util.DDProxy",
      "extends": "YAHOO.util.DD",
      "guessedname": "DDProxy",
      "module": "dragdrop",
      "namespace": "YAHOO.util",
      "events": {
        "b4DragOverEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragOverEvent."
        },
        "endDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires on the mouseup event after a drag has been initiated (startDrag fired)."
        },
        "b4DragOutEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragOutEvent"
        },
        "b4StartDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the startDragEvent, returning false will cancel the startDrag Event."
        },
        "b4EndDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the endDragEvent. Returning false will cancel."
        },
        "dragOutEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires when a dragged object is no longer over an object that had the onDragEnter fire."
        },
        "dragDropEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires when the dragged objects is dropped on another."
        },
        "dragEnterEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Occurs when the dragged object first interacts with another targettable drag and drop object."
        },
        "mouseUpEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fired from inside DragDropMgr when the drag operation is finished."
        },
        "dragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Occurs every mousemove event while dragging."
        },
        "b4MouseDownEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Provides access to the mousedown event, before the mouseDownEvent gets fired. Returning false will cancel the drag."
        },
        "startDragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Occurs after a mouse down and the drag threshold has been met. The drag threshold default is either 3 pixels of mouse movement or 1 full second of holding the mousedown."
        },
        "invalidDropEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires when the dragged objects is dropped in a location that contains no drop targets."
        },
        "b4DragEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragEvent."
        },
        "b4DragDropEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires before the dragDropEvent"
        },
        "dragOverEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Fires every mousemove event while over a drag and drop object."
        },
        "mouseDownEvent": {
          "type": "YAHOO.util.CustomEvent See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "description": "Provides access to the mousedown event. The mousedown does not always result in a drag operation."
        }
      },
      "constructors": [
        {
          "description": "A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.\nReferences to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id of the linked html element"
            },
            {
              "name": "sGroup",
              "type": "String",
              "description": " the group of related DragDrop objects"
            },
            {
              "name": "config",
              "type": "object",
              "description": " an object containing configurable attributes\nValid properties for DDProxy in addition to those in DragDrop: \nresizeFrame, centerFrame, dragElId"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.\nReferences to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage.",
      "file": "DDProxy.js",
      "properties": {
        "centerFrame": {
          "guessedname": "centerFrame",
          "type": "boolean",
          "guessedtype": "property",
          "description": "By default the frame is positioned exactly where the drag element is, so\nwe use the cursor offset provided by YAHOO.util.DD.  Another option that works only if\nyou do not have constraints on the obj is to have the drag frame centered\naround the cursor.  Set centerFrame to true for this effect."
        },
        "YAHOO.util.DDProxy.dragElId": {
          "guessedname": "dragElId",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "The default drag frame div id"
        },
        "resizeFrame": {
          "guessedname": "resizeFrame",
          "type": "boolean",
          "guessedtype": "property",
          "description": "By default we resize the drag frame to be the same size as the element\nwe want to drag (this is to get the frame effect).  We can turn it off\nif we want a different behavior."
        }
      }
    },
    "YAHOO.widget.StackedBarChart": {
      "shortname": "StackedBarChart",
      "name": "YAHOO.widget.StackedBarChart",
      "guessedname": "StackedBarChart",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "StackedBarChart class for the YUI Charts widget.",
          "params": [
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "dataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "attributes",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "StackedBarChart class for the YUI Charts widget.",
      "file": "ChartTypes.js",
      "uses": [
        "YAHOO.widget.CartesianChart"
      ]
    },
    "YAHOO.widget.Paginator.ui.PreviousPageLink": {
      "shortname": "PreviousPageLink",
      "methods": {
        "onClick": {
          "guessedname": "onClick",
          "guessedtype": "function",
          "description": "Listener for the link's onclick event.  Passes to setPage method.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": "  The click event"
            }
          ]
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Generate the nodes and return the appropriate node given the current\npagination state.",
          "params": [
            {
              "name": "id_base",
              "type": "string",
              "description": "  used to create unique ids for generated nodes"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the link/span node and clears event listeners"
        },
        "init": {
          "guessedname": "init",
          "static": "",
          "guessedtype": "function",
          "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.",
          "params": [
            {
              "name": "p",
              "type": "Paginator",
              "description": "  Paginator instance to decorate"
            }
          ]
        },
        "update": {
          "guessedname": "update",
          "guessedtype": "function",
          "description": "Swap the link and span nodes if appropriate.",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  The calling change event"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Paginator.ui.PreviousPageLink",
      "guessedname": "PreviousPageLink",
      "module": "paginator",
      "namespace": "YAHOO.widget.Paginator.ui",
      "events": {
        "previousPageLinkClassChange": {
          "name": "previousPageLinkClassChange",
          "description": "Fires when the value for the configuration attribute 'previousPageLinkClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePreviousPageLinkClassChange": {
          "name": "beforePreviousPageLinkClassChange",
          "description": "Fires before the value for the configuration attribute 'previousPageLinkClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "previousPageLinkLabelChange": {
          "name": "previousPageLinkLabelChange",
          "description": "Fires when the value for the configuration attribute 'previousPageLinkLabel' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePreviousPageLinkLabelChange": {
          "name": "beforePreviousPageLinkLabelChange",
          "description": "Fires before the value for the configuration attribute 'previousPageLinkLabel' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "ui Component to generate the link to jump to the previous page.",
          "params": [
            {
              "name": "p",
              "type": "Pagintor",
              "description": "  Paginator instance to attach to"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ui Component to generate the link to jump to the previous page.",
      "configs": {
        "previousPageLinkLabel": {
          "default": "'&lt; prev'",
          "description": "Used as innerHTML for the previous page link/span."
        },
        "previousPageLinkClass": {
          "default": "'yui-pg-previous'",
          "description": "CSS class assigned to the link/span"
        }
      },
      "file": "PreviousPageLink.js",
      "innerClasses": [
        "YAHOO.widget.Paginator"
      ],
      "for": "YAHOO.widget.Paginator",
      "properties": {
        "current": {
          "private": "",
          "guessedname": "current",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Currently placed HTMLElement node"
        },
        "link": {
          "private": "",
          "guessedname": "link",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Link node"
        },
        "span": {
          "private": "",
          "guessedname": "span",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Span node (inactive link)"
        }
      }
    },
    "YAHOO.widget.RadioCellEditor": {
      "shortname": "RadioCellEditor",
      "superclass": "YAHOO.widget.BaseCellEditor",
      "methods": {
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Sets focus in RadioCellEditor."
        },
        "getInputValue": {
          "guessedname": "getInputValue",
          "guessedtype": "function",
          "description": "Retrieves input value from RadioCellEditor."
        },
        "handleDisabledBtns": {
          "guessedname": "handleDisabledBtns",
          "guessedtype": "function",
          "description": "After rendering form, if disabledBtns is set to true, then sets up a mechanism\nto save input without them."
        },
        "resetForm": {
          "guessedname": "resetForm",
          "guessedtype": "function",
          "description": "Resets RadioCellEditor UI to initial state."
        },
        "renderForm": {
          "guessedname": "renderForm",
          "guessedtype": "function",
          "description": "Render a form with input(s) type=radio."
        }
      },
      "name": "YAHOO.widget.RadioCellEditor",
      "extends": "YAHOO.widget.BaseCellEditor",
      "guessedname": "RadioCellEditor",
      "module": "datatable",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "The RadioCellEditor class provides functionality for inline editing\nDataTable cell data with radio buttons.",
          "params": [
            {
              "name": "oConfigs",
              "type": "Object",
              "description": "  (Optional) Object literal of configs."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The RadioCellEditor class provides functionality for inline editing\nDataTable cell data with radio buttons.",
      "file": "CellEditor.js",
      "properties": {
        "radioOptions": {
          "guessedname": "radioOptions",
          "type": "String[] | Object[]",
          "guessedtype": "property",
          "description": "Array of radio values. Can either be a simple array (e.g., [\"yes\",\"no\",\"maybe\"])\nor a an array of objects (e.g., [{label:\"yes\", value:1}, {label:\"no\", value:-1},\n{label:\"maybe\", value:0}])."
        },
        "radios": {
          "guessedname": "radios",
          "type": "HTMLElement[]",
          "guessedtype": "property",
          "description": "Reference to radio elements."
        }
      }
    },
    "YAHOO.util.ImageLoader.group": {
      "shortname": "group",
      "methods": {
        "_onloadTasks": {
          "guessedname": "_onloadTasks",
          "private": "",
          "guessedtype": "function",
          "description": "Setup to do in the window's onload\nInitiates time limit for group; executes the fold check for the images"
        },
        "_foldCheck": {
          "guessedname": "_foldCheck",
          "private": "",
          "guessedtype": "function",
          "description": "Checks the position of each image in the group. If any part of the image is within the client viewport, shows the image immediately."
        },
        "addTrigger": {
          "guessedname": "addTrigger",
          "guessedtype": "function",
          "description": "Adds a trigger to the group. Call this with the same style as YAHOO.util.Event.addListener",
          "params": [
            {
              "name": "trigEl",
              "type": "String|HTMLElement",
              "description": "  The HTML element id or reference to assign the trigger event to"
            },
            {
              "name": "trigAct",
              "type": "String",
              "description": " The type of event to assign to trigEl"
            }
          ]
        },
        "registerPngBgImage": {
          "guessedname": "registerPngBgImage",
          "guessedtype": "function",
          "description": "Registers an alpha-channel-type png background image with the group",
          "params": [
            {
              "name": "domId",
              "type": "String",
              "description": "\tHTML DOM id of the image element"
            },
            {
              "name": "url",
              "type": "String",
              "description": "\tURL for the image"
            },
            {
              "name": "ailProps",
              "type": "Object",
              "description": " The AlphaImageLoader properties to be set for the image\nValid properties are 'sizingMethod' and 'enabled'"
            }
          ],
          "return": {
            "type": "Object",
            "description": "pngBgImgObj that was registered, for modifying any attributes in the object"
          }
        },
        "_fetchByClass": {
          "guessedname": "_fetchByClass",
          "private": "",
          "guessedtype": "function",
          "description": "Finds all elements in the Dom with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching"
        },
        "fetch": {
          "guessedname": "fetch",
          "guessedtype": "function",
          "description": "Displays the images in the group"
        },
        "registerSrcImage": {
          "guessedname": "registerSrcImage",
          "guessedtype": "function",
          "description": "Registers a src image with the group",
          "params": [
            {
              "name": "domId",
              "type": "String",
              "description": "\tHTML DOM id of the image element"
            },
            {
              "name": "url",
              "type": "String",
              "description": "\tURL for the image"
            },
            {
              "name": "width",
              "type": "Int",
              "description": "\tpixel width of the image - defaults to image's natural size"
            },
            {
              "name": "height",
              "type": "Int",
              "description": "\tpixel height of the image - defaults to image's natural size"
            }
          ],
          "return": {
            "type": "Object",
            "description": "srcImgObj that was registered, for modifying any attributes in the object"
          }
        },
        "_getFetchTimeout": {
          "private": "",
          "guessedname": "_getFetchTimeout",
          "guessedtype": "function",
          "description": "Returns the group's fetch method, with the proper closure, for use with setTimeout",
          "return": {
            "type": "Function",
            "description": "group's fetch method"
          }
        },
        "addCustomTrigger": {
          "guessedname": "addCustomTrigger",
          "guessedtype": "function",
          "description": "Adds a custom event trigger to the group.",
          "params": [
            {
              "name": "event",
              "type": "Object",
              "description": " A YAHOO.util.CustomEvent object"
            }
          ]
        },
        "registerBgImage": {
          "guessedname": "registerBgImage",
          "guessedtype": "function",
          "description": "Registers a background image with the group",
          "params": [
            {
              "name": "domId",
              "type": "String",
              "description": "\tHTML DOM id of the image element"
            },
            {
              "name": "url",
              "type": "String",
              "description": "\tURL for the image"
            }
          ],
          "return": {
            "type": "Object",
            "description": "bgImgObj that was registered, for modifying any attributes in the object"
          }
        }
      },
      "name": "YAHOO.util.ImageLoader.group",
      "guessedname": "group",
      "module": "imageloader",
      "namespace": "YAHOO.util.ImageLoader",
      "requires": "YAHOO.util.Dom",
      "constructors": [
        {
          "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.",
          "params": [
            {
              "name": "trigEl",
              "type": "String|HTMLElement",
              "description": "\tThe HTML element id or reference to assign the trigger event to. Can be null for no trigger"
            },
            {
              "name": "trigAct",
              "type": "String",
              "description": " The type of event to assign to trigEl. Can be null for no trigger"
            },
            {
              "name": "timeout",
              "type": "Number",
              "description": "\tTimeout (time limit) length, in seconds. Can be undefined, or <= 0, for no time limit"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.",
      "file": "ImageLoader.js",
      "properties": {
        "_customTriggers": {
          "private": "",
          "guessedname": "_customTriggers",
          "type": "Array",
          "guessedtype": "property",
          "description": "Collection of custom-event triggers for this group.\nKeeps track of each trigger's event object and event-listener-callback \"fetch\" function"
        },
        "timeoutLen": {
          "guessedname": "timeoutLen",
          "type": "Number",
          "guessedtype": "property",
          "description": "Timeout (time limit) length, in seconds"
        },
        "name": {
          "guessedname": "name",
          "type": "String",
          "guessedtype": "property",
          "description": "Name for the group. Only used to identify the group in logging statements"
        },
        "_classImageEls": {
          "private": "",
          "guessedname": "_classImageEls",
          "type": "Array",
          "guessedtype": "property",
          "description": "HTML elements having the class name that is associated with this group\nElements are stored during the _foldCheck function and reused later during the fetch function. Gives a slight performance improvement when className and foldConditional are both used"
        },
        "_timeout": {
          "private": "",
          "guessedname": "_timeout",
          "type": "Object",
          "guessedtype": "property",
          "description": "Timeout object to keep a handle on the time limit"
        },
        "_imgObjs": {
          "private": "",
          "guessedname": "_imgObjs",
          "type": "Object",
          "guessedtype": "property",
          "description": "Collection of images registered with this group"
        },
        "className": {
          "guessedname": "className",
          "type": "String",
          "guessedtype": "property",
          "description": "Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.\nThis class should have, in its CSS style definition, \"background:none !important;\""
        },
        "foldConditional": {
          "guessedname": "foldConditional",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to check if images are above the fold. If foldConditional is true, the group will check each of its image locations at page load. If any part of the image is within the client viewport, the image is displayed immediately"
        },
        "_triggers": {
          "private": "",
          "guessedname": "_triggers",
          "type": "Array",
          "guessedtype": "property",
          "description": "Collection of triggers for this group.\nKeeps track of each trigger's element, event, and event-listener-callback \"fetch\" function"
        }
      }
    },
    "YAHOO.widget.Series": {
      "shortname": "Series",
      "name": "YAHOO.widget.Series",
      "guessedname": "Series",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "Functionality common to most series. Generally, a <code>Series</code> \nobject shouldn't be instantiated directly. Instead, a subclass with a \nconcrete implementation should be used."
        }
      ],
      "guessedtype": "function",
      "description": "Functionality common to most series. Generally, a <code>Series</code> \nobject shouldn't be instantiated directly. Instead, a subclass with a \nconcrete implementation should be used.",
      "file": "Series.js",
      "properties": {
        "displayName": {
          "guessedname": "displayName",
          "type": "String",
          "guessedtype": "property",
          "description": "The human-readable name of the series."
        },
        "type": {
          "guessedname": "type",
          "type": "String",
          "guessedtype": "property",
          "description": "The type of series."
        }
      }
    },
    "YAHOO.widget.SimpleDialog": {
      "shortname": "SimpleDialog",
      "superclass": "YAHOO.widget.Dialog",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representation of the object.",
          "return": {
            "type": "String",
            "description": "The string representation of the SimpleDialog"
          }
        },
        "configText": {
          "guessedname": "configText",
          "guessedtype": "function",
          "description": "Fired when the \"text\" property is set.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The SimpleDialog initialization method, which is executed for \nSimpleDialog and all of its subclasses. This method is automatically \ncalled by the constructor, and  sets up all DOM references for \npre-existing markup, and creates required markup if it is not \nalready present.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the SimpleDialog \n<em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the SimpleDialog"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal \ncontaining the configuration that should be set for this \nSimpleDialog. See configuration documentation for more details."
            }
          ]
        },
        "configIcon": {
          "guessedname": "configIcon",
          "guessedtype": "function",
          "description": "Fired when the \"icon\" property is set.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The CustomEvent type (usually the property name)"
            },
            {
              "name": "args",
              "type": "Object[]",
              "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."
            }
          ]
        },
        "setBody": {
          "description": "<p>\nSets the SimpleDialog's body content to the HTML specified. \nIf no body is present, one will be automatically created. \nAn empty string can be passed to the method to clear the contents of the body.\n</p>\n<p><strong>NOTE:</strong> SimpleDialog provides the <a href=\"#config_text\">text</a>\nand <a href=\"#config_icon\">icon</a> configuration properties to set the contents\nof it's body element in accordance with the UI design for a SimpleDialog (an \nicon and message text). Calling setBody on the SimpleDialog will not enforce this \nUI design constraint and will replace the entire contents of the SimpleDialog body. \nIt should only be used if you wish the replace the default icon/text body structure \nof a SimpleDialog with your own custom markup.</p>",
          "params": [
            {
              "name": "bodyContent",
              "type": "String",
              "description": " The HTML used to set the body. \nAs a convenience, non HTMLElement objects can also be passed into \nthe method, and will be treated as strings, with the body innerHTML\nset to their default toString implementations.\n<em>OR</em>"
            },
            {
              "name": "bodyContent",
              "type": "HTMLElement",
              "description": " The HTMLElement to add as the first and only child of the body element.\n<em>OR</em>"
            },
            {
              "name": "bodyContent",
              "type": "DocumentFragment",
              "description": " The document fragment \ncontaining elements which are to be added to the body"
            }
          ]
        },
        "registerForm": {
          "guessedname": "registerForm",
          "guessedtype": "function",
          "description": "Prepares the SimpleDialog's internal FORM object, creating one if one \nis not currently present, and adding the value hidden field."
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the class's configurable properties which can be changed \nusing the SimpleDialog's Config object (cfg)."
        }
      },
      "name": "YAHOO.widget.SimpleDialog",
      "extends": "YAHOO.widget.Dialog",
      "guessedname": "SimpleDialog",
      "module": "container",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "SimpleDialog is a simple implementation of Dialog that can be used to \nsubmit a single value. Forms can be processed in 3 ways -- via an \nasynchronous Connection utility call, a simple form POST or GET, \nor manually.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": " The element ID representing the SimpleDialog \n<em>OR</em>"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element representing the SimpleDialog"
            },
            {
              "name": "userConfig",
              "type": "Object",
              "description": " The configuration object literal containing \nthe configuration that should be set for this SimpleDialog. See \nconfiguration documentation for more details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "SimpleDialog is a simple implementation of Dialog that can be used to \nsubmit a single value. Forms can be processed in 3 ways -- via an \nasynchronous Connection utility call, a simple form POST or GET, \nor manually.",
      "file": "SimpleDialog.js",
      "configs": {
        "text": {
          "default": "\"\"",
          "type": "String",
          "description": "Sets the text for the SimpleDialog"
        },
        "icon": {
          "default": "\"none\"",
          "type": "String",
          "description": "Sets the informational icon for the SimpleDialog"
        }
      },
      "properties": {
        "YAHOO.widget.SimpleDialog.ICON_WARN": {
          "final": "",
          "guessedname": "ICON_WARN",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant for the standard network icon for warn"
        },
        "DEFAULT_CONFIG": {
          "final": "",
          "guessedname": "DEFAULT_CONFIG",
          "private": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Constant representing the SimpleDialog's configuration properties"
        },
        "YAHOO.widget.SimpleDialog.ICON_TIP": {
          "final": "",
          "guessedname": "ICON_TIP",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant for the standard network icon for a tip"
        },
        "YAHOO.widget.SimpleDialog.ICON_CSS_CLASSNAME": {
          "final": "",
          "guessedname": "ICON_CSS_CLASSNAME",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the name of the CSS class applied to the element \ncreated by the \"icon\" configuration property."
        },
        "YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG": {
          "final": "",
          "guessedname": "CSS_SIMPLEDIALOG",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant representing the default CSS class used for a SimpleDialog"
        },
        "YAHOO.widget.SimpleDialog.ICON_HELP": {
          "final": "",
          "guessedname": "ICON_HELP",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant for the standard network icon for help"
        },
        "YAHOO.widget.SimpleDialog.ICON_ALARM": {
          "final": "",
          "guessedname": "ICON_ALARM",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant for the standard network icon for alarm"
        },
        "YAHOO.widget.SimpleDialog.ICON_BLOCK": {
          "final": "",
          "guessedname": "ICON_BLOCK",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant for the standard network icon for a blocking action"
        },
        "YAHOO.widget.SimpleDialog.ICON_INFO": {
          "final": "",
          "guessedname": "ICON_INFO",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant for the standard network icon for info"
        }
      }
    },
    "YAHOO.util.Element": {
      "shortname": "Element",
      "methods": {
        "removeClass": {
          "guessedname": "removeClass",
          "guessedtype": "function",
          "description": "Wrapper for Dom method.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " The className to remove"
            }
          ]
        },
        "getElementsByClassName": {
          "guessedname": "getElementsByClassName",
          "guessedtype": "function",
          "description": "Wrapper for Dom method.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " The className to collect"
            },
            {
              "name": "tag",
              "type": "String",
              "description": " (optional) The tag to use in\nconjunction with class name"
            }
          ],
          "return": {
            "type": "Array",
            "description": "Array of HTMLElements"
          }
        },
        "removeDelegate": {
          "guessedname": "removeDelegate",
          "guessedtype": "function",
          "description": "Remove a delegated event listener",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The name of the event to listen for"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The function call when the event fires"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "Returns true if the unbind was successful, false \notherwise."
          }
        },
        "hasClass": {
          "guessedname": "hasClass",
          "guessedtype": "function",
          "description": "Wrapper for Dom method.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " The className to add"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "Whether or not the element has the class name"
          }
        },
        "getElementsByTagName": {
          "guessedname": "getElementsByTagName",
          "guessedtype": "function",
          "description": "Wrapper for HTMLElement method.",
          "params": [
            {
              "name": "tag",
              "type": "String",
              "description": " The tagName to collect"
            }
          ],
          "return": {
            "type": "HTMLCollection",
            "description": "A collection of DOM elements."
          }
        },
        "_setHTMLAttrConfig": {
          "private": "",
          "guessedname": "_setHTMLAttrConfig",
          "guessedtype": "function",
          "description": "Sets the value of the property and fires beforeChange and change events.",
          "params": [
            {
              "name": "element",
              "type": "YAHOO.util.Element",
              "description": " The Element instance to\nregister the config to."
            },
            {
              "name": "key",
              "type": "String",
              "description": " The name of the config to register"
            },
            {
              "name": "map",
              "type": "Object",
              "description": " A key-value map of the config's params"
            }
          ]
        },
        "addClass": {
          "guessedname": "addClass",
          "guessedtype": "function",
          "description": "Wrapper for Dom method.",
          "params": [
            {
              "name": "className",
              "type": "String",
              "description": " The className to add"
            }
          ]
        },
        "getStyle": {
          "guessedname": "getStyle",
          "guessedtype": "function",
          "description": "Wrapper for Dom method.",
          "params": [
            {
              "name": "property",
              "type": "String",
              "description": " The style property to retrieve"
            }
          ],
          "return": {
            "type": "String",
            "description": "The current value of the property"
          }
        },
        "removeChild": {
          "guessedname": "removeChild",
          "guessedtype": "function",
          "description": "Wrapper for HTMLElement method.",
          "params": [
            {
              "name": "child",
              "type": "HTMLElement",
              "description": " The HTMLElement to remove"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "The removed DOM element."
          }
        },
        "removeListener": {
          "guessedname": "removeListener",
          "guessedtype": "function",
          "description": "Remove an event listener",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The name of the event to listen for"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The function call when the event fires"
            }
          ]
        },
        "insertBefore": {
          "guessedname": "insertBefore",
          "guessedtype": "function",
          "description": "Wrapper for HTMLElement method.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": " The HTMLElement to insert"
            },
            {
              "name": "before",
              "type": "HTMLElement",
              "description": " The HTMLElement to insert\nthe element before."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "The inserted DOM element."
          }
        },
        "setStyle": {
          "guessedname": "setStyle",
          "guessedtype": "function",
          "description": "Wrapper for Dom method.",
          "params": [
            {
              "name": "property",
              "type": "String",
              "description": " The style property to set"
            },
            {
              "name": "value",
              "type": "String",
              "description": " The value to apply to the style property"
            }
          ]
        },
        "appendChild": {
          "guessedname": "appendChild",
          "guessedtype": "function",
          "description": "Wrapper for HTMLElement method.",
          "params": [
            {
              "name": "child",
              "type": "YAHOO.util.Element || HTMLElement",
              "description": " The element to append."
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "The appended DOM element."
          }
        },
        "fireQueue": {
          "guessedname": "fireQueue",
          "guessedtype": "function",
          "description": "Apply any queued set calls."
        },
        "hasChildNodes": {
          "guessedname": "hasChildNodes",
          "guessedtype": "function",
          "description": "Wrapper for HTMLElement method.",
          "return": {
            "type": "Boolean",
            "description": "Whether or not the element has childNodes"
          }
        },
        "delegate": {
          "guessedname": "delegate",
          "guessedtype": "function",
          "description": "Appends a delegated event listener.  Delegated event listeners \nreceive two arguments by default: the DOM event and the element  \nspecified by the filtering function or CSS selector.\n(Note: Using the delegate method requires the element-delegate \nmodule.  Using CSS selectors as the filtering criteria for delegated \nevent listeners requires inclusion of the Selector Utility.)",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The name of the event to listen for"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The handler to call when the event fires"
            },
            {
              "name": "filter",
              "type": "Function|string",
              "description": " Function or CSS selector used to \ndetermine for what element(s) the event listener should be called. \nWhen a function is specified, the function should return an \nHTML element.  Using a CSS Selector requires the inclusion of the \nCSS Selector Utility."
            },
            {
              "name": "obj",
              "type": "Any",
              "description": " A variable to pass to the handler"
            },
            {
              "name": "scope",
              "type": "Object",
              "description": " The object to use for the scope of the handler"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "Returns true if the delegated event listener \nwas added successfully"
          }
        },
        "replaceChild": {
          "guessedname": "replaceChild",
          "guessedtype": "function",
          "description": "Wrapper for HTMLElement method.",
          "params": [
            {
              "name": "newNode",
              "type": "HTMLElement",
              "description": " The HTMLElement to insert"
            },
            {
              "name": "oldNode",
              "type": "HTMLElement",
              "description": " The HTMLElement to replace"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "The replaced DOM element."
          }
        },
        "replaceClass": {
          "guessedname": "replaceClass",
          "guessedtype": "function",
          "description": "Wrapper for Dom method.",
          "params": [
            {
              "name": "oldClassName",
              "type": "String",
              "description": " The className to replace"
            },
            {
              "name": "newClassName",
              "type": "String",
              "description": " The className to add"
            }
          ]
        },
        "subscribe": {
          "guessedname": "subscribe",
          "guessedtype": "function",
          "description": "Alias for addListener",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The name of the event to listen for"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The function call when the event fires"
            },
            {
              "name": "obj",
              "type": "Any",
              "description": " A variable to pass to the handler"
            },
            {
              "name": "scope",
              "type": "Object",
              "description": " The object to use for the scope of the handler"
            }
          ]
        },
        "on": {
          "guessedname": "on",
          "guessedtype": "function",
          "description": "Alias for addListener",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The name of the event to listen for"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The function call when the event fires"
            },
            {
              "name": "obj",
              "type": "Any",
              "description": " A variable to pass to the handler"
            },
            {
              "name": "scope",
              "type": "Object",
              "description": " The object to use for the scope of the handler"
            }
          ]
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Registers Element specific attributes.",
          "params": [
            {
              "name": "map",
              "type": "Object",
              "description": " A key-value map of initial attribute configs"
            }
          ]
        },
        "addListener": {
          "guessedname": "addListener",
          "guessedtype": "function",
          "description": "Adds a listener for the given event.  These may be DOM or \ncustomEvent listeners.  Any event that is fired via fireEvent\ncan be listened for.  All handlers receive an event object.",
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": " The name of the event to listen for"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": " The handler to call when the event fires"
            },
            {
              "name": "obj",
              "type": "Any",
              "description": " A variable to pass to the handler"
            },
            {
              "name": "scope",
              "type": "Object",
              "description": " The object to use for the scope of the handler"
            }
          ]
        },
        "appendTo": {
          "guessedname": "appendTo",
          "guessedtype": "function",
          "description": "Appends the HTMLElement into either the supplied parentNode.",
          "params": [
            {
              "name": "parentNode",
              "type": "HTMLElement | Element",
              "description": " The node to append to"
            },
            {
              "name": "before",
              "type": "HTMLElement | Element",
              "description": " An optional node to insert before"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "The appended DOM element."
          }
        }
      },
      "name": "YAHOO.util.Element",
      "guessedname": "Element",
      "module": "element",
      "namespace": "YAHOO.util",
      "events": {
        "beforeAppendTo": {
          "description": "Fires before the Element is appended to another Element.\n<p>See: <a href=\"#addListener\">Element.addListener</a></p>\n<p><strong>Event fields:</strong><br>\n<code>&lt;String&gt; type</code> beforeAppendTo<br>\n<code>&lt;HTMLElement/Element&gt;\ntarget</code> the HTMLElement/Element being appended to \n<p><strong>Usage:</strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('beforeAppendTo', handler);</code></p>"
        },
        "beforeElementChange": {
          "name": "beforeElementChange",
          "description": "Fires before the value for the configuration attribute 'element' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "available": {
          "description": "Fires when the Element's HTMLElement can be retrieved by Id.\n<p>See: <a href=\"#addListener\">Element.addListener</a></p>\n<p><strong>Event fields:</strong><br>\n<code>&lt;String&gt; type</code> available<br>\n<code>&lt;HTMLElement&gt;\ntarget</code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:</strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('available', handler);</code></p>"
        },
        "elementChange": {
          "name": "elementChange",
          "description": "Fires when the value for the configuration attribute 'element' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "appendTo": {
          "description": "Fires after the Element is appended to another Element.\n<p>See: <a href=\"#addListener\">Element.addListener</a></p>\n<p><strong>Event fields:</strong><br>\n<code>&lt;String&gt; type</code> appendTo<br>\n<code>&lt;HTMLElement/Element&gt;\ntarget</code> the HTMLElement/Element being appended to \n<p><strong>Usage:</strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('appendTo', handler);</code></p>"
        },
        "contentReady": {
          "description": "Fires when the Element's HTMLElement subtree is rendered.\n<p>See: <a href=\"#addListener\">Element.addListener</a></p>\n<p><strong>Event fields:</strong><br>\n<code>&lt;String&gt; type</code> contentReady<br>\n<code>&lt;HTMLElement&gt;\ntarget</code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:</strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('contentReady', handler);</code></p>"
        }
      },
      "constructors": [
        {
          "description": "Element provides an wrapper object to simplify adding\nevent listeners, using dom methods, and managing attributes.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement | String",
              "description": "  The html element that \nrepresents the Element."
            },
            {
              "name": "map",
              "type": "Object",
              "description": " A key-value map of initial config names and values"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Element provides an wrapper object to simplify adding\nevent listeners, using dom methods, and managing attributes.",
      "file": "Element.js",
      "configs": {
        "element": {
          "type": "HTMLElement",
          "description": "The HTMLElement the Element instance refers to."
        }
      },
      "properties": {
        "DOM_EVENTS": {
          "guessedname": "DOM_EVENTS",
          "type": "Object",
          "guessedtype": "property",
          "description": "Dom events supported by the Element instance."
        }
      },
      "uses": [
        "YAHOO.util.AttributeProvider"
      ]
    },
    "YAHOO.widget.LayoutUnit": {
      "shortname": "LayoutUnit",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "toggle": {
          "guessedname": "toggle",
          "guessedtype": "function",
          "description": "Toggles the Unit, replacing it with a clipped version.",
          "return": {
            "type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>",
            "description": "The LayoutUnit instance"
          }
        },
        "_createHeader": {
          "private": "",
          "guessedname": "_createHeader",
          "guessedtype": "function",
          "description": "Creates the HTMLElement for the header",
          "return": {
            "type": "HTMLElement",
            "description": "The new HTMLElement"
          }
        },
        "loadContent": {
          "guessedname": "loadContent",
          "guessedtype": "function",
          "description": "Loading the content of the unit using the connection manager",
          "return": {
            "type": "object",
            "description": "YUI Connection Manager handler"
          }
        },
        "_setWidth": {
          "guessedname": "_setWidth",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The HTMLElement to have it's width set"
            },
            {
              "name": "w",
              "type": "Number",
              "description": " The width that you want it the element set to"
            }
          ],
          "description": "Sets the width of the element based on the border size of the element.",
          "return": {
            "type": "Number",
            "description": "The new width, fixed for borders and IE QuirksMode"
          }
        },
        "_setHeight": {
          "guessedname": "_setHeight",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The HTMLElement to have it's height set"
            },
            {
              "name": "h",
              "type": "Number",
              "description": " The height that you want it the element set to"
            }
          ],
          "description": "Sets the height of the element based on the border size of the element.",
          "return": {
            "type": "Number",
            "description": "The new height, fixed for borders and IE QuirksMode"
          }
        },
        "_getBoxSize": {
          "guessedname": "_getBoxSize",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The HTMLElement to get the size of"
            }
          ],
          "description": "Get's the elements clientHeight and clientWidth plus the size of the borders",
          "return": {
            "type": "Array",
            "description": "An array of height and width"
          }
        },
        "resize": {
          "guessedname": "resize",
          "guessedtype": "function",
          "description": "Resize either the unit or it's clipped state, also updating the box inside",
          "params": [
            {
              "name": "force",
              "type": "Boolean",
              "description": " This will force full calculations even when the unit is collapsed"
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>",
            "description": "The LayoutUnit instance"
          }
        },
        "close": {
          "guessedname": "close",
          "guessedtype": "function",
          "description": "Close the unit, removing it from the parent Layout.",
          "return": {
            "type": "<a href=\"YAHOO.widget.Layout.html\">YAHOO.widget.Layout</a>",
            "description": "The parent Layout instance"
          }
        },
        "_createClip": {
          "guessedname": "_createClip",
          "private": "",
          "guessedtype": "function",
          "description": "Create the clip element used when the Unit is collapsed"
        },
        "_fixQuirks": {
          "guessedname": "_fixQuirks",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The HTMLElement to set the dimension on"
            },
            {
              "name": "dim",
              "type": "Number",
              "description": " The number of the dimension to fix"
            },
            {
              "name": "side",
              "type": "String",
              "description": " The dimension (h or w) to fix. Defaults to h"
            }
          ],
          "description": "Fixes the box calculations for IE in QuirksMode",
          "return": {
            "type": "Number",
            "description": "The fixed dimension"
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the LayoutUnit.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "expand": {
          "guessedname": "expand",
          "guessedtype": "function",
          "description": "Expand the Unit if it is collapsed.",
          "return": {
            "type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>",
            "description": "The LayoutUnit instance"
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes this unit from the parent and cleans up after itself.",
          "params": [
            {
              "name": "force",
              "type": "Boolean",
              "description": " Don't report to the parent, because we are being called from the parent."
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.Layout.html\">YAHOO.widget.Layout</a>",
            "description": "The parent Layout instance"
          }
        },
        "getSizes": {
          "guessedname": "getSizes",
          "guessedtype": "function",
          "description": "Get a reference to the internal sizes object for this unit",
          "return": {
            "type": "Object",
            "description": "An object of the sizes used for calculations"
          }
        },
        "_cleanGrids": {
          "guessedname": "_cleanGrids",
          "private": "",
          "guessedtype": "function",
          "description": "This method attempts to clean up the first level of the YUI CSS Grids, YAHOO.util.Selector is required for this operation."
        },
        "_toggleClip": {
          "guessedname": "_toggleClip",
          "private": "",
          "guessedtype": "function",
          "description": "Toggle th current state of the Clip element and set it's height, width and position"
        },
        "collapse": {
          "guessedname": "collapse",
          "guessedtype": "function",
          "description": "Collapse the Unit if it is not collapsed.",
          "return": {
            "type": "<a href=\"YAHOO.widget.LayoutUnit.html\">YAHOO.widget.LayoutUnit</a>",
            "description": "The LayoutUnit instance"
          }
        },
        "getLayoutUnitById": {
          "guessedname": "getLayoutUnitById",
          "static": "",
          "guessedtype": "function",
          "description": "Get's a layout unit object by the HTML id of the element associated with the Layout Unit object.",
          "return": {
            "type": "Object",
            "description": "The Layout Object"
          }
        },
        "_getBorderSizes": {
          "guessedname": "_getBorderSizes",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element to get the border size of"
            }
          ],
          "description": "Get the CSS border size of the element passed.",
          "return": {
            "type": "Array",
            "description": "An array of the top, right, bottom, left borders."
          }
        },
        "init": {
          "guessedname": "init",
          "private": "",
          "guessedtype": "function",
          "description": "The initalization method inherited from Element."
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "private": "",
          "guessedtype": "function",
          "description": "Processes the config"
        }
      },
      "name": "YAHOO.widget.LayoutUnit",
      "extends": "YAHOO.util.Element",
      "guessedname": "LayoutUnit",
      "module": "layout",
      "namespace": "YAHOO.widget",
      "events": {
        "beforeDurationChange": {
          "name": "beforeDurationChange",
          "description": "Fires before the value for the configuration attribute 'duration' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeEasingChange": {
          "name": "beforeEasingChange",
          "description": "Fires before the value for the configuration attribute 'easing' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLeftChange": {
          "name": "beforeLeftChange",
          "description": "Fires before the value for the configuration attribute 'left' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHoverChange": {
          "name": "beforeHoverChange",
          "description": "Fires before the value for the configuration attribute 'hover' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "dataLoadedChange": {
          "name": "dataLoadedChange",
          "description": "Fires when the value for the configuration attribute 'dataLoaded' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "collapseChange": {
          "name": "collapseChange",
          "description": "Fires when the value for the configuration attribute 'collapse' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDataTimeoutChange": {
          "name": "beforeDataTimeoutChange",
          "description": "Fires before the value for the configuration attribute 'dataTimeout' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeExpand": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired before the unit is exanded. If you return false, the collapse is cancelled."
        },
        "leftChange": {
          "name": "leftChange",
          "description": "Fires when the value for the configuration attribute 'left' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCloseChange": {
          "name": "beforeCloseChange",
          "description": "Fires before the value for the configuration attribute 'close' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeBodyChange": {
          "name": "beforeBodyChange",
          "description": "Fires before the value for the configuration attribute 'body' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDataLoadedChange": {
          "name": "beforeDataLoadedChange",
          "description": "Fires before the value for the configuration attribute 'dataLoaded' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "resize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when this.resize is called"
        },
        "dataSrcChange": {
          "name": "dataSrcChange",
          "description": "Fires when the value for the configuration attribute 'dataSrc' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "load": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when data is loaded via the dataSrc config."
        },
        "beforeCollapseSizeChange": {
          "name": "beforeCollapseSizeChange",
          "description": "Fires before the value for the configuration attribute 'collapseSize' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "gridsChange": {
          "name": "gridsChange",
          "description": "Fires when the value for the configuration attribute 'grids' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "widthChange": {
          "name": "widthChange",
          "description": "Fires when the value for the configuration attribute 'width' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "bodyChange": {
          "name": "bodyChange",
          "description": "Fires when the value for the configuration attribute 'body' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "headerChange": {
          "name": "headerChange",
          "description": "Fires when the value for the configuration attribute 'header' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "maxHeightChange": {
          "name": "maxHeightChange",
          "description": "Fires when the value for the configuration attribute 'maxHeight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHeightChange": {
          "name": "beforeHeightChange",
          "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "collapseSizeChange": {
          "name": "collapseSizeChange",
          "description": "Fires when the value for the configuration attribute 'collapseSize' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeGridsChange": {
          "name": "beforeGridsChange",
          "description": "Fires before the value for the configuration attribute 'grids' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "scrollChange": {
          "name": "scrollChange",
          "description": "Fires when the value for the configuration attribute 'scroll' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "durationChange": {
          "name": "durationChange",
          "description": "Fires when the value for the configuration attribute 'duration' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePositionChange": {
          "name": "beforePositionChange",
          "description": "Fires before the value for the configuration attribute 'position' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "endResize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when the Resize Utility fires it's endResize Event."
        },
        "beforeWidthChange": {
          "name": "beforeWidthChange",
          "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "minHeightChange": {
          "name": "minHeightChange",
          "description": "Fires when the value for the configuration attribute 'minHeight' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "useShimChange": {
          "name": "useShimChange",
          "description": "Fires when the value for the configuration attribute 'useShim' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "heightChange": {
          "name": "heightChange",
          "description": "Fires when the value for the configuration attribute 'height' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeResizeChange": {
          "name": "beforeResizeChange",
          "description": "Fires before the value for the configuration attribute 'resize' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "positionChange": {
          "name": "positionChange",
          "description": "Fires when the value for the configuration attribute 'position' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeFooterChange": {
          "name": "beforeFooterChange",
          "description": "Fires before the value for the configuration attribute 'footer' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "footerChange": {
          "name": "footerChange",
          "description": "Fires when the value for the configuration attribute 'footer' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCollapse": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired before the unit is collapsed. If you return false, the collapse is cancelled."
        },
        "easingChange": {
          "name": "easingChange",
          "description": "Fires when the value for the configuration attribute 'easing' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "animateChange": {
          "name": "animateChange",
          "description": "Fires when the value for the configuration attribute 'animate' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMaxWidthChange": {
          "name": "beforeMaxWidthChange",
          "description": "Fires before the value for the configuration attribute 'maxWidth' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "topChange": {
          "name": "topChange",
          "description": "Fires when the value for the configuration attribute 'top' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTopChange": {
          "name": "beforeTopChange",
          "description": "Fires before the value for the configuration attribute 'top' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeWrapChange": {
          "name": "beforeWrapChange",
          "description": "Fires before the value for the configuration attribute 'wrap' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "close": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when the unit is closed"
        },
        "beforeResize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired at the beginning of the resize method. If you return false, the resize is cancelled."
        },
        "wrapChange": {
          "name": "wrapChange",
          "description": "Fires when the value for the configuration attribute 'wrap' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "resizeChange": {
          "name": "resizeChange",
          "description": "Fires when the value for the configuration attribute 'resize' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "closeChange": {
          "name": "closeChange",
          "description": "Fires when the value for the configuration attribute 'close' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "maxWidthChange": {
          "name": "maxWidthChange",
          "description": "Fires when the value for the configuration attribute 'maxWidth' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "collapse": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when the unit is collapsed"
        },
        "expand": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when the unit is exanded"
        },
        "proxyChange": {
          "name": "proxyChange",
          "description": "Fires when the value for the configuration attribute 'proxy' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "zIndexChange": {
          "name": "zIndexChange",
          "description": "Fires when the value for the configuration attribute 'zIndex' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeGutterChange": {
          "name": "beforeGutterChange",
          "description": "Fires before the value for the configuration attribute 'gutter' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "contentChange": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when the content in the header, body or footer is changed via the API"
        },
        "startResize": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when the Resize Utility fires it's startResize Event."
        },
        "gutterChange": {
          "name": "gutterChange",
          "description": "Fires when the value for the configuration attribute 'gutter' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeZIndexChange": {
          "name": "beforeZIndexChange",
          "description": "Fires before the value for the configuration attribute 'zIndex' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeUseShimChange": {
          "name": "beforeUseShimChange",
          "description": "Fires before the value for the configuration attribute 'useShim' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHeaderChange": {
          "name": "beforeHeaderChange",
          "description": "Fires before the value for the configuration attribute 'header' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMinWidthChange": {
          "name": "beforeMinWidthChange",
          "description": "Fires before the value for the configuration attribute 'minWidth' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "loadMethodChange": {
          "name": "loadMethodChange",
          "description": "Fires when the value for the configuration attribute 'loadMethod' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "dataTimeoutChange": {
          "name": "dataTimeoutChange",
          "description": "Fires when the value for the configuration attribute 'dataTimeout' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeScrollChange": {
          "name": "beforeScrollChange",
          "description": "Fires before the value for the configuration attribute 'scroll' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "loadError": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fired when an error occurs loading data via the dataSrc config. Error message is passed as argument to this event."
        },
        "beforeAnimateChange": {
          "name": "beforeAnimateChange",
          "description": "Fires before the value for the configuration attribute 'animate' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMaxHeightChange": {
          "name": "beforeMaxHeightChange",
          "description": "Fires before the value for the configuration attribute 'maxHeight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeProxyChange": {
          "name": "beforeProxyChange",
          "description": "Fires before the value for the configuration attribute 'proxy' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "parentChange": {
          "name": "parentChange",
          "description": "Fires when the value for the configuration attribute 'parent' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLoadMethodChange": {
          "name": "beforeLoadMethodChange",
          "description": "Fires before the value for the configuration attribute 'loadMethod' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeMinHeightChange": {
          "name": "beforeMinHeightChange",
          "description": "Fires before the value for the configuration attribute 'minHeight' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCollapseChange": {
          "name": "beforeCollapseChange",
          "description": "Fires before the value for the configuration attribute 'collapse' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeParentChange": {
          "name": "beforeParentChange",
          "description": "Fires before the value for the configuration attribute 'parent' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "minWidthChange": {
          "name": "minWidthChange",
          "description": "Fires when the value for the configuration attribute 'minWidth' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "hoverChange": {
          "name": "hoverChange",
          "description": "Fires when the value for the configuration attribute 'hover' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDataSrcChange": {
          "name": "beforeDataSrcChange",
          "description": "Fires before the value for the configuration attribute 'dataSrc' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "<p>Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.</p>",
          "params": [
            {
              "name": "el",
              "type": "String/HTMLElement",
              "description": " The element to make a unit."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": " Object liternal containing configuration parameters."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "<p>Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.</p>",
      "file": "layoutunit.js",
      "configs": {
        "left": {
          "private": "",
          "type": "Number",
          "description": "The current left position of the Unit"
        },
        "position": {
          "type": "{String}",
          "description": "The position (top, right, bottom, left or center) of the Unit in the Layout"
        },
        "duration": {
          "description": "The duration to give the Animation Utility when animating the opening and closing of Units"
        },
        "parent": {
          "type": "{Object} YAHOO.widget.Layout",
          "description": "The parent Layout that we are assigned to"
        },
        "scroll": {
          "type": "Boolean/Null",
          "description": "Adds a class to the unit to allow for overflow: auto (yui-layout-scroll), default is overflow: hidden (yui-layout-noscroll). If true scroll bars will be placed on the element when the content exceeds the given area, false will put overflow hidden to hide the content. Passing null will render the content as usual overflow."
        },
        "easing": {
          "description": "The Animation Easing to apply to the Animation instance for this unit."
        },
        "maxHeight": {
          "type": "Number",
          "description": "The maxHeight parameter passed to the Resize Utility"
        },
        "resize": {
          "description": "Should a Resize instance be added to this unit"
        },
        "zIndex": {
          "type": "{Number}",
          "description": "The CSS zIndex to give to the unit, so you can have overlapping elements such as menus in a unit."
        },
        "body": {
          "description": "The content for the body. If we find an element in the page with an id that matches the passed option we will move that element into the body of this unit."
        },
        "close": {
          "description": "Adds a close icon to the unit"
        },
        "minHeight": {
          "type": "Number",
          "description": "The minHeight parameter passed to the Resize Utility"
        },
        "animate": {
          "type": "Boolean",
          "description": "Use animation to collapse/expand the unit"
        },
        "wrap": {
          "private": "",
          "type": "HTMLElement",
          "description": "A reference to the wrap element"
        },
        "dataTimeout": {
          "default": "null",
          "type": "Number",
          "description": "Number if milliseconds before aborting and calling failure handler."
        },
        "useShim": {
          "description": "Config option to pass to the Resize Utility"
        },
        "dataLoaded": {
          "type": "Boolean",
          "description": "Whether or not any data has been loaded from the server."
        },
        "maxWidth": {
          "type": "Number",
          "description": "The maxWidth parameter passed to the Resize Utility"
        },
        "header": {
          "description": "The text to use as the Header of the Unit"
        },
        "grids": {
          "type": "Boolean",
          "description": "Set this option to true if you want the LayoutUnit to fix the first layer of YUI CSS Grids (margins)"
        },
        "proxy": {
          "type": "Boolean",
          "description": "Use the proxy config setting for the Resize Utility"
        },
        "dataSrc": {
          "type": "String",
          "description": "The unit data source, used for loading content dynamically."
        },
        "collapse": {
          "description": "Adds a collapse icon to the unit"
        },
        "footer": {
          "description": "The content for the footer. If we find an element in the page with an id that matches the passed option we will move that element into the footer of this unit."
        },
        "gutter": {
          "type": "String",
          "description": "The gutter that we should apply to the parent Layout around this Unit. Supports standard CSS markup: (2 4 0 5) or (2) or (2 5)"
        },
        "collapseSize": {
          "type": "Number",
          "description": "The pixel size of the Clip that we will collapse to"
        },
        "height": {
          "type": "Number",
          "description": "The height of the Unit"
        },
        "loadMethod": {
          "default": "\"GET\"",
          "type": "String",
          "description": "The method to use for the data request."
        },
        "minWidth": {
          "type": "Number",
          "description": "The minWidth parameter passed to the Resize Utility"
        },
        "hover": {
          "description": "Config option to pass to the Resize Utility"
        },
        "width": {
          "type": "Number",
          "description": "The width of the Unit"
        },
        "top": {
          "private": "",
          "type": "Number",
          "description": "The current top positioning of the Unit"
        }
      },
      "properties": {
        "_collapsing": {
          "private": "",
          "guessedname": "_collapsing",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "A flag set while the unit is being collapsed, used so we don't fire events while animating the size"
        },
        "_lastTop": {
          "private": "",
          "guessedname": "_lastTop",
          "type": "Number",
          "guessedtype": "property",
          "description": "A holder for the last known top of the unit"
        },
        "_instances": {
          "guessedname": "_instances",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Internal hash table for all layout unit instances"
        },
        "STR_CLOSE": {
          "guessedname": "STR_CLOSE",
          "type": "{String}",
          "guessedtype": "property",
          "description": "String used for close button title"
        },
        "body": {
          "guessedname": "body",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "A reference to the HTML element used for the body"
        },
        "_collapsed": {
          "private": "",
          "guessedname": "_collapsed",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to determine if the unit is collapsed or not."
        },
        "LOADING_CLASSNAME": {
          "guessedname": "LOADING_CLASSNAME",
          "default": "\"disabled\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The class name applied to dynamic tabs while loading."
        },
        "loadHandler": {
          "guessedname": "loadHandler",
          "type": "Object",
          "guessedtype": "property",
          "description": "Callback method for the YUI Connection Manager used for load the body using AJAX"
        },
        "_lastHeight": {
          "private": "",
          "guessedname": "_lastHeight",
          "type": "Number",
          "guessedtype": "property",
          "description": "A holder for the last known height of the unit"
        },
        "_lastScroll": {
          "private": "",
          "guessedname": "_lastScroll",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "A holder for the last known scroll state of the unit"
        },
        "header": {
          "guessedname": "header",
          "type": "HTMLELement",
          "guessedtype": "property",
          "description": "A reference to the HTML element used for the Header"
        },
        "_anim": {
          "private": "",
          "guessedname": "_anim",
          "type": "YAHOO.util.Anim",
          "guessedtype": "property",
          "description": "A reference to the Animation instance used by this LayouUnit"
        },
        "_clip": {
          "private": "",
          "guessedname": "_clip",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "A reference to the clip element used when collapsing the unit"
        },
        "_gutter": {
          "private": "",
          "guessedname": "_gutter",
          "type": "Object",
          "guessedtype": "property",
          "description": "A simple hash table used to store the gutter to apply to the Unit"
        },
        "_lastLeft": {
          "private": "",
          "guessedname": "_lastLeft",
          "type": "Number",
          "guessedtype": "property",
          "description": "A holder for the last known left of the unit"
        },
        "footer": {
          "guessedname": "footer",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "A reference to the HTML element used for the footer"
        },
        "_lastCenetrScroll": {
          "private": "",
          "guessedname": "_lastCenterScroll",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "A holder for the last known scroll state of the center unit"
        },
        "STR_COLLAPSE": {
          "guessedname": "STR_COLLAPSE",
          "type": "{String}",
          "guessedtype": "property",
          "description": "String used for collapse button title"
        },
        "browser": {
          "guessedname": "browser",
          "type": "Object",
          "guessedtype": "property",
          "description": "A modified version of the YAHOO.env.ua object"
        },
        "_lastScrollTop": {
          "private": "",
          "guessedname": "_lastScrollTop",
          "type": "Number",
          "guessedtype": "property",
          "description": "A holder for the last known scrollTop state of the unit"
        },
        "_sizes": {
          "private": "",
          "guessedname": "_sizes",
          "type": "Object",
          "guessedtype": "property",
          "description": "A collection of the current sizes of the contents of this Layout Unit"
        },
        "_lastWidth": {
          "private": "",
          "guessedname": "_lastWidth",
          "type": "Number",
          "guessedtype": "property",
          "description": "A holder for the last known width of the unit"
        },
        "_loading": {
          "private": "",
          "guessedname": "_loading",
          "type": "Number",
          "guessedtype": "property",
          "description": "During the loading process this variable will be true"
        },
        "dataConnection": {
          "guessedname": "dataConnection",
          "type": "Object",
          "guessedtype": "property",
          "description": "YUI Connection Manager handler"
        },
        "STR_EXPAND": {
          "guessedname": "STR_EXPAND",
          "type": "{String}",
          "guessedtype": "property",
          "description": "String used for expand button title"
        },
        "_resize": {
          "private": "",
          "guessedname": "_resize",
          "type": "YAHOO.util.Resize",
          "guessedtype": "property",
          "description": "A reference to the Resize instance used by this LayoutUnit"
        }
      }
    },
    "YAHOO.util.DragDropMgr": {
      "shortname": "DragDropMgr",
      "methods": {
        "verifyEl": {
          "guessedname": "verifyEl",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " the element to check"
            }
          ],
          "description": "This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.  IE provides an 'unspecified\nerror' when trying to access the offsetParent of such an element",
          "return": {
            "type": "boolean",
            "description": "true if the element looks usable"
          }
        },
        "isLegalTarget": {
          "guessedname": "isLegalTarget",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "the",
              "type": "DragDrop",
              "description": " drag obj"
            },
            {
              "name": "the",
              "type": "DragDrop",
              "description": " target"
            }
          ],
          "description": "Returns true if the specified dd target is a legal target for \nthe specifice drag obj",
          "return": {
            "type": "boolean",
            "description": "true if the target is a legal target for the \ndd obj"
          }
        },
        "isLocked": {
          "guessedname": "isLocked",
          "static": "",
          "guessedtype": "function",
          "description": "Is drag and drop locked?",
          "return": {
            "type": "boolean",
            "description": "True if drag and drop is locked, false otherwise."
          }
        },
        "stopDrag": {
          "guessedname": "stopDrag",
          "static": "",
          "guessedtype": "function",
          "description": "Ends the current drag, cleans up the state, and fires the endDrag\nand mouseUp events.  Called internally when a mouseup is detected\nduring the drag.  Can be fired manually during the drag by passing\neither another event (such as the mousemove event received in onDrag)\nor a fake event with pageX and pageY defined (so that endDrag and\nonMouseUp have usable position data.).  Alternatively, pass true\nfor the silent parameter so that the endDrag and onMouseUp events\nare skipped (so no event data is needed.)",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the mouseup event, another event (or a fake event) \nwith pageX and pageY defined, or nothing if the \nsilent parameter is true"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": " skips the enddrag and mouseup events if true"
            }
          ]
        },
        "startDrag": {
          "guessedname": "startDrag",
          "static": "",
          "guessedtype": "function",
          "description": "Fired when either the drag pixel threshold or the mousedown hold \ntime threshold has been met.",
          "params": [
            {
              "name": "x",
              "type": "int",
              "description": "  the X position of the original mousedown"
            },
            {
              "name": "y",
              "type": "int",
              "description": "  the Y position of the original mousedown"
            }
          ]
        },
        "moveToEl": {
          "guessedname": "moveToEl",
          "static": "",
          "guessedtype": "function",
          "description": "Sets the x/y position of an element to the location of the\ntarget element.",
          "params": [
            {
              "name": "moveEl",
              "type": "HTMLElement",
              "description": "      The element to move"
            },
            {
              "name": "targetEl",
              "type": "HTMLElement",
              "description": "    The position reference element"
            }
          ]
        },
        "getScrollLeft": {
          "guessedname": "getScrollLeft",
          "static": "",
          "guessedtype": "function",
          "description": "Gets the scrollLeft",
          "return": {
            "type": "int",
            "description": "the document's scrollTop"
          }
        },
        "swapNode": {
          "guessedname": "swapNode",
          "static": "",
          "guessedtype": "function",
          "description": "Swap two nodes.  In IE, we use the native method, for others we \nemulate the IE behavior",
          "params": [
            {
              "name": "n1",
              "type": "",
              "description": " the first node to swap"
            },
            {
              "name": "n2",
              "type": "",
              "description": " the other node to swap"
            }
          ]
        },
        "getRelated": {
          "guessedname": "getRelated",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "p_oDD",
              "type": "DragDrop",
              "description": " the obj to get related data for"
            },
            {
              "name": "bTargetsOnly",
              "type": "boolean",
              "description": " if true, only return targetable objs"
            }
          ],
          "description": "Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.",
          "return": {
            "type": "DragDrop[]",
            "description": "the related instances"
          }
        },
        "numericSort": {
          "guessedname": "numericSort",
          "static": "",
          "guessedtype": "function",
          "description": "Numeric array sort function"
        },
        "stopEvent": {
          "guessedname": "stopEvent",
          "static": "",
          "guessedtype": "function",
          "description": "Utility to stop event propagation and event default, if these \nfeatures are turned on.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the event as returned by this.getEvent()"
            }
          ]
        },
        "getBestMatch": {
          "guessedname": "getBestMatch",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "dds",
              "type": "DragDrop[]",
              "description": " The array of drag and drop objects \ntargeted"
            }
          ],
          "description": "Helper function for getting the best match from the list of drag \nand drop objects returned by the drag and drop events when we are \nin INTERSECT mode.  It returns either the first object that the \ncursor is over, or the object that has the greatest overlap with \nthe dragged element.",
          "return": {
            "type": "DragDrop",
            "description": "The best single match"
          }
        },
        "handleMouseDown": {
          "guessedname": "handleMouseDown",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the event"
            },
            {
              "name": "oDD",
              "type": "",
              "description": " the DragDrop object being dragged"
            }
          ],
          "description": "Fired after a registered DragDrop object gets the mousedown event.\nSets up the events required to track the object being dragged"
        },
        "getStyle": {
          "guessedname": "getStyle",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "          the element"
            },
            {
              "name": "styleProp",
              "type": "string",
              "description": "   the style property"
            }
          ],
          "deprecated": "use YAHOO.util.Dom.getStyle",
          "description": "Returns the specified element style property",
          "return": {
            "type": "string",
            "description": "The value of the style property"
          }
        },
        "_sizeShim": {
          "private": "",
          "guessedname": "_createShim",
          "static": "",
          "guessedtype": "function",
          "description": "This method will create a shim element (giving it the id of yui-ddm-shim), it also attaches the mousemove and mouseup listeners to it and attaches a scroll listener on the window"
        },
        "_remove": {
          "private": "",
          "guessedname": "_remove",
          "static": "",
          "guessedtype": "function",
          "description": "Unregisters a drag and drop item.  This is executed in \nDragDrop.unreg, use that method instead of calling this directly."
        },
        "regDragDrop": {
          "guessedname": "regDragDrop",
          "static": "",
          "guessedtype": "function",
          "description": "Each DragDrop instance must be registered with the DragDropMgr.  \nThis is executed in DragDrop.init()",
          "params": [
            {
              "name": "oDD",
              "type": "DragDrop",
              "description": " the DragDrop object to register"
            },
            {
              "name": "sGroup",
              "type": "String",
              "description": " the name of the group this element belongs to"
            }
          ]
        },
        "_deactivateShim": {
          "private": "",
          "guessedname": "_deactivateShim",
          "static": "",
          "guessedtype": "function",
          "description": "This method will hide the shim element and set the _shimActive property to false"
        },
        "getElWrapper": {
          "guessedname": "getElWrapper",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id of the element to get"
            }
          ],
          "deprecated": "This wrapper isn't that useful",
          "description": "Get the wrapper for the DOM element specified",
          "return": {
            "type": "YAHOO.util.DDM.ElementWrapper",
            "description": "the wrapped element"
          }
        },
        "getLocation": {
          "guessedname": "getLocation",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "oDD",
              "type": "DragDrop",
              "description": " the drag and drop object to get the \nlocation for"
            }
          ],
          "description": "Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it",
          "return": {
            "type": "YAHOO.util.Region",
            "description": "a Region object representing the total area\nthe element occupies, including any padding\nthe instance is configured for."
          }
        },
        "isDragDrop": {
          "guessedname": "isDragDrop",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the element id to check"
            }
          ],
          "description": "Utility function to determine if a given element has been \nregistered as a drag drop item.",
          "return": {
            "type": "boolean",
            "description": "true if this element is a DragDrop item, \nfalse otherwise"
          }
        },
        "isOverTarget": {
          "guessedname": "isOverTarget",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "pt",
              "type": "YAHOO.util.Point",
              "description": " The point to evaluate"
            },
            {
              "name": "oTarget",
              "type": "DragDrop",
              "description": " the DragDrop object we are inspecting"
            },
            {
              "name": "intersect",
              "type": "boolean",
              "description": " true if we are in intersect mode"
            },
            {
              "name": "pre-cached",
              "type": "YAHOO.util.Region",
              "description": " location of the dragged element"
            }
          ],
          "description": "Checks the cursor location to see if it over the target",
          "return": {
            "type": "boolean",
            "description": "true if the mouse is over the target"
          }
        },
        "_activateShim": {
          "private": "",
          "guessedname": "_activateShim",
          "static": "",
          "guessedtype": "function",
          "description": "This method will create the shim element if needed, then show the shim element, size the element and set the _shimActive property to true"
        },
        "fireEvents": {
          "guessedname": "fireEvents",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the event"
            },
            {
              "name": "isDrop",
              "type": "boolean",
              "description": " is this a drop op or a mouseover op?"
            }
          ],
          "description": "Iterates over all of the DragDrop elements to find ones we are \nhovering over or dropping on"
        },
        "unlock": {
          "guessedname": "unlock",
          "static": "",
          "guessedtype": "function",
          "description": "Unlock all drag and drop functionality"
        },
        "lock": {
          "guessedname": "lock",
          "static": "",
          "guessedtype": "function",
          "description": "Lock all drag and drop functionality"
        },
        "getScroll": {
          "private": "",
          "guessedname": "getScroll",
          "static": "",
          "guessedtype": "function",
          "description": "Returns the current scroll position"
        },
        "handleMouseUp": {
          "guessedname": "handleMouseUp",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the event"
            }
          ],
          "description": "Internal function to handle the mouseup event.  Will be invoked \nfrom the context of the document."
        },
        "handleWasClicked": {
          "guessedname": "handleWasClicked",
          "static": "",
          "guessedtype": "function",
          "description": "Recursively searches the immediate parent and all child nodes for \nthe handle element in order to determine wheter or not it was \nclicked.",
          "params": [
            {
              "name": "node",
              "type": "",
              "description": " the html element to inspect"
            }
          ]
        },
        "getCss": {
          "guessedname": "getCss",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id of the elment to get"
            }
          ],
          "deprecated": "use YAHOO.util.Dom instead",
          "description": "Returns the style property for the DOM element (i.e., \ndocument.getElById(id).style)",
          "return": {
            "type": "Object",
            "description": "The style property of the element"
          }
        },
        "_onLoad": {
          "private": "",
          "guessedname": "_onLoad",
          "static": "",
          "guessedtype": "function",
          "description": "Drag and drop initialization.  Sets up the global event handlers"
        },
        "getPosX": {
          "guessedname": "getPosX",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "",
              "description": " the element for which to get the position"
            }
          ],
          "deprecated": "use YAHOO.util.Dom.getX instead",
          "description": "Returns the X position of an html element",
          "return": {
            "type": "int",
            "description": "the X coordinate"
          }
        },
        "unregAll": {
          "private": "",
          "guessedname": "unregAll",
          "static": "",
          "guessedtype": "function",
          "description": "Cleans up the drag and drop events and objects."
        },
        "refreshCache": {
          "guessedname": "refreshCache",
          "static": "",
          "guessedtype": "function",
          "todo": "this really should be an indexed array.  Alternatively this\nmethod could accept both.",
          "params": [
            {
              "name": "groups",
              "type": "Object",
              "description": " an associative array of groups to refresh"
            }
          ],
          "description": "Refreshes the cache of the top-left and bottom-right points of the \ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical \nusage is:\n<code>\nYAHOO.util.DragDropMgr.refreshCache(ddinstance.groups);\n</code>\nAlternatively:\n<code>\nYAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true});\n</code>"
        },
        "getPosY": {
          "guessedname": "getPosY",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "",
              "description": " the element for which to get the position"
            }
          ],
          "deprecated": "use YAHOO.util.Dom.getY instead",
          "description": "Returns the Y position of an html element",
          "return": {
            "type": "int",
            "description": "the Y coordinate"
          }
        },
        "_addListeners": {
          "private": "",
          "guessedname": "_addListeners",
          "static": "",
          "guessedtype": "function",
          "description": "Trying to make the load order less important.  Without this we get\nan error if this file is loaded before the Event Utility."
        },
        "isTypeOfDD": {
          "guessedname": "isTypeOfDD",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "the",
              "type": "Object",
              "description": " object to evaluate"
            }
          ],
          "description": "My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof \nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.",
          "return": {
            "type": "boolean",
            "description": "true if typeof oDD = DragDrop"
          }
        },
        "init": {
          "private": "",
          "guessedname": "init",
          "static": "",
          "guessedtype": "function",
          "description": "Called the first time an element is registered."
        },
        "_onResize": {
          "private": "",
          "guessedname": "_onResize",
          "static": "",
          "guessedtype": "function",
          "description": "Reset constraints on all drag and drop objs"
        },
        "getClientWidth": {
          "guessedname": "getClientWidth",
          "static": "",
          "guessedtype": "function",
          "deprecated": "use YAHOO.util.Dom.getViewportWidth instead",
          "description": "Gets the client width",
          "return": {
            "type": "int",
            "description": "client width in px"
          }
        },
        "getScrollTop": {
          "guessedname": "getScrollTop",
          "static": "",
          "guessedtype": "function",
          "description": "Gets the scrollTop",
          "return": {
            "type": "int",
            "description": "the document's scrollTop"
          }
        },
        "regHandle": {
          "guessedname": "regHandle",
          "static": "",
          "guessedtype": "function",
          "description": "Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()",
          "params": [
            {
              "name": "sDDId",
              "type": "String",
              "description": " the DragDrop id this element is a handle for"
            },
            {
              "name": "sHandleId",
              "type": "String",
              "description": " the id of the element that is the drag \nhandle"
            }
          ]
        },
        "getElement": {
          "guessedname": "getElement",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id of the elment to get"
            }
          ],
          "deprecated": "use YAHOO.util.Dom.get instead",
          "description": "Returns the actual DOM element",
          "return": {
            "type": "Object",
            "description": "The element"
          }
        },
        "removeDDFromGroup": {
          "private": "",
          "guessedname": "removeDDFromGroup",
          "static": "",
          "guessedtype": "function",
          "description": "Removes the supplied dd instance from the supplied group. Executed\nby DragDrop.removeFromGroup, so don't call this function directly."
        },
        "isHandle": {
          "guessedname": "isHandle",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the element id to check"
            }
          ],
          "description": "Utility function to determine if a given element has been \nregistered as a drag drop handle for the given Drag Drop object.",
          "return": {
            "type": "boolean",
            "description": "true if this element is a DragDrop handle, false \notherwise"
          }
        },
        "_onUnload": {
          "private": "",
          "guessedname": "_onUnload",
          "static": "",
          "guessedtype": "function",
          "description": "unload event handler"
        },
        "_execOnAll": {
          "private": "",
          "guessedname": "_execOnAll",
          "static": "",
          "guessedtype": "function",
          "description": "Runs method on all drag and drop objects"
        },
        "handleMouseMove": {
          "guessedname": "handleMouseMove",
          "private": "",
          "static": "",
          "guessedtype": "function",
          "todo": "figure out what we can do about mouse events lost when the \nuser drags objects beyond the window boundary.  Currently we can \ndetect this in internet explorer by verifying that the mouse is \ndown during the mousemove event.  Firefox doesn't give us the \nbutton state on the mousemove event.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " the event"
            }
          ],
          "description": "Internal function to handle the mousemove event.  Will be invoked \nfrom the context of the html element."
        },
        "getClientHeight": {
          "guessedname": "getClientHeight",
          "static": "",
          "guessedtype": "function",
          "deprecated": "use YAHOO.util.Dom.getViewportHeight instead",
          "description": "Gets the client height",
          "return": {
            "type": "int",
            "description": "client height in px"
          }
        },
        "getDDById": {
          "guessedname": "getDDById",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id of the DragDrop object"
            }
          ],
          "description": "Returns the DragDrop instance for a given id",
          "return": {
            "type": "DragDrop",
            "description": "the drag drop object, null if it is not found"
          }
        }
      },
      "name": "YAHOO.util.DragDropMgr",
      "guessedname": "DragDropMgr",
      "module": "dragdrop",
      "namespace": "YAHOO.util",
      "static": "",
      "guessedtype": "function",
      "description": "DragDropMgr is a singleton that tracks the element interaction for \nall DragDrop items in the window.  Generally, you will not call \nthis class directly, but it does have helper methods that could \nbe useful in your DragDrop implementations.",
      "file": "DragDropMgr.js",
      "properties": {
        "preventDefault": {
          "guessedname": "preventDefault",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag to determine if we should prevent the default behavior of the\nevents we define. By default this is true, but this can be set to \nfalse if you need the default behavior (not recommended)"
        },
        "STRICT_INTERSECT": {
          "final": "",
          "guessedname": "STRICT_INTERSECT",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "In intersect mode, drag and drop interaction is defined only by the \noverlap of two or more drag and drop objects."
        },
        "stopPropagation": {
          "guessedname": "stopPropagation",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag to determine if we should stop the propagation of the events \nwe generate. This is true by default but you may want to set it to\nfalse if the html element contains other features that require the\nmouse click."
        },
        "dragThreshMet": {
          "guessedname": "dragThreshMet",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag that indicates that either the drag pixel threshold or the \nmousdown time threshold has been met"
        },
        "ids": {
          "guessedname": "ids",
          "private": "",
          "static": "",
          "type": "{string: string}",
          "guessedtype": "property",
          "description": "Two dimensional Array of registered DragDrop objects.  The first \ndimension is the DragDrop item group, the second the DragDrop \nobject."
        },
        "interactionInfo": {
          "guessedname": "interactionInfo",
          "static": "",
          "type": "object",
          "guessedtype": "property",
          "description": "Provides additional information about the the current set of\ninteractions.  Can be accessed from the event handlers. It\ncontains the following properties:\nout:       onDragOut interactions\nenter:     onDragEnter interactions\nover:      onDragOver interactions\ndrop:      onDragDrop interactions\npoint:     The location of the cursor\ndraggedRegion: The location of dragged element at the time\nof the interaction\nsourceRegion: The location of the source elemtn at the time\nof the interaction\nvalidDrop: boolean"
        },
        "startX": {
          "guessedname": "startX",
          "private": "",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The X position of the mousedown event stored for later use when a \ndrag threshold is met."
        },
        "dragOvers": {
          "guessedname": "dragOvers",
          "private": "",
          "static": "",
          "type": "Array",
          "guessedtype": "property",
          "description": "the DragDrop object(s) that are being hovered over"
        },
        "deltaX": {
          "guessedname": "deltaX",
          "private": "",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "the X distance between the cursor and the object being dragged"
        },
        "initialized": {
          "private": "",
          "guessedname": "initialized",
          "static": "",
          "guessedtype": "property",
          "description": "Internal flag that is set to true when drag and drop has been\ninitialized"
        },
        "startY": {
          "guessedname": "startY",
          "private": "",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The Y position of the mousedown event stored for later use when a \ndrag threshold is met."
        },
        "mode": {
          "guessedname": "mode",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The current drag and drop mode.  Default: POINT"
        },
        "fromTimeout": {
          "guessedname": "fromTimeout",
          "private": "",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Flag to determine if the drag event was fired from the click timeout and\nnot the mouse move threshold."
        },
        "deltaY": {
          "guessedname": "deltaY",
          "private": "",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "the Y distance between the cursor and the object being dragged"
        },
        "useShim": {
          "guessedname": "useShim",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "This property is used to turn on global use of the shim element on all DragDrop instances, defaults to false for backcompat. (Use: YAHOO.util.DDM.useShim = true)"
        },
        "locationCache": {
          "private": "",
          "guessedname": "locationCache",
          "static": "",
          "guessedtype": "property",
          "description": "Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished."
        },
        "_debugShim": {
          "guessedname": "_debugShim",
          "private": "",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "This property is used when useShim is set to true, it will set the opacity on the shim to .5 for debugging. Use: (YAHOO.util.DDM._debugShim = true;)"
        },
        "_shim": {
          "guessedname": "_shim",
          "private": "",
          "static": "",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The HTML element created to use as a shim over the document to track mouse movements"
        },
        "_timeoutCount": {
          "private": "",
          "guessedname": "_timeoutCount",
          "static": "",
          "guessedtype": "property",
          "description": "Internal counter"
        },
        "_shimState": {
          "guessedname": "_shimState",
          "private": "",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "This property is used when useShim is set on a DragDrop object to store the current state of DDM.useShim so it can be reset when a drag operation is done."
        },
        "useCache": {
          "guessedname": "useCache",
          "static": "",
          "type": "boolean",
          "guessedtype": "property",
          "description": "Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a drag."
        },
        "clickTimeout": {
          "guessedname": "clickTimeout",
          "private": "",
          "static": "",
          "type": "Object",
          "guessedtype": "property",
          "description": "Timeout used for the click time threshold"
        },
        "clickPixelThresh": {
          "guessedname": "clickPixelThresh",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The number of pixels that the mouse needs to move after the \nmousedown before the drag is initiated.  Default=3;"
        },
        "POINT": {
          "final": "",
          "guessedname": "POINT",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "In point mode, drag and drop interaction is defined by the \nlocation of the cursor during the drag/drop"
        },
        "handleIds": {
          "guessedname": "handleIds",
          "private": "",
          "static": "",
          "type": "{string: string}",
          "guessedtype": "property",
          "description": "Array of element ids defined as drag handles.  Used to determine \nif the element that generated the mousedown event is actually the \nhandle and not the html element itself."
        },
        "elementCache": {
          "guessedname": "elementCache",
          "private": "",
          "static": "",
          "guessedtype": "property",
          "deprecated": "elements are not cached now",
          "description": "A cache of DOM elements"
        },
        "dragCurrent": {
          "guessedname": "dragCurrent",
          "private": "",
          "static": "",
          "type": "DragDrop",
          "guessedtype": "property",
          "description": "the DragDrop object that is currently being dragged"
        },
        "INTERSECT": {
          "final": "",
          "guessedname": "INTERSECT",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "In intersect mode, drag and drop interaction is defined by the \ncursor position or the amount of overlap of two or more drag and \ndrop objects."
        },
        "_shimActive": {
          "guessedname": "_shimActive",
          "private": "",
          "static": "",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "This property is used to determine if the shim is active over the screen, default false."
        },
        "locked": {
          "private": "",
          "guessedname": "locked",
          "static": "",
          "guessedtype": "property",
          "description": "All drag and drop can be disabled."
        },
        "clickTimeThresh": {
          "guessedname": "clickTimeThresh",
          "static": "",
          "type": "int",
          "guessedtype": "property",
          "description": "The number of milliseconds after the mousedown event to initiate the\ndrag if we don't get a mouseup event. Default=1000"
        }
      }
    },
    "YAHOO.util.ImageLoader.imgObj": {
      "shortname": "imgObj",
      "methods": {
        "_applyUrl": {
          "private": "",
          "guessedname": "_applyUrl",
          "guessedtype": "function",
          "description": "Inserts the image URL into the DOM so that the image is displayed.\nMust be overridden by child class",
          "params": [
            {
              "name": "el",
              "type": "Object",
              "description": "\tHTML DOM element"
            }
          ]
        },
        "fetch": {
          "guessedname": "fetch",
          "guessedtype": "function",
          "description": "Displays the image; puts the URL into the DOM"
        }
      },
      "name": "YAHOO.util.ImageLoader.imgObj",
      "guessedname": "imgObj",
      "module": "imageloader",
      "namespace": "YAHOO.util.ImageLoader",
      "constructors": [
        {
          "description": "Base class for image objects to be registered with the groups",
          "params": [
            {
              "name": "domId",
              "type": "String",
              "description": "\tHTML DOM id of the image element"
            },
            {
              "name": "url",
              "type": "String",
              "description": "\tURL for the image"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Base class for image objects to be registered with the groups",
      "file": "ImageLoader.js",
      "properties": {
        "domId": {
          "guessedname": "domId",
          "type": "String",
          "guessedtype": "property",
          "description": "HTML DOM id of the image element"
        },
        "url": {
          "guessedname": "url",
          "type": "String",
          "guessedtype": "property",
          "description": "URL for the image"
        },
        "_fetched": {
          "private": "",
          "guessedname": "_fetched",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether the image has already been fetched. In the case of a foldCondional group, keeps track for when the trigger is fired so images aren't fetched twice"
        },
        "setVisible": {
          "guessedname": "setVisible",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Whether the style.visibility should be set to \"visible\" after the image is fetched.\nUsed when setting src images as visibility:hidden prior to image fetching"
        },
        "height": {
          "guessedname": "height",
          "type": "Int",
          "guessedtype": "property",
          "description": "Pixel height of the image. Will be set as a \"height\" attribute after the image is fetched.\nDetaults to the natural height of the image.\nOnly appropriate with src images"
        },
        "width": {
          "guessedname": "width",
          "type": "Int",
          "guessedtype": "property",
          "description": "Pixel width of the image. Will be set as a \"width\" attribute after the image is fetched.\nDetaults to the natural width of the image.\nOnly appropriate with src images"
        }
      }
    },
    "YAHOO.util.ObjectAssert": {
      "shortname": "ObjectAssert",
      "methods": {
        "hasProperty": {
          "guessedname": "hasProperty",
          "param": "{String} propertyName The name of the property to test.",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "propertyName",
              "type": "String",
              "description": " The name of the property to test."
            },
            {
              "name": "object",
              "type": "Object",
              "description": " The object to search."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ],
          "description": "Asserts that an object has a property with the given name."
        },
        "propertiesAreEqual": {
          "guessedname": "propertiesAreEqual",
          "static": "",
          "guessedtype": "function",
          "description": "Asserts that all properties in the object exist in another object.",
          "params": [
            {
              "name": "expected",
              "type": "Object",
              "description": " An object with the expected properties."
            },
            {
              "name": "actual",
              "type": "Object",
              "description": " An object with the actual properties."
            },
            {
              "name": "message",
              "type": "String",
              "description": " (Optional) The message to display if the assertion fails."
            }
          ]
        }
      },
      "name": "YAHOO.util.ObjectAssert",
      "guessedname": "ObjectAssert",
      "module": "yuitest",
      "namespace": "YAHOO.util",
      "static": "",
      "guessedtype": "property",
      "description": "The ObjectAssert object provides functions to test JavaScript objects\nfor a variety of cases.",
      "file": "ObjectAssert.js"
    },
    "YAHOO.widget.Paginator.ui.LastPageLink": {
      "shortname": "LastPageLink",
      "methods": {
        "onClick": {
          "guessedname": "onClick",
          "guessedtype": "function",
          "description": "Listener for the link's onclick event.  Passes to setPage method.",
          "params": [
            {
              "name": "e",
              "type": "DOMEvent",
              "description": "  The click event"
            }
          ]
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Generate the nodes and return the appropriate node given the current\npagination state.",
          "params": [
            {
              "name": "id_base",
              "type": "string",
              "description": "  used to create unique ids for generated nodes"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "private": "",
          "guessedtype": "function",
          "description": "Removes the link/span node and clears event listeners"
        },
        "init": {
          "guessedname": "init",
          "static": "",
          "guessedtype": "function",
          "description": "Decorates Paginator instances with new attributes. Called during\nPaginator instantiation.",
          "params": [
            {
              "name": "paginator",
              "type": "Paginator",
              "description": "  Paginator instance to decorate"
            }
          ]
        },
        "update": {
          "guessedname": "update",
          "guessedtype": "function",
          "description": "Swap the link, span, and na nodes if appropriate.",
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "  The calling change event (ignored)"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Paginator.ui.LastPageLink",
      "guessedname": "LastPageLink",
      "module": "paginator",
      "namespace": "YAHOO.widget.Paginator.ui",
      "events": {
        "lastPageLinkClassChange": {
          "name": "lastPageLinkClassChange",
          "description": "Fires when the value for the configuration attribute 'lastPageLinkClass' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLastPageLinkClassChange": {
          "name": "beforeLastPageLinkClassChange",
          "description": "Fires before the value for the configuration attribute 'lastPageLinkClass' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "lastPageLinkLabelChange": {
          "name": "lastPageLinkLabelChange",
          "description": "Fires when the value for the configuration attribute 'lastPageLinkLabel' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLastPageLinkLabelChange": {
          "name": "beforeLastPageLinkLabelChange",
          "description": "Fires before the value for the configuration attribute 'lastPageLinkLabel' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "ui Component to generate the link to jump to the last page.",
          "params": [
            {
              "name": "p",
              "type": "Pagintor",
              "description": "  Paginator instance to attach to"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "ui Component to generate the link to jump to the last page.",
      "configs": {
        "lastPageLinkClass": {
          "default": "'yui-pg-last'",
          "description": "CSS class assigned to the link/span"
        },
        "lastPageLinkLabel": {
          "default": "'last &gt;&gt;'",
          "description": "Used as innerHTML for the last page link/span."
        }
      },
      "file": "LastPageLink.js",
      "innerClasses": [
        "YAHOO.widget.Paginator"
      ],
      "for": "YAHOO.widget.Paginator",
      "properties": {
        "current": {
          "private": "",
          "guessedname": "current",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Currently placed HTMLElement node"
        },
        "na": {
          "private": "",
          "guessedname": "na",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Empty place holder node for when the last page link is inappropriate to\ndisplay in any form (unlimited paging)."
        },
        "link": {
          "private": "",
          "guessedname": "link",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Link HTMLElement node"
        },
        "span": {
          "private": "",
          "guessedname": "span",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Span node (inactive link)"
        }
      }
    },
    "YAHOO.widget.ButtonGroup": {
      "shortname": "ButtonGroup",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "removeButton": {
          "guessedname": "removeButton",
          "guessedtype": "function",
          "description": "Removes the button at the specified index from the \nbutton group.",
          "params": [
            {
              "name": "p_nIndex",
              "type": "Number",
              "description": " Number specifying the index of the button \nto be removed from the button group."
            }
          ]
        },
        "_setDisabled": {
          "guessedname": "_setDisabled",
          "guessedtype": "function",
          "protected": "",
          "description": "Sets the value of the button groups's \n\"disabled\" attribute.",
          "params": [
            {
              "name": "p_bDisabled",
              "type": "Boolean",
              "description": " Boolean indicating the value for\nthe button group's \"disabled\" attribute."
            }
          ]
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the button group.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "_createGroupElement": {
          "guessedname": "_createGroupElement",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates the button group's element.",
          "return": {
            "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>",
            "description": ""
          }
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Sets focus to the button at the specified index.",
          "params": [
            {
              "name": "p_nIndex",
              "type": "Number",
              "description": " Number indicating the index of the button \nto focus."
            }
          ]
        },
        "addButtons": {
          "guessedname": "addButtons",
          "guessedtype": "function",
          "description": "Adds the array of buttons to the button group.",
          "params": [
            {
              "name": "p_aButtons",
              "type": "Array",
              "description": " Array of <a href=\"YAHOO.widget.Button.html\">\nYAHOO.widget.Button</a> instances to be added \nto the button group."
            },
            {
              "name": "p_aButtons",
              "type": "Array",
              "description": " Array of strings specifying the id \nattribute of the <code>&#60;input&#62;</code> or <code>&#60;span&#62;\n</code> elements to be used to create the buttons to be added to the \nbutton group."
            },
            {
              "name": "p_aButtons",
              "type": "Array",
              "description": " Array of object references for the \n<code>&#60;input&#62;</code> or <code>&#60;span&#62;</code> elements \nto be used to create the buttons to be added to the button group."
            },
            {
              "name": "p_aButtons",
              "type": "Array",
              "description": " Array of object literals, each containing\na set of <a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>  \nconfiguration attributes used to configure each button to be added \nto the button group."
            }
          ],
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Removes the button group's element from its parent \nelement and removes all event handlers."
        },
        "getButtons": {
          "guessedname": "getButtons",
          "guessedtype": "function",
          "description": "Returns an array of the buttons in the button group.",
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "_onKeyDown": {
          "guessedname": "_onKeyDown",
          "guessedtype": "function",
          "protected": "",
          "description": "\"keydown\" event handler for the button group.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "getCount": {
          "guessedname": "getCount",
          "guessedtype": "function",
          "description": "Returns the number of buttons in the button group.",
          "return": {
            "type": "Number",
            "description": ""
          }
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The ButtonGroup class's initialization method.",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the button group."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>",
              "description": " Object \nspecifying the <code>&#60;div&#62;</code> element of the button group."
            },
            {
              "name": "p_oElement",
              "type": "Object",
              "description": " Object literal specifying a set of  \nconfiguration attributes used to create the button group."
            },
            {
              "name": "p_oAttributes",
              "type": "Object",
              "description": " Optional. Object literal specifying a\nset of configuration attributes used to create the button group."
            }
          ]
        },
        "_onButtonCheckedChange": {
          "guessedname": "_onButtonCheckedChange",
          "guessedtype": "function",
          "protected": "",
          "description": "\"checkedChange\" event handler for each button in the \nbutton group.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the event that was fired."
            },
            {
              "name": "p_oButton",
              "type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>",
              "description": " Object representing the button that fired the event."
            }
          ]
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Initializes all of the configuration attributes used to  \ncreate the button group.",
          "params": [
            {
              "name": "p_oAttributes",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the button group."
            }
          ]
        },
        "check": {
          "guessedname": "check",
          "guessedtype": "function",
          "description": "Checks the button at the specified index.",
          "params": [
            {
              "name": "p_nIndex",
              "type": "Number",
              "description": " Number indicating the index of the button \nto check."
            }
          ]
        },
        "_onAppendTo": {
          "guessedname": "_onAppendTo",
          "guessedtype": "function",
          "protected": "",
          "description": "\"appendTo\" event handler for the button group.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the event that was fired."
            }
          ]
        },
        "addButton": {
          "guessedname": "addButton",
          "guessedtype": "function",
          "description": "Adds the button to the button group.",
          "params": [
            {
              "name": "p_oButton",
              "type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>",
              "description": " Object reference for the <a href=\"YAHOO.widget.Button.html\">\nYAHOO.widget.Button</a> instance to be added to the button group."
            },
            {
              "name": "p_oButton",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;input&#62;</code> or <code>&#60;span&#62;</code> element \nto be used to create the button to be added to the button group."
            },
            {
              "name": "p_oButton",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-6043025\">HTMLInputElement</a>|<a href=\"\nhttp://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#\nID-33759296\">HTMLElement</a>",
              "description": " Object reference for the \n<code>&#60;input&#62;</code> or <code>&#60;span&#62;</code> element \nto be used to create the button to be added to the button group."
            },
            {
              "name": "p_oButton",
              "type": "Object",
              "description": " Object literal specifying a set of \n<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a> \nconfiguration attributes used to configure the button to be added to \nthe button group."
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>",
            "description": ""
          }
        },
        "getButton": {
          "guessedname": "getButton",
          "guessedtype": "function",
          "description": "Returns the button at the specified index.",
          "params": [
            {
              "name": "p_nIndex",
              "type": "Number",
              "description": " The index of the button to retrieve from the \nbutton group."
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>",
            "description": ""
          }
        }
      },
      "name": "YAHOO.widget.ButtonGroup",
      "extends": "YAHOO.util.Element",
      "guessedname": "ButtonGroup",
      "module": "button",
      "namespace": "YAHOO.widget",
      "events": {
        "checkedButtonChange": {
          "name": "checkedButtonChange",
          "description": "Fires when the value for the configuration attribute 'checkedButton' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "disabledChange": {
          "name": "disabledChange",
          "description": "Fires when the value for the configuration attribute 'disabled' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeValueChange": {
          "name": "beforeValueChange",
          "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "valueChange": {
          "name": "valueChange",
          "description": "Fires when the value for the configuration attribute 'value' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "nameChange": {
          "name": "nameChange",
          "description": "Fires when the value for the configuration attribute 'name' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeNameChange": {
          "name": "beforeNameChange",
          "description": "Fires before the value for the configuration attribute 'name' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeContainerChange": {
          "name": "beforeContainerChange",
          "description": "Fires before the value for the configuration attribute 'container' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDisabledChange": {
          "name": "beforeDisabledChange",
          "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "containerChange": {
          "name": "containerChange",
          "description": "Fires when the value for the configuration attribute 'container' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCheckedButtonChange": {
          "name": "beforeCheckedButtonChange",
          "description": "Fires before the value for the configuration attribute 'checkedButton' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The ButtonGroup class creates a set of buttons that are mutually \nexclusive; checking one button in the set will uncheck all others in the \nbutton group.",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the button group."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-22445964\">HTMLDivElement</a>",
              "description": " Object \nspecifying the <code>&#60;div&#62;</code> element of the button group."
            },
            {
              "name": "p_oElement",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the button group."
            },
            {
              "name": "p_oAttributes",
              "type": "Object",
              "description": " Optional. Object literal specifying a set \nof configuration attributes used to create the button group."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The ButtonGroup class creates a set of buttons that are mutually \nexclusive; checking one button in the set will uncheck all others in the \nbutton group.",
      "file": "buttongroup.js",
      "configs": {
        "name": {
          "default": "null",
          "type": "String",
          "description": "String specifying the name for the button group.  \nThis name will be applied to each button in the button group."
        },
        "container": {
          "default": "null",
          "writeonce": "",
          "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>|String",
          "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the button group's markup\nshould be rendered into."
        },
        "value": {
          "default": "null",
          "type": "Object",
          "description": "Object specifying the value for the button group."
        },
        "checkedButton": {
          "default": "null",
          "type": "{<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button</a>}",
          "description": "Reference for the button in the button group that \nis checked."
        },
        "disabled": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the button group should be \ndisabled.  Disabling the button group will disable each button \nin the button group.  Disabled buttons are dimmed and will not \nrespond to user input or fire events."
        }
      },
      "properties": {
        "CSS_CLASS_NAME": {
          "final": "",
          "guessedname": "CSS_CLASS_NAME",
          "default": "\"buttongroup\"",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the CSS class(es) to be applied  \nto the button group's element."
        },
        "_buttons": {
          "guessedname": "_buttons",
          "default": "null",
          "type": "Array",
          "guessedtype": "property",
          "protected": "",
          "description": "Array of buttons in the button group."
        },
        "NODE_NAME": {
          "final": "",
          "guessedname": "NODE_NAME",
          "default": "\"DIV\"",
          "type": "String",
          "guessedtype": "property",
          "description": "The name of the tag to be used for the button \ngroup's element."
        },
        "CLASS_NAME_PREFIX": {
          "final": "",
          "guessedname": "CLASS_NAME_PREFIX",
          "default": "\"yui-\"",
          "type": "String",
          "guessedtype": "property",
          "description": "Prefix used for all class names applied to a ButtonGroup."
        }
      }
    },
    "YAHOO.util.DDTarget": {
      "shortname": "DDTarget",
      "superclass": "YAHOO.util.DragDrop",
      "name": "YAHOO.util.DDTarget",
      "extends": "YAHOO.util.DragDrop",
      "guessedname": "DDTarget",
      "module": "dragdrop",
      "namespace": "YAHOO.util",
      "constructors": [
        {
          "description": "A DragDrop implementation that does not move, but can be a drop \ntarget.  You would get the same result by simply omitting implementation \nfor the event callbacks, but this way we reduce the processing cost of the \nevent listener and the callbacks.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id of the element that is a drop target"
            },
            {
              "name": "sGroup",
              "type": "String",
              "description": " the group of related DragDrop objects"
            },
            {
              "name": "config",
              "type": "object",
              "description": " an object containing configurable attributes\nValid properties for DDTarget in addition to those in \nDragDrop: \nnone"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "A DragDrop implementation that does not move, but can be a drop \ntarget.  You would get the same result by simply omitting implementation \nfor the event callbacks, but this way we reduce the processing cost of the \nevent listener and the callbacks.",
      "file": "DDTarget.js"
    },
    "YAHOO.widget.Carousel": {
      "shortname": "Carousel",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "getCarouselItemSize": {
          "private": "",
          "description": "Compute and return the height or width of a single Carousel item\ndepending upon the orientation.",
          "params": [
            {
              "name": "which",
              "type": "String",
              "description": "  \"height\" or \"width\" to be returned.  If this is\npassed explicitly, the calculated size is not cached."
            }
          ]
        },
        "getCarouselItemPosition": {
          "private": "",
          "description": "Compute and return the position of a Carousel item based on its\nposition.",
          "params": [
            {
              "name": "position",
              "type": "Number",
              "description": "  The position of the Carousel item."
            }
          ]
        },
        "_setNumVisible": {
          "guessedname": "_setNumVisible",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The new value for numVisible"
            }
          ],
          "description": "Clip the container size every time numVisible is set.",
          "return": {
            "type": "Number",
            "description": "The new value that would be set"
          }
        },
        "getDimensions": {
          "private": "",
          "description": "Get full dimensions of an element.",
          "params": [
            {
              "name": "el",
              "type": "Object",
              "description": " The element to get the dimensions of"
            },
            {
              "name": "which",
              "type": "String",
              "description": " Get the height or width of an element"
            }
          ]
        },
        "syncUi": {
          "private": "",
          "description": "Handle UI update.\nCall the appropriate methods on events fired when an item is added, or\nremoved for synchronizing the DOM.",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": " The item that needs to be added or removed"
            }
          ]
        },
        "_syncUiForLazyLoading": {
          "guessedname": "_syncUiForLazyLoading",
          "guessedtype": "function",
          "protected": "",
          "description": "Synchronize and redraw the UI for lazy loading."
        },
        "createCarousel": {
          "guessedname": "_createCarousel",
          "guessedtype": "function",
          "protected": "",
          "description": "Create the Carousel.",
          "params": [
            {
              "name": "elId",
              "type": "String",
              "description": "  The id of the element to be created"
            }
          ]
        },
        "getStyle": {
          "private": "",
          "description": "Get the computed style of an element.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element for which the style needs to be\nreturned."
            },
            {
              "name": "style",
              "type": "String",
              "description": "  The style attribute"
            },
            {
              "name": "type",
              "type": "String",
              "description": "  \"int\", \"float\", etc. (defaults to int)"
            }
          ]
        },
        "isAnimating": {
          "public": "",
          "guessedname": "isAnimating",
          "guessedtype": "function",
          "description": "Return true if the Carousel is still animating, or false otherwise.",
          "return": {
            "type": "Boolean",
            "description": "Return true if animation is still in progress, or\nfalse otherwise."
          }
        },
        "selectPreviousItem": {
          "public": "",
          "guessedname": "selectPreviousItem",
          "guessedtype": "function",
          "description": "Select the previous item in the Carousel."
        },
        "_getNumPages": {
          "guessedname": "_getNumPages",
          "guessedtype": "function",
          "protected": "",
          "description": "Get the total number of pages."
        },
        "_syncUiItems": {
          "guessedname": "_syncUiItems",
          "guessedtype": "function",
          "protected": "",
          "description": "Redraw the UI for item positioning."
        },
        "show": {
          "public": "",
          "guessedname": "show",
          "guessedtype": "function",
          "description": "Display the Carousel."
        },
        "hide": {
          "public": "",
          "guessedname": "hide",
          "guessedtype": "function",
          "description": "Hide the Carousel."
        },
        "getItems": {
          "public": "",
          "guessedname": "getItems",
          "guessedtype": "function",
          "description": "Return all items as an array.",
          "return": {
            "type": "Array",
            "description": "Return all items in the Carousel"
          }
        },
        "getItemPositionById": {
          "public": "",
          "guessedname": "getItemPositionById",
          "guessedtype": "function",
          "description": "Return the position of the Carousel item that has the id \"id\", or -1\nif the id is not found.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  The index of the item to be returned"
            }
          ]
        },
        "_syncUiForItemAdd": {
          "guessedname": "_syncUiForItemAdd",
          "guessedtype": "function",
          "protected": "",
          "description": "Synchronize and redraw the UI after an item is added."
        },
        "_autoScroll": {
          "guessedname": "_autoScroll",
          "guessedtype": "function",
          "protected": "",
          "description": "Automatically scroll the contents of the Carousel."
        },
        "initEvents": {
          "public": "",
          "guessedname": "initEvents",
          "guessedtype": "function",
          "description": "Initialize and bind the event handlers."
        },
        "stopAutoPlay": {
          "public": "",
          "guessedname": "stopAutoPlay",
          "guessedtype": "function",
          "description": "Stop auto-playing the Carousel."
        },
        "focus": {
          "public": "",
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Set focus on the Carousel."
        },
        "_getLastVisible": {
          "guessedname": "_getLastVisible",
          "guessedtype": "function",
          "protected": "",
          "description": "Get the index of the last visible item"
        },
        "_validateAnimation": {
          "guessedname": "_validateAnimation",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "cfg",
              "type": "Object",
              "description": "  The animation configuration"
            }
          ],
          "description": "Validate animation parameters.",
          "return": {
            "type": "Boolean",
            "description": "The status of the validation"
          }
        },
        "scrollTo": {
          "public": "",
          "guessedname": "scrollTo",
          "guessedtype": "function",
          "description": "Scroll the Carousel to make the item the first visible item.",
          "params": [
            {
              "name": "item",
              "type": "",
              "description": " Number The index of the element to position at."
            },
            {
              "name": "dontSelect",
              "type": "",
              "description": " Boolean True if select should be avoided"
            }
          ]
        },
        "parseCarousel": {
          "guessedname": "_parseCarousel",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "parent",
              "type": "HTMLElement",
              "description": "  The parent element to look under"
            }
          ],
          "description": "Find the Carousel within a container. The Carousel is identified by\nthe first element that matches the carousel element tag or the\nelement that has the Carousel class.",
          "return": {
            "type": "Boolean",
            "description": "True if Carousel is found, false otherwise"
          }
        },
        "_updateNavButtons": {
          "guessedname": "_updateNavButtons",
          "guessedtype": "function",
          "protected": "",
          "description": "Set the correct class for the navigation buttons.",
          "params": [
            {
              "name": "el",
              "type": "Object",
              "description": "  The target button"
            },
            {
              "name": "setFocus",
              "type": "Boolean",
              "description": "  True to set focus ring, false otherwise."
            }
          ]
        },
        "_setSelectedItem": {
          "guessedname": "_setSelectedItem",
          "guessedtype": "function",
          "protected": "",
          "description": "Set the value for the selected item.",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The new value for \"selected\" item"
            }
          ]
        },
        "getLoadingItems": {
          "public": "",
          "guessedname": "getLoadingItems",
          "guessedtype": "function",
          "description": "Return all loading items as an array.",
          "return": {
            "type": "Array",
            "description": "Return all items that are loading in the Carousel."
          }
        },
        "_refreshUi": {
          "guessedname": "_refreshUi",
          "guessedtype": "function",
          "protected": "",
          "description": "Refresh the widget UI if it is not already rendered, on first item\naddition."
        },
        "_setNumItems": {
          "guessedname": "_setNumItems",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The new value for numItems"
            }
          ],
          "description": "Set the number of items in the Carousel.\nWarning: Setting this to a lower number than the current removes\nitems from the end.",
          "return": {
            "type": "Number",
            "description": "The new value that would be set"
          }
        },
        "scrollForward": {
          "public": "",
          "guessedname": "scrollForward",
          "guessedtype": "function",
          "description": "Scroll the Carousel by an item forward."
        },
        "_animateAndSetCarouselOffset": {
          "guessedname": "_animateAndSetCarouselOffset",
          "guessedtype": "function",
          "protected": "",
          "description": "Set the Carousel offset to the passed offset after animating.",
          "params": [
            {
              "name": "offset",
              "type": "Integer",
              "description": " The offset to which the Carousel has to be\nscrolled to."
            },
            {
              "name": "item",
              "type": "Integer",
              "description": " The index to which the Carousel will scroll."
            },
            {
              "name": "sentinel",
              "type": "Integer",
              "description": " The last element in the view port."
            }
          ]
        },
        "_updateTabIndex": {
          "guessedname": "_updateTabIndex",
          "guessedtype": "function",
          "protected": "",
          "description": "Set the correct tab index for the Carousel items.",
          "params": [
            {
              "name": "el",
              "type": "Object",
              "description": "  The element to be focussed"
            }
          ]
        },
        "getScrollOffset": {
          "private": "",
          "description": "Return the scrolling offset size given the number of elements to\nscroll.",
          "params": [
            {
              "name": "delta",
              "type": "Number",
              "description": "  The delta number of elements to scroll by."
            }
          ]
        },
        "_setRevealAmount": {
          "guessedname": "_setRevealAmount",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The new value for revealAmount"
            }
          ],
          "description": "Set the value for the reveal amount percentage in the Carousel.",
          "return": {
            "type": "Number",
            "description": "The new value that would be set"
          }
        },
        "getElementForItem": {
          "public": "",
          "guessedname": "getElementForItem",
          "guessedtype": "function",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  The index of the item to be returned"
            }
          ],
          "description": "Return the carouselItemEl at index or null if the index is not\nfound.",
          "return": {
            "type": "Element",
            "description": "Return the item at index or null if not found"
          }
        },
        "removeItem": {
          "public": "",
          "guessedname": "removeItem",
          "guessedtype": "function",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  The position to where in the list (starts from\nzero)."
            }
          ],
          "description": "Remove an item at index from the Carousel.",
          "return": {
            "type": "Boolean",
            "description": "Return true on success, false otherwise"
          }
        },
        "scrollPageForward": {
          "public": "",
          "guessedname": "scrollPageForward",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event object"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The context object"
            }
          ],
          "description": "Scroll the Carousel by a page forward."
        },
        "_getValidIndex": {
          "guessedname": "_getValidIndex",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  The index of the item to be returned"
            }
          ],
          "description": "Return a valid item for a possibly out of bounds index considering\nthe isCircular property.",
          "return": {
            "type": "Object",
            "description": "Return a valid item index"
          }
        },
        "_validateRevealAmount": {
          "guessedname": "_validateRevealAmount",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The revealAmount value"
            }
          ],
          "description": "Validate the revealAmount value.",
          "return": {
            "type": "Boolean",
            "description": "The status of the validation"
          }
        },
        "_keyboardEventHandler": {
          "guessedname": "_keyboardEventHandler",
          "guessedtype": "function",
          "protected": "",
          "description": "The keyboard event handler for Carousel.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": "  The event that is being handled."
            }
          ]
        },
        "_itemClickHandler": {
          "guessedname": "_itemClickHandler",
          "guessedtype": "function",
          "protected": "",
          "description": "The \"click\" handler for the item.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event object"
            }
          ]
        },
        "_setOrientation": {
          "guessedname": "_setOrientation",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Boolean",
              "description": "  The new value for isVertical"
            }
          ],
          "description": "Set the orientation of the Carousel.",
          "return": {
            "type": "Boolean",
            "description": "The new value that would be set"
          }
        },
        "_numVisibleSetter": {
          "guessedname": "_numVisibleSetter",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The new value for numVisible"
            }
          ],
          "description": "Set the value for the number of visible items in the Carousel.",
          "return": {
            "type": "Number",
            "description": "The new value that would be set"
          }
        },
        "blur": {
          "public": "",
          "guessedname": "blur",
          "guessedtype": "function",
          "description": "Remove focus from the Carousel."
        },
        "selectNextItem": {
          "public": "",
          "guessedname": "selectNextItem",
          "guessedtype": "function",
          "description": "Select the next item in the Carousel."
        },
        "_setFirstVisible": {
          "guessedname": "_setFirstVisible",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The new value for firstVisible"
            }
          ],
          "description": "Set the value for the Carousel's first visible item.",
          "return": {
            "type": "Number",
            "description": "The new value that would be set"
          }
        },
        "_validateFirstVisible": {
          "guessedname": "_validateFirstVisible",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The first visible value"
            }
          ],
          "description": "Validate the firstVisible value.",
          "return": {
            "type": "Boolean",
            "description": "The status of the validation"
          }
        },
        "replaceItems": {
          "public": "",
          "guessedname": "replaceItems",
          "guessedtype": "function",
          "params": [
            {
              "name": "items",
              "type": "Array} An array containing an array of replacement items each linked to the\nindex where the substitution should take place.\nE.g. [[{content:'<img/>'}, index1], [{content:'<img/>'",
              "description": " , index2]]"
            }
          ],
          "description": "Replace multiple items at specified indexes.\nNOTE: item at index must already exist.",
          "return": {
            "type": "Boolean",
            "description": "Return true on success, false otherwise"
          }
        },
        "render": {
          "public": "",
          "guessedname": "render",
          "guessedtype": "function",
          "params": [
            {
              "name": "appendTo",
              "type": "HTMLElement | String",
              "description": "  The element to which the\nCarousel should be appended prior to rendering."
            }
          ],
          "description": "Render the Carousel.",
          "return": {
            "type": "Boolean",
            "description": "Status of the operation"
          }
        },
        "_setNavigation": {
          "guessedname": "_setNavigation",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "cfg",
              "type": "Object",
              "description": "  The navigation configuration"
            }
          ],
          "description": "Set the value for the Carousel's navigation.",
          "return": {
            "type": "Object",
            "description": "The new value that would be set"
          }
        },
        "createCarouselItem": {
          "guessedname": "_createCarouselItem",
          "guessedtype": "function",
          "protected": "",
          "description": "Create the Carousel item.",
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "  The attributes of the element to be created"
            }
          ]
        },
        "_updatePagerMenu": {
          "guessedname": "_updatePagerMenu",
          "guessedtype": "function",
          "protected": "",
          "description": "Update the UI for the pager menu based on the current page and\nthe number of pages.  If the number of pages is greater than\nMAX_PAGER_BUTTONS, then the selection of pages is provided by a drop\ndown menu instead of a set of buttons."
        },
        "createCarouselClip": {
          "guessedname": "_createCarouselClip",
          "guessedtype": "function",
          "protected": "",
          "description": "Create the Carousel clip container."
        },
        "createElement": {
          "private": "",
          "description": "Create an element, set its class name and optionally install the element\nto its parent.",
          "params": [
            {
              "name": "el",
              "type": "String",
              "description": "  The element to be created"
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": "  Configuration of parent, class and id attributes.\nIf the content is specified, it is inserted after creation of the\nelement. The content can also be an HTML element in which case it would\nbe appended as a child node of the created element."
            }
          ]
        },
        "registerPagination": {
          "public": "",
          "guessedname": "registerPagination",
          "guessedtype": "function",
          "description": "Register carousels pagination template, append to interface, and populate.",
          "params": [
            {
              "name": "template",
              "type": "String",
              "description": "  Pagination template as passed to lang.substitute"
            }
          ]
        },
        "_validateScrollIncrement": {
          "guessedname": "_validateScrollIncrement",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The scrollIncrement value"
            }
          ],
          "description": "Validate the scrollIncrement value.",
          "return": {
            "type": "Boolean",
            "description": "The status of the validation"
          }
        },
        "setStyles": {
          "private": "",
          "description": "Set multiple styles on one element.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  The element to set styles on"
            },
            {
              "name": "style",
              "type": "Object",
              "description": "  top:\"10px\", left:\"0px\", etc."
            }
          ]
        },
        "getFirstVisibleOnpage": {
          "public": "",
          "guessedname": "getFirstVisibleOnPage",
          "guessedtype": "function",
          "params": [
            {
              "name": "page",
              "type": "Number",
              "description": "  Page"
            }
          ],
          "description": "Get the first visible item's index on any given page.",
          "return": {
            "type": "Number",
            "description": "First item's index"
          }
        },
        "_setCarouselOffset": {
          "guessedname": "_setCarouselOffset",
          "guessedtype": "function",
          "protected": "",
          "description": "Set the Carousel offset to the passed offset."
        },
        "_loadItems": {
          "guessedname": "_loadItems",
          "guessedtype": "function",
          "protected": "",
          "description": "The load the required set of items that are needed for display."
        },
        "clearItems": {
          "public": "",
          "guessedname": "clearItems",
          "guessedtype": "function",
          "description": "Clears the items from Carousel."
        },
        "syncNavigation": {
          "private": "",
          "description": "Fire custom events for enabling/disabling navigation elements."
        },
        "_validateNavigation": {
          "guessedname": "_validateNavigation",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "cfg",
              "type": "Object",
              "description": "  The navigation configuration"
            }
          ],
          "description": "Validate and navigation parameters.",
          "return": {
            "type": "Boolean",
            "description": "The status of the validation"
          }
        },
        "startAutoPlay": {
          "public": "",
          "guessedname": "startAutoPlay",
          "guessedtype": "function",
          "description": "Start auto-playing the Carousel."
        },
        "_syncUiForItemReplace": {
          "guessedname": "_syncUiForItemReplace",
          "guessedtype": "function",
          "protected": "",
          "description": "Synchronize and redraw the UI after an item is replaced."
        },
        "scrollBackward": {
          "public": "",
          "guessedname": "scrollBackward",
          "guessedtype": "function",
          "description": "Scroll the Carousel by an item backward."
        },
        "getVisibleItems": {
          "public": "",
          "guessedname": "getVisibleItems",
          "guessedtype": "function",
          "description": "Return all visible items as an array.",
          "return": {
            "type": "Array",
            "description": "The array of visible items"
          }
        },
        "_pagerChangeHandler": {
          "guessedname": "_pagerChangeHandler",
          "guessedtype": "function",
          "protected": "",
          "description": "The \"onchange\" handler for select box pagination.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event object"
            }
          ]
        },
        "parseCarouselNavigation": {
          "guessedname": "_parseCarouselNavigation",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "parent",
              "type": "HTMLElement",
              "description": "  The parent element to look under"
            }
          ],
          "description": "Find the Carousel navigation within a container. The navigation\nelements need to match the carousel navigation class names.",
          "return": {
            "type": "Boolean",
            "description": "True if at least one is found, false otherwise"
          }
        },
        "getRevealSize": {
          "private": "",
          "description": "Return the size of a part of the item (reveal)."
        },
        "syncPagerUi": {
          "private": "",
          "description": "Synchronize and redraw the Pager UI if necessary."
        },
        "scrollPageBackward": {
          "public": "",
          "guessedname": "scrollPageBackward",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event object"
            },
            {
              "name": "obj",
              "type": "Object",
              "description": " The context object"
            }
          ],
          "description": "Scroll the Carousel by a page backward."
        },
        "updatePagination": {
          "public": "",
          "guessedname": "updatePagination",
          "guessedtype": "function",
          "description": "Update interface's pagination data within a registered template."
        },
        "getById": {
          "public": "",
          "guessedname": "getById",
          "static": "",
          "guessedtype": "function",
          "description": "Return the appropriate Carousel object based on the id associated with\nthe Carousel element or false if none match."
        },
        "_validateNumVisible": {
          "guessedname": "_validateNumVisible",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The numVisible value"
            }
          ],
          "description": "Validate the numVisible value.",
          "return": {
            "type": "Boolean",
            "description": "The status of the validation"
          }
        },
        "getElementForItems": {
          "public": "",
          "guessedname": "getElementForItems",
          "guessedtype": "function",
          "description": "Return the carouselItemEl for all items in the Carousel.",
          "return": {
            "type": "Array",
            "description": "Return all the items"
          }
        },
        "_setContainerSize": {
          "guessedname": "_setContainerSize",
          "guessedtype": "function",
          "protected": "",
          "description": "Set the container size.",
          "params": [
            {
              "name": "clip",
              "type": "HTMLElement",
              "description": "  The clip container element."
            },
            {
              "name": "attr",
              "type": "String",
              "description": "  Either set the height or width."
            }
          ]
        },
        "getItem": {
          "public": "",
          "guessedname": "getItem",
          "guessedtype": "function",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  The index of the item to be returned"
            }
          ],
          "description": "Return the item at index or null if the index is not found.",
          "return": {
            "type": "Object",
            "description": "Return the item at index or null if not found"
          }
        },
        "updateStateAfterScroll": {
          "private": "",
          "description": "Update the state variables after scrolling the Carousel view port.",
          "params": [
            {
              "name": "item",
              "type": "Integer",
              "description": " The index to which the Carousel has scrolled to."
            },
            {
              "name": "sentinel",
              "type": "Integer",
              "description": " The last element in the view port."
            }
          ]
        },
        "_validateNumItems": {
          "guessedname": "_validateNumItems",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The numItems value"
            }
          ],
          "description": "Validate the numItems value.",
          "return": {
            "type": "Boolean",
            "description": "The status of the validation"
          }
        },
        "_pagerClickHandler": {
          "guessedname": "_pagerClickHandler",
          "guessedtype": "function",
          "protected": "",
          "description": "The \"click\" handler for anchor pagination.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event object"
            }
          ]
        },
        "getFirstVisibleForPosition": {
          "private": "",
          "description": "Return the index of the first item in the view port for displaying item\nin \"pos\".",
          "params": [
            {
              "name": "pos",
              "type": "Number",
              "description": "  The position of the item to be displayed"
            }
          ]
        },
        "parseCarouselItems": {
          "guessedname": "_parseCarouselItems",
          "guessedtype": "function",
          "protected": "",
          "description": "Find the items within the Carousel and add them to the items table.\nA Carousel item is identified by elements that matches the carousel\nitem element tag."
        },
        "setItemSelection": {
          "private": "",
          "description": "Set the selected item.",
          "params": [
            {
              "name": "newpos",
              "type": "Number",
              "description": " The index of the new position"
            },
            {
              "name": "oldpos",
              "type": "Number",
              "description": " The index of the previous position"
            }
          ]
        },
        "_getSelectedItem": {
          "guessedname": "_getSelectedItem",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The new value for \"selected\" item"
            }
          ],
          "description": "Get the value for the selected item.",
          "return": {
            "type": "Number",
            "description": "The new value that would be set"
          }
        },
        "isAutoPlayOn": {
          "public": "",
          "guessedname": "isAutoPlayOn",
          "guessedtype": "function",
          "description": "Return true if the auto-scrolling of Carousel is \"on\", or false\notherwise.",
          "return": {
            "type": "Boolean",
            "description": "Return true if autoPlay is \"on\", or false\notherwise."
          }
        },
        "addItems": {
          "public": "",
          "guessedname": "addItems",
          "guessedtype": "function",
          "params": [
            {
              "name": "items",
              "type": "Array} An array containing an array of new items each linked to the\nindex where the insertion should take place.\nE.g. [[{content:'<img/>'}, index1], [{content:'<img/>'",
              "description": " , index2]]\nNOTE: An item at index must already exist."
            }
          ],
          "description": "Insert or append multiple items to the Carousel.",
          "return": {
            "type": "Boolean",
            "description": "Return true on success, false otherwise"
          }
        },
        "_selectedItemSetter": {
          "guessedname": "_selectedItemSetter",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "val",
              "type": "Number",
              "description": "  The new value for selectedItem"
            }
          ],
          "description": "Set the value for selectedItem.",
          "return": {
            "type": "Number",
            "description": "The new value that would be set"
          }
        },
        "replaceItem": {
          "public": "",
          "guessedname": "replaceItem",
          "guessedtype": "function",
          "params": [
            {
              "name": "item",
              "type": "String | Object | HTMLElement",
              "description": "  The item to be appended\nto the Carousel. If the parameter is a string, it is assumed to be\nthe content of the newly created item. If the parameter is an\nobject, it is assumed to supply the content and an optional class\nand an optional id of the newly created item."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  The position to where in the list (starts from\nzero)."
            }
          ],
          "description": "Replace an item at index witin Carousel.",
          "return": {
            "type": "Boolean",
            "description": "Return true on success, false otherwise"
          }
        },
        "initAttributes": {
          "public": "",
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Initialize the configuration attributes used to create the Carousel.",
          "params": [
            {
              "name": "attrs",
              "type": "Object",
              "description": "  The set of configuration attributes for\ncreating the Carousel."
            }
          ]
        },
        "_updatePagerButtons": {
          "guessedname": "_updatePagerButtons",
          "guessedtype": "function",
          "protected": "",
          "description": "Update the UI for the pager buttons based on the current page and\nthe number of pages."
        },
        "toString": {
          "public": "",
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Return the string representation of the Carousel.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "addItem": {
          "public": "",
          "guessedname": "addItem",
          "guessedtype": "function",
          "params": [
            {
              "name": "item",
              "type": "String | Object | HTMLElement",
              "description": "  The item to be appended\nto the Carousel. If the parameter is a string, it is assumed to be\nthe content of the newly created item. If the parameter is an\nobject, it is assumed to supply the content and an optional class\nand an optional id of the newly created item."
            },
            {
              "name": "index",
              "type": "Number",
              "description": "  optional The position to where in the list\n(starts from zero)."
            }
          ],
          "description": "Insert or append an item to the Carousel.\nE.g. if Object: ({content:\"Your Content\", id:\"\", className:\"\"}, index)",
          "return": {
            "type": "Boolean",
            "description": "Return true on success, false otherwise"
          }
        },
        "getPageForItem": {
          "public": "",
          "guessedname": "getPageForItem",
          "guessedtype": "function",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "  Index of item"
            }
          ],
          "description": "Get the page an item is on within carousel.",
          "return": {
            "type": "Number",
            "description": "Page item is on"
          }
        },
        "_setClipContainerSize": {
          "guessedname": "_setClipContainerSize",
          "guessedtype": "function",
          "protected": "",
          "description": "Set the clip container size (based on the new numVisible value).",
          "params": [
            {
              "name": "clip",
              "type": "HTMLElement",
              "description": "  The clip container element."
            },
            {
              "name": "num",
              "type": "Number",
              "description": "  optional The number of items per page."
            }
          ]
        },
        "_setupCarouselNavigation": {
          "guessedname": "_setupCarouselNavigation",
          "guessedtype": "function",
          "protected": "",
          "description": "Setup/Create the Carousel navigation element (if needed)."
        },
        "init": {
          "public": "",
          "guessedname": "init",
          "guessedtype": "function",
          "description": "Initialize the Carousel.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement | String",
              "description": "  The html element that represents\nthe Carousel container."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": "  The set of configuration attributes for\ncreating the Carousel."
            }
          ]
        },
        "_animationCompleteHandler": {
          "guessedname": "_animationCompleteHandler",
          "guessedtype": "function",
          "protected": "",
          "description": "Handle the animation complete event.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event."
            },
            {
              "name": "p",
              "type": "Array",
              "description": " The event parameters."
            },
            {
              "name": "o",
              "type": "Object",
              "description": " The object that has the state of the Carousel"
            }
          ]
        }
      },
      "name": "YAHOO.widget.Carousel",
      "extends": "YAHOO.util.Element",
      "guessedname": "Carousel",
      "module": "carousel",
      "namespace": "YAHOO.widget",
      "events": {
        "beforeCarouselElChange": {
          "name": "beforeCarouselElChange",
          "description": "Fires before the value for the configuration attribute 'carouselEl' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCarouselItemElChange": {
          "name": "beforeCarouselItemElChange",
          "description": "Fires before the value for the configuration attribute 'carouselItemEl' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAutoPlayChange": {
          "name": "beforeAutoPlayChange",
          "description": "Fires before the value for the configuration attribute 'autoPlay' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "afterScroll": {
          "guessedname": "afterScrollEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the Carousel has scrolled to the previous or\nnext page.  Passes back the index of the first and last visible items in\nthe Carousel.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "firstVisibleChange": {
          "name": "firstVisibleChange",
          "description": "Fires when the value for the configuration attribute 'firstVisible' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "carouselItemElChange": {
          "name": "carouselItemElChange",
          "description": "Fires when the value for the configuration attribute 'carouselItemEl' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "revealAmountChange": {
          "name": "revealAmountChange",
          "description": "Fires when the value for the configuration attribute 'revealAmount' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeScroll": {
          "guessedname": "beforeScrollEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the Carousel is about to scroll to the previous\nor next page.  Passes back the index of the first and last visible items\nin the Carousel and the direction (backward/forward) of the scroll.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeSelectOnScrollChange": {
          "name": "beforeSelectOnScrollChange",
          "description": "Fires before the value for the configuration attribute 'selectOnScroll' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAnimationChange": {
          "name": "beforeAnimationChange",
          "description": "Fires before the value for the configuration attribute 'animation' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "navigationStateChange": {
          "guessedname": "navigationStateChangeEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the state of either one of the navigation\nbuttons are changed from enabled to disabled or vice versa.  Passes back\nthe state (true/false) of the previous and next buttons.  The value true\nsignifies the button is enabled, false signifies disabled.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeNumItemsChange": {
          "name": "beforeNumItemsChange",
          "description": "Fires before the value for the configuration attribute 'numItems' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pageChange": {
          "guessedname": "pageChangeEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires after the Carousel has scrolled to the previous or\nnext page.  Passes back the page number of the current page.  Note\nthat the first page number is zero.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeRevealAmountChange": {
          "name": "beforeRevealAmountChange",
          "description": "Fires before the value for the configuration attribute 'revealAmount' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "selectOnScrollChange": {
          "name": "selectOnScrollChange",
          "description": "Fires when the value for the configuration attribute 'selectOnScroll' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "hide": {
          "guessedname": "hideEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the Carousel is hidden.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeNumPagesChange": {
          "name": "beforeNumPagesChange",
          "description": "Fires before the value for the configuration attribute 'numPages' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "itemAdded": {
          "guessedname": "itemAddedEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when an item has been added to the Carousel.  Passes\nback the content of the item that would be added, the index at which the\nitem would be added, and the event itself.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "autoPlayIntervalChange": {
          "name": "autoPlayIntervalChange",
          "description": "Fires when the value for the configuration attribute 'autoPlayInterval' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "allItemsRemovedEvent": {
          "guessedname": "allItemsRemovedEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when all items have been removed from the Carousel.\nSee\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeCurrentPageChange": {
          "name": "beforeCurrentPageChange",
          "description": "Fires before the value for the configuration attribute 'currentPage' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAutoPlayIntervalChange": {
          "name": "beforeAutoPlayIntervalChange",
          "description": "Fires before the value for the configuration attribute 'autoPlayInterval' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "numPagesChange": {
          "name": "numPagesChange",
          "description": "Fires when the value for the configuration attribute 'numPages' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "carouselElChange": {
          "name": "carouselElChange",
          "description": "Fires when the value for the configuration attribute 'carouselEl' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeIsVerticalChange": {
          "name": "beforeIsVerticalChange",
          "description": "Fires before the value for the configuration attribute 'isVertical' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "navigationChange": {
          "name": "navigationChange",
          "description": "Fires when the value for the configuration attribute 'navigation' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "focus": {
          "guessedname": "focusEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the Carousel gains focus.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "loadItems": {
          "guessedname": "loadItemsEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the Carousel needs more items to be loaded for\ndisplaying them.  Passes back the first and last visible items in the\nCarousel, and the number of items needed to be loaded.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeIsCircularChange": {
          "name": "beforeIsCircularChange",
          "description": "Fires before the value for the configuration attribute 'isCircular' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "isCircularChange": {
          "name": "isCircularChange",
          "description": "Fires when the value for the configuration attribute 'isCircular' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "stopAutoPlay": {
          "guessedname": "stopAutoPlayEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the auto play has been stopped in the Carousel.\nSee\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeNavigationChange": {
          "name": "beforeNavigationChange",
          "description": "Fires before the value for the configuration attribute 'navigation' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "itemSelected": {
          "guessedname": "itemSelectedEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when an item has been selected in the Carousel.\nPasses back the index of the selected item in the Carousel.  Note, that\nthe index begins from zero.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "scrollIncrementChange": {
          "name": "scrollIncrementChange",
          "description": "Fires when the value for the configuration attribute 'scrollIncrement' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHide": {
          "guessedname": "beforeHideEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires before the Carousel is hidden.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeNumVisibleChange": {
          "name": "beforeNumVisibleChange",
          "description": "Fires before the value for the configuration attribute 'numVisible' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "itemReplaced": {
          "guessedname": "itemReplacedEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when an item has been replaced in the Carousel.\nPasses back the content of the item that was replaced, the content\nof the new item, the index where the replacement occurred, and the event\nitself.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "itemRemoved": {
          "guessedname": "itemRemovedEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when an item has been removed from the Carousel.\nPasses back the content of the item that would be removed, the index\nfrom which the item would be removed, and the event itself.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "currentPageChange": {
          "name": "currentPageChange",
          "description": "Fires when the value for the configuration attribute 'currentPage' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeLastVisibleChange": {
          "name": "beforeLastVisibleChange",
          "description": "Fires before the value for the configuration attribute 'lastVisible' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "lastVisibleChange": {
          "name": "lastVisibleChange",
          "description": "Fires when the value for the configuration attribute 'lastVisible' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "isVerticalChange": {
          "name": "isVerticalChange",
          "description": "Fires when the value for the configuration attribute 'isVertical' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSelectedItemChange": {
          "name": "beforeSelectedItemChange",
          "description": "Fires before the value for the configuration attribute 'selectedItem' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "blur": {
          "guessedname": "blurEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the Carousel loses focus.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "show": {
          "guessedname": "showEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the Carousel is shown.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeFirstVisibleChange": {
          "name": "beforeFirstVisibleChange",
          "description": "Fires before the value for the configuration attribute 'firstVisible' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "autoPlayChange": {
          "name": "autoPlayChange",
          "description": "Fires when the value for the configuration attribute 'autoPlay' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "startAutoPlay": {
          "guessedname": "startAutoPlayEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the auto play has started in the Carousel.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "animationChange": {
          "name": "animationChange",
          "description": "Fires when the value for the configuration attribute 'animation' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePageChange": {
          "guessedname": "beforePageChangeEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the Carousel is about to scroll to the previous\nor next page.  Passes back the page number of the current page.  Note\nthat the first page number is zero.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "beforeScrollIncrementChange": {
          "name": "beforeScrollIncrementChange",
          "description": "Fires before the value for the configuration attribute 'scrollIncrement' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeShow": {
          "guessedname": "beforeShowEvent",
          "type": "YAHOO.util.CustomEvent",
          "guessedtype": "property",
          "description": "Fires when the Carousel is about to be shown.  See\n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a>\nfor more information on listening for this event."
        },
        "numVisibleChange": {
          "name": "numVisibleChange",
          "description": "Fires when the value for the configuration attribute 'numVisible' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "numItemsChange": {
          "name": "numItemsChange",
          "description": "Fires when the value for the configuration attribute 'numItems' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "selectedItemChange": {
          "name": "selectedItemChange",
          "description": "Fires when the value for the configuration attribute 'selectedItem' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The Carousel widget.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement | String",
              "description": "  The HTML element that represents the\nthe container that houses the Carousel."
            },
            {
              "name": "cfg",
              "type": "Object",
              "description": "  (optional) The configuration values"
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The Carousel widget.",
      "file": "Carousel.js",
      "configs": {
        "isCircular": {
          "default": "false",
          "type": "Boolean",
          "description": "Set this to true to wrap scrolling of the contents\nin the Carousel."
        },
        "currentPage": {
          "type": "Number",
          "description": "The current page number (read-only.)"
        },
        "autoPlayInterval": {
          "type": "Number",
          "description": "The delay in milli-seconds for scrolling the\nCarousel during auto-play.\nNote: The startAutoPlay() method needs to be invoked to trigger\nautomatic scrolling of Carousel."
        },
        "scrollIncrement": {
          "default": "1",
          "type": "Number",
          "description": "The number of items to scroll by for arrow keys."
        },
        "isVertical": {
          "default": "false",
          "type": "Boolean",
          "description": "True if the orientation of the Carousel is vertical"
        },
        "numItems": {
          "type": "Number",
          "description": "The number of items in the Carousel."
        },
        "selectedItem": {
          "type": "Number",
          "description": "The index of the selected item."
        },
        "numVisible": {
          "default": "3",
          "type": "Number",
          "description": "The number of visible items in the Carousel's\nviewport."
        },
        "lastVisible": {
          "type": "Number",
          "description": "The last item visible in the carousel."
        },
        "carouselItemEl": {
          "default": "LI",
          "type": "Boolean",
          "description": "The type of the list of items within the Carousel."
        },
        "animation": {
          "default": "<br>\n{ speed: 0, // the animation speed (in seconds)<br>\neffect: null } // the animation effect (like\nYAHOO.util.Easing.easeOut)",
          "type": "Object",
          "description": "The optional animation attributes for the Carousel."
        },
        "firstVisible": {
          "default": "0",
          "type": "Number",
          "description": "The index to start the Carousel from (indexes begin\nfrom zero)"
        },
        "revealAmount": {
          "default": "0",
          "type": "Number",
          "description": "The percentage of the item to be revealed on each\nside of the Carousel (before and after the first and last item\nin the Carousel's viewport.)"
        },
        "autoPlay": {
          "type": "Number",
          "description": "Set this to time in milli-seconds to have the\nCarousel automatically scroll the contents.",
          "deprecated": "Use autoPlayInterval instead."
        },
        "selectOnScroll": {
          "default": "true",
          "type": "Boolean",
          "description": "Set this to true to automatically set focus to\nfollow scrolling in the Carousel."
        },
        "carouselEl": {
          "default": "OL",
          "type": "Boolean",
          "description": "The type of the Carousel element."
        },
        "navigation": {
          "default": "<br>\n{ prev: null, // the previous navigation element<br>\nnext: null } // the next navigation element",
          "type": "Object",
          "description": "The set of navigation controls for Carousel"
        },
        "numPages": {
          "type": "Number",
          "description": "The number of pages in the carousel."
        }
      },
      "properties": {
        "HORZ_MIN_WIDTH": {
          "guessedname": "HORZ_MIN_WIDTH",
          "default": "180",
          "guessedtype": "property",
          "description": "The minimum width of the horizontal Carousel container to support\nthe navigation buttons."
        },
        "FIRST_NAV": {
          "guessedname": "FIRST_NAV",
          "default": "\" yui-carousel-first-button\"",
          "guessedtype": "property",
          "description": "The class name of the first Carousel navigation button."
        },
        "_clipEl": {
          "guessedname": "_clipEl",
          "private": "",
          "guessedtype": "property",
          "description": "The Carousel clipping container element."
        },
        "_itemAttrCache": {
          "guessedname": "_itemAttrCache",
          "private": "",
          "guessedtype": "property",
          "description": "Cache the Carousel item attributes."
        },
        "NAVIGATION": {
          "guessedname": "NAVIGATION",
          "default": "\"yui-carousel-nav\"",
          "guessedtype": "property",
          "description": "The navigation element container class name."
        },
        "MULTI_ROW": {
          "guessedname": "MULTI_ROW",
          "default": "\"yui-carousel-multi-row\"",
          "guessedtype": "property",
          "description": "The class name of a multirow Carousel."
        },
        "VERT_MIN_WIDTH": {
          "guessedname": "VERT_MIN_WIDTH",
          "default": "155",
          "guessedtype": "property",
          "description": "The minimum width of the vertical Carousel container to support\nthe navigation buttons."
        },
        "FIRST_VISIBLE": {
          "guessedname": "FIRST_VISIBLE",
          "default": "0",
          "guessedtype": "property",
          "description": "The offset of the first visible item in the Carousel."
        },
        "SELECTED_ITEM": {
          "guessedname": "SELECTED_ITEM",
          "default": "\"yui-carousel-item-selected\"",
          "guessedtype": "property",
          "description": "The class name of the selected item."
        },
        "instances": {
          "private": "",
          "guessedname": "instances",
          "static": "",
          "guessedtype": "property",
          "description": "The internal table of Carousel instances."
        },
        "SELECTED_NAV": {
          "guessedname": "SELECTED_NAV",
          "default": "\"yui-carousel-nav-page-selected\"",
          "guessedtype": "property",
          "description": "The class name of the selected paging navigation."
        },
        "_navEl": {
          "guessedname": "_navEl",
          "private": "",
          "guessedtype": "property",
          "description": "The Carousel navigation."
        },
        "VERTICAL": {
          "guessedname": "VERTICAL",
          "default": "\"yui-carousel-vertical\"",
          "guessedtype": "property",
          "description": "The class name of a vertically oriented Carousel."
        },
        "CAROUSEL": {
          "guessedname": "CAROUSEL",
          "default": "\"yui-carousel\"",
          "guessedtype": "property",
          "description": "The class name of the Carousel element."
        },
        "_itemsTable": {
          "guessedname": "_itemsTable",
          "private": "",
          "guessedtype": "property",
          "description": "The table of items in the Carousel.\nThe numItems is the number of items in the Carousel, items being the\narray of items in the Carousel.  The size is the size of a single\nitem in the Carousel.  It is cached here for efficiency (to avoid\ncomputing the size multiple times)."
        },
        "_rows": {
          "guessedname": "_rows",
          "private": "",
          "guessedtype": "property",
          "description": "Number of rows for a multirow carousel."
        },
        "NEXT_NAV": {
          "guessedname": "NEXT_NAV",
          "default": "\" yui-carousel-next-button\"",
          "guessedtype": "property",
          "description": "The class name of the next Carousel navigation button."
        },
        "FOCUSSED_BUTTON": {
          "guessedname": "FOCUSSED_BUTTON",
          "default": "\"yui-carousel-button-focus\"",
          "guessedtype": "property",
          "description": "The class name of the Carousel navigation button that has focus."
        },
        "ITEM_LOADING_CONTENT": {
          "guessedname": "ITEM_LOADING_CONTENT",
          "default": "\"Loading\"",
          "guessedtype": "property",
          "description": "The content to be used as the progress indicator when the item\nis still being loaded."
        },
        "MAX_PAGER_BUTTONS": {
          "guessedname": "MAX_PAGER_BUTTONS",
          "default": "5",
          "guessedtype": "property",
          "description": "The maximum number of pager buttons allowed beyond which the UI\nof the pager would be a drop-down of pages instead of buttons."
        },
        "FIRST_PAGE": {
          "guessedname": "FIRST_PAGE",
          "default": "\"yui-carousel-nav-first-page\"",
          "guessedtype": "property",
          "description": "The class name of a first page element."
        },
        "ROW": {
          "guessedname": "ROW",
          "default": "\"yui-carousel-new-row\"",
          "guessedtype": "property",
          "description": "The class name of a row in a multirow Carousel."
        },
        "_prevEnabled": {
          "guessedname": "_prevEnabled",
          "private": "",
          "guessedtype": "property",
          "description": "Status of the previous navigation item."
        },
        "CONTAINER": {
          "guessedname": "CONTAINER",
          "default": "\"yui-carousel-container\"",
          "guessedtype": "property",
          "description": "The class name of the Carousel's container element."
        },
        "_pagination": {
          "guessedname": "_pagination",
          "private": "",
          "guessedtype": "property",
          "description": "The Carousel pagination structure."
        },
        "NEXT_PAGE": {
          "guessedname": "NEXT_PAGE",
          "default": "\"yui-carousel-next\"",
          "guessedtype": "property",
          "description": "The class name of the next navigation link. This variable is\nnot only used for styling, but also for identifying the link\nwithin the Carousel container."
        },
        "_firstItem": {
          "guessedname": "_firstItem",
          "private": "",
          "guessedtype": "property",
          "description": "The current first index of the Carousel."
        },
        "PAGINATION": {
          "guessedname": "PAGINATION",
          "default": "\"yui-carousel-pagination\"",
          "guessedtype": "property",
          "description": "The class name for the pagination container"
        },
        "WidgetName": {
          "private": "",
          "guessedname": "WidgetName",
          "static": "",
          "guessedtype": "property",
          "description": "The widget name."
        },
        "PAGER_ITEM": {
          "guessedname": "PAGER_ITEM",
          "default": "\"yui-carousel-pager-item\"",
          "guessedtype": "property",
          "description": "The class name for an item in the pager UL or dropdown menu."
        },
        "VERTICAL_CONTAINER": {
          "guessedname": "VERTICAL_CONTAINER",
          "default": "\"yui-carousel-vertical-container\"",
          "guessedtype": "property",
          "description": "The class name of a vertical Carousel's container element."
        },
        "_isAnimationInProgress": {
          "guessedname": "_isAnimationInProgress",
          "private": "",
          "guessedtype": "property",
          "description": "Is the animation still in progress?"
        },
        "HORIZONTAL": {
          "guessedname": "HORIZONTAL",
          "default": "\"yui-carousel-horizontal\"",
          "guessedtype": "property",
          "description": "The class name of a horizontally oriented Carousel."
        },
        "NAV_CONTAINER": {
          "guessedname": "NAV_CONTAINER",
          "default": "\"yui-carousel-buttons\"",
          "guessedtype": "property",
          "description": "The class name for the navigation container for prev/next."
        },
        "CONTENT": {
          "guessedname": "CONTENT",
          "default": "\"yui-carousel-content\"",
          "guessedtype": "property",
          "description": "The class name of the Carousel's container element."
        },
        "ITEM_LOADING": {
          "guessedname": "ITEM_LOADING",
          "default": "The progress indicator (spinner) image CSS class",
          "guessedtype": "property",
          "description": "The element to be used as the progress indicator when the item\nis still being loaded."
        },
        "NUM_VISIBLE": {
          "guessedname": "NUM_VISIBLE",
          "default": "3",
          "guessedtype": "property",
          "description": "The number of visible items in the Carousel."
        },
        "_navBtns": {
          "guessedname": "_navBtns",
          "private": "",
          "guessedtype": "property",
          "description": "The Carousel navigation buttons."
        },
        "FIRST_NAV_DISABLED": {
          "guessedname": "FIRST_NAV_DISABLED",
          "default": "\"yui-carousel-first-button-disabled\"",
          "guessedtype": "property",
          "description": "The class name of a first disabled navigation button."
        },
        "PREV_PAGE": {
          "guessedname": "PREV_PAGE",
          "default": "\"yui-carousel-prev\"",
          "guessedtype": "property",
          "description": "The class name of the previous navigation link. This variable\nis not only used for styling, but also for identifying the link\nwithin the Carousel container."
        },
        "NEXT_BUTTON_TEXT": {
          "guessedname": "NEXT_BUTTON_TEXT",
          "default": "\"Next Page\"",
          "guessedtype": "property",
          "description": "The next navigation button name/text."
        },
        "MIN_WIDTH": {
          "guessedname": "MIN_WIDTH",
          "default": "\"yui-carousel-min-width\"",
          "guessedtype": "property",
          "description": "The class name that will be set if the Carousel adjusts itself\nfor a minimum width."
        },
        "_animObj": {
          "guessedname": "_animObj",
          "private": "",
          "guessedtype": "property",
          "description": "The Animation object."
        },
        "_recomputeSize": {
          "guessedname": "_recomputeSize",
          "private": "",
          "guessedtype": "property",
          "description": "Whether the Carousel size needs to be recomputed or not?"
        },
        "PAGER_PREFIX_TEXT": {
          "guessedname": "PAGER_PREFIX_TEXT",
          "default": "\"Go to page \"",
          "guessedtype": "property",
          "description": "The prefix text for the pager in case the UI is a drop-down."
        },
        "_carouselEl": {
          "guessedname": "_carouselEl",
          "private": "",
          "guessedtype": "property",
          "description": "The Carousel element."
        },
        "CAROUSEL_EL": {
          "guessedname": "CAROUSEL_EL",
          "default": "\"yui-carousel-element\"",
          "guessedtype": "property",
          "description": "The class name of the container of the items in the Carousel."
        },
        "_nextEnabled": {
          "guessedname": "_nextEnabled",
          "private": "",
          "guessedtype": "property",
          "description": "Status of the next navigation item."
        },
        "_isAutoPlayInProgress": {
          "guessedname": "_isAutoPlayInProgress",
          "private": "",
          "guessedtype": "property",
          "description": "Is the auto-scrolling of Carousel in progress?"
        },
        "BUTTON": {
          "guessedname": "BUTTON",
          "default": "\"yui-carousel-button\"",
          "guessedtype": "property",
          "description": "The class name of the Carousel navigation buttons."
        },
        "_cols": {
          "guessedname": "_cols",
          "private": "",
          "guessedtype": "property",
          "description": "Number of cols for a multirow carousel."
        },
        "VISIBLE": {
          "guessedname": "VISIBLE",
          "default": "\"yui-carousel-visible\"",
          "guessedtype": "property",
          "description": "The class name of a visible Carousel."
        },
        "_pages": {
          "guessedname": "_pages",
          "private": "",
          "guessedtype": "property",
          "description": "The Carousel pages structure.\nThis is an object of the total number of pages and the current page."
        },
        "PREVIOUS_BUTTON_TEXT": {
          "guessedname": "PREVIOUS_BUTTON_TEXT",
          "default": "\"Previous Page\"",
          "guessedtype": "property",
          "description": "The previous navigation button name/text."
        },
        "_hasRendered": {
          "guessedname": "_hasRendered",
          "private": "",
          "guessedtype": "property",
          "description": "Is the Carousel rendered already?"
        },
        "_hasFocus": {
          "guessedname": "_hasFocus",
          "private": "",
          "guessedtype": "property",
          "description": "Does the Carousel element have focus?"
        },
        "PAGE_FOCUS": {
          "guessedname": "PAGE_FOCUS",
          "default": "\"yui-carousel-nav-page-focus\"",
          "guessedtype": "property",
          "description": "The class name of the focussed page navigation.  This class is\nspecifically used for the ugly focus handling in Opera."
        },
        "DISABLED": {
          "guessedname": "DISABLED",
          "default": "\"yui-carousel-button-disabled\"",
          "guessedtype": "property",
          "description": "The class name of a disabled navigation button."
        }
      }
    },
    "YAHOO.util.Color": {
      "name": "YAHOO.util.Color",
      "shortname": "Color",
      "methods": {
        "rgb2hex": {
          "guessedname": "rgb2hex",
          "guessedtype": "function",
          "description": "Converts decimal rgb values into a hex string\n255,255,255 -> FFFFFF",
          "params": [
            {
              "name": "r",
              "type": "int|[int, int, int]",
              "description": "  the red value, or an\narray containing all three parameters"
            },
            {
              "name": "g",
              "type": "int",
              "description": "  the green value"
            },
            {
              "name": "b",
              "type": "int",
              "description": "  the blue value"
            }
          ],
          "return": {
            "type": "string",
            "description": "the hex string"
          }
        },
        "websafe": {
          "guessedname": "websafe",
          "guessedtype": "function",
          "description": "Returns the closest websafe color to the supplied rgb value.",
          "params": [
            {
              "name": "r",
              "type": "int|[int, int, int]",
              "description": "  the red value, or an\narray containing all three parameters"
            },
            {
              "name": "g",
              "type": "int",
              "description": "  the green value"
            },
            {
              "name": "b",
              "type": "int",
              "description": "  the blue value"
            }
          ],
          "return": {
            "type": "[int, int, int]",
            "description": "an array containing the closes\nwebsafe rgb colors."
          }
        },
        "hex2rgb": {
          "guessedname": "hex2rgb",
          "guessedtype": "function",
          "description": "Converts a hex string to rgb",
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "  the hex string"
            }
          ],
          "return": {
            "type": "[int, int, int]",
            "description": "an array containing the rgb values"
          }
        },
        "dec2hex": {
          "guessedname": "dec2hex",
          "guessedtype": "function",
          "description": "Converts an int 0...255 to hex pair 00...FF",
          "params": [
            {
              "name": "n",
              "type": "int",
              "description": "  the number to convert"
            }
          ],
          "return": {
            "type": "string",
            "description": "the hex equivalent"
          }
        },
        "hex2dec": {
          "guessedname": "hex2dec",
          "guessedtype": "function",
          "description": "Converts a hex pair 00...FF to an int 0...255",
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "  the hex pair to convert"
            }
          ],
          "return": {
            "type": "int",
            "description": "the decimal"
          }
        },
        "real2dec": {
          "guessedname": "real2dec",
          "guessedtype": "function",
          "description": "Converts 0-1 to 0-255",
          "params": [
            {
              "name": "n",
              "type": "float",
              "description": "  the number to convert"
            }
          ],
          "return": {
            "type": "int",
            "description": "a number 0-255"
          }
        },
        "rgb2hsv": {
          "guessedname": "rgb2hsv",
          "guessedtype": "function",
          "description": "Converts to RGB [255,255,255] to HSV (h[0-360], s[0-1]), v[0-1]",
          "params": [
            {
              "name": "r",
              "type": "int|[int, int, int]",
              "description": "  the red value, or an\narray containing all three parameters"
            },
            {
              "name": "g",
              "type": "int",
              "description": "  the green value"
            },
            {
              "name": "b",
              "type": "int",
              "description": "  the blue value"
            }
          ],
          "return": {
            "type": "[int, float, float]",
            "description": "the value converted to hsv"
          }
        },
        "hsv2rgb": {
          "guessedname": "hsv2rgb",
          "guessedtype": "function",
          "description": "Converts HSV (h[0-360], s[0-1]), v[0-1] to RGB [255,255,255]",
          "params": [
            {
              "name": "h",
              "type": "int|[int, float, float]",
              "description": "  the hue, or an\narray containing all three parameters"
            },
            {
              "name": "s",
              "type": "float",
              "description": "  the saturation"
            },
            {
              "name": "v",
              "type": "float",
              "description": "  the value/brightness"
            }
          ],
          "return": {
            "type": "[int, int, int]",
            "description": "the red, green, blue values in\ndecimal."
          }
        }
      },
      "guessedname": "Color",
      "module": "colorpicker",
      "namespace": "YAHOO.util",
      "guessedtype": "function",
      "file": "Color.js",
      "description": "Provides color conversion and validation utils"
    },
    "YAHOO.widget.MenuBar": {
      "shortname": "MenuBar",
      "superclass": "YAHOO.widget.Menu",
      "methods": {
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the menu bar.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "_onKeyDown": {
          "private": "",
          "guessedname": "_onKeyDown",
          "guessedtype": "function",
          "description": "\"keydown\" Custom Event handler for the menu bar.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenuBar",
              "type": "YAHOO.widget.MenuBar",
              "description": " Object representing the menu bar \nthat fired the event."
            }
          ]
        },
        "_onClick": {
          "guessedname": "_onClick",
          "guessedtype": "function",
          "protected": "",
          "description": "\"click\" event handler for the menu bar.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event that \nwas fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event was fired."
            },
            {
              "name": "p_oMenuBar",
              "type": "YAHOO.widget.MenuBar",
              "description": " Object representing the menu bar \nthat fired the event."
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The MenuBar class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the menu bar."
            },
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source for the \nmenu bar."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-22445964\">HTMLDivElement</a>",
              "description": " Object specifying \nthe <code>&#60;div&#62;</code> element of the menu bar."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-94282980\">HTMLSelectElement</a>",
              "description": " Object \nspecifying the <code>&#60;select&#62;</code> element to be used as the data \nsource for the menu bar."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the menu bar. See configuration class documentation for\nmore details."
            }
          ]
        },
        "checkPosition": {
          "private": "",
          "description": "Checks to make sure that the value of the \"position\" property \nis one of the supported strings. Returns true if the position is supported.",
          "params": [
            {
              "name": "p_sPosition",
              "type": "Object",
              "description": " String specifying the position of the menu."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "configSubmenuToggle": {
          "guessedname": "configSubmenuToggle",
          "guessedtype": "function",
          "description": "Event handler for when the \"submenutoggleregion\" configuration property of \na MenuBar changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " The name of the event that was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Collection of arguments sent when the event was fired."
            }
          ]
        },
        "initDefaultConfig": {
          "guessedname": "initDefaultConfig",
          "guessedtype": "function",
          "description": "Initializes the class's configurable properties which can be\nchanged using the menu bar's Config object (\"cfg\")."
        }
      },
      "name": "YAHOO.widget.MenuBar",
      "extends": "YAHOO.widget.Menu",
      "guessedname": "MenuBar",
      "module": "menu",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "Horizontal collection of items, each of which can contain a submenu.",
          "params": [
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;div&#62;</code> element of the menu bar."
            },
            {
              "name": "p_oElement",
              "type": "String",
              "description": " String specifying the id attribute of the \n<code>&#60;select&#62;</code> element to be used as the data source for the \nmenu bar."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-22445964\">HTMLDivElement</a>",
              "description": " Object specifying \nthe <code>&#60;div&#62;</code> element of the menu bar."
            },
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-\none-html.html#ID-94282980\">HTMLSelectElement</a>",
              "description": " Object \nspecifying the <code>&#60;select&#62;</code> element to be used as the data \nsource for the menu bar."
            },
            {
              "name": "p_oConfig",
              "type": "Object",
              "description": " Optional. Object literal specifying the \nconfiguration for the menu bar. See configuration class documentation for\nmore details."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Horizontal collection of items, each of which can contain a submenu.",
      "file": "menubar.js",
      "configs": {
        "position": {
          "default": "static",
          "type": "String",
          "description": "String indicating how a menu bar should be positioned on the \nscreen.  Possible values are \"static\" and \"dynamic.\"  Static menu bars \nare visible by default and reside in the normal flow of the document \n(CSS position: static).  Dynamic menu bars are hidden by default, reside\nout of the normal flow of the document (CSS position: absolute), and can \noverlay other elements on the screen."
        },
        "autosubmenudisplay": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if submenus are automatically made \nvisible when the user mouses over the menu bar's items."
        },
        "submenutoggleregion": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if only a specific region of a MenuBarItem should toggle the \ndisplay of a submenu.  The default width of the region is determined by the value of the\nSUBMENU_TOGGLE_REGION_WIDTH property.  If set to true, the autosubmenudisplay \nconfiguration property will be set to false, and any click event listeners will not be \ncalled when the user clicks inside the submenu toggle region of a MenuBarItem.  If the \nuser clicks outside of the submenu toggle region, the MenuBarItem will maintain its \nstandard behavior."
        },
        "submenualignment": {
          "default": "[\"tl\",\"bl\"]",
          "type": "Array",
          "description": "Array defining how submenus should be aligned to their \nparent menu bar item. The format is: [itemCorner, submenuCorner]."
        }
      },
      "properties": {
        "CSS_CLASS_NAME": {
          "final": "",
          "guessedname": "CSS_CLASS_NAME",
          "default": "\"yuimenubar\"",
          "type": "String",
          "guessedtype": "property",
          "description": "String representing the CSS class(es) to be applied to the menu \nbar's <code>&#60;div&#62;</code> element."
        },
        "SUBMENU_TOGGLE_REGION_WIDTH": {
          "final": "",
          "guessedname": "SUBMENU_TOGGLE_REGION_WIDTH",
          "default": "20",
          "type": "Number",
          "guessedtype": "property",
          "description": "Width (in pixels) of the area of a MenuBarItem that, when pressed, will toggle the\ndisplay of the MenuBarItem's submenu."
        }
      }
    },
    "YAHOO.lang": {
      "name": "YAHOO.lang",
      "shortname": "YAHOO.lang",
      "methods": {
        "dump": {
          "guessedname": "dump",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": "  The object to dump"
            },
            {
              "name": "d",
              "type": "int",
              "description": "  How deep to recurse child objects, default 3"
            }
          ],
          "since": "2.3.0",
          "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.",
          "return": {
            "type": "String",
            "description": "the dump result"
          }
        },
        "isObject": {
          "guessedname": "isObject",
          "guessedtype": "function",
          "description": "Determines whether or not the provided object is of type object\nor function",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": " The object being testing"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the result"
          }
        },
        "merge": {
          "guessedname": "merge",
          "guessedtype": "function",
          "params": [
            {
              "name": "arguments",
              "type": "Object*",
              "description": "  the objects to merge"
            }
          ],
          "since": "2.3.0",
          "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.",
          "return": {
            "type": "",
            "description": "the new merged object"
          }
        },
        "isNumber": {
          "guessedname": "isNumber",
          "guessedtype": "function",
          "description": "Determines whether or not the provided object is a legal number",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": " The object being testing"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the result"
          }
        },
        "isBoolean": {
          "guessedname": "isBoolean",
          "guessedtype": "function",
          "description": "Determines whether or not the provided object is a boolean",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": " The object being testing"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the result"
          }
        },
        "isFunction": {
          "guessedname": "isFunction",
          "guessedtype": "function",
          "description": "Determines whether or not the provided object is a function.\nNote: Internet Explorer thinks certain functions are objects:\nvar obj = document.createElement(\"object\");\nYAHOO.lang.isFunction(obj.getAttribute) // reports false in IE\nvar input = document.createElement(\"input\"); // append to body\nYAHOO.lang.isFunction(input.focus) // reports false in IE\nYou will have to implement additional tests if these functions\nmatter to you.",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": " The object being testing"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the result"
          }
        },
        "augmentProto": {
          "guessedname": "augmentProto",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "r",
              "type": "Function",
              "description": "  the object to receive the augmentation"
            },
            {
              "name": "s",
              "type": "Function",
              "description": "  the object that supplies the properties to augment"
            },
            {
              "name": "arguments",
              "type": "String*|boolean",
              "description": " zero or more properties methods \nto augment the receiver with.  If none specified, everything \nin the supplier will be used unless it would overwrite an existing \nproperty in the receiver.  if true is specified as the third \nparameter, all properties will be applied and will overwrite an \nexisting property in the receiver"
            }
          ],
          "see": "YAHOO.lang.augmentObject",
          "description": "Same as YAHOO.lang.augmentObject, except it only applies prototype properties"
        },
        "trim": {
          "guessedname": "trim",
          "guessedtype": "function",
          "params": [
            {
              "name": "s",
              "type": "string",
              "description": "  the string to trim"
            }
          ],
          "since": "2.3.0",
          "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.",
          "return": {
            "type": "string",
            "description": "the trimmed string"
          }
        },
        "hasOwnProperty": {
          "guessedname": "hasOwnProperty",
          "guessedtype": "property",
          "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.\nThis abstraction is provided to enable hasOwnProperty for Safari 1.3.x.\nThere is a discrepancy between YAHOO.lang.hasOwnProperty and\nObject.prototype.hasOwnProperty when the property is a primitive added to\nboth the instance AND prototype with the same value:\n<pre>\nvar A = function() {};\nA.prototype.foo = 'foo';\nvar a = new A();\na.foo = 'foo';\nalert(a.hasOwnProperty('foo')); // true\nalert(YAHOO.lang.hasOwnProperty(a, 'foo')); // false when using fallback\n</pre>",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": " The object being testing"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "  the name of the property to test"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the result"
          }
        },
        "isNull": {
          "guessedname": "isNull",
          "guessedtype": "function",
          "description": "Determines whether or not the provided object is null",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": " The object being testing"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the result"
          }
        },
        "later": {
          "guessedname": "later",
          "guessedtype": "function",
          "params": [
            {
              "name": "when",
              "type": "int",
              "description": "  the number of milliseconds to wait until the fn \nis executed"
            },
            {
              "name": "o",
              "type": "",
              "description": " the context object"
            },
            {
              "name": "fn",
              "type": "Function|String",
              "description": "  the function to execute or the name of \nthe method in the 'o' object to execute"
            },
            {
              "name": "data",
              "type": "",
              "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]"
            },
            {
              "name": "periodic",
              "type": "boolean",
              "description": "  if true, executes continuously at supplied \ninterval until canceled"
            }
          ],
          "since": "2.4.0",
          "description": "Executes the supplied function in the context of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.",
          "return": {
            "type": "",
            "description": "a timer object. Call the cancel() method on this object to \nstop the timer."
          }
        },
        "isUndefined": {
          "guessedname": "isUndefined",
          "guessedtype": "function",
          "description": "Determines whether or not the provided object is undefined",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": " The object being testing"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the result"
          }
        },
        "augment": {
          "guessedname": "augment",
          "static": "",
          "guessedtype": "property",
          "params": [
            {
              "name": "r",
              "type": "Function",
              "description": "  the object to receive the augmentation"
            },
            {
              "name": "s",
              "type": "Function",
              "description": "  the object that supplies the properties to augment"
            },
            {
              "name": "arguments",
              "type": "String*|boolean",
              "description": " zero or more properties methods to \naugment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver.  if true\nis specified as the third parameter, all properties will\nbe applied and will overwrite an existing property in\nthe receiver"
            }
          ],
          "see": "YAHOO.lang.augmentObject",
          "description": "Same as YAHOO.lang.augmentObject, except it only applies prototype \nproperties.  This is an alias for augmentProto."
        },
        "substitute": {
          "guessedname": "substitute",
          "guessedtype": "function",
          "params": [
            {
              "name": "s",
              "type": "String",
              "description": "  The string that will be modified."
            },
            {
              "name": "o",
              "type": "Object",
              "description": "  An object containing the replacement values"
            },
            {
              "name": "f",
              "type": "Function",
              "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."
            }
          ],
          "since": "2.3.0",
          "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key/value\npairs.",
          "return": {
            "type": "String",
            "description": "the substituted string"
          }
        },
        "extend": {
          "guessedname": "extend",
          "static": "",
          "guessedtype": "function",
          "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.",
          "params": [
            {
              "name": "subc",
              "type": "Function",
              "description": "   the object to modify"
            },
            {
              "name": "superc",
              "type": "Function",
              "description": " the object to inherit"
            },
            {
              "name": "overrides",
              "type": "Object",
              "description": "  additional properties/methods to add to the\nsubclass prototype.  These will override the\nmatching items obtained from the superclass \nif present."
            }
          ]
        },
        "isArray": {
          "guessedname": "isArray",
          "guessedtype": "function",
          "description": "Determines wheather or not the provided object is an array.",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": " The object being testing"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the result"
          }
        },
        "augmentObject": {
          "guessedname": "augmentObject",
          "static": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "r",
              "type": "Function",
              "description": "  the object to receive the augmentation"
            },
            {
              "name": "s",
              "type": "Function",
              "description": "  the object that supplies the properties to augment"
            },
            {
              "name": "arguments",
              "type": "String*|boolean",
              "description": " zero or more properties methods \nto augment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver. If true\nis specified as the third parameter, all properties will\nbe applied and will overwrite an existing property in\nthe receiver"
            }
          ],
          "since": "2.3.0",
          "description": "Applies all properties in the supplier to the receiver if the\nreceiver does not have these properties yet.  Optionally, one or \nmore methods/properties can be specified (as additional \nparameters).  This option will overwrite the property if receiver \nhas it already.  If true is passed as the third parameter, all \nproperties will be applied and _will_ overwrite properties in \nthe receiver."
        },
        "isValue": {
          "guessedname": "isValue",
          "guessedtype": "function",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": "  the item to test"
            }
          ],
          "since": "2.3.0",
          "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null/undefined/NaN, true for other values, \nincluding 0/false/''",
          "return": {
            "type": "boolean",
            "description": "true if it is not null/undefined/NaN || false"
          }
        },
        "isString": {
          "guessedname": "isString",
          "guessedtype": "function",
          "description": "Determines whether or not the provided object is a string",
          "params": [
            {
              "name": "o",
              "type": "any",
              "description": " The object being testing"
            }
          ],
          "return": {
            "type": "boolean",
            "description": "the result"
          }
        }
      },
      "guessedname": "lang",
      "module": "yahoo",
      "namespace": "",
      "guessedtype": "property",
      "file": "Lang.js",
      "description": "Provides the language utilites and extensions used by the library",
      "properties": {
        "_IEEnumFix": {
          "guessedname": "_IEEnumFix",
          "private": "",
          "param": "{Function} r  the object to receive the augmentation",
          "static": "",
          "guessedtype": "function",
          "description": "IE will not enumerate native functions in a derived object even if the\nfunction was overridden.  This is a workaround for specific functions \nwe care about on the Object prototype."
        }
      }
    },
    "YAHOO.widget.Toolbar": {
      "shortname": "Toolbar",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "_makeColorButton": {
          "private": "",
          "guessedname": "_makeColorButton",
          "guessedtype": "function",
          "description": "Called to turn a \"color\" button into a menu button with an Overlay for the menu.",
          "params": [
            {
              "name": "_oButton",
              "type": "Object",
              "description": " <a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a> reference"
            }
          ]
        },
        "_makeSpinButton": {
          "private": "",
          "guessedname": "_makeSpinButton",
          "guessedtype": "function",
          "description": "Create a button similar to an OS Spin button.. It has an up/down arrow combo to scroll through a range of int values.",
          "params": [
            {
              "name": "_button",
              "type": "Object",
              "description": " <a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a> reference"
            },
            {
              "name": "oButton",
              "type": "Object",
              "description": " Object literal containing the buttons initial config"
            }
          ]
        },
        "enableButton": {
          "guessedname": "enableButton",
          "guessedtype": "function",
          "description": "Enables a button in the toolbar.",
          "params": [
            {
              "name": "id",
              "type": "String/Number",
              "description": " Enable a button by it's id, index or value."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_createColorPicker": {
          "private": "",
          "guessedname": "_createColorPicker",
          "guessedtype": "function",
          "description": "Creates the core DOM reference to the color picker menu item.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " the id of the toolbar to prefix this DOM container with."
            }
          ]
        },
        "addButtonGroup": {
          "guessedname": "addButtonGroup",
          "guessedtype": "function",
          "description": "Add a new button group to the toolbar. (uses addButton)",
          "params": [
            {
              "name": "oGroup",
              "type": "Object",
              "description": " Object literal reference to the Groups Config (contains an array of button configs as well as the group label)"
            }
          ]
        },
        "_resetColorPicker": {
          "guessedname": "_resetColorPicker",
          "private": "",
          "guessedtype": "function",
          "description": "Clears the currently selected color or mouseover color in the color picker."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the toolbar.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "_buttonClick": {
          "guessedname": "_buttonClick",
          "guessedtype": "function",
          "protected": "",
          "description": "Click handler for all buttons in the toolbar.",
          "params": [
            {
              "name": "ev",
              "type": "String",
              "description": " The event that was passed in."
            },
            {
              "name": "info",
              "type": "Object",
              "description": " Object literal of information about the button that was clicked."
            }
          ]
        },
        "destroyButton": {
          "guessedname": "destroyButton",
          "guessedtype": "function",
          "description": "Destroy a button in the toolbar.",
          "params": [
            {
              "name": "id",
              "type": "String/Number",
              "description": " Destroy a button by it's id or index."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "deselectButton": {
          "guessedname": "deselectButton",
          "guessedtype": "function",
          "description": "Deselects a button in the toolbar.",
          "params": [
            {
              "name": "id",
              "type": "String/Number",
              "description": " Deselect a button by it's id, index or value."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "getButtonById": {
          "guessedname": "getButtonById",
          "guessedtype": "function",
          "description": "Gets a button instance from the toolbar by is Dom id.",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " The Dom id to query for."
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a>",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Destroys the toolbar, all of it's elements and objects.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "getButtons": {
          "guessedname": "getButtons",
          "guessedtype": "function",
          "description": "Returns an array of buttons in the current toolbar",
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "selectButton": {
          "guessedname": "selectButton",
          "guessedtype": "function",
          "description": "Selects a button in the toolbar.",
          "params": [
            {
              "name": "id",
              "type": "String/Number",
              "description": " Select a button by it's id, index or value."
            },
            {
              "name": "value",
              "type": "String",
              "description": " If this is a Menu Button, check this item in the menu"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "enableAllButtons": {
          "guessedname": "enableAllButtons",
          "guessedtype": "function",
          "description": "Enables all buttons in the toolbar.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "disableButton": {
          "guessedname": "disableButton",
          "guessedtype": "function",
          "description": "Disables a button in the toolbar.",
          "params": [
            {
              "name": "id",
              "type": "String/Number",
              "description": " Disable a button by it's id, index or value."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "addSeparator": {
          "guessedname": "addSeparator",
          "guessedtype": "function",
          "description": "Add a new button separator to the toolbar.",
          "params": [
            {
              "name": "cont",
              "type": "HTMLElement",
              "description": " Optional HTML element to insert this button into."
            },
            {
              "name": "after",
              "type": "HTMLElement",
              "description": " Optional HTML element to insert this button after in the DOM."
            }
          ]
        },
        "collapse": {
          "guessedname": "collapse",
          "guessedtype": "function",
          "description": "Programatically collapse the toolbar.",
          "params": [
            {
              "name": "collapse",
              "type": "Boolean",
              "description": " True to collapse, false to expand."
            }
          ]
        },
        "_handleFocus": {
          "guessedname": "_handleFocus",
          "private": "",
          "guessedtype": "function",
          "description": "Sets up the listeners for the arrow key navigation"
        },
        "_navigateButtons": {
          "private": "",
          "guessedname": "_navigateButtons",
          "guessedtype": "function",
          "description": "Handles the navigation/focus of toolbar buttons with the Arrow Keys",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The Key Event"
            }
          ]
        },
        "_addMenuClasses": {
          "private": "",
          "guessedname": "_addMenuClasses",
          "guessedtype": "function",
          "description": "This method is called from Menu's renderEvent to add a few more classes to the menu items",
          "params": [
            {
              "name": "ev",
              "type": "String",
              "description": " The event that fired."
            },
            {
              "name": "na",
              "type": "Array",
              "description": " Array of event information."
            },
            {
              "name": "o",
              "type": "Object",
              "description": " Button config object."
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Toolbar class's initialization method"
        },
        "isSelected": {
          "guessedname": "isSelected",
          "guessedtype": "function",
          "description": "Tells if a button is selected or not.",
          "params": [
            {
              "name": "id",
              "type": "String/Number",
              "description": " A button by it's id, index or value."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "resetAllButtons": {
          "guessedname": "resetAllButtons",
          "guessedtype": "function",
          "description": "Resets all buttons to their initial state.",
          "params": [
            {
              "name": "_ex",
              "type": "Object",
              "description": " Except these buttons"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "getButtonByIndex": {
          "guessedname": "getButtonByIndex",
          "guessedtype": "function",
          "description": "Gets a button instance from the toolbar by is index in _buttonList.",
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": " The index of the button in _buttonList."
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a>",
            "description": ""
          }
        },
        "getButtonByValue": {
          "guessedname": "getButtonByValue",
          "guessedtype": "function",
          "description": "Gets a button instance or a menuitem instance from the toolbar by it's value.",
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": " The button value to query for."
            }
          ],
          "return": {
            "type": "<a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton</a> or <a href=\"YAHOO.widget.MenuItem.html\">YAHOO.widget.MenuItem</a>",
            "description": ""
          }
        },
        "deselectAllButtons": {
          "guessedname": "deselectAllButtons",
          "guessedtype": "function",
          "description": "Deselects all buttons in the toolbar.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Initializes all of the configuration attributes used to create \nthe toolbar.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the toolbar."
            }
          ]
        },
        "disableAllButtons": {
          "guessedname": "disableAllButtons",
          "guessedtype": "function",
          "description": "Disables all buttons in the toolbar.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "addButtonToGroup": {
          "guessedname": "addButtonToGroup",
          "guessedtype": "function",
          "description": "Add a new button to a toolbar group. Buttons supported:\npush, split, menu, select, color, spin",
          "params": [
            {
              "name": "oButton",
              "type": "Object",
              "description": " Object literal reference to the Button's Config"
            },
            {
              "name": "group",
              "type": "String",
              "description": " The Group identifier passed into the initial config"
            },
            {
              "name": "after",
              "type": "HTMLElement",
              "description": " Optional HTML element to insert this button after in the DOM."
            }
          ]
        },
        "addButton": {
          "guessedname": "addButton",
          "guessedtype": "function",
          "description": "Add a new button to the toolbar. Buttons supported:\npush, split, menu, select, color, spin",
          "params": [
            {
              "name": "oButton",
              "type": "Object",
              "description": " Object literal reference to the Button's Config"
            },
            {
              "name": "after",
              "type": "HTMLElement",
              "description": " Optional HTML element to insert this button after in the DOM."
            }
          ]
        }
      },
      "name": "YAHOO.widget.Toolbar",
      "extends": "YAHOO.util.Element",
      "guessedname": "Toolbar",
      "module": "editor",
      "namespace": "YAHOO.widget",
      "events": {
        "titlebarChange": {
          "name": "titlebarChange",
          "description": "Fires when the value for the configuration attribute 'titlebar' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "toolbarExpanded": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the toolbar is expanded via the collapse button. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."
        },
        "disabledChange": {
          "name": "disabledChange",
          "description": "Fires when the value for the configuration attribute 'disabled' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "buttonClick": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when any botton receives a click event. Passes back a single object representing the buttons config object. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": " The object passed to this handler is the button config used to create the button."
            }
          ]
        },
        "valueClick": {
          "type": "YAHOO.util.CustomEvent",
          "description": "This is a special dynamic event that is created and dispatched based on the value property\nof the button config. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.\nExample:\n<code><pre>\nbuttons : [\n{ type: 'button', value: 'test', value: 'testButton' }\n]</pre>\n</code>\nWith the valueClick event you could subscribe to this buttons click event with this:\ntbar.in('testButtonClick', function() { alert('test button clicked'); })",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": " The object passed to this handler is the button config used to create the button."
            }
          ]
        },
        "grouplabelsChange": {
          "name": "grouplabelsChange",
          "description": "Fires when the value for the configuration attribute 'grouplabels' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "buttonsChange": {
          "name": "buttonsChange",
          "description": "Fires when the value for the configuration attribute 'buttons' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "draggableChange": {
          "name": "draggableChange",
          "description": "Fires when the value for the configuration attribute 'draggable' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeGrouplabelsChange": {
          "name": "beforeGrouplabelsChange",
          "description": "Fires before the value for the configuration attribute 'grouplabels' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "buttonTypeChange": {
          "name": "buttonTypeChange",
          "description": "Fires when the value for the configuration attribute 'buttonType' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCollapseChange": {
          "name": "beforeCollapseChange",
          "description": "Fires before the value for the configuration attribute 'collapse' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "collapseChange": {
          "name": "collapseChange",
          "description": "Fires when the value for the configuration attribute 'collapse' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeButtonsChange": {
          "name": "beforeButtonsChange",
          "description": "Fires before the value for the configuration attribute 'buttons' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeButtonTypeChange": {
          "name": "beforeButtonTypeChange",
          "description": "Fires before the value for the configuration attribute 'buttonType' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeDisabledChange": {
          "name": "beforeDisabledChange",
          "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTitlebarChange": {
          "name": "beforeTitlebarChange",
          "description": "Fires before the value for the configuration attribute 'titlebar' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "toolbarCollapsed": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the toolbar is collapsed via the collapse button. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."
        },
        "beforeDraggableChange": {
          "name": "beforeDraggableChange",
          "description": "Fires before the value for the configuration attribute 'draggable' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "Provides a rich toolbar widget based on the button and menu widgets",
          "params": [
            {
              "name": "el",
              "type": "String/HTMLElement",
              "description": " The element to turn into a toolbar."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": " Object liternal containing configuration parameters."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "Provides a rich toolbar widget based on the button and menu widgets",
      "file": "toolbar.js",
      "configs": {
        "buttons": {
          "type": "Array",
          "description": "Object specifying the buttons to include in the toolbar\nExample:\n<code><pre>\n{\n{ id: 'b3', type: 'button', label: 'Underline', value: 'underline' },\n{ type: 'separator' },\n{ id: 'b4', type: 'menu', label: 'Align', value: 'align',\nmenu: [\n{ text: \"Left\", value: 'alignleft' },\n{ text: \"Center\", value: 'aligncenter' },\n{ text: \"Right\", value: 'alignright' }\n]\n}\n}\n</pre></code>"
        },
        "buttonType": {
          "type": "String",
          "description": "The buttonType to use (advanced or basic)"
        },
        "draggable": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the toolbar should be draggable."
        },
        "collapse": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the the titlebar should have a collapse button.\nThe collapse button will not remove the toolbar, it will minimize it to the titlebar"
        },
        "cont": {
          "type": "HTMLElement",
          "description": "The container for the toolbar."
        },
        "grouplabels": {
          "default": "true",
          "type": "Boolean",
          "description": "Boolean indicating if the toolbar should show the group label's text string."
        },
        "disabled": {
          "default": "false",
          "type": "Boolean",
          "description": "Boolean indicating if the toolbar should be disabled. It will also disable the draggable attribute if it is on."
        },
        "titlebar": {
          "default": "false",
          "type": "Boolean or String",
          "description": "Boolean indicating if the toolbar should have a titlebar. If\npassed a string, it will use that as the titlebar text"
        }
      },
      "properties": {
        "dd": {
          "guessedname": "dd",
          "type": "Object",
          "guessedtype": "property",
          "description": "The DragDrop instance associated with the Toolbar"
        },
        "_buttonGroupList": {
          "guessedname": "_buttonGroupList",
          "type": "Array",
          "guessedtype": "property",
          "protected": "",
          "description": "Internal property list of current button groups in the toolbar"
        },
        "STR_SPIN_UP": {
          "guessedname": "STR_SPIN_UP",
          "type": "String",
          "guessedtype": "property",
          "description": "String for spinbutton up"
        },
        "_toolbarConfigs": {
          "guessedname": "_toolbarConfigs",
          "type": "Object",
          "guessedtype": "property",
          "protected": ""
        },
        "buttonType": {
          "guessedname": "buttonType",
          "type": "Object",
          "guessedtype": "property",
          "description": "The default button to use"
        },
        "CLASS_DISABLED": {
          "guessedname": "CLASS_DISABLED",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "Default CSS class to apply when the toolbar is disabled"
        },
        "CLASS_DRAGHANDLE": {
          "guessedname": "CLASS_DRAGHANDLE",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "Default CSS class to apply to the toolbar's drag handle element"
        },
        "CLASS_PREFIX": {
          "guessedname": "CLASS_PREFIX",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "Default prefix for dynamically created class names"
        },
        "CLASS_CONTAINER": {
          "guessedname": "CLASS_CONTAINER",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "Default CSS class to apply to the toolbar container element"
        },
        "_navCounter": {
          "private": "",
          "guessedname": "_navCounter",
          "type": "Number",
          "guessedtype": "property",
          "description": "Internal counter for walking the buttons in the toolbar with the arrow keys"
        },
        "_buttonList": {
          "guessedname": "_buttonList",
          "type": "Array",
          "guessedtype": "property",
          "protected": "",
          "description": "Internal property list of current buttons in the toolbar"
        },
        "_keyNav": {
          "private": "",
          "guessedname": "_keyNav",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to determine if the arrow nav listeners have been attached"
        },
        "STR_SPIN_LABEL": {
          "guessedname": "STR_SPIN_LABEL",
          "type": "String",
          "guessedtype": "property",
          "description": "String for spinbutton dynamic label. Note the {VALUE} will be replaced with YAHOO.lang.substitute"
        },
        "draghandle": {
          "guessedname": "_dragHandle",
          "type": "HTMLElement",
          "guessedtype": "property",
          "protected": ""
        },
        "STR_SPIN_DOWN": {
          "guessedname": "STR_SPIN_DOWN",
          "type": "String",
          "guessedtype": "property",
          "description": "String for spinbutton down"
        },
        "_titlebar": {
          "guessedname": "_titlebar",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Object reference to the titlebar"
        },
        "_sep": {
          "guessedname": "_sep",
          "type": "HTMLElement",
          "guessedtype": "property",
          "protected": "",
          "description": "Internal reference to the separator HTML Element for cloning"
        },
        "_colorData": {
          "guessedname": "_colorData",
          "type": "Object",
          "guessedtype": "property",
          "description": "Object reference containing colors hex and text values."
        },
        "STR_COLLAPSE": {
          "guessedname": "STR_COLLAPSE",
          "type": "String",
          "guessedtype": "property",
          "description": "String for Toolbar Collapse Button"
        },
        "browser": {
          "guessedname": "browser",
          "type": "Object",
          "guessedtype": "property",
          "description": "Standard browser detection"
        },
        "CLASS_SEPARATOR": {
          "guessedname": "CLASS_SEPARATOR",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "Default CSS class to apply to all separators in the toolbar"
        },
        "_configuredButtons": {
          "guessedname": "_configuredButtons",
          "type": "Array",
          "guessedtype": "property",
          "protected": ""
        },
        "_sepCount": {
          "guessedname": "_sepCount",
          "type": "Number",
          "guessedtype": "property",
          "protected": "",
          "description": "Internal refernce for counting separators, so we can give them a useful class name for styling"
        },
        "_colorPicker": {
          "guessedname": "_colorPicker",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The HTML Element containing the colorPicker"
        },
        "STR_EXPAND": {
          "guessedname": "STR_EXPAND",
          "type": "String",
          "guessedtype": "property",
          "description": "String for Toolbar Collapse Button - Expand"
        }
      }
    },
    "YAHOO.widget.MenuManager": {
      "shortname": "MenuManager",
      "methods": {
        "removeItem": {
          "private": "",
          "description": "Removes a MenuItem instance from the MenuManager's collection of MenuItems.",
          "params": [
            {
              "name": "p_oMenuItem",
              "type": "MenuItem",
              "description": " The MenuItem instance to be removed."
            }
          ]
        },
        "addMenu": {
          "guessedname": "addMenu",
          "guessedtype": "function",
          "description": "Adds a menu to the collection of known menus.",
          "params": [
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object specifying the Menu  \ninstance to be added."
            }
          ]
        },
        "getMenuItemGroup": {
          "guessedname": "getMenuItemGroup",
          "guessedtype": "function",
          "description": "Returns an array of menu item instances whose \ncorresponding <code>&#60;li&#62;</code> elements are child \nnodes of the <code>&#60;ul&#62;</code> element with the \nspecified id.",
          "params": [
            {
              "name": "p_sId",
              "type": "String",
              "description": " String specifying the id of the \n<code>&#60;ul&#62;</code> element representing the group of \nmenu items to be retrieved."
            }
          ],
          "return": {
            "type": "Array",
            "description": ""
          }
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the menu manager.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "getMenu": {
          "guessedname": "getMenu",
          "guessedtype": "function",
          "description": "Returns a menu with the specified id.",
          "params": [
            {
              "name": "p_sId",
              "type": "String",
              "description": " String specifying the id of the \n<code>&#60;div&#62;</code> element representing the menu to\nbe retrieved."
            }
          ],
          "return": {
            "type": "YAHOO.widget.Menu",
            "description": ""
          }
        },
        "onDOMEvent": {
          "private": "",
          "description": "Generic, global event handler for all of a menu's \nDOM-based events.  This listens for events against the document \nobject.  If the target of a given event is a member of a menu or \nmenu item's DOM, the instance's corresponding Custom Event is fired.",
          "params": [
            {
              "name": "p_oEvent",
              "type": "Event",
              "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."
            }
          ]
        },
        "getMenuItem": {
          "guessedname": "getMenuItem",
          "guessedtype": "function",
          "description": "Returns a menu item with the specified id.",
          "params": [
            {
              "name": "p_sId",
              "type": "String",
              "description": " String specifying the id of the \n<code>&#60;li&#62;</code> element representing the menu item to\nbe retrieved."
            }
          ],
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "hideVisible": {
          "guessedname": "hideVisible",
          "guessedtype": "function",
          "description": "Hides all visible, dynamically positioned menus \n(excluding instances of YAHOO.widget.MenuBar)."
        },
        "onItemAdded": {
          "private": "",
          "description": "\"itemadded\" event handler for a Menu instance.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            }
          ]
        },
        "onMenuFocus": {
          "private": "",
          "description": "\"focus\" event handler for a MenuItem instance.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            }
          ]
        },
        "removeMenu": {
          "guessedname": "removeMenu",
          "guessedtype": "function",
          "description": "Removes a menu from the collection of known menus.",
          "params": [
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " Object specifying the Menu  \ninstance to be removed."
            }
          ]
        },
        "getMenuRootElement": {
          "private": "",
          "description": "Finds the root DIV node of a menu or the root LI node of \na menu item.",
          "params": [
            {
              "name": "p_oElement",
              "type": "<a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/\nlevel-one-html.html#ID-58190037\">HTMLElement</a>",
              "description": " Object \nspecifying an HTML element."
            }
          ]
        },
        "onItemDestroy": {
          "private": "",
          "description": "\"destroy\" event handler for a MenuItem instance.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            }
          ]
        },
        "getMenus": {
          "guessedname": "getMenus",
          "guessedtype": "function",
          "description": "Returns a collection of all menus registered with the \nmenu manger.",
          "return": {
            "type": "Object",
            "description": ""
          }
        },
        "getFocusedMenuItem": {
          "guessedname": "getFocusedMenuItem",
          "guessedtype": "function",
          "description": "Returns a reference to the menu item that currently \nhas focus.",
          "return": {
            "type": "YAHOO.widget.MenuItem",
            "description": ""
          }
        },
        "getVisible": {
          "guessedname": "getVisible",
          "guessedtype": "function",
          "description": "Returns a collection of all visible menus registered\nwith the menu manger.",
          "return": {
            "type": "Object",
            "description": ""
          }
        },
        "onMenuVisibleConfigChange": {
          "private": "",
          "description": "Event handler for when the \"visible\" configuration  \nproperty of a Menu instance changes.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            }
          ]
        },
        "onMenuBlur": {
          "private": "",
          "description": "\"blur\" event handler for a MenuItem instance.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event  \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            }
          ]
        },
        "getFocusedMenu": {
          "guessedname": "getFocusedMenu",
          "guessedtype": "function",
          "description": "Returns a reference to the menu that currently \nhas focus.",
          "return": {
            "type": "YAHOO.widget.Menu",
            "description": ""
          }
        },
        "onMenuDestroy": {
          "private": "",
          "description": "\"destroy\" event handler for a menu.",
          "params": [
            {
              "name": "p_sType",
              "type": "String",
              "description": " String representing the name of the event \nthat was fired."
            },
            {
              "name": "p_aArgs",
              "type": "Array",
              "description": " Array of arguments sent when the event \nwas fired."
            },
            {
              "name": "p_oMenu",
              "type": "YAHOO.widget.Menu",
              "description": " The menu that fired the event."
            }
          ]
        }
      },
      "name": "YAHOO.widget.MenuManager",
      "guessedname": "MenuManager",
      "module": "menu",
      "namespace": "YAHOO.widget",
      "static": "",
      "guessedtype": "function",
      "description": "Singleton that manages a collection of all menus and menu items.  Listens \nfor DOM events at the document level and dispatches the events to the \ncorresponding menu or menu item.",
      "file": "menumanager.js"
    },
    "YAHOO.widget.StackedColumnChart": {
      "shortname": "StackedColumnChart",
      "name": "YAHOO.widget.StackedColumnChart",
      "guessedname": "StackedColumnChart",
      "module": "charts",
      "namespace": "YAHOO.widget",
      "constructors": [
        {
          "description": "StackedColumnChart class for the YUI Charts widget.",
          "params": [
            {
              "name": "containerId",
              "type": "HTMLElement",
              "description": "  Container element for the Flash Player instance."
            },
            {
              "name": "dataSource",
              "type": "YAHOO.util.DataSource",
              "description": "  DataSource instance."
            },
            {
              "name": "attributes",
              "type": "object",
              "description": "  (optional) Object literal of configuration values."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "StackedColumnChart class for the YUI Charts widget.",
      "file": "ChartTypes.js",
      "uses": [
        "YAHOO.widget.CartesianChart"
      ]
    },
    "YAHOO.widget.ColorPicker": {
      "shortname": "ColorPicker",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "_useFieldValue": {
          "guessedname": "_useFieldValue",
          "guessedtype": "function",
          "protected": "",
          "description": "Use the value of the text field to update the control",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  an event"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  the field"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "  the key to the linked property"
            }
          ]
        },
        "_updateHex": {
          "guessedname": "_updateHex",
          "guessedtype": "function",
          "protected": "",
          "description": "Parses the hex string to normalize shorthand values, converts\nthe hex value to rgb and updates the rgb attribute (which\nupdates the state for all of the other values)\nmethod _updateHex"
        },
        "_onHueSliderChange": {
          "guessedname": "_onHueSliderChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Event handler for the hue slider.",
          "params": [
            {
              "name": "newOffset",
              "type": "int",
              "description": "  pixels from the start position"
            }
          ]
        },
        "_updatePickerSlider": {
          "guessedname": "_updatePickerSlider",
          "guessedtype": "function",
          "protected": "",
          "description": "Moves the picker slider into the position dictated by the current state\nof the control"
        },
        "_createHostElement": {
          "guessedname": "_createHostElement",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates the host element if it doesn't exist"
        },
        "_updateSliders": {
          "guessedname": "_updateSliders",
          "guessedtype": "function",
          "protected": "",
          "description": "Moves the sliders into the position dictated by the current state\nof the control"
        },
        "_updateSwatch": {
          "guessedname": "_updateSwatch",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the background of the swatch with the current rbg value.\nAlso updates the websafe swatch to the closest websafe color"
        },
        "_numbersOnly": {
          "guessedname": "_numbersOnly",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the event"
            }
          ],
          "description": "Allows numbers and special chars only.  Used for the\nrgb and hsv fields keypress handler.",
          "return": {
            "type": "boolean",
            "description": "false if we are canceling the event"
          }
        },
        "_hideShowEl": {
          "guessedname": "_hideShowEl",
          "guessedtype": "function",
          "protected": "",
          "description": "Returns the cached element reference.  If the id is not a string, it\nis assumed that it is an element and this is returned.",
          "params": [
            {
              "name": "id",
              "type": "string|HTMLElement",
              "description": "  the element key, id, or ref"
            },
            {
              "name": "on",
              "type": "boolean",
              "description": "  hide or show.  If true, show"
            }
          ]
        },
        "_bindUI": {
          "guessedname": "_bindUI",
          "guessedtype": "function",
          "protected": "",
          "description": "Adds event listeners to Sliders and UI elements.  Wires everything\nup."
        },
        "_initSliders": {
          "guessedname": "_initSliders",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates the Hue and Value/Saturation Sliders."
        },
        "_getH": {
          "guessedname": "_getH",
          "guessedtype": "function",
          "protected": "",
          "description": "Translates the slider value into hue, int[0,359]",
          "return": {
            "type": "int",
            "description": "the hue from 0 to 359"
          }
        },
        "_getValuesFromSliders": {
          "guessedname": "_getValuesFromSliders",
          "guessedtype": "function",
          "protected": "",
          "description": "Reads the sliders and converts the values to RGB, updating the\ninternal state for all the individual form fields"
        },
        "_getS": {
          "guessedname": "_getS",
          "guessedtype": "function",
          "protected": "",
          "description": "Translates the slider value into saturation, int[0,1], left to right",
          "return": {
            "type": "int",
            "description": "the saturation from 0 to 1"
          }
        },
        "syncUI": {
          "guessedname": "syncUI",
          "guessedtype": "function",
          "description": "Wrapper for _updateRGB, but allows setting",
          "params": [
            {
              "name": "skipAnim",
              "type": "Boolean",
              "description": "  Omit Slider animation for this action"
            }
          ]
        },
        "setValue": {
          "guessedname": "setValue",
          "guessedtype": "function",
          "description": "Sets the control to the specified rgb value and\nmoves the sliders to the proper positions",
          "params": [
            {
              "name": "rgb",
              "type": "[int, int, int]",
              "description": "  the rgb value"
            },
            {
              "name": "silent",
              "type": "boolean",
              "description": "  whether or not to fire the change event"
            }
          ]
        },
        "_hexFieldKeypress": {
          "guessedname": "_hexFieldKeypress",
          "guessedtype": "function",
          "protected": "",
          "description": "Handle keydown on the hex field",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the keypress event"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  the field"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "  the key to the linked property"
            }
          ]
        },
        "_rgbFieldKeypress": {
          "guessedname": "_rgbFieldKeypress",
          "guessedtype": "function",
          "protected": "",
          "description": "Handle keypress on one of the rgb or hsv fields.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the keypress event"
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "  the field"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "  the key to the linked property"
            }
          ]
        },
        "_updateFormFields": {
          "guessedname": "_updateFormFields",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the form field controls with the state data contained\nin the control."
        },
        "_onPickerSliderChange": {
          "guessedname": "_onPickerSliderChange",
          "guessedtype": "function",
          "protected": "",
          "description": "Event handler for the picker slider, which controls the\nsaturation and value/brightness.",
          "params": [
            {
              "name": "newOffset",
              "type": "{x: int, y: int}",
              "description": "  x/y pixels from the start position"
            }
          ]
        },
        "_updateHueSlider": {
          "guessedname": "_updateHueSlider",
          "guessedtype": "function",
          "protected": "",
          "description": "Moves the hue slider into the position dictated by the current state\nof the control"
        },
        "_initElements": {
          "guessedname": "_initElements",
          "guessedtype": "function",
          "protected": "",
          "description": "Creates any missing DOM structure."
        },
        "getElement": {
          "guessedname": "getElement",
          "guessedtype": "function",
          "description": "Returns the element reference that is saved.  The id can be either\nthe element id, or the key for this id in the \"id\" config attribute.\nFor instance, the host element id can be obtained by passing its\nid (default: \"yui_picker\") or by its key \"YUI_PICKER\".",
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "  the element id, or key"
            }
          ],
          "return": {
            "type": "HTMLElement",
            "description": "a reference to the element"
          }
        },
        "_updateRGBFromHSV": {
          "guessedname": "_updateRGBFromHSV",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the RGB values from the current state of the HSV\nvalues.  Executed when the one of the HSV form fields are\nupdated\n_updateRGBFromHSV"
        },
        "_getV": {
          "guessedname": "_getV",
          "guessedtype": "function",
          "protected": "",
          "description": "Translates the slider value into value/brightness, int[0,1], top\nto bottom",
          "return": {
            "type": "int",
            "description": "the value from 0 to 1"
          }
        },
        "_getCommand": {
          "guessedname": "_getCommand",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the keypress or keydown event"
            }
          ],
          "description": "Key map to well-known commands for txt field input",
          "return": {
            "type": "int",
            "description": "a command code\n<ul>\n<li>0 = not a number, letter in range, or special key</li>\n<li>1 = number</li>\n<li>2 = a-fA-F</li>\n<li>3 = increment (up arrow)</li>\n<li>4 = decrement (down arrow)</li>\n<li>5 = special key (tab, delete, return, escape, left, right)</li> \n<li>6 = return</li>\n</ul>"
          }
        },
        "_updateRGB": {
          "guessedname": "_updateRGB",
          "guessedtype": "function",
          "protected": "",
          "description": "Updates the rgb attribute with the current state of the r,g,b\nfields.  This is invoked from change listeners on these\nattributes to facilitate updating these values from the\nindividual form fields"
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Sets up the config attributes and the change listeners for this\nproperties",
          "params": [
            {
              "name": "attr",
              "type": "",
              "description": " An object containing default attribute values"
            }
          ]
        },
        "_hexOnly": {
          "guessedname": "_hexOnly",
          "guessedtype": "function",
          "protected": "",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "  the event"
            },
            {
              "name": "numbersOnly",
              "type": "",
              "description": " omits a-f if set to true"
            }
          ],
          "description": "Allows numbers and special chars, and by default allows a-f.  \nUsed for the hex field keypress handler.",
          "return": {
            "type": "boolean",
            "description": "false if we are canceling the event"
          }
        },
        "initPicker": {
          "guessedname": "initPicker",
          "guessedtype": "function",
          "description": "Sets the initial state of the sliders"
        }
      },
      "name": "YAHOO.widget.ColorPicker",
      "extends": "YAHOO.util.Element",
      "module": "colorpicker",
      "namespace": "YAHOO.widget",
      "events": {
        "showwebsafeChange": {
          "name": "showwebsafeChange",
          "description": "Fires when the value for the configuration attribute 'showwebsafe' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "pickersizeChange": {
          "name": "pickersizeChange",
          "description": "Fires when the value for the configuration attribute 'pickersize' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHueChange": {
          "name": "beforeHueChange",
          "description": "Fires before the value for the configuration attribute 'hue' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeGreenChange": {
          "name": "beforeGreenChange",
          "description": "Fires before the value for the configuration attribute 'green' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeIdsChange": {
          "name": "beforeIdsChange",
          "description": "Fires before the value for the configuration attribute 'ids' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeBlueChange": {
          "name": "beforeBlueChange",
          "description": "Fires before the value for the configuration attribute 'blue' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "showrgbcontrolsChange": {
          "name": "showrgbcontrolsChange",
          "description": "Fires when the value for the configuration attribute 'showrgbcontrols' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeShowhexsummaryChange": {
          "name": "beforeShowhexsummaryChange",
          "description": "Fires before the value for the configuration attribute 'showhexsummary' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforePickersizeChange": {
          "name": "beforePickersizeChange",
          "description": "Fires before the value for the configuration attribute 'pickersize' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "redChange": {
          "name": "redChange",
          "description": "Fires when the value for the configuration attribute 'red' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "imagesChange": {
          "name": "imagesChange",
          "description": "Fires when the value for the configuration attribute 'images' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeShowwebsafeChange": {
          "name": "beforeShowwebsafeChange",
          "description": "Fires before the value for the configuration attribute 'showwebsafe' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "showhsvcontrolsChange": {
          "name": "showhsvcontrolsChange",
          "description": "Fires when the value for the configuration attribute 'showhsvcontrols' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "txtChange": {
          "name": "txtChange",
          "description": "Fires when the value for the configuration attribute 'txt' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "hexChange": {
          "name": "hexChange",
          "description": "Fires when the value for the configuration attribute 'hex' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "showhexsummaryChange": {
          "name": "showhexsummaryChange",
          "description": "Fires when the value for the configuration attribute 'showhexsummary' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "saturationChange": {
          "name": "saturationChange",
          "description": "Fires when the value for the configuration attribute 'saturation' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeShowcontrolsChange": {
          "name": "beforeShowcontrolsChange",
          "description": "Fires before the value for the configuration attribute 'showcontrols' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeShowrgbcontrolsChange": {
          "name": "beforeShowrgbcontrolsChange",
          "description": "Fires before the value for the configuration attribute 'showrgbcontrols' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeHexChange": {
          "name": "beforeHexChange",
          "description": "Fires before the value for the configuration attribute 'hex' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeSaturationChange": {
          "name": "beforeSaturationChange",
          "description": "Fires before the value for the configuration attribute 'saturation' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeValueChange": {
          "name": "beforeValueChange",
          "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "valueChange": {
          "name": "valueChange",
          "description": "Fires when the value for the configuration attribute 'value' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeTxtChange": {
          "name": "beforeTxtChange",
          "description": "Fires before the value for the configuration attribute 'txt' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeShowhexcontrolsChange": {
          "name": "beforeShowhexcontrolsChange",
          "description": "Fires before the value for the configuration attribute 'showhexcontrols' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "showcontrolsChange": {
          "name": "showcontrolsChange",
          "description": "Fires when the value for the configuration attribute 'showcontrols' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRedChange": {
          "name": "beforeRedChange",
          "description": "Fires before the value for the configuration attribute 'red' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeWebsafeChange": {
          "name": "beforeWebsafeChange",
          "description": "Fires before the value for the configuration attribute 'websafe' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeElementsChange": {
          "name": "beforeElementsChange",
          "description": "Fires before the value for the configuration attribute 'elements' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "greenChange": {
          "name": "greenChange",
          "description": "Fires when the value for the configuration attribute 'green' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "hueChange": {
          "name": "hueChange",
          "description": "Fires when the value for the configuration attribute 'hue' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "showhexcontrolsChange": {
          "name": "showhexcontrolsChange",
          "description": "Fires when the value for the configuration attribute 'showhexcontrols' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "elementsChange": {
          "name": "elementsChange",
          "description": "Fires when the value for the configuration attribute 'elements' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeContainerChange": {
          "name": "beforeContainerChange",
          "description": "Fires before the value for the configuration attribute 'container' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeImagesChange": {
          "name": "beforeImagesChange",
          "description": "Fires before the value for the configuration attribute 'images' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "blueChange": {
          "name": "blueChange",
          "description": "Fires when the value for the configuration attribute 'blue' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "idsChange": {
          "name": "idsChange",
          "description": "Fires when the value for the configuration attribute 'ids' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "containerChange": {
          "name": "containerChange",
          "description": "Fires when the value for the configuration attribute 'container' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeShowhsvcontrolsChange": {
          "name": "beforeShowhsvcontrolsChange",
          "description": "Fires before the value for the configuration attribute 'showhsvcontrols' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "websafeChange": {
          "name": "websafeChange",
          "description": "Fires when the value for the configuration attribute 'websafe' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "A widget to select colors",
          "params": [
            {
              "name": "el(optional)",
              "type": "HTMLElement | String | Object",
              "description": " The html \nelement that represents the colorpicker, or the attribute object to use. \nAn element will be created if none provided."
            },
            {
              "name": "attr",
              "type": "Object",
              "description": " (optional) A key map of the colorpicker's \ninitial attributes.  Ignored if first arg is attributes object."
            }
          ]
        }
      ],
      "description": "A widget to select colors",
      "file": "ColorPicker.js",
      "configs": {
        "showhexcontrols": {
          "default": "true",
          "type": "boolean",
          "description": "Hide/show the hex controls"
        },
        "showhexsummary": {
          "default": "true",
          "type": "boolean",
          "description": "Hide/show the hex summary"
        },
        "ids": {
          "writeonce": "",
          "type": "{referenceid: realid}",
          "description": "A list of element ids and/or element references used by the \ncontrol.  The default is the this.ID list, and can be customized\nby passing a list in the contructor"
        },
        "hue": {
          "type": "int",
          "description": "The current hue value 0-360"
        },
        "websafe": {
          "type": "int",
          "description": "The closest current websafe value"
        },
        "container": {
          "type": "YAHOO.widget.Panel",
          "description": "If the color picker will live inside of a container object,\nset, provide a reference to it so the control can use the\ncontainer's events."
        },
        "blue": {
          "type": "int",
          "description": "The current blue value 0-255"
        },
        "txt": {
          "writeonce": "",
          "type": "{key: txt}",
          "description": "A list of txt strings for internationalization.  Default\nis this.TXT"
        },
        "green": {
          "type": "int",
          "description": "The current green value 0-255"
        },
        "elements": {
          "readonly": "",
          "type": "{id: HTMLElement}",
          "description": "The element refs used by this control.  Set at initialization"
        },
        "hex": {
          "readonly": "",
          "type": "string",
          "description": "The current hex value #000000-#FFFFFF, without the #"
        },
        "red": {
          "type": "int",
          "description": "The current red value 0-255"
        },
        "images": {
          "writeonce": "",
          "type": "{key: image}",
          "description": "The img src default list\nis this.IMAGES"
        },
        "value": {
          "type": "int",
          "description": "The current value/brightness value 0-100"
        },
        "showhsvcontrols": {
          "default": "false",
          "type": "boolean",
          "description": "Hide/show the hsv controls"
        },
        "showwebsafe": {
          "default": "true",
          "type": "boolean",
          "description": "Hide/show the websafe swatch"
        },
        "showrgbcontrols": {
          "default": "true",
          "type": "boolean",
          "description": "Hide/show the rgb controls"
        },
        "pickersize": {
          "default": "180",
          "type": "int",
          "description": "The size of the picker. Trying to change this is not recommended."
        },
        "saturation": {
          "type": "int",
          "description": "The current saturation value 0-100"
        },
        "showcontrols": {
          "default": "true",
          "type": "boolean",
          "description": "Hide/show the entire set of controls"
        }
      },
      "properties": {
        "ID.R": {
          "final": "",
          "guessedname": "R",
          "default": "yui-picker-r",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the \"red\" form field"
        },
        "ID.HSV_CONTROLS": {
          "final": "",
          "guessedname": "HSV_CONTROLS",
          "default": "yui-picker-hsv-controls",
          "guessedtype": "property",
          "description": "The id for the hsv controls"
        },
        "ID.G": {
          "final": "",
          "guessedname": "G",
          "default": "yui-picker-g",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the \"green\" form field"
        },
        "ID.H": {
          "final": "",
          "guessedname": "H",
          "default": "yui-picker-h",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the \"hue\" form field"
        },
        "ID.HEX": {
          "final": "",
          "guessedname": "HEX",
          "default": "yui-picker-hex",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the hex value form field"
        },
        "ID.PICKER_THUMB": {
          "final": "",
          "guessedname": "PICKER_THUMB",
          "default": "yui-picker-thumb",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the picker region thumb"
        },
        "ID.S": {
          "final": "",
          "guessedname": "S",
          "default": "yui-picker-s",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the \"saturation\" form field"
        },
        "ID.B_HEX": {
          "final": "",
          "guessedname": "B_HEX",
          "default": "yui-picker-bhex",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the \"blue\" hex pair output"
        },
        "IMAGE": {
          "final": "",
          "guessedname": "IMAGE",
          "guessedtype": "property",
          "description": "Constants for the default image locations for img tags that are\ngenerated by the control.  They can be modified by passing the\ncomplete list to the contructor for the \"images\" attribute"
        },
        "DEFAULT": {
          "final": "",
          "guessedname": "DEFAULT",
          "guessedtype": "property",
          "description": "Constants for the control's default default values"
        },
        "ID.HUE_BG": {
          "final": "",
          "guessedname": "HUE_BG",
          "default": "yui-picker-hue-bg",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the hue slider"
        },
        "ID.HEX_CONTROLS": {
          "final": "",
          "guessedname": "HEX_CONTROLS",
          "default": "yui-picker-hex-controls",
          "guessedtype": "property",
          "description": "The id for the hsv controls"
        },
        "ID": {
          "final": "",
          "guessedname": "ID",
          "guessedtype": "property",
          "description": "The element ids used by this control"
        },
        "ID.V": {
          "final": "",
          "guessedname": "V",
          "default": "yui-picker-v",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the \"value\" form field"
        },
        "TXT": {
          "final": "",
          "guessedname": "TXT",
          "guessedtype": "property",
          "description": "Constants for any script-generated messages.  The values here\nare the default messages.  They can be updated by providing\nthe complete list to the constructor for the \"txt\" attribute."
        },
        "ID.PICKER_BG": {
          "final": "",
          "guessedname": "PICKER_BG",
          "default": "yui-picker-bg",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the picker region slider"
        },
        "ID.HEX_SUMMARY": {
          "final": "",
          "guessedname": "HEX_SUMMARY",
          "default": "yui-picker-hex-summary",
          "guessedtype": "property",
          "description": "The id for the hex summary"
        },
        "ID.B": {
          "final": "",
          "guessedname": "B",
          "default": "yui-picker-b",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the \"blue\" form field"
        },
        "ID.WEBSAFE_SWATCH": {
          "final": "",
          "guessedname": "WEBSAFE_SWATCH",
          "default": "yui-picker-websafe-swatch",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the websafe color swatch"
        },
        "ID.SWATCH": {
          "final": "",
          "guessedname": "SWATCH",
          "default": "yui-picker-swatch",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the color swatch"
        },
        "pickerSlider": {
          "guessedname": "pickerSlider",
          "type": "YAHOO.widget.Slider",
          "guessedtype": "property",
          "description": "The picker region"
        },
        "hueSlider": {
          "guessedname": "hueSlider",
          "type": "YAHOO.widget.Slider",
          "guessedtype": "property",
          "description": "The hue slider"
        },
        "ID.R_HEX": {
          "final": "",
          "guessedname": "R_HEX",
          "default": "yui-picker-rhex",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the \"red\" hex pair output"
        },
        "ID.G_HEX": {
          "final": "",
          "guessedname": "G_HEX",
          "default": "yui-picker-ghex",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the \"green\" hex pair output"
        },
        "skipAnim": {
          "guessedname": "skipAnim",
          "default": "true",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to allow individual UI updates to forego animation if available.\nTrue during construction for initial thumb placement.  Set to false\nafter that."
        },
        "OPT": {
          "final": "",
          "guessedname": "OPT",
          "guessedtype": "property",
          "description": "Constants for the control's configuration attributes"
        },
        "ID.RGB_CONTROLS": {
          "final": "",
          "guessedname": "RGB_CONTROLS",
          "default": "yui-picker-rgb-controls",
          "guessedtype": "property",
          "description": "The id for the rgb controls"
        },
        "ID.CONTROLS": {
          "final": "",
          "guessedname": "CONTROLS",
          "default": "yui-picker-controls",
          "guessedtype": "property",
          "description": "The id for the control details"
        },
        "ID.CONTROLS_LABEL": {
          "final": "",
          "guessedname": "CONTROLS_LABEL",
          "default": "yui-picker-controls-label",
          "guessedtype": "property",
          "description": "The id for the controls section header"
        },
        "ID.HUE_THUMB": {
          "final": "",
          "guessedname": "HUE_THUMB",
          "default": "yui-picker-hue-thumb",
          "type": "String",
          "guessedtype": "property",
          "description": "The id for the hue thumb"
        }
      }
    },
    "YAHOO.widget.SimpleEditor": {
      "shortname": "SimpleEditor",
      "superclass": "YAHOO.util.Element",
      "methods": {
        "execCommand": {
          "guessedname": "execCommand",
          "guessedtype": "function",
          "description": "This method attempts to try and level the differences in the various browsers and their support for execCommand actions",
          "params": [
            {
              "name": "action",
              "type": "String",
              "description": " The \"execCommand\" action to try to execute (Example: bold, insertimage, inserthtml)"
            },
            {
              "name": "value",
              "type": "String",
              "description": " (optional) The value for a given action such as action: fontname value: 'Verdana'"
            }
          ]
        },
        "cmd_fontsize": {
          "guessedname": "cmd_fontsize",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('fontsize') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_handleMouseDown": {
          "private": "",
          "guessedname": "_handleMouseDown",
          "guessedtype": "function",
          "description": "Handles all mousedown events inside the iFrame document.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event we are working on."
            }
          ]
        },
        "hide": {
          "guessedname": "hide",
          "guessedtype": "function",
          "description": "This method needs to be called if the Editor is to be hidden (like in a TabView or Panel). It should be called to clear timeouts and close open editor windows."
        },
        "_handleCreateLinkClick": {
          "guessedname": "_handleCreateLinkClick",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the opening of the Link Properties Window when the Create Link button is clicked or an href is doubleclicked."
        },
        "_setupDD": {
          "guessedname": "_setupDD",
          "private": "",
          "guessedtype": "function",
          "description": "Sets up the DD instance used from the 'drag' config option."
        },
        "show": {
          "guessedname": "show",
          "guessedtype": "function",
          "description": "This method needs to be called if the Editor was hidden (like in a TabView or Panel). It is used to reset the editor after being in a container that was set to display none."
        },
        "filter_invalid_lists": {
          "guessedname": "filter_invalid_lists",
          "guessedtype": "function",
          "description": "Filters invalid ol and ul list markup, converts this: <li></li><ol>..</ol> to this: <li></li><li><ol>..</ol></li>",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " html The HTML string to filter"
            }
          ]
        },
        "_createCurrentElement": {
          "private": "",
          "guessedname": "_createCurrentElement",
          "guessedtype": "function",
          "description": "This is a work around for the various browser issues with execCommand. This method will run <code>execCommand('fontname', false, 'yui-tmp')</code> on the given selection.\nIt will then search the document for an element with the font-family set to <strong>yui-tmp</strong> and replace that with another span that has other information in it, then assign the new span to the \n<code>this.currentElement</code> array, so we now have element references to the elements that were just modified. At this point we can use standard DOM manipulation to change them as we see fit.",
          "params": [
            {
              "name": "tagName",
              "type": "String",
              "description": " (optional defaults to a) The tagname of the element that you wish to create"
            },
            {
              "name": "tagStyle",
              "type": "Object",
              "description": " (optional) Object literal containing styles to apply to the new element."
            }
          ]
        },
        "focus": {
          "guessedname": "focus",
          "guessedtype": "function",
          "description": "Attempt to set the focus of the iframes window."
        },
        "_removeEditorEvents": {
          "guessedname": "_removeEditorEvents",
          "private": "",
          "guessedtype": "function",
          "description": "This method removes the listeners on the Editors document (for disabling)."
        },
        "cmd_forecolor": {
          "guessedname": "cmd_forecolor",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('forecolor') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "cmd_fontname": {
          "guessedname": "cmd_fontname",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('fontname') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_checkKey": {
          "guessedname": "_checkKey",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "k",
              "type": "Object",
              "description": " The _keyMap object"
            },
            {
              "name": "e",
              "type": "Event",
              "description": " The Mouse Event"
            }
          ],
          "description": "Checks a keyMap entry against a key event",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "filter_msword": {
          "guessedname": "filter_msword",
          "guessedtype": "function",
          "description": "Filters out msword html attributes and other junk. Activate with filterWord: true in config",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " html The HTML string to filter"
            }
          ]
        },
        "_hasSelection": {
          "private": "",
          "guessedname": "_hasSelection",
          "guessedtype": "function",
          "description": "Determines if there is a selection in the editor document.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "closeWindow": {
          "guessedname": "closeWindow",
          "guessedtype": "function",
          "description": "Override Method for Advanced Editor"
        },
        "cmd_insertimage": {
          "guessedname": "cmd_insertimage",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('insertimage') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "cmd_createlink": {
          "guessedname": "cmd_createlink",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('createlink') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_getDomPath": {
          "guessedname": "_getDomPath",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "HTMLElement",
              "type": "",
              "description": " el The element to start with, if not provided _getSelectedElement is used"
            }
          ],
          "description": "This method will attempt to build the DOM path from the currently selected element.",
          "return": {
            "type": "Array",
            "description": "An array of node references that will create the DOM Path."
          }
        },
        "_fixNodes": {
          "guessedname": "_fixNodes",
          "private": "",
          "guessedtype": "function",
          "description": "Fix href and imgs as well as remove invalid HTML."
        },
        "_handleFontSize": {
          "private": "",
          "guessedname": "_handleFontSize",
          "guessedtype": "function",
          "description": "Handles the font size button in the toolbar.",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": " Object returned from Toolbar's buttonClick Event"
            }
          ]
        },
        "_disableEditor": {
          "private": "",
          "guessedname": "_disableEditor",
          "guessedtype": "function",
          "description": "Creates a mask to place over the Editor.",
          "params": [
            {
              "name": "disabled",
              "type": "Boolean",
              "description": " Pass true to disable, false to enable"
            }
          ]
        },
        "_listFix": {
          "private": "",
          "guessedname": "_listFix",
          "guessedtype": "function",
          "description": "Handles the Enter key, Tab Key and Shift + Tab keys for List Items.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event we are working on."
            }
          ]
        },
        "_writeDomPath": {
          "guessedname": "_writeDomPath",
          "private": "",
          "guessedtype": "function",
          "description": "Write the current DOM path out to the dompath container below the editor."
        },
        "_handleDoubleClick": {
          "private": "",
          "guessedname": "_handleDoubleClick",
          "guessedtype": "function",
          "description": "Handles all doubleclick events inside the iFrame document.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event we are working on."
            }
          ]
        },
        "_setInitialContent": {
          "private": "",
          "guessedname": "_setInitialContent",
          "guessedtype": "function",
          "description": "This method will open the iframes content document and write the textareas value into it, then start the body.onload checking.",
          "params": [
            {
              "name": "raw",
              "type": "Boolean",
              "description": " Don't add events."
            }
          ]
        },
        "cmd_list": {
          "guessedname": "cmd_list",
          "guessedtype": "function",
          "description": "This is a combined execCommand override method. It is called from the cmd_insertorderedlist and cmd_insertunorderedlist methods.",
          "params": [
            {
              "name": "tag",
              "type": "",
              "description": " The tag of the list you want to create (eg, ul or ol)"
            }
          ]
        },
        "cleanHTML": {
          "guessedname": "cleanHTML",
          "guessedtype": "function",
          "description": "Process the HTML with a few regexes to clean it up and stabilize the output",
          "params": [
            {
              "name": "html",
              "type": "String",
              "description": " The unfiltered HTML"
            }
          ],
          "return": {
            "type": "String",
            "description": "The filtered HTML"
          }
        },
        "_handleInsertImageClick": {
          "guessedname": "_handleInsertImageClick",
          "private": "",
          "guessedtype": "function",
          "description": "Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked."
        },
        "_handleFormSubmit": {
          "private": "",
          "guessedname": "_handleFormSubmit",
          "guessedtype": "function",
          "description": "Handles the form submission.",
          "params": [
            {
              "name": "ev",
              "type": "Object",
              "description": " The Form Submit Event"
            }
          ]
        },
        "_getDoc": {
          "private": "",
          "guessedname": "_getDoc",
          "guessedtype": "function",
          "description": "Get the Document of the IFRAME",
          "return": {
            "type": "Object",
            "description": ""
          }
        },
        "_createIframe": {
          "guessedname": "_createIframe",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": " The string ID to prefix the iframe with"
            }
          ],
          "description": "_createIframe",
          "return": {
            "type": "Object",
            "description": "iFrame object"
          }
        },
        "nodeChange": {
          "guessedname": "nodeChange",
          "guessedtype": "function",
          "description": "Handles setting up the toolbar buttons, getting the Dom path, fixing nodes.",
          "params": [
            {
              "name": "force",
              "type": "Boolean",
              "description": " Optional paramenter to skip the threshold counter"
            }
          ]
        },
        "_hasParent": {
          "guessedname": "_hasParent",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "tag",
              "type": "String",
              "description": " The tag that the element needs to be"
            }
          ],
          "description": "_hasParent",
          "return": {
            "type": "",
            "description": "HTMLElement"
          }
        },
        "openWindow": {
          "guessedname": "openWindow",
          "guessedtype": "function",
          "description": "Override Method for Advanced Editor"
        },
        "_getWindow": {
          "private": "",
          "guessedname": "_getWindow",
          "guessedtype": "function",
          "description": "Get the Window of the IFRAME",
          "return": {
            "type": "Object",
            "description": ""
          }
        },
        "destroy": {
          "guessedname": "destroy",
          "guessedtype": "function",
          "description": "Destroys the editor, all of it's elements and objects.",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "filter_safari": {
          "guessedname": "filter_safari",
          "guessedtype": "function",
          "description": "Filters strings specific to Safari",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " html The HTML string to filter"
            }
          ],
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "_setDesignMode": {
          "private": "",
          "guessedname": "_setDesignMode",
          "guessedtype": "function",
          "description": "Sets the designMode property of the iFrame document's body.",
          "params": [
            {
              "name": "state",
              "type": "String",
              "description": " This should be either on or off"
            }
          ]
        },
        "setEditorHTML": {
          "guessedname": "setEditorHTML",
          "guessedtype": "function",
          "description": "Loads HTML into the editors body",
          "params": [
            {
              "name": "incomingHTML",
              "type": "String",
              "description": " The html content to load into the editor"
            }
          ]
        },
        "getEditorHTML": {
          "guessedname": "getEditorHTML",
          "guessedtype": "function",
          "description": "Gets the unprocessed/unfiltered HTML from the editor"
        },
        "render": {
          "guessedname": "render",
          "guessedtype": "function",
          "description": "Calls the private method _render in a setTimeout to allow for other things on the page to continue to load."
        },
        "_updateMenuChecked": {
          "private": "",
          "guessedname": "_updateMenuChecked",
          "guessedtype": "function",
          "description": "Gets the menu from a button instance, if the menu is not rendered it will render it. It will then search the menu for the specified value, unchecking all other items and checking the specified on.",
          "params": [
            {
              "name": "button",
              "type": "Object",
              "description": " The command identifier of the button you want to check"
            },
            {
              "name": "value",
              "type": "String",
              "description": " The value of the menu item you want to check"
            },
            {
              "name": "The",
              "type": "<a href=\"YAHOO.widget.Toolbar.html\">YAHOO.widget.Toolbar</a>",
              "description": " Toolbar instance the button belongs to (defaults to this.toolbar)"
            }
          ]
        },
        "_handleFormButtonClick": {
          "private": "",
          "guessedname": "_handleFormButtonClick",
          "guessedtype": "function",
          "description": "The click listener assigned to each submit button in the Editor's parent form.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The click event"
            }
          ]
        },
        "_handleKeyUp": {
          "private": "",
          "guessedname": "_handleKeyUp",
          "guessedtype": "function",
          "description": "Handles all keyup events inside the iFrame document.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event we are working on."
            }
          ]
        },
        "_isElement": {
          "guessedname": "_isElement",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element to check"
            },
            {
              "name": "tag",
              "type": "String",
              "description": " The tag that the element needs to be"
            }
          ],
          "description": "_isElement",
          "return": {
            "type": "Boolean",
            "description": ""
          }
        },
        "_createInsertElement": {
          "guessedname": "_createInsertElement",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "css",
              "type": "Object",
              "description": " (optional) Object literal containing styles to apply to the new element."
            }
          ],
          "description": "Creates a new \"currentElement\" then adds some text (and other things) to make it selectable and stylable. Then the user can continue typing.",
          "return": {
            "type": "HTMLElement",
            "description": ""
          }
        },
        "cmd_backcolor": {
          "guessedname": "cmd_backcolor",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('backcolor') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_handleColorPicker": {
          "private": "",
          "guessedname": "_handleColorPicker",
          "guessedtype": "function",
          "description": "Handles the colorpicker buttons in the toolbar.",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": " Object returned from Toolbar's buttonClick Event"
            }
          ]
        },
        "_setCurrentEvent": {
          "private": "",
          "guessedname": "_setCurrentEvent",
          "guessedtype": "function",
          "description": "Sets the current event property",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event to cache"
            }
          ]
        },
        "_handleFocus": {
          "private": "",
          "guessedname": "_handleFocus",
          "guessedtype": "function",
          "description": "Handles the focus of the iframe. Note, this is window focus event, not an Editor focus event.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " The DOM Event"
            }
          ]
        },
        "_setupResize": {
          "guessedname": "_setupResize",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the Resize instance and binds its events."
        },
        "_handleAutoHeight": {
          "guessedname": "_handleAutoHeight",
          "private": "",
          "guessedtype": "function",
          "description": "Handles resizing the editor's height based on the content"
        },
        "cmd_bold": {
          "guessedname": "cmd_bold",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('bold') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_nodeChange": {
          "private": "",
          "guessedname": "_nodeChange",
          "guessedtype": "function",
          "description": "Fired from nodeChange in a setTimeout.",
          "params": [
            {
              "name": "force",
              "type": "Boolean",
              "description": " Optional paramenter to skip the threshold counter"
            }
          ]
        },
        "_focusWindow": {
          "private": "",
          "guessedname": "_focusWindow",
          "guessedtype": "function",
          "description": "Attempt to set the focus of the iframes window.",
          "depreciated": "- This should not be used, moved to this.focus();"
        },
        "_getRange": {
          "private": "",
          "guessedname": "_getRange",
          "guessedtype": "function",
          "description": "Handles the different range objects across the A-Grade list.",
          "return": {
            "type": "Object",
            "description": "Range Object"
          }
        },
        "_getBlankImage": {
          "private": "",
          "guessedname": "_getBlankImage",
          "guessedtype": "function",
          "description": "Retrieves the full url of the image to use as the blank image.",
          "return": {
            "type": "String",
            "description": "The URL to the blank image"
          }
        },
        "_handleAlign": {
          "private": "",
          "guessedname": "_handleAlign",
          "guessedtype": "function",
          "description": "Handles the alignment buttons in the toolbar.",
          "params": [
            {
              "name": "o",
              "type": "Object",
              "description": " Object returned from Toolbar's buttonClick Event"
            }
          ]
        },
        "_selectNode": {
          "private": "",
          "guessedname": "_selectNode",
          "guessedtype": "function",
          "description": "Places the highlight around a given node",
          "params": [
            {
              "name": "node",
              "type": "HTMLElement",
              "description": " The node to select"
            }
          ]
        },
        "_handleAfterNodeChange": {
          "guessedname": "_handleAfterNodeChange",
          "private": "",
          "guessedtype": "function",
          "description": "Fires after a nodeChange happens to setup the things that where reset on the node change (button state)."
        },
        "_toggleDesignMode": {
          "private": "",
          "guessedname": "_toggleDesignMode",
          "guessedtype": "function",
          "description": "Toggles the designMode property of the iFrame document on and off.",
          "return": {
            "type": "String",
            "description": "The state that it was set to."
          }
        },
        "post_filter_linebreaks": {
          "guessedname": "post_filter_linebreaks",
          "guessedtype": "function",
          "description": "HTML Pre Filter",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " html The HTML to filter"
            },
            {
              "name": "String",
              "type": "",
              "description": " markup The markup type to filter to"
            }
          ],
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "filter_internals": {
          "guessedname": "filter_internals",
          "guessedtype": "function",
          "description": "Filters internal RTE strings and bogus attrs we don't want",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " html The HTML string to filter"
            }
          ],
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "clearEditorDoc": {
          "guessedname": "clearEditorDoc",
          "guessedtype": "function",
          "description": "Clear the doc of the Editor"
        },
        "_closeWindow": {
          "guessedname": "_closeWindow",
          "private": "",
          "guessedtype": "function",
          "description": "Override Method for Advanced Editor"
        },
        "filter_rgb": {
          "guessedname": "filter_rgb",
          "guessedtype": "function",
          "description": "Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " css The CSS string containing rgb(#,#,#);"
            }
          ],
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "_checkLoaded": {
          "private": "",
          "guessedname": "_checkLoaded",
          "guessedtype": "function",
          "description": "Called from a setTimeout loop to check if the iframes body.onload event has fired, then it will init the editor.",
          "params": [
            {
              "name": "raw",
              "type": "Boolean",
              "description": " Don't add events."
            }
          ]
        },
        "_fixListDupIds": {
          "guessedname": "_fixListDupIds",
          "private": "",
          "guessedtype": "function",
          "description": "Some browsers will duplicate the id of an LI when created in designMode.\nThis method will fix the duplicate id issue. However it will only preserve the first element \nin the document list with the unique id."
        },
        "_render": {
          "guessedname": "_render",
          "private": "",
          "guessedtype": "function",
          "description": "Causes the toolbar and the editor to render and replace the textarea."
        },
        "_getSelection": {
          "private": "",
          "guessedname": "_getSelection",
          "guessedtype": "function",
          "description": "Handles the different selection objects across the A-Grade list.",
          "return": {
            "type": "Object",
            "description": "Selection Object"
          }
        },
        "cmd_underline": {
          "guessedname": "cmd_underline",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('underline') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_cleanClassName": {
          "guessedname": "_cleanClassName",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": " The classname to clean up"
            }
          ],
          "description": "Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -'s.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "_handleKeyDown": {
          "private": "",
          "guessedname": "_handleKeyDown",
          "guessedtype": "function",
          "description": "Handles all keydown events inside the iFrame document.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event we are working on."
            }
          ]
        },
        "_handleInsertImageWindowClose": {
          "guessedname": "_handleInsertImageWindowClose",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the closing of the Image Properties Window."
        },
        "cmd_unlink": {
          "guessedname": "cmd_unlink",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('unlink') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_handleCreateLinkWindowClose": {
          "guessedname": "_handleCreateLinkWindowClose",
          "private": "",
          "guessedtype": "function",
          "description": "Handles the closing of the Link Properties Window."
        },
        "moveWindow": {
          "guessedname": "moveWindow",
          "guessedtype": "function",
          "description": "Override Method for Advanced Editor"
        },
        "saveHTML": {
          "guessedname": "saveHTML",
          "guessedtype": "function",
          "description": "Cleans the HTML with the cleanHTML method then places that string back into the textarea.",
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "_handleBlur": {
          "private": "",
          "guessedname": "_handleBlur",
          "guessedtype": "function",
          "description": "Handles the blur of the iframe. Note, this is window blur event, not an Editor blur event.",
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": " The DOM Event"
            }
          ]
        },
        "_initEditor": {
          "private": "",
          "guessedname": "_initEditor",
          "guessedtype": "function",
          "description": "This method is fired from _checkLoaded when the document is ready. It turns on designMode and set's up the listeners.",
          "params": [
            {
              "name": "raw",
              "type": "Boolean",
              "description": " Don't add events."
            }
          ]
        },
        "filter_all_rgb": {
          "guessedname": "filter_all_rgb",
          "guessedtype": "function",
          "description": "Converts all RGB color strings found in passed string to a hex color, example: style=\"color: rgb(0, 255, 0)\" converts to style=\"color: #00ff00\"",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " str The HTML string to filter"
            }
          ],
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "pre_filter_linebreaks": {
          "guessedname": "pre_filter_linebreaks",
          "guessedtype": "function",
          "description": "HTML Pre Filter",
          "params": [
            {
              "name": "String",
              "type": "",
              "description": " html The HTML to filter"
            },
            {
              "name": "String",
              "type": "",
              "description": " markup The markup type to filter to"
            }
          ],
          "return": {
            "type": "",
            "description": "String"
          }
        },
        "_cleanIncomingHTML": {
          "guessedname": "_cleanIncomingHTML",
          "guessedtype": "function",
          "description": "Process the HTML with a few regexes to clean it up and stabilize the input",
          "params": [
            {
              "name": "html",
              "type": "String",
              "description": " The unfiltered HTML"
            }
          ],
          "return": {
            "type": "String",
            "description": "The filtered HTML"
          }
        },
        "cmd_inserthtml": {
          "guessedname": "cmd_inserthtml",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('inserthtml') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_handleClick": {
          "private": "",
          "guessedname": "_handleClick",
          "guessedtype": "function",
          "description": "Handles all click events inside the iFrame document.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event we are working on."
            }
          ]
        },
        "_setMarkupType": {
          "private": "",
          "guessedname": "_setMarkupType",
          "guessedtype": "function",
          "description": "This method will turn on/off the useCSS execCommand.",
          "params": [
            {
              "name": "action",
              "type": "String",
              "description": " The action to take. Possible values are: css, default or semantic"
            }
          ]
        },
        "_isNonEditable": {
          "guessedname": "_isNonEditable",
          "private": "",
          "guessedtype": "function",
          "params": [
            {
              "name": "Event",
              "type": "",
              "description": " ev The Dom event being checked"
            }
          ],
          "description": "Method is called at the beginning of all event handlers to check if this element or a parent element has the class yui-noedit (this.CLASS_NOEDIT) applied.\nIf it does, then this method will stop the event and return true. The event handlers will then return false and stop the nodeChange from occuring. This method will also\ndisable and enable the Editor's toolbar based on the noedit state.",
          "return": {
            "type": "",
            "description": "Boolean"
          }
        },
        "_handleKeyPress": {
          "private": "",
          "guessedname": "_handleKeyPress",
          "guessedtype": "function",
          "description": "Handles all keypress events inside the iFrame document.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event we are working on."
            }
          ]
        },
        "_swapEl": {
          "private": "",
          "guessedname": "_swapEl",
          "guessedtype": "function",
          "description": "This function will create a new element in the DOM and populate it with the contents of another element. Then it will assume it's place.",
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": " The element to swap with"
            },
            {
              "name": "tagName",
              "type": "String",
              "description": " The tagname of the element that you wish to create"
            },
            {
              "name": "callback",
              "type": "Function",
              "description": " (optional) A function to run on the element after it is created, but before it is replaced. An element reference is passed to this function."
            }
          ]
        },
        "cmd_insertorderedlist": {
          "guessedname": "cmd_insertorderedlist",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('insertorderedlist ') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_setEditorStyle": {
          "guessedname": "_setEditorStyle",
          "guessedtype": "function",
          "description": "Set the editor to use CSS instead of HTML",
          "params": [
            {
              "name": "stat",
              "type": "Booleen",
              "description": " True/False"
            }
          ]
        },
        "_getSelectedElement": {
          "private": "",
          "guessedname": "_getSelectedElement",
          "guessedtype": "function",
          "description": "This method will attempt to locate the element that was last interacted with, either via selection, location or event.",
          "return": {
            "type": "HTMLElement",
            "description": "The currently selected element."
          }
        },
        "initAttributes": {
          "guessedname": "initAttributes",
          "guessedtype": "function",
          "description": "Initializes all of the configuration attributes used to create \nthe editor.",
          "params": [
            {
              "name": "attr",
              "type": "Object",
              "description": " Object literal specifying a set of \nconfiguration attributes used to create the editor."
            }
          ]
        },
        "_initEditorEvents": {
          "guessedname": "_initEditorEvents",
          "private": "",
          "guessedtype": "function",
          "description": "This method sets up the listeners on the Editors document."
        },
        "toString": {
          "guessedname": "toString",
          "guessedtype": "function",
          "description": "Returns a string representing the editor.",
          "return": {
            "type": "String",
            "description": ""
          }
        },
        "_isLocalFile": {
          "private": "",
          "guessedname": "_isLocalFile",
          "guessedtype": "function",
          "description": "Checks to see if a string (href or img src) is possibly a local file reference..",
          "params": [
            {
              "name": "url",
              "type": "String",
              "description": " THe url/string to check"
            }
          ]
        },
        "_setupAfterElement": {
          "guessedname": "_setupAfterElement",
          "private": "",
          "guessedtype": "function",
          "description": "Creates the accessibility h2 header and places it after the iframe in the Dom for navigation."
        },
        "cmd_insertunorderedlist": {
          "guessedname": "cmd_insertunorderedlist",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('insertunorderedlist') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "init": {
          "guessedname": "init",
          "guessedtype": "function",
          "description": "The Editor class' initialization method"
        },
        "_handleMouseUp": {
          "private": "",
          "guessedname": "_handleMouseUp",
          "guessedtype": "function",
          "description": "Handles all mouseup events inside the iFrame document.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event we are working on."
            }
          ]
        },
        "cmd_italic": {
          "guessedname": "cmd_italic",
          "guessedtype": "function",
          "description": "This is an execCommand override method. It is called from execCommand when the execCommand('italic') is used.",
          "params": [
            {
              "name": "value",
              "type": "",
              "description": " Value passed from the execCommand method"
            }
          ]
        },
        "_handleToolbarClick": {
          "private": "",
          "guessedname": "_handleToolbarClick",
          "guessedtype": "function",
          "description": "This is an event handler attached to the Toolbar's buttonClick event. It will fire execCommand with the command identifier from the Toolbar Button.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The event that triggered the button click"
            }
          ]
        }
      },
      "name": "YAHOO.widget.SimpleEditor",
      "extends": "YAHOO.util.Element",
      "guessedname": "SimpleEditor",
      "module": "editor",
      "namespace": "YAHOO.widget",
      "events": {
        "widthChange": {
          "name": "widthChange",
          "description": "Fires when the value for the configuration attribute 'width' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeEditorDoubleClick": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires before editor event, returning false will stop the internal processing.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "editorKeyDown": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "afterRender": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event is fired after the render process finishes. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."
        },
        "afterExecCommand": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fires at the end of the execCommand process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."
        },
        "beforeToolbarChange": {
          "name": "beforeToolbarChange",
          "description": "Fires before the value for the configuration attribute 'toolbar' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "heightChange": {
          "name": "heightChange",
          "description": "Fires when the value for the configuration attribute 'height' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "cleanHTML": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event is fired after the cleanHTML method is called."
        },
        "beforeDompathChange": {
          "name": "beforeDompathChange",
          "description": "Fires before the value for the configuration attribute 'dompath' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeExtracssChange": {
          "name": "beforeExtracssChange",
          "description": "Fires before the value for the configuration attribute 'extracss' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeCssChange": {
          "name": "beforeCssChange",
          "description": "Fires before the value for the configuration attribute 'css' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeEditorMouseUp": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires before editor event, returning false will stop the internal processing.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "beforeHeightChange": {
          "name": "beforeHeightChange",
          "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeBlankimageChange": {
          "name": "beforeBlankimageChange",
          "description": "Fires before the value for the configuration attribute 'blankimage' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "markupChange": {
          "name": "markupChange",
          "description": "Fires when the value for the configuration attribute 'markup' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "extracssChange": {
          "name": "extracssChange",
          "description": "Fires when the value for the configuration attribute 'extracss' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "disabledChange": {
          "name": "disabledChange",
          "description": "Fires when the value for the configuration attribute 'disabled' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeEditorKeyDown": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires before editor event, returning false will stop the internal processing.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "editorDoubleClick": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "toolbarChange": {
          "name": "toolbarChange",
          "description": "Fires when the value for the configuration attribute 'toolbar' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "editorKeyUp": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "blankimageChange": {
          "name": "blankimageChange",
          "description": "Fires when the value for the configuration attribute 'blankimage' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeExecCommand": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fires at the beginning of the execCommand process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."
        },
        "beforeMarkupChange": {
          "name": "beforeMarkupChange",
          "description": "Fires before the value for the configuration attribute 'markup' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "editorWindowFocus": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the iframe is focused. Note, this is window focus event, not an Editor focus event."
        },
        "dompathChange": {
          "name": "dompathChange",
          "description": "Fires when the value for the configuration attribute 'dompath' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "editorWindowBlur": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires when the iframe is blurred. Note, this is window blur event, not an Editor blur event."
        },
        "beforeEditorClick": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires before editor event, returning false will stop the internal processing.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "beforeHtmlChange": {
          "name": "beforeHtmlChange",
          "description": "Fires before the value for the configuration attribute 'html' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "editorMouseDown": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "beforeFocusAtStartChange": {
          "name": "beforeFocusAtStartChange",
          "description": "Fires before the value for the configuration attribute 'focusAtStart' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "afterNodeChange": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fires at the end of the nodeChange process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."
        },
        "handleSubmitChange": {
          "name": "handleSubmitChange",
          "description": "Fires when the value for the configuration attribute 'handleSubmit' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeRemoveLineBreaksChange": {
          "name": "beforeRemoveLineBreaksChange",
          "description": "Fires before the value for the configuration attribute 'removeLineBreaks' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "editorClick": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "beforeEditorKeyUp": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires before editor event, returning false will stop the internal processing.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "beforeEditorKeyPress": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires before editor event, returning false will stop the internal processing.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "htmlChange": {
          "name": "htmlChange",
          "description": "Fires when the value for the configuration attribute 'html' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeNodeChange": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event fires at the beginning of the nodeChange process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."
        },
        "editorKeyPress": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "beforeHandleSubmitChange": {
          "name": "beforeHandleSubmitChange",
          "description": "Fires before the value for the configuration attribute 'handleSubmit' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "animateChange": {
          "name": "animateChange",
          "description": "Fires when the value for the configuration attribute 'animate' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "removeLineBreaksChange": {
          "name": "removeLineBreaksChange",
          "description": "Fires when the value for the configuration attribute 'removeLineBreaks' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeAnimateChange": {
          "name": "beforeAnimateChange",
          "description": "Fires before the value for the configuration attribute 'animate' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "focusAtStartChange": {
          "name": "focusAtStartChange",
          "description": "Fires when the value for the configuration attribute 'focusAtStart' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "toolbarLoaded": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event is fired during the render process directly after the Toolbar is loaded. Allowing you to attach events to the toolbar. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."
        },
        "beforeDisabledChange": {
          "name": "beforeDisabledChange",
          "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "beforeEditorMouseDown": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Fires before editor event, returning false will stop the internal processing.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "editorContentLoaded": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Event is fired after the editor iframe's document fully loads and fires it's onload event. From here you can start injecting your own things into the document. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event."
        },
        "editorMouseUp": {
          "type": "YAHOO.util.CustomEvent",
          "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener</a> for more information on listening for this event.",
          "params": [
            {
              "name": "ev",
              "type": "Event",
              "description": " The DOM Event that occured"
            }
          ]
        },
        "beforeWidthChange": {
          "name": "beforeWidthChange",
          "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        },
        "cssChange": {
          "name": "cssChange",
          "description": "Fires when the value for the configuration attribute 'css' changes.",
          "params": [
            {
              "name": "event",
              "type": "{oldValue: any, newValue: any}",
              "description": "An object containing the previous attribute value and the new value."
            }
          ]
        }
      },
      "constructors": [
        {
          "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.",
          "params": [
            {
              "name": "el",
              "type": "String/HTMLElement",
              "description": " The textarea element to turn into an editor."
            },
            {
              "name": "attrs",
              "type": "Object",
              "description": " Object liternal containing configuration parameters."
            }
          ]
        }
      ],
      "guessedtype": "function",
      "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.",
      "file": "simple-editor.js",
      "configs": {
        "html": {
          "default": "This HTML requires a few things if you are to override:\n<p><code>{TITLE}, {CSS}, {HIDDEN_CSS}, {EXTRA_CSS}</code> and <code>{CONTENT}</code> need to be there, they are passed to YAHOO.lang.substitute to be replace with other strings.<p>\n<p><code>onload=\"document.body._rteLoaded = true;\"</code> : the onload statement must be there or the editor will not finish loading.</p>\n<code>\n<pre>\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;{TITLE}&lt;/title&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n&lt;style&gt;\n{CSS}\n&lt;/style&gt;\n&lt;style&gt;\n{HIDDEN_CSS}\n&lt;/style&gt;\n&lt;style&gt;\n{EXTRA_CSS}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body onload=\"document.body._rteLoaded = true;\"&gt;\n{CONTENT}\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</code>",
          "type": "String",
          "description": "The default HTML to be written to the iframe document before the contents are loaded (Note that the DOCTYPE attr will be added at render item)"
        },
        "drag": {
          "type": "{Boolean/String}",
          "description": "Set this config to make the Editor draggable, pass 'proxy' to make use YAHOO.util.DDProxy."
        },
        "disabled_iframe": {
          "private": "",
          "default": "null",
          "type": "HTMLElement",
          "description": "Internal config for holding the iframe element used when disabling the Editor."
        },
        "blankimage": {
          "default": "The yahooapis.com address for the current release + 'assets/blankimage.png'",
          "type": "String",
          "description": "The URL for the image placeholder to put in when inserting an image."
        },
        "toolbar_cont": {
          "default": "false",
          "type": "Boolean",
          "description": "Internal config for the toolbars container"
        },
        "plainText": {
          "default": "false",
          "type": "Boolean",
          "description": "Process the inital textarea data as if it was plain text. Accounting for spaces, tabs and line feeds."
        },
        "removeLineBreaks": {
          "default": "false",
          "type": "Boolean",
          "description": "Should we remove linebreaks and extra spaces on cleanup"
        },
        "extracss": {
          "default": "''",
          "type": "String",
          "description": "Extra user defined css to load after the default SimpleEditor CSS"
        },
        "editor_wrapper": {
          "private": "",
          "default": "null",
          "type": "HTMLElement",
          "description": "The outter wrapper for the entire editor."
        },
        "resize": {
          "type": "Boolean",
          "description": "Set this to true to make the Editor Resizable with YAHOO.util.Resize. The default config is available: myEditor._resizeConfig\nAnimation will be ignored while performing this resize to allow for the dynamic change in size of the toolbar."
        },
        "filterWord": {
          "type": "Boolean",
          "description": "Attempt to filter out MS Word HTML from the Editor's output."
        },
        "ptags": {
          "default": "false",
          "type": "Boolean",
          "description": "If true, the editor uses &lt;P&gt; tags instead of &lt;br&gt; tags. (Use Shift + Enter to get a &lt;br&gt;)"
        },
        "autoHeight": {
          "default": "false",
          "type": "Boolean || Number",
          "description": "Remove the scrollbars from the edit area and resize it to fit the content. It will not go any lower than the current config height."
        },
        "allowNoEdit": {
          "default": "false",
          "type": "Boolean",
          "description": "Should the editor check for non-edit fields. It should be noted that this technique is not perfect. If the user does the right things, they will still be able to make changes.\nSuch as highlighting an element below and above the content and hitting a toolbar button or a shortcut key."
        },
        "handleSubmit": {
          "default": "false",
          "type": "Boolean",
          "description": "Config handles if the editor will attach itself to the textareas parent form's submit handler.\nIf it is set to true, the editor will attempt to attach a submit listener to the textareas parent form.\nThen it will trigger the editors save handler and place the new content back into the text area before the form is submitted."
        },
        "nodeChangeThreshold": {
          "default": "3",
          "type": "Number",
          "description": "The number of seconds that need to be in between nodeChange processing"
        },
        "css": {
          "default": "<code><pre>html {\nheight: 95%;\n}\nbody {\nheight: 100%;\npadding: 7px; background-color: #fff; font:13px/1.22 arial,helvetica,clean,sans-serif;*font-size:small;*font:x-small;\n}\na {\ncolor: blue;\ntext-decoration: underline;\ncursor: pointer;\n}\n.warning-localfile {\nborder-bottom: 1px dashed red !important;\n}\n.yui-busy {\ncursor: wait !important;\n}\nimg.selected { //Safari image selection\nborder: 2px dotted #808080;\n}\nimg {\ncursor: pointer !important;\nborder: none;\n}\n</pre></code>",
          "type": "String",
          "description": "The Base CSS used to format the content of the editor"
        },
        "container": {
          "default": "false",
          "type": "HTMLElement",
          "description": "Used when dynamically creating the Editor from Javascript with no default textarea.\nWe will create one and place it in this container. If no container is passed we will append to document.body."
        },
        "animate": {
          "default": "false unless Animation is found, then true",
          "type": "Boolean",
          "description": "Should the editor animate window movements"
        },
        "focusAtStart": {
          "default": "false",
          "type": "Boolean",
          "description": "Should we focus the window when the content is ready?"
        },
        "iframe": {
          "private": "",
          "default": "null",
          "type": "HTMLElement",
          "description": "Internal config for holding the iframe element."
        },
        "insert": {
          "default": "false",
          "type": "Boolean",
          "description": "If true, selection is not required for: fontname, fontsize, forecolor, backcolor."
        },
        "limitCommands": {
          "default": "false",
          "type": "Boolean",
          "description": "Should the Editor limit the allowed execCommands to the ones available in the toolbar. If true, then execCommand and keyboard shortcuts will fail if they are not defined in the toolbar."
        },
        "setDesignMode": {
          "default": "true",
          "type": "Boolean",
          "description": "Should the Editor set designMode on the document. Default: true."
        },
        "textarea": {
          "private": "",
          "default": "null",
          "type": "HTMLElement",
          "description": "Internal config for holding the textarea element (replaced with element).",
          "depreciated": "- No longer used, should use this.get('element')"
        },
        "panel": {
          "default": "false",
          "type": "Boolean",
          "description": "A reference to the panel we are using for windows."
        },
        "saveEl": {
          "default": "element",
          "type": "HTMLElement",
          "description": "When save HTML is called, this element will be updated as well as the source of data."
        },
        "height": {
          "default": "Best guessed size of the textarea, for best results use CSS to style the height of the textarea or pass it in as an argument",
          "type": "String",
          "description": "The height of the editor iframe container, not including the toolbar.."
        },
        "markup": {
          "default": "\"semantic\"",
          "type": "String",
          "description": "Should we try to adjust the markup for the following types: semantic, css, default or xhtml"
        },
        "maxUndo": {
          "default": "30",
          "type": "Number",
          "description": "The max number of undo levels to store."
        },
        "disabled": {
          "default": "false",
          "type": "Boolean",
          "description": "This will toggle the editor's disabled state. When the editor is disabled, designMode is turned off and a mask is placed over the iframe so no interaction can take place.\nAll Toolbar buttons are also disabled so they cannot be used."
        },
        "dompath": {
          "default": "false",
          "type": "Boolean",
          "description": "Toggle the display of the current Dom path below the editor"
        },
        "toolbar": {
          "type": "Object",
          "description": "The default toolbar config."
        },
        "nodeChangeDelay": {
          "default": "true",
          "type": "Boolean",
          "description": "Do we wrap the nodeChange method in a timeout for performance. Default: true."
        },
        "element_cont": {
          "default": "false",
          "type": "HTMLElement",
          "description": "Internal config for the editors container"
        },
        "width": {
          "default": "Best guessed size of the textarea, for best results use CSS to style the width of the textarea or pass it in as an argument",
          "type": "String",
          "description": "The width of the editor container."
        }
      },
      "properties": {
        "_mask": {
          "private": "",
          "guessedname": "_mask",
          "type": "Object",
          "guessedtype": "property",
          "description": "DOM Element holder for the editor Mask when disabled"
        },
        "STR_IMAGE_URL": {
          "guessedname": "STR_IMAGE_URL",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for Image URL"
        },
        "currentWindow": {
          "guessedname": "currentWindow",
          "type": "Object",
          "guessedtype": "property",
          "description": "A reference to the currently open EditorWindow"
        },
        "_nodeChangeTimer": {
          "private": "",
          "guessedname": "_nodeChangeTimer",
          "type": "Number",
          "guessedtype": "property",
          "description": "Holds a reference to the nodeChange setTimeout call"
        },
        "dd": {
          "guessedname": "dd",
          "type": "YAHOO.util.DD/YAHOO.util.DDProxy",
          "guessedtype": "property",
          "description": "A reference to the DragDrop object."
        },
        "_blankImageLoaded": {
          "private": "",
          "guessedname": "_blankImageLoaded",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Don't load the blank image more than once.."
        },
        "_fixNodesTimer": {
          "private": "",
          "guessedname": "_fixNodesTimer",
          "type": "Date",
          "guessedtype": "property",
          "description": "Holder for the fixNodes timer"
        },
        "_focused": {
          "private": "",
          "guessedname": "_focused",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Holder for trapping focus/blur state and prevent double events"
        },
        "_contentTimer": {
          "guessedname": "_contentTimer",
          "private": "",
          "guessedtype": "property",
          "description": "setTimeout holder for documentReady check"
        },
        "_lastCommand": {
          "private": "",
          "guessedname": "_lastCommand",
          "type": "String",
          "guessedtype": "property",
          "description": "A cache of the last execCommand (used for Undo/Redo so they don't mark an undo level)"
        },
        "resize": {
          "guessedname": "resize",
          "type": "YAHOO.util.Resize",
          "guessedtype": "property",
          "description": "A reference to the Resize object"
        },
        "_fixListRunning": {
          "private": "",
          "guessedname": "_fixListRunning",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Keeps more than one _fixListDupIds from running at the same time."
        },
        "_contentTimerMax": {
          "guessedname": "_contentTimerMax",
          "private": "",
          "guessedtype": "property",
          "description": "The number of times the loaded content should be checked before giving up. Default: 500"
        },
        "CLASS_PREFIX": {
          "guessedname": "CLASS_PREFIX",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "Default prefix for dynamically created class names"
        },
        "currentEvent": {
          "guessedname": "currentEvent",
          "type": "Event",
          "guessedtype": "property",
          "description": "A reference to the current editor event"
        },
        "DOMReady": {
          "private": "",
          "guessedname": "DOMReady",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to determine if DOM is ready or not"
        },
        "_defaultCSS": {
          "guessedname": "_defaultCSS",
          "type": "String",
          "guessedtype": "property",
          "description": "The default CSS used in the config for 'css'. This way you can add to the config like this: { css: YAHOO.widget.SimpleEditor.prototype._defaultCSS + 'ADD MYY CSS HERE' }"
        },
        "invalidHTML": {
          "guessedname": "invalidHTML",
          "type": "Object",
          "guessedtype": "property",
          "description": "Contains a list of HTML elements that are invalid inside the editor. They will be removed when they are found. If you set the value of a key to \"{ keepContents: true }\", then the element will be replaced with a yui-non span to be filtered out when cleanHTML is called. The only tag that is ignored here is the span tag as it will force the Editor into a loop and freeze the browser. However.. all of these tags will be removed in the cleanHTML routine."
        },
        "CLASS_CONTAINER": {
          "guessedname": "CLASS_CONTAINER",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "Default CSS class to apply to the editors container element"
        },
        "STR_LINK_URL": {
          "guessedname": "STR_LINK_URL",
          "type": "String",
          "guessedtype": "property",
          "description": "The label string for the Link URL."
        },
        "_selection": {
          "private": "",
          "guessedname": "_selection",
          "type": "Object",
          "guessedtype": "property",
          "description": "Holder for caching iframe selections"
        },
        "afterElement": {
          "guessedname": "afterElement",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "A reference to the H2 placed after the editor for Accessibilty."
        },
        "_defaultToolbar": {
          "private": "",
          "guessedname": "_defaultToolbar",
          "type": "Object",
          "guessedtype": "property",
          "description": "Default toolbar config."
        },
        "currentElement": {
          "guessedname": "currentElement",
          "type": "Array",
          "guessedtype": "property",
          "description": "A reference to the current working element in the editor"
        },
        "STR_LEAVE_EDITOR": {
          "guessedname": "STR_LEAVE_EDITOR",
          "type": "String",
          "guessedtype": "property",
          "description": "The accessibility string for the element after the iFrame"
        },
        "_textarea": {
          "guessedname": "_textarea",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to determine if we are using a textarea or an HTML Node."
        },
        "_tag2cmd": {
          "private": "",
          "guessedname": "_tag2cmd",
          "type": "Object",
          "guessedtype": "property",
          "description": "A tag map of HTML tags to convert to the different types of commands so we can select the proper toolbar button."
        },
        "STOP_EXEC_COMMAND": {
          "guessedname": "STOP_EXEC_COMMAND",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Set to true when you want the default execCommand function to not process anything"
        },
        "STR_IMAGE_HERE": {
          "guessedname": "STR_IMAGE_HERE",
          "type": "String",
          "guessedtype": "property",
          "description": "The text to place in the URL textbox when using the blankimage."
        },
        "_contentTimerCounter": {
          "private": "",
          "guessedname": "_contentTimerCounter",
          "type": "Number",
          "guessedtype": "property",
          "description": "Counter to check the number of times the body is polled for before giving up"
        },
        "_formButtons": {
          "private": "",
          "guessedname": "_formButtons",
          "type": "Array",
          "guessedtype": "property",
          "description": "Array of buttons that are in the Editor's parent form (for handleSubmit)"
        },
        "CLASS_EDITABLE": {
          "guessedname": "CLASS_EDITABLE",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "Default CSS class to apply to the editors iframe element"
        },
        "_lastNodeChange": {
          "private": "",
          "guessedname": "_lastNodeChange",
          "type": "Date",
          "guessedtype": "property",
          "description": "Flag to determine when the last node change was fired"
        },
        "_lastButton": {
          "private": "",
          "guessedname": "_lastButton",
          "type": "Object",
          "guessedtype": "property",
          "description": "The last button pressed, so we don't disable it."
        },
        "_disabled": {
          "private": "",
          "guessedname": "_disabled",
          "type": "Array",
          "guessedtype": "property",
          "description": "The Toolbar items that should be disabled if there is no selection present in the editor."
        },
        "_semantic": {
          "private": "",
          "guessedname": "_semantic",
          "type": "Object",
          "guessedtype": "property",
          "description": "The Toolbar commands that we should attempt to make tags out of instead of using styles."
        },
        "editorDirty": {
          "guessedname": "editorDirty",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "This flag will be set when certain things in the Editor happen. It is to be used by the developer to check to see if content has changed."
        },
        "CLASS_NOEDIT": {
          "guessedname": "CLASS_NOEDIT",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "CSS class applied to elements that are not editable."
        },
        "browser": {
          "guessedname": "browser",
          "type": "Object",
          "guessedtype": "function",
          "description": "Standard browser detection"
        },
        "_keyMap": {
          "private": "",
          "guessedname": "_keyMap",
          "type": "{Object/Mixed}",
          "guessedtype": "property",
          "description": "Named key maps for various actions in the Editor. Example: <code>CLOSE_WINDOW: { key: 87, mods: ['shift', 'ctrl'] }</code>. \nThis entry shows that when key 87 (W) is found with the modifiers of shift and control, the window will close. You can customize this object to tweak keyboard shortcuts."
        },
        "_nodeChangeDelayTimer": {
          "private": "",
          "guessedname": "_nodeChangeDelayTimer",
          "type": "Number",
          "guessedtype": "property",
          "description": "Holds a reference to the nodeChangeDelay setTimeout call"
        },
        "currentFont": {
          "guessedname": "currentFont",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "A reference to the last font selected from the Toolbar"
        },
        "_lastImage": {
          "private": "",
          "guessedname": "_lastImage",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "Safari reference for the last image selected (for styling as selected)."
        },
        "STR_TITLE": {
          "guessedname": "STR_TITLE",
          "type": "String",
          "guessedtype": "property",
          "description": "The Title of the HTML document that is created in the iFrame"
        },
        "SEP_DOMPATH": {
          "guessedname": "SEP_DOMPATH",
          "type": "String",
          "guessedtype": "property",
          "description": "The value to place in between the Dom path items"
        },
        "CLASS_EDITABLE_CONT": {
          "guessedname": "CLASS_EDITABLE_CONT",
          "type": "String",
          "guessedtype": "property",
          "protected": "",
          "description": "Default CSS class to apply to the editors iframe's parent element"
        },
        "beforeElement": {
          "guessedname": "beforeElement",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "A reference to the H2 placed before the editor for Accessibilty."
        },
        "dompath": {
          "guessedname": "dompath",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "A reference to the dompath container for writing the current working dom path to."
        },
        "_formButtonClicked": {
          "private": "",
          "guessedname": "_formButtonClicked",
          "type": "HTMLElement",
          "guessedtype": "property",
          "description": "The form button that was clicked to submit the form."
        },
        "toolbar": {
          "guessedname": "toolbar",
          "type": "<a href=\"YAHOO.widget.Toolbar.html\">YAHOO.widget.Toolbar</a>",
          "guessedtype": "property",
          "description": "Local property containing the <a href=\"YAHOO.widget.Toolbar.html\">YAHOO.widget.Toolbar</a> instance"
        },
        "_rendered": {
          "private": "",
          "guessedname": "_rendered",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Flag to determine if editor has been rendered or not"
        },
        "STOP_NODE_CHANGE": {
          "guessedname": "STOP_NODE_CHANGE",
          "type": "Boolean",
          "guessedtype": "property",
          "protected": "",
          "description": "Set to true when you want the default nodeChange function to not process anything"
        },
        "STR_BEFORE_EDITOR": {
          "guessedname": "STR_BEFORE_EDITOR",
          "type": "String",
          "guessedtype": "property",
          "description": "The accessibility string for the element before the iFrame"
        },
        "operaEvent": {
          "private": "",
          "guessedname": "operaEvent",
          "type": "Object",
          "guessedtype": "property",
          "description": "setTimeout holder for Opera and Image DoubleClick event.."
        },
        "_baseHREF": {
          "private": "",
          "guessedname": "_baseHREF",
          "type": "String",
          "guessedtype": "function",
          "description": "The base location of the editable page (this page) so that relative paths for image work."
        },
        "_showingHiddenElements": {
          "private": "",
          "guessedname": "_showingHiddenElements",
          "type": "Boolean",
          "guessedtype": "property",
          "description": "Status of the hidden elements button"
        },
        "_docType": {
          "guessedname": "_docType",
          "type": "String",
          "guessedtype": "property",
          "description": "The DOCTYPE to use in the editable container."
        },
        "_alwaysEnabled": {
          "private": "",
          "guessedname": "_alwaysEnabled",
          "type": "Object",
          "guessedtype": "property",
          "description": "The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor."
        },
        "_lastNodeChangeEvent": {
          "private": "",
          "guessedname": "_lastNodeChangeEvent",
          "type": "Event",
          "guessedtype": "property",
          "description": "Flag to determine the last event that fired a node change"
        },
        "_resizeConfig": {
          "guessedname": "_resizeConfig",
          "private": "",
          "guessedtype": "property",
          "description": "The default config for the Resize Utility"
        },
        "_alwaysDisabled": {
          "private": "",
          "guessedname": "_alwaysDisabled",
          "type": "Object",
          "guessedtype": "property",
          "description": "The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor."
        }
      }
    },
    "YAHOO.widget.DateMath": {
      "shortname": "DateMath",
      "methods": {
        "subtract": {
          "guessedname": "subtract",
          "guessedtype": "function",
          "description": "Subtracts the specified amount of time from the this instance.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript Date object to perform subtraction on"
            },
            {
              "name": "field",
              "type": "Number",
              "description": " The this field constant to be used for performing subtraction."
            },
            {
              "name": "amount",
              "type": "Number",
              "description": " The number of units (measured in the field constant) to subtract from the date."
            }
          ],
          "return": {
            "type": "Date",
            "description": "The resulting Date object"
          }
        },
        "findMonthStart": {
          "guessedname": "findMonthStart",
          "guessedtype": "function",
          "description": "Gets the first day of a month containing a given date.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript Date used to calculate the month start"
            }
          ],
          "return": {
            "type": "Date",
            "description": "The JavaScript Date representing the first day of the month"
          }
        },
        "add": {
          "guessedname": "add",
          "guessedtype": "function",
          "description": "Adds the specified amount of time to the this instance.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript Date object to perform addition on"
            },
            {
              "name": "field",
              "type": "String",
              "description": " The field constant to be used for performing addition."
            },
            {
              "name": "amount",
              "type": "Number",
              "description": " The number of units (measured in the field constant) to add to the date."
            }
          ],
          "return": {
            "type": "Date",
            "description": "The resulting Date object"
          }
        },
        "getDate": {
          "guessedname": "getDate",
          "guessedtype": "function",
          "description": "Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object\nare set to 0. The method allows Date instances to be created with the a year less than 100. \"new Date(year, month, date)\" implementations \nset the year to 19xx if a year (xx) which is less than 100 is provided.\n<p>\n<em>NOTE:</em>Validation on argument values is not performed. It is the caller's responsibility to ensure\narguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor.\n</p>",
          "params": [
            {
              "name": "y",
              "type": "Number",
              "description": " Year."
            },
            {
              "name": "m",
              "type": "Number",
              "description": " Month index from 0 (Jan) to 11 (Dec)."
            },
            {
              "name": "d",
              "type": "Number",
              "description": " (optional) Date from 1 to 31. If not provided, defaults to 1."
            }
          ],
          "return": {
            "type": "Date",
            "description": "The JavaScript date object with year, month, date set as provided."
          }
        },
        "clearTime": {
          "guessedname": "clearTime",
          "guessedtype": "function",
          "description": "Clears the time fields from a given date, effectively setting the time to 12 noon.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript Date for which the time fields will be cleared"
            }
          ],
          "return": {
            "type": "Date",
            "description": "The JavaScript Date cleared of all time fields"
          }
        },
        "after": {
          "guessedname": "after",
          "guessedtype": "function",
          "description": "Determines whether a given date is after another date on the calendar.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": "  The Date object to compare with the compare argument"
            },
            {
              "name": "compareTo",
              "type": "Date",
              "description": " The Date object to use for the comparison"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true if the date occurs after the compared date; false if not."
          }
        },
        "_addDays": {
          "private": "",
          "guessedname": "_addDays",
          "guessedtype": "function",
          "description": "Private helper method to account for bug in Safari 2 (webkit < 420)\nwhen Date.setDate(n) is called with n less than -128 or greater than 127.\n<p>\nFix approach and original findings are available here:\nhttp://brianary.blogspot.com/2006/03/safari-date-bug.html\n</p>",
          "params": [
            {
              "name": "d",
              "type": "Date",
              "description": " JavaScript date object"
            },
            {
              "name": "nDays",
              "type": "Number",
              "description": " The number of days to add to the date object (can be negative)"
            }
          ]
        },
        "isMonthOverlapWeek": {
          "guessedname": "isMonthOverlapWeek",
          "guessedtype": "function",
          "description": "Determines if a given week overlaps two different months.",
          "params": [
            {
              "name": "weekBeginDate",
              "type": "Date",
              "description": " The JavaScript Date representing the first day of the week."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true if the date overlaps two different months."
          }
        },
        "getFirstDayOfWeek": {
          "guessedname": "getFirstDayOfWeek",
          "guessedtype": "function",
          "description": "Get the first day of the week, for the give date.",
          "params": [
            {
              "name": "dt",
              "type": "Date",
              "description": " The date in the week for which the first day is required."
            },
            {
              "name": "startOfWeek",
              "type": "Number",
              "description": " The index for the first day of the week, 0 = Sun, 1 = Mon ... 6 = Sat (defaults to 0)"
            }
          ],
          "return": {
            "type": "Date",
            "description": "The first day of the week"
          }
        },
        "getJan1": {
          "guessedname": "getJan1",
          "guessedtype": "function",
          "description": "Retrieves a JavaScript Date object representing January 1 of any given year.",
          "params": [
            {
              "name": "calendarYear",
              "type": "Number",
              "description": "  The calendar year for which to retrieve January 1"
            }
          ],
          "return": {
            "type": "Date",
            "description": "January 1 of the calendar year specified."
          }
        },
        "getDayOffset": {
          "guessedname": "getDayOffset",
          "guessedtype": "function",
          "description": "Calculates the number of days the specified date is from January 1 of the specified calendar year.\nPassing January 1 to this function would return an offset value of zero.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript date for which to find the offset"
            },
            {
              "name": "calendarYear",
              "type": "Number",
              "description": " The calendar year to use for determining the offset"
            }
          ],
          "return": {
            "type": "Number",
            "description": "The number of days since January 1 of the given year"
          }
        },
        "isYearOverlapWeek": {
          "guessedname": "isYearOverlapWeek",
          "guessedtype": "function",
          "description": "Determines if a given week overlaps two different years.",
          "params": [
            {
              "name": "weekBeginDate",
              "type": "Date",
              "description": " The JavaScript Date representing the first day of the week."
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true if the date overlaps two different years."
          }
        },
        "getWeekNumber": {
          "guessedname": "getWeekNumber",
          "guessedtype": "function",
          "description": "Calculates the week number for the given date. Can currently support standard\nU.S. week numbers, based on Jan 1st defining the 1st week of the year, and \nISO8601 week numbers, based on Jan 4th defining the 1st week of the year.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript date for which to find the week number"
            },
            {
              "name": "firstDayOfWeek",
              "type": "Number",
              "description": " The index of the first day of the week (0 = Sun, 1 = Mon ... 6 = Sat).\nDefaults to 0"
            },
            {
              "name": "janDate",
              "type": "Number",
              "description": " The date in the first week of January which defines week one for the year\nDefaults to the value of YAHOO.widget.DateMath.WEEK_ONE_JAN_DATE, which is 1 (Jan 1st). \nFor the U.S, this is normally Jan 1st. ISO8601 uses Jan 4th to define the first week of the year."
            }
          ],
          "return": {
            "type": "Number",
            "description": "The number of the week containing the given date."
          }
        },
        "before": {
          "guessedname": "before",
          "guessedtype": "function",
          "description": "Determines whether a given date is before another date on the calendar.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": "  The Date object to compare with the compare argument"
            },
            {
              "name": "compareTo",
              "type": "Date",
              "description": " The Date object to use for the comparison"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true if the date occurs before the compared date; false if not."
          }
        },
        "findMonthEnd": {
          "guessedname": "findMonthEnd",
          "guessedtype": "function",
          "description": "Gets the last day of a month containing a given date.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": " The JavaScript Date used to calculate the month end"
            }
          ],
          "return": {
            "type": "Date",
            "description": "The JavaScript Date representing the last day of the month"
          }
        },
        "between": {
          "guessedname": "between",
          "guessedtype": "function",
          "description": "Determines whether a given date is between two other dates on the calendar.",
          "params": [
            {
              "name": "date",
              "type": "Date",
              "description": "  The date to check for"
            },
            {
              "name": "dateBegin",
              "type": "Date",
              "description": " The start of the range"
            },
            {
              "name": "dateEnd",
              "type": "Date",
              "description": "  The end of the range"
            }
          ],
          "return": {
            "type": "Boolean",
            "description": "true if the date occurs between the compared dates; false if not."
          }
        }
      },
      "name": "YAHOO.widget.DateMath",
      "guessedname": "DateMath",
      "module": "datemath",
      "namespace": "YAHOO.widget",
      "guessedtype": "property",
      "description": "YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility\nused for adding, subtracting, and comparing dates.",
      "file": "DateMath.js",
      "properties": {
        "WEEK": {
          "final": "",
          "guessedname": "WEEK",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant field representing Week"
        },
        "MONTH": {
          "final": "",
          "guessedname": "MONTH",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant field representing Month"
        },
        "DAY": {
          "final": "",
          "guessedname": "DAY",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant field representing Day"
        },
        "WEEK_ONE_JAN_DATE": {
          "guessedname": "WEEK_ONE_JAN_DATE",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Constant field representing the date in first week of January\nwhich identifies the first week of the year.\n<p>\nIn the U.S, Jan 1st is normally used based on a Sunday start of week.\nISO 8601, used widely throughout Europe, uses Jan 4th, based on a Monday start of week.\n</p>"
        },
        "ONE_DAY_MS": {
          "final": "",
          "guessedname": "ONE_DAY_MS",
          "static": "",
          "type": "Number",
          "guessedtype": "property",
          "description": "Constant field representing one day, in milliseconds"
        },
        "YEAR": {
          "final": "",
          "guessedname": "YEAR",
          "static": "",
          "type": "String",
          "guessedtype": "property",
          "description": "Constant field representing Year"
        }
      }
    },
    "YAHOO_config": {
      "shortname": "YAHOO_config",
      "name": "YAHOO_config",
      "module": "yahoo",
      "namespace": "",
      "static": "",
      "description": "YAHOO_config is not included as part of the library.  Instead it is an \nobject that can be defined by the implementer immediately before \nincluding the YUI library.  The properties included in this object\nwill be used to configure global properties needed as soon as the \nlibrary begins to load.",
      "file": "YAHOO.js",
      "properties": {
        "listener": {
          "default": "undefined",
          "static": "",
          "type": "Function",
          "description": "A reference to a function that will be executed every time a YAHOO module\nis loaded.  As parameter, this function will receive the version\ninformation for the module. See <a href=\"YAHOO.env.html#getVersion\">\nYAHOO.env.getVersion</a> for the description of the version data structure."
        },
        "injecting": {
          "default": "undefined",
          "static": "",
          "type": "boolean",
          "description": "Set to true if the library will be dynamically loaded after window.onload.\nDefaults to false"
        },
        "locale": {
          "guessedname": "YAHOO",
          "default": "undefined",
          "static": "",
          "type": "string",
          "guessedtype": "property",
          "description": "Forces the use of the supplied locale where applicable in the library"
        },
        "load": {
          "default": "undefined",
          "static": "",
          "description": "Instructs the yuiloader component to dynamically load yui components and\ntheir dependencies.  See the yuiloader documentation for more information\nabout dynamic loading",
          "see": "yuiloader"
        }
      }
    }
  }
}
